import Joi from "joi";
import csvtojson from "csvtojson";
import require$$1$1 from "crypto";
import require$$0$2 from "child_process";
import require$$0$3 from "os";
import require$$0$5 from "path";
import require$$0$4 from "fs";
import require$$0$6 from "assert";
import require$$2 from "events";
import require$$0$7 from "buffer";
import Stream$1 from "stream";
import require$$2$1 from "util";
import require$$0$8 from "constants";
import "node:stream";
import http from "http";
import Url from "url";
import require$$0$9 from "punycode";
import https from "https";
import zlib from "zlib";
const PLUGIN_ID = "strapi-import-export";
const actions = [
  {
    section: "plugins",
    displayName: "Import",
    uid: "import",
    pluginName: PLUGIN_ID
  },
  {
    section: "plugins",
    displayName: "Export",
    uid: "export",
    pluginName: PLUGIN_ID
  }
];
const bootstrap = ({ strapi: strapi2 }) => {
  strapi2.admin.services.permission.actionProvider.registerMany(actions);
};
const destroy = ({ strapi: strapi2 }) => {
};
const register = ({ strapi: strapi2 }) => {
};
const config = {
  default: {
    /**
     * Public hostname of the server.
     */
    serverPublicHostname: ""
  },
  validator: ({ serverPublicHostname } = {}) => {
    if (typeof serverPublicHostname !== "string") {
      throw new Error("serverPublicHostname has to be a string.");
    }
  }
};
const contentTypes = {};
const CustomSlugs = {
  MEDIA: "media",
  WHOLE_DB: "custom:db"
};
const CustomSlugToSlug = {
  [CustomSlugs.MEDIA]: "plugin::upload.file"
};
const pluginId = "strapi-import-export";
const getService = (serviceName) => {
  return strapi.plugin(pluginId).service(serviceName);
};
function isArraySafe(val) {
  return val && Array.isArray(val);
}
function toArray$2(val) {
  return isArraySafe(val) ? val : [val];
}
function extract(arr, predicate) {
  const extractedValues = arr.filter(predicate);
  arr.splice(0, arr.length, ...arr.filter((v, i, a) => !predicate(v, i, a)));
  return extractedValues;
}
function getAllSlugs({ includePluginsContentTypes = false } = {}) {
  return Array.from(strapi.db.metadata).filter(([collectionName]) => collectionName.startsWith("api::") || includePluginsContentTypes && collectionName.startsWith("plugin::")).map(([collectionName]) => collectionName);
}
function getModel(slug) {
  return strapi.getModel(slug);
}
function getModelAttributes(slug, options = {}) {
  const schema2 = getModel(slug);
  if (!schema2) {
    return [];
  }
  const typesToKeep = options.filterType ? toArray$2(options.filterType) : [];
  const typesToFilterOut = options.filterOutType ? toArray$2(options.filterOutType) : [];
  const targetsToFilterOut = toArray$2(options.filterOutTarget || []);
  let attributes = Object.keys(schema2.attributes).reduce((acc, key) => acc.concat({ ...schema2.attributes[key], name: key }), []).filter((attr) => !typesToFilterOut.includes(attr.type)).filter((attr) => !targetsToFilterOut.includes(attr.target));
  if (typesToKeep.length) {
    attributes = attributes.filter((attr) => typesToKeep.includes(attr.type));
  }
  return attributes;
}
function isComponentAttribute(attribute) {
  return attribute.type === "component";
}
function isDynamicZoneAttribute$1(attribute) {
  return attribute.type === "dynamiczone";
}
function isMediaAttribute$1(attribute) {
  return attribute.type === "media";
}
function isRelationAttribute(attribute) {
  return attribute.type === "relation";
}
function getEntryProp(entry, prop) {
  return entry[prop];
}
function setEntryProp(entry, prop, value) {
  entry[prop] = value;
}
function deleteEntryProp(entry, prop) {
  delete entry[prop];
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var lodash = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash.exports;
(function(module, exports) {
  (function() {
    var undefined$12;
    var VERSION = "4.17.21";
    var LARGE_ARRAY_SIZE2 = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT2 = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE2 = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG2 = 1, CLONE_FLAT_FLAG2 = 2, CLONE_SYMBOLS_FLAG2 = 4;
    var COMPARE_PARTIAL_FLAG2 = 1, COMPARE_UNORDERED_FLAG2 = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT2 = 800, HOT_SPAN2 = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY2 = 1 / 0, MAX_SAFE_INTEGER2 = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag2 = "[object Arguments]", arrayTag2 = "[object Array]", asyncTag2 = "[object AsyncFunction]", boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", domExcTag = "[object DOMException]", errorTag2 = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag2 = "[object Map]", numberTag2 = "[object Number]", nullTag2 = "[object Null]", objectTag2 = "[object Object]", promiseTag2 = "[object Promise]", proxyTag2 = "[object Proxy]", regexpTag2 = "[object RegExp]", setTag2 = "[object Set]", stringTag2 = "[object String]", symbolTag2 = "[object Symbol]", undefinedTag2 = "[object Undefined]", weakMapTag2 = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag2 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp2 = /^\w*$/, rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar2.source);
    var reTrimStart2 = /^\s+/;
    var reWhitespace2 = /\s/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord2 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEscapeChar2 = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags2 = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint2 = /^(?:0|[1-9]\d*)$/;
    var reLatin2 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange2 = "\\ud800-\\udfff", rsComboMarksRange2 = "\\u0300-\\u036f", reComboHalfMarksRange2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange2 = "\\u20d0-\\u20ff", rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2, rsDingbatRange2 = "\\u2700-\\u27bf", rsLowerRange2 = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange2 = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange2 = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange2 = "\\u2000-\\u206f", rsSpaceRange2 = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange2 = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange2 = "\\ufe0e\\ufe0f", rsBreakRange2 = rsMathOpRange2 + rsNonCharRange2 + rsPunctuationRange2 + rsSpaceRange2;
    var rsApos2 = "['’]", rsAstral2 = "[" + rsAstralRange2 + "]", rsBreak2 = "[" + rsBreakRange2 + "]", rsCombo2 = "[" + rsComboRange2 + "]", rsDigits2 = "\\d+", rsDingbat2 = "[" + rsDingbatRange2 + "]", rsLower2 = "[" + rsLowerRange2 + "]", rsMisc2 = "[^" + rsAstralRange2 + rsBreakRange2 + rsDigits2 + rsDingbatRange2 + rsLowerRange2 + rsUpperRange2 + "]", rsFitz2 = "\\ud83c[\\udffb-\\udfff]", rsModifier2 = "(?:" + rsCombo2 + "|" + rsFitz2 + ")", rsNonAstral2 = "[^" + rsAstralRange2 + "]", rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper2 = "[" + rsUpperRange2 + "]", rsZWJ2 = "\\u200d";
    var rsMiscLower2 = "(?:" + rsLower2 + "|" + rsMisc2 + ")", rsMiscUpper2 = "(?:" + rsUpper2 + "|" + rsMisc2 + ")", rsOptContrLower2 = "(?:" + rsApos2 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper2 = "(?:" + rsApos2 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod2 = rsModifier2 + "?", rsOptVar2 = "[" + rsVarRange2 + "]?", rsOptJoin2 = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*", rsOrdLower2 = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper2 = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2, rsEmoji2 = "(?:" + [rsDingbat2, rsRegional2, rsSurrPair2].join("|") + ")" + rsSeq2, rsSymbol2 = "(?:" + [rsNonAstral2 + rsCombo2 + "?", rsCombo2, rsRegional2, rsSurrPair2, rsAstral2].join("|") + ")";
    var reApos2 = RegExp(rsApos2, "g");
    var reComboMark2 = RegExp(rsCombo2, "g");
    var reUnicode2 = RegExp(rsFitz2 + "(?=" + rsFitz2 + ")|" + rsSymbol2 + rsSeq2, "g");
    var reUnicodeWord2 = RegExp([
      rsUpper2 + "?" + rsLower2 + "+" + rsOptContrLower2 + "(?=" + [rsBreak2, rsUpper2, "$"].join("|") + ")",
      rsMiscUpper2 + "+" + rsOptContrUpper2 + "(?=" + [rsBreak2, rsUpper2 + rsMiscLower2, "$"].join("|") + ")",
      rsUpper2 + "?" + rsMiscLower2 + "+" + rsOptContrLower2,
      rsUpper2 + "+" + rsOptContrUpper2,
      rsOrdUpper2,
      rsOrdLower2,
      rsDigits2,
      rsEmoji2
    ].join("|"), "g");
    var reHasUnicode2 = RegExp("[" + rsZWJ2 + rsAstralRange2 + rsComboRange2 + rsVarRange2 + "]");
    var reHasUnicodeWord2 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags2 = {};
    typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
    typedArrayTags2[argsTag2] = typedArrayTags2[arrayTag2] = typedArrayTags2[arrayBufferTag2] = typedArrayTags2[boolTag2] = typedArrayTags2[dataViewTag2] = typedArrayTags2[dateTag2] = typedArrayTags2[errorTag2] = typedArrayTags2[funcTag2] = typedArrayTags2[mapTag2] = typedArrayTags2[numberTag2] = typedArrayTags2[objectTag2] = typedArrayTags2[regexpTag2] = typedArrayTags2[setTag2] = typedArrayTags2[stringTag2] = typedArrayTags2[weakMapTag2] = false;
    var cloneableTags2 = {};
    cloneableTags2[argsTag2] = cloneableTags2[arrayTag2] = cloneableTags2[arrayBufferTag2] = cloneableTags2[dataViewTag2] = cloneableTags2[boolTag2] = cloneableTags2[dateTag2] = cloneableTags2[float32Tag2] = cloneableTags2[float64Tag2] = cloneableTags2[int8Tag2] = cloneableTags2[int16Tag2] = cloneableTags2[int32Tag2] = cloneableTags2[mapTag2] = cloneableTags2[numberTag2] = cloneableTags2[objectTag2] = cloneableTags2[regexpTag2] = cloneableTags2[setTag2] = cloneableTags2[stringTag2] = cloneableTags2[symbolTag2] = cloneableTags2[uint8Tag2] = cloneableTags2[uint8ClampedTag2] = cloneableTags2[uint16Tag2] = cloneableTags2[uint32Tag2] = true;
    cloneableTags2[errorTag2] = cloneableTags2[funcTag2] = cloneableTags2[weakMapTag2] = false;
    var deburredLetters2 = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal2.process;
    var nodeUtil2 = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil2 && nodeUtil2.isArrayBuffer, nodeIsDate = nodeUtil2 && nodeUtil2.isDate, nodeIsMap2 = nodeUtil2 && nodeUtil2.isMap, nodeIsRegExp = nodeUtil2 && nodeUtil2.isRegExp, nodeIsSet2 = nodeUtil2 && nodeUtil2.isSet, nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
    function apply2(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array2, setter, iteratee, accumulator) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        var value = array2[index2];
        setter(accumulator, value, iteratee(value), array2);
      }
      return accumulator;
    }
    function arrayEach2(array2, iteratee) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (iteratee(array2[index2], index2, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayEachRight(array2, iteratee) {
      var length = array2 == null ? 0 : array2.length;
      while (length--) {
        if (iteratee(array2[length], length, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayEvery(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (!predicate(array2[index2], index2, array2)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter2(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array2[index2];
        if (predicate(value, index2, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array2, value) {
      var length = array2 == null ? 0 : array2.length;
      return !!length && baseIndexOf2(array2, value, 0) > -1;
    }
    function arrayIncludesWith(array2, value, comparator) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (comparator(value, array2[index2])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap2(array2, iteratee) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array2[index2], index2, array2);
      }
      return result;
    }
    function arrayPush2(array2, values) {
      var index2 = -1, length = values.length, offset = array2.length;
      while (++index2 < length) {
        array2[offset + index2] = values[index2];
      }
      return array2;
    }
    function arrayReduce2(array2, iteratee, accumulator, initAccum) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      if (initAccum && length) {
        accumulator = array2[++index2];
      }
      while (++index2 < length) {
        accumulator = iteratee(accumulator, array2[index2], index2, array2);
      }
      return accumulator;
    }
    function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
      var length = array2 == null ? 0 : array2.length;
      if (initAccum && length) {
        accumulator = array2[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array2[length], length, array2);
      }
      return accumulator;
    }
    function arraySome2(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty2("length");
    function asciiToArray2(string2) {
      return string2.split("");
    }
    function asciiWords2(string2) {
      return string2.match(reAsciiWord2) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex2(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf2(array2, value, fromIndex) {
      return value === value ? strictIndexOf2(array2, value, fromIndex) : baseFindIndex2(array2, baseIsNaN2, fromIndex);
    }
    function baseIndexOfWith(array2, value, fromIndex, comparator) {
      var index2 = fromIndex - 1, length = array2.length;
      while (++index2 < length) {
        if (comparator(array2[index2], value)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN2(value) {
      return value !== value;
    }
    function baseMean(array2, iteratee) {
      var length = array2 == null ? 0 : array2.length;
      return length ? baseSum(array2, iteratee) / length : NAN;
    }
    function baseProperty2(key) {
      return function(object2) {
        return object2 == null ? undefined$12 : object2[key];
      };
    }
    function basePropertyOf2(object2) {
      return function(key) {
        return object2 == null ? undefined$12 : object2[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index2, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index2, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array2, comparer) {
      var length = array2.length;
      array2.sort(comparer);
      while (length--) {
        array2[length] = array2[length].value;
      }
      return array2;
    }
    function baseSum(array2, iteratee) {
      var result, index2 = -1, length = array2.length;
      while (++index2 < length) {
        var current = iteratee(array2[index2]);
        if (current !== undefined$12) {
          result = result === undefined$12 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes2(n, iteratee) {
      var index2 = -1, result = Array(n);
      while (++index2 < n) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function baseToPairs(object2, props) {
      return arrayMap2(props, function(key) {
        return [key, object2[key]];
      });
    }
    function baseTrim2(string2) {
      return string2 ? string2.slice(0, trimmedEndIndex2(string2) + 1).replace(reTrimStart2, "") : string2;
    }
    function baseUnary2(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object2, props) {
      return arrayMap2(props, function(key) {
        return object2[key];
      });
    }
    function cacheHas2(cache, key) {
      return cache.has(key);
    }
    function charsStartIndex2(strSymbols, chrSymbols) {
      var index2 = -1, length = strSymbols.length;
      while (++index2 < length && baseIndexOf2(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function charsEndIndex2(strSymbols, chrSymbols) {
      var index2 = strSymbols.length;
      while (index2-- && baseIndexOf2(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function countHolders(array2, placeholder2) {
      var length = array2.length, result = 0;
      while (length--) {
        if (array2[length] === placeholder2) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter2 = basePropertyOf2(deburredLetters2);
    var escapeHtmlChar = basePropertyOf2(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue2(object2, key) {
      return object2 == null ? undefined$12 : object2[key];
    }
    function hasUnicode2(string2) {
      return reHasUnicode2.test(string2);
    }
    function hasUnicodeWord2(string2) {
      return reHasUnicodeWord2.test(string2);
    }
    function iteratorToArray(iterator) {
      var data, result = [];
      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }
    function mapToArray2(map2) {
      var index2 = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    function overArg2(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    function replaceHolders(array2, placeholder2) {
      var index2 = -1, length = array2.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array2[index2];
        if (value === placeholder2 || value === PLACEHOLDER) {
          array2[index2] = PLACEHOLDER;
          result[resIndex++] = index2;
        }
      }
      return result;
    }
    function setToArray2(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    function setToPairs(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = [value, value];
      });
      return result;
    }
    function strictIndexOf2(array2, value, fromIndex) {
      var index2 = fromIndex - 1, length = array2.length;
      while (++index2 < length) {
        if (array2[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array2, value, fromIndex) {
      var index2 = fromIndex + 1;
      while (index2--) {
        if (array2[index2] === value) {
          return index2;
        }
      }
      return index2;
    }
    function stringSize(string2) {
      return hasUnicode2(string2) ? unicodeSize(string2) : asciiSize(string2);
    }
    function stringToArray2(string2) {
      return hasUnicode2(string2) ? unicodeToArray2(string2) : asciiToArray2(string2);
    }
    function trimmedEndIndex2(string2) {
      var index2 = string2.length;
      while (index2-- && reWhitespace2.test(string2.charAt(index2))) {
      }
      return index2;
    }
    var unescapeHtmlChar = basePropertyOf2(htmlUnescapes);
    function unicodeSize(string2) {
      var result = reUnicode2.lastIndex = 0;
      while (reUnicode2.test(string2)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray2(string2) {
      return string2.match(reUnicode2) || [];
    }
    function unicodeWords2(string2) {
      return string2.match(reUnicodeWord2) || [];
    }
    var runInContext = function runInContext2(context) {
      context = context == null ? root2 : _2.defaults(root2.Object(), context, _2.pick(root2, contextProps));
      var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
      var arrayProto2 = Array2.prototype, funcProto2 = Function2.prototype, objectProto2 = Object2.prototype;
      var coreJsData2 = context["__core-js_shared__"];
      var funcToString2 = funcProto2.toString;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey2 = function() {
        var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString2 = objectProto2.toString;
      var objectCtorString2 = funcToString2.call(Object2);
      var oldDash = root2._;
      var reIsNative2 = RegExp2(
        "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Buffer2 = moduleExports ? context.Buffer : undefined$12, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$12, getPrototype2 = overArg2(Object2.getPrototypeOf, Object2), objectCreate2 = Object2.create, propertyIsEnumerable2 = objectProto2.propertyIsEnumerable, splice2 = arrayProto2.splice, spreadableSymbol2 = Symbol2 ? Symbol2.isConcatSpreadable : undefined$12, symIterator = Symbol2 ? Symbol2.iterator : undefined$12, symToStringTag2 = Symbol2 ? Symbol2.toStringTag : undefined$12;
      var defineProperty2 = function() {
        try {
          var func = getNative2(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols2 = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$12, nativeIsFinite = context.isFinite, nativeJoin = arrayProto2.join, nativeKeys2 = overArg2(Object2.keys, Object2), nativeMax2 = Math2.max, nativeMin = Math2.min, nativeNow2 = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto2.reverse;
      var DataView2 = getNative2(context, "DataView"), Map2 = getNative2(context, "Map"), Promise2 = getNative2(context, "Promise"), Set2 = getNative2(context, "Set"), WeakMap2 = getNative2(context, "WeakMap"), nativeCreate2 = getNative2(Object2, "create");
      var metaMap = WeakMap2 && new WeakMap2();
      var realNames = {};
      var dataViewCtorString2 = toSource2(DataView2), mapCtorString2 = toSource2(Map2), promiseCtorString2 = toSource2(Promise2), setCtorString2 = toSource2(Set2), weakMapCtorString2 = toSource2(WeakMap2);
      var symbolProto2 = Symbol2 ? Symbol2.prototype : undefined$12, symbolValueOf2 = symbolProto2 ? symbolProto2.valueOf : undefined$12, symbolToString2 = symbolProto2 ? symbolProto2.toString : undefined$12;
      function lodash2(value) {
        if (isObjectLike2(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty2.call(value, "__wrapped__")) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate2 = /* @__PURE__ */ function() {
        function object2() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate2) {
            return objectCreate2(proto);
          }
          object2.prototype = proto;
          var result2 = new object2();
          object2.prototype = undefined$12;
          return result2;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$12;
      }
      lodash2.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "escape": reEscape,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "evaluate": reEvaluate,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "interpolate": reInterpolate,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        "variable": "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        "imports": {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          "_": lodash2
        }
      };
      lodash2.prototype = baseLodash.prototype;
      lodash2.prototype.constructor = lodash2;
      LodashWrapper.prototype = baseCreate2(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result2 = new LazyWrapper(this.__wrapped__);
        result2.__actions__ = copyArray2(this.__actions__);
        result2.__dir__ = this.__dir__;
        result2.__filtered__ = this.__filtered__;
        result2.__iteratees__ = copyArray2(this.__iteratees__);
        result2.__takeCount__ = this.__takeCount__;
        result2.__views__ = copyArray2(this.__views__);
        return result2;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result2 = new LazyWrapper(this);
          result2.__dir__ = -1;
          result2.__filtered__ = true;
        } else {
          result2 = this.clone();
          result2.__dir__ *= -1;
        }
        return result2;
      }
      function lazyValue() {
        var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index2 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array2, this.__actions__);
        }
        var result2 = [];
        outer:
          while (length-- && resIndex < takeCount) {
            index2 += dir;
            var iterIndex = -1, value = array2[index2];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex], iteratee2 = data.iteratee, type2 = data.type, computed = iteratee2(value);
              if (type2 == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type2 == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
        return result2;
      }
      LazyWrapper.prototype = baseCreate2(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash2(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
        this.size = 0;
      }
      function hashDelete2(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function hashGet2(key) {
        var data = this.__data__;
        if (nativeCreate2) {
          var result2 = data[key];
          return result2 === HASH_UNDEFINED2 ? undefined$12 : result2;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : undefined$12;
      }
      function hashHas2(key) {
        var data = this.__data__;
        return nativeCreate2 ? data[key] !== undefined$12 : hasOwnProperty2.call(data, key);
      }
      function hashSet2(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate2 && value === undefined$12 ? HASH_UNDEFINED2 : value;
        return this;
      }
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype["delete"] = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      function ListCache2(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear2() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete2(key) {
        var data = this.__data__, index2 = assocIndexOf2(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice2.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet2(key) {
        var data = this.__data__, index2 = assocIndexOf2(data, key);
        return index2 < 0 ? undefined$12 : data[index2][1];
      }
      function listCacheHas2(key) {
        return assocIndexOf2(this.__data__, key) > -1;
      }
      function listCacheSet2(key, value) {
        var data = this.__data__, index2 = assocIndexOf2(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype["delete"] = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      function MapCache2(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash2(),
          "map": new (Map2 || ListCache2)(),
          "string": new Hash2()
        };
      }
      function mapCacheDelete2(key) {
        var result2 = getMapData2(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function mapCacheGet2(key) {
        return getMapData2(this, key).get(key);
      }
      function mapCacheHas2(key) {
        return getMapData2(this, key).has(key);
      }
      function mapCacheSet2(key, value) {
        var data = getMapData2(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache2.prototype.clear = mapCacheClear2;
      MapCache2.prototype["delete"] = mapCacheDelete2;
      MapCache2.prototype.get = mapCacheGet2;
      MapCache2.prototype.has = mapCacheHas2;
      MapCache2.prototype.set = mapCacheSet2;
      function SetCache2(values2) {
        var index2 = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache2();
        while (++index2 < length) {
          this.add(values2[index2]);
        }
      }
      function setCacheAdd2(value) {
        this.__data__.set(value, HASH_UNDEFINED2);
        return this;
      }
      function setCacheHas2(value) {
        return this.__data__.has(value);
      }
      SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
      SetCache2.prototype.has = setCacheHas2;
      function Stack2(entries) {
        var data = this.__data__ = new ListCache2(entries);
        this.size = data.size;
      }
      function stackClear2() {
        this.__data__ = new ListCache2();
        this.size = 0;
      }
      function stackDelete2(key) {
        var data = this.__data__, result2 = data["delete"](key);
        this.size = data.size;
        return result2;
      }
      function stackGet2(key) {
        return this.__data__.get(key);
      }
      function stackHas2(key) {
        return this.__data__.has(key);
      }
      function stackSet2(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache2) {
          var pairs2 = data.__data__;
          if (!Map2 || pairs2.length < LARGE_ARRAY_SIZE2 - 1) {
            pairs2.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache2(pairs2);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack2.prototype.clear = stackClear2;
      Stack2.prototype["delete"] = stackDelete2;
      Stack2.prototype.get = stackGet2;
      Stack2.prototype.has = stackHas2;
      Stack2.prototype.set = stackSet2;
      function arrayLikeKeys2(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer3(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes2(value.length, String2) : [], length = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex2(key, length)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function arraySample(array2) {
        var length = array2.length;
        return length ? array2[baseRandom(0, length - 1)] : undefined$12;
      }
      function arraySampleSize(array2, n) {
        return shuffleSelf(copyArray2(array2), baseClamp(n, 0, array2.length));
      }
      function arrayShuffle(array2) {
        return shuffleSelf(copyArray2(array2));
      }
      function assignMergeValue(object2, key, value) {
        if (value !== undefined$12 && !eq2(object2[key], value) || value === undefined$12 && !(key in object2)) {
          baseAssignValue2(object2, key, value);
        }
      }
      function assignValue2(object2, key, value) {
        var objValue = object2[key];
        if (!(hasOwnProperty2.call(object2, key) && eq2(objValue, value)) || value === undefined$12 && !(key in object2)) {
          baseAssignValue2(object2, key, value);
        }
      }
      function assocIndexOf2(array2, key) {
        var length = array2.length;
        while (length--) {
          if (eq2(array2[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee2(value), collection2);
        });
        return accumulator;
      }
      function baseAssign2(object2, source) {
        return object2 && copyObject2(source, keys2(source), object2);
      }
      function baseAssignIn2(object2, source) {
        return object2 && copyObject2(source, keysIn2(source), object2);
      }
      function baseAssignValue2(object2, key, value) {
        if (key == "__proto__" && defineProperty2) {
          defineProperty2(object2, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object2[key] = value;
        }
      }
      function baseAt(object2, paths) {
        var index2 = -1, length = paths.length, result2 = Array2(length), skip = object2 == null;
        while (++index2 < length) {
          result2[index2] = skip ? undefined$12 : get2(object2, paths[index2]);
        }
        return result2;
      }
      function baseClamp(number2, lower, upper) {
        if (number2 === number2) {
          if (upper !== undefined$12) {
            number2 = number2 <= upper ? number2 : upper;
          }
          if (lower !== undefined$12) {
            number2 = number2 >= lower ? number2 : lower;
          }
        }
        return number2;
      }
      function baseClone2(value, bitmask, customizer, key, object2, stack) {
        var result2, isDeep = bitmask & CLONE_DEEP_FLAG2, isFlat = bitmask & CLONE_FLAT_FLAG2, isFull = bitmask & CLONE_SYMBOLS_FLAG2;
        if (customizer) {
          result2 = object2 ? customizer(value, key, object2, stack) : customizer(value);
        }
        if (result2 !== undefined$12) {
          return result2;
        }
        if (!isObject2(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result2 = initCloneArray2(value);
          if (!isDeep) {
            return copyArray2(value, result2);
          }
        } else {
          var tag = getTag2(value), isFunc = tag == funcTag2 || tag == genTag2;
          if (isBuffer3(value)) {
            return cloneBuffer2(value, isDeep);
          }
          if (tag == objectTag2 || tag == argsTag2 || isFunc && !object2) {
            result2 = isFlat || isFunc ? {} : initCloneObject2(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn2(value, baseAssignIn2(result2, value)) : copySymbols2(value, baseAssign2(result2, value));
            }
          } else {
            if (!cloneableTags2[tag]) {
              return object2 ? value : {};
            }
            result2 = initCloneByTag2(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack2());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result2);
        if (isSet2(value)) {
          value.forEach(function(subValue) {
            result2.add(baseClone2(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap2(value)) {
          value.forEach(function(subValue, key2) {
            result2.set(key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn2 : getAllKeys2 : isFlat ? keysIn2 : keys2;
        var props = isArr ? undefined$12 : keysFunc(value);
        arrayEach2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue2(result2, key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
        });
        return result2;
      }
      function baseConforms(source) {
        var props = keys2(source);
        return function(object2) {
          return baseConformsTo(object2, source, props);
        };
      }
      function baseConformsTo(object2, source, props) {
        var length = props.length;
        if (object2 == null) {
          return !length;
        }
        object2 = Object2(object2);
        while (length--) {
          var key = props[length], predicate = source[key], value = object2[key];
          if (value === undefined$12 && !(key in object2) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        return setTimeout2(function() {
          func.apply(undefined$12, args);
        }, wait);
      }
      function baseDifference(array2, values2, iteratee2, comparator) {
        var index2 = -1, includes2 = arrayIncludes, isCommon = true, length = array2.length, result2 = [], valuesLength = values2.length;
        if (!length) {
          return result2;
        }
        if (iteratee2) {
          values2 = arrayMap2(values2, baseUnary2(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE2) {
          includes2 = cacheHas2;
          isCommon = false;
          values2 = new SetCache2(values2);
        }
        outer:
          while (++index2 < length) {
            var value = array2[index2], computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
        return result2;
      }
      var baseEach = createBaseEach(baseForOwn2);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result2 = true;
        baseEach(collection, function(value, index2, collection2) {
          result2 = !!predicate(value, index2, collection2);
          return result2;
        });
        return result2;
      }
      function baseExtremum(array2, iteratee2, comparator) {
        var index2 = -1, length = array2.length;
        while (++index2 < length) {
          var value = array2[index2], current = iteratee2(value);
          if (current != null && (computed === undefined$12 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
            var computed = current, result2 = value;
          }
        }
        return result2;
      }
      function baseFill(array2, value, start, end) {
        var length = array2.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined$12 || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array2[start++] = value;
        }
        return array2;
      }
      function baseFilter(collection, predicate) {
        var result2 = [];
        baseEach(collection, function(value, index2, collection2) {
          if (predicate(value, index2, collection2)) {
            result2.push(value);
          }
        });
        return result2;
      }
      function baseFlatten2(array2, depth2, predicate, isStrict, result2) {
        var index2 = -1, length = array2.length;
        predicate || (predicate = isFlattenable2);
        result2 || (result2 = []);
        while (++index2 < length) {
          var value = array2[index2];
          if (depth2 > 0 && predicate(value)) {
            if (depth2 > 1) {
              baseFlatten2(value, depth2 - 1, predicate, isStrict, result2);
            } else {
              arrayPush2(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      var baseFor2 = createBaseFor2();
      var baseForRight = createBaseFor2(true);
      function baseForOwn2(object2, iteratee2) {
        return object2 && baseFor2(object2, iteratee2, keys2);
      }
      function baseForOwnRight(object2, iteratee2) {
        return object2 && baseForRight(object2, iteratee2, keys2);
      }
      function baseFunctions(object2, props) {
        return arrayFilter2(props, function(key) {
          return isFunction3(object2[key]);
        });
      }
      function baseGet2(object2, path2) {
        path2 = castPath2(path2, object2);
        var index2 = 0, length = path2.length;
        while (object2 != null && index2 < length) {
          object2 = object2[toKey2(path2[index2++])];
        }
        return index2 && index2 == length ? object2 : undefined$12;
      }
      function baseGetAllKeys2(object2, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object2);
        return isArray2(object2) ? result2 : arrayPush2(result2, symbolsFunc(object2));
      }
      function baseGetTag2(value) {
        if (value == null) {
          return value === undefined$12 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag2 && symToStringTag2 in Object2(value) ? getRawTag2(value) : objectToString2(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas2(object2, key) {
        return object2 != null && hasOwnProperty2.call(object2, key);
      }
      function baseHasIn2(object2, key) {
        return object2 != null && key in Object2(object2);
      }
      function baseInRange(number2, start, end) {
        return number2 >= nativeMin(start, end) && number2 < nativeMax2(start, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
        while (othIndex--) {
          var array2 = arrays[othIndex];
          if (othIndex && iteratee2) {
            array2 = arrayMap2(array2, baseUnary2(iteratee2));
          }
          maxLength = nativeMin(array2.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array2.length >= 120) ? new SetCache2(othIndex && array2) : undefined$12;
        }
        array2 = arrays[0];
        var index2 = -1, seen = caches[0];
        outer:
          while (++index2 < length && result2.length < maxLength) {
            var value = array2[index2], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas2(seen, computed) : includes2(result2, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas2(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseInverter(object2, setter, iteratee2, accumulator) {
        baseForOwn2(object2, function(value, key, object3) {
          setter(accumulator, iteratee2(value), key, object3);
        });
        return accumulator;
      }
      function baseInvoke(object2, path2, args) {
        path2 = castPath2(path2, object2);
        object2 = parent2(object2, path2);
        var func = object2 == null ? object2 : object2[toKey2(last2(path2))];
        return func == null ? undefined$12 : apply2(func, object2, args);
      }
      function baseIsArguments2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == argsTag2;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike2(value) && baseGetTag2(value) == arrayBufferTag2;
      }
      function baseIsDate(value) {
        return isObjectLike2(value) && baseGetTag2(value) == dateTag2;
      }
      function baseIsEqual2(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
      }
      function baseIsEqualDeep2(object2, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object2), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag2 : getTag2(object2), othTag = othIsArr ? arrayTag2 : getTag2(other);
        objTag = objTag == argsTag2 ? objectTag2 : objTag;
        othTag = othTag == argsTag2 ? objectTag2 : othTag;
        var objIsObj = objTag == objectTag2, othIsObj = othTag == objectTag2, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer3(object2)) {
          if (!isBuffer3(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack2());
          return objIsArr || isTypedArray2(object2) ? equalArrays2(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object2, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG2)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack2());
        return equalObjects2(object2, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap2(value) {
        return isObjectLike2(value) && getTag2(value) == mapTag2;
      }
      function baseIsMatch2(object2, source, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object2 == null) {
          return !length;
        }
        object2 = Object2(object2);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object2[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === undefined$12 && !(key in object2)) {
              return false;
            }
          } else {
            var stack = new Stack2();
            if (customizer) {
              var result2 = customizer(objValue, srcValue, key, object2, source, stack);
            }
            if (!(result2 === undefined$12 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG2 | COMPARE_UNORDERED_FLAG2, customizer, stack) : result2)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative2(value) {
        if (!isObject2(value) || isMasked2(value)) {
          return false;
        }
        var pattern = isFunction3(value) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike2(value) && baseGetTag2(value) == regexpTag2;
      }
      function baseIsSet2(value) {
        return isObjectLike2(value) && getTag2(value) == setTag2;
      }
      function baseIsTypedArray2(value) {
        return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
      }
      function baseIteratee2(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty2(value[0], value[1]) : baseMatches2(value);
        }
        return property2(value);
      }
      function baseKeys2(object2) {
        if (!isPrototype2(object2)) {
          return nativeKeys2(object2);
        }
        var result2 = [];
        for (var key in Object2(object2)) {
          if (hasOwnProperty2.call(object2, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseKeysIn2(object2) {
        if (!isObject2(object2)) {
          return nativeKeysIn2(object2);
        }
        var isProto = isPrototype2(object2), result2 = [];
        for (var key in object2) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object2, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee2) {
        var index2 = -1, result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result2[++index2] = iteratee2(value, key, collection2);
        });
        return result2;
      }
      function baseMatches2(source) {
        var matchData = getMatchData2(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
        }
        return function(object2) {
          return object2 === source || baseIsMatch2(object2, source, matchData);
        };
      }
      function baseMatchesProperty2(path2, srcValue) {
        if (isKey2(path2) && isStrictComparable2(srcValue)) {
          return matchesStrictComparable2(toKey2(path2), srcValue);
        }
        return function(object2) {
          var objValue = get2(object2, path2);
          return objValue === undefined$12 && objValue === srcValue ? hasIn2(object2, path2) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG2 | COMPARE_UNORDERED_FLAG2);
        };
      }
      function baseMerge(object2, source, srcIndex, customizer, stack) {
        if (object2 === source) {
          return;
        }
        baseFor2(source, function(srcValue, key) {
          stack || (stack = new Stack2());
          if (isObject2(srcValue)) {
            baseMergeDeep(object2, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source, stack) : undefined$12;
            if (newValue === undefined$12) {
              newValue = srcValue;
            }
            assignMergeValue(object2, key, newValue);
          }
        }, keysIn2);
      }
      function baseMergeDeep(object2, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object2, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source, stack) : undefined$12;
        var isCommon = newValue === undefined$12;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer3(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray2(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer2(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray2(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject2(srcValue) || isArguments2(srcValue)) {
            newValue = objValue;
            if (isArguments2(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction3(objValue)) {
              newValue = initCloneObject2(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object2, key, newValue);
      }
      function baseNth(array2, n) {
        var length = array2.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex2(n, length) ? array2[n] : undefined$12;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap2(iteratees, function(iteratee2) {
            if (isArray2(iteratee2)) {
              return function(value) {
                return baseGet2(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity2];
        }
        var index2 = -1;
        iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
        var result2 = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap2(iteratees, function(iteratee2) {
            return iteratee2(value);
          });
          return { "criteria": criteria, "index": ++index2, "value": value };
        });
        return baseSortBy(result2, function(object2, other) {
          return compareMultiple(object2, other, orders);
        });
      }
      function basePick2(object2, paths) {
        return basePickBy2(object2, paths, function(value, path2) {
          return hasIn2(object2, path2);
        });
      }
      function basePickBy2(object2, paths, predicate) {
        var index2 = -1, length = paths.length, result2 = {};
        while (++index2 < length) {
          var path2 = paths[index2], value = baseGet2(object2, path2);
          if (predicate(value, path2)) {
            baseSet2(result2, castPath2(path2, object2), value);
          }
        }
        return result2;
      }
      function basePropertyDeep2(path2) {
        return function(object2) {
          return baseGet2(object2, path2);
        };
      }
      function basePullAll(array2, values2, iteratee2, comparator) {
        var indexOf3 = comparator ? baseIndexOfWith : baseIndexOf2, index2 = -1, length = values2.length, seen = array2;
        if (array2 === values2) {
          values2 = copyArray2(values2);
        }
        if (iteratee2) {
          seen = arrayMap2(array2, baseUnary2(iteratee2));
        }
        while (++index2 < length) {
          var fromIndex = 0, value = values2[index2], computed = iteratee2 ? iteratee2(value) : value;
          while ((fromIndex = indexOf3(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array2) {
              splice2.call(seen, fromIndex, 1);
            }
            splice2.call(array2, fromIndex, 1);
          }
        }
        return array2;
      }
      function basePullAt(array2, indexes) {
        var length = array2 ? indexes.length : 0, lastIndex = length - 1;
        while (length--) {
          var index2 = indexes[length];
          if (length == lastIndex || index2 !== previous) {
            var previous = index2;
            if (isIndex2(index2)) {
              splice2.call(array2, index2, 1);
            } else {
              baseUnset2(array2, index2);
            }
          }
        }
        return array2;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index2 = -1, length = nativeMax2(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
        while (length--) {
          result2[fromRight ? length : ++index2] = start;
          start += step;
        }
        return result2;
      }
      function baseRepeat(string2, n) {
        var result2 = "";
        if (!string2 || n < 1 || n > MAX_SAFE_INTEGER2) {
          return result2;
        }
        do {
          if (n % 2) {
            result2 += string2;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string2 += string2;
          }
        } while (n);
        return result2;
      }
      function baseRest(func, start) {
        return setToString2(overRest2(func, start, identity2), func + "");
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array2 = values(collection);
        return shuffleSelf(array2, baseClamp(n, 0, array2.length));
      }
      function baseSet2(object2, path2, value, customizer) {
        if (!isObject2(object2)) {
          return object2;
        }
        path2 = castPath2(path2, object2);
        var index2 = -1, length = path2.length, lastIndex = length - 1, nested = object2;
        while (nested != null && ++index2 < length) {
          var key = toKey2(path2[index2]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object2;
          }
          if (index2 != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$12;
            if (newValue === undefined$12) {
              newValue = isObject2(objValue) ? objValue : isIndex2(path2[index2 + 1]) ? [] : {};
            }
          }
          assignValue2(nested, key, newValue);
          nested = nested[key];
        }
        return object2;
      }
      var baseSetData = !metaMap ? identity2 : function(func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString2 = !defineProperty2 ? identity2 : function(func, string2) {
        return defineProperty2(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant2(string2),
          "writable": true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice2(array2, start, end) {
        var index2 = -1, length = array2.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array2(length);
        while (++index2 < length) {
          result2[index2] = array2[index2 + start];
        }
        return result2;
      }
      function baseSome(collection, predicate) {
        var result2;
        baseEach(collection, function(value, index2, collection2) {
          result2 = predicate(value, index2, collection2);
          return !result2;
        });
        return !!result2;
      }
      function baseSortedIndex(array2, value, retHighest) {
        var low = 0, high = array2 == null ? low : array2.length;
        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed = array2[mid];
            if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array2, value, identity2, retHighest);
      }
      function baseSortedIndexBy(array2, value, iteratee2, retHighest) {
        var low = 0, high = array2 == null ? 0 : array2.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee2(value);
        var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined$12;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed = iteratee2(array2[mid]), othIsDefined = computed !== undefined$12, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array2, iteratee2) {
        var index2 = -1, length = array2.length, resIndex = 0, result2 = [];
        while (++index2 < length) {
          var value = array2[index2], computed = iteratee2 ? iteratee2(value) : value;
          if (!index2 || !eq2(computed, seen)) {
            var seen = computed;
            result2[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result2;
      }
      function baseToNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol2(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap2(value, baseToString2) + "";
        }
        if (isSymbol2(value)) {
          return symbolToString2 ? symbolToString2.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY2 ? "-0" : result2;
      }
      function baseUniq(array2, iteratee2, comparator) {
        var index2 = -1, includes2 = arrayIncludes, length = array2.length, isCommon = true, result2 = [], seen = result2;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE2) {
          var set3 = iteratee2 ? null : createSet(array2);
          if (set3) {
            return setToArray2(set3);
          }
          isCommon = false;
          includes2 = cacheHas2;
          seen = new SetCache2();
        } else {
          seen = iteratee2 ? [] : result2;
        }
        outer:
          while (++index2 < length) {
            var value = array2[index2], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseUnset2(object2, path2) {
        path2 = castPath2(path2, object2);
        object2 = parent2(object2, path2);
        return object2 == null || delete object2[toKey2(last2(path2))];
      }
      function baseUpdate(object2, path2, updater, customizer) {
        return baseSet2(object2, path2, updater(baseGet2(object2, path2)), customizer);
      }
      function baseWhile(array2, predicate, isDrop, fromRight) {
        var length = array2.length, index2 = fromRight ? length : -1;
        while ((fromRight ? index2-- : ++index2 < length) && predicate(array2[index2], index2, array2)) {
        }
        return isDrop ? baseSlice2(array2, fromRight ? 0 : index2, fromRight ? index2 + 1 : length) : baseSlice2(array2, fromRight ? index2 + 1 : 0, fromRight ? length : index2);
      }
      function baseWrapperValue(value, actions2) {
        var result2 = value;
        if (result2 instanceof LazyWrapper) {
          result2 = result2.value();
        }
        return arrayReduce2(actions2, function(result3, action) {
          return action.func.apply(action.thisArg, arrayPush2([result3], action.args));
        }, result2);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index2 = -1, result2 = Array2(length);
        while (++index2 < length) {
          var array2 = arrays[index2], othIndex = -1;
          while (++othIndex < length) {
            if (othIndex != index2) {
              result2[index2] = baseDifference(result2[index2] || array2, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten2(result2, 1), iteratee2, comparator);
      }
      function baseZipObject(props, values2, assignFunc) {
        var index2 = -1, length = props.length, valsLength = values2.length, result2 = {};
        while (++index2 < length) {
          var value = index2 < valsLength ? values2[index2] : undefined$12;
          assignFunc(result2, props[index2], value);
        }
        return result2;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction(value) {
        return typeof value == "function" ? value : identity2;
      }
      function castPath2(value, object2) {
        if (isArray2(value)) {
          return value;
        }
        return isKey2(value, object2) ? [value] : stringToPath3(toString4(value));
      }
      var castRest = baseRest;
      function castSlice2(array2, start, end) {
        var length = array2.length;
        end = end === undefined$12 ? length : end;
        return !start && end >= length ? array2 : baseSlice2(array2, start, end);
      }
      var clearTimeout2 = ctxClearTimeout || function(id) {
        return root2.clearTimeout(id);
      };
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result2);
        return result2;
      }
      function cloneArrayBuffer2(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
        return result2;
      }
      function cloneDataView2(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp2(regexp2) {
        var result2 = new regexp2.constructor(regexp2.source, reFlags2.exec(regexp2));
        result2.lastIndex = regexp2.lastIndex;
        return result2;
      }
      function cloneSymbol2(symbol) {
        return symbolValueOf2 ? Object2(symbolValueOf2.call(symbol)) : {};
      }
      function cloneTypedArray2(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$12, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
          var othIsDefined = other !== undefined$12, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object2, other, orders) {
        var index2 = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index2 < length) {
          var result2 = compareAscending(objCriteria[index2], othCriteria[index2]);
          if (result2) {
            if (index2 >= ordersLength) {
              return result2;
            }
            var order = orders[index2];
            return result2 * (order == "desc" ? -1 : 1);
          }
        }
        return object2.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result2[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result2[leftIndex++] = args[argsIndex++];
        }
        return result2;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result2[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result2[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result2;
      }
      function copyArray2(source, array2) {
        var index2 = -1, length = source.length;
        array2 || (array2 = Array2(length));
        while (++index2 < length) {
          array2[index2] = source[index2];
        }
        return array2;
      }
      function copyObject2(source, props, object2, customizer) {
        var isNew = !object2;
        object2 || (object2 = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : undefined$12;
          if (newValue === undefined$12) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue2(object2, key, newValue);
          } else {
            assignValue2(object2, key, newValue);
          }
        }
        return object2;
      }
      function copySymbols2(source, object2) {
        return copyObject2(source, getSymbols2(source), object2);
      }
      function copySymbolsIn2(source, object2) {
        return copyObject2(source, getSymbolsIn2(source), object2);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object2, sources) {
          var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$12, guard = length > 2 ? sources[2] : undefined$12;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$12;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined$12 : customizer;
            length = 1;
          }
          object2 = Object2(object2);
          while (++index2 < length) {
            var source = sources[index2];
            if (source) {
              assigner(object2, source, index2, customizer);
            }
          }
          return object2;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object2(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee2(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor2(fromRight) {
        return function(object2, iteratee2, keysFunc) {
          var index2 = -1, iterable = Object2(object2), props = keysFunc(object2), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee2(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object2;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst2(methodName) {
        return function(string2) {
          string2 = toString4(string2);
          var strSymbols = hasUnicode2(string2) ? stringToArray2(string2) : undefined$12;
          var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
          var trailing = strSymbols ? castSlice2(strSymbols, 1).join("") : string2.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder2(callback) {
        return function(string2) {
          return arrayReduce2(words2(deburr2(string2).replace(reApos2, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate2(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
          return isObject2(result2) ? result2 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index2 = length, placeholder2 = getHolder(wrapper);
          while (index2--) {
            args[index2] = arguments[index2];
          }
          var holders = length < 3 && args[0] !== placeholder2 && args[length - 1] !== placeholder2 ? [] : replaceHolders(args, placeholder2);
          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func,
              bitmask,
              createHybrid,
              wrapper.placeholder,
              undefined$12,
              args,
              holders,
              undefined$12,
              undefined$12,
              arity - length
            );
          }
          var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          return apply2(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike2(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys2(collection);
            predicate = function(key) {
              return iteratee2(iterable[key], key, iterable);
            };
          }
          var index2 = findIndexFunc(collection, predicate, fromIndex);
          return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined$12;
        };
      }
      function createFlow(fromRight) {
        return flatRest2(function(funcs) {
          var length = funcs.length, index2 = length, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index2--) {
            var func = funcs[index2];
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT2);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index2 = wrapper ? index2 : length;
          while (++index2 < length) {
            func = funcs[index2];
            var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined$12;
            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && isArray2(value)) {
              return wrapper.plant(value).value();
            }
            var index3 = 0, result2 = length ? funcs[index3].apply(this, args) : value;
            while (++index3 < length) {
              result2 = funcs[index3].call(this, result2);
            }
            return result2;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$12 : createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index2 = length;
          while (index2--) {
            args[index2] = arguments[index2];
          }
          if (isCurried) {
            var placeholder2 = getHolder(wrapper), holdersCount = countHolders(args, placeholder2);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder2);
            return createRecurry(
              func,
              bitmask,
              createHybrid,
              wrapper.placeholder,
              thisArg,
              args,
              newHolders,
              argPos,
              ary2,
              arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length) {
            args.length = ary2;
          }
          if (this && this !== root2 && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object2, iteratee2) {
          return baseInverter(object2, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result2;
          if (value === undefined$12 && other === undefined$12) {
            return defaultValue;
          }
          if (value !== undefined$12) {
            result2 = value;
          }
          if (other !== undefined$12) {
            if (result2 === undefined$12) {
              return other;
            }
            if (typeof value == "string" || typeof other == "string") {
              value = baseToString2(value);
              other = baseToString2(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result2 = operator(value, other);
          }
          return result2;
        };
      }
      function createOver(arrayFunc) {
        return flatRest2(function(iteratees) {
          iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply2(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length, chars) {
        chars = chars === undefined$12 ? " " : baseToString2(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode2(chars) ? castSlice2(stringToArray2(result2), 0, length).join("") : result2.slice(0, length);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply2(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = undefined$12;
          }
          start = toFinite(start);
          if (end === undefined$12) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$12 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == "string" && typeof other == "string")) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder2, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$12, newHoldersRight = isCurry ? undefined$12 : holders, newPartials = isCurry ? partials : undefined$12, newPartialsRight = isCurry ? undefined$12 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result2 = wrapFunc.apply(undefined$12, newData);
        if (isLaziable(func)) {
          setData(result2, newData);
        }
        result2.placeholder = placeholder2;
        return setWrapToString(result2, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number2, precision) {
          number2 = toNumber(number2);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number2)) {
            var pair = (toString4(number2) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString4(value) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number2);
        };
      }
      var createSet = !(Set2 && 1 / setToArray2(new Set2([, -0]))[1] == INFINITY2) ? noop2 : function(values2) {
        return new Set2(values2);
      };
      function createToPairs(keysFunc) {
        return function(object2) {
          var tag = getTag2(object2);
          if (tag == mapTag2) {
            return mapToArray2(object2);
          }
          if (tag == setTag2) {
            return setToPairs(object2);
          }
          return baseToPairs(object2, keysFunc(object2));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$12;
        }
        ary2 = ary2 === undefined$12 ? ary2 : nativeMax2(toInteger(ary2), 0);
        arity = arity === undefined$12 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined$12;
        }
        var data = isBindKey ? undefined$12 : getData(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$12 ? isBindKey ? 0 : func.length : nativeMax2(newData[9] - length, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result2 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result2 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result2 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result2 = createHybrid.apply(undefined$12, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result2, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object2) {
        if (objValue === undefined$12 || eq2(objValue, objectProto2[key]) && !hasOwnProperty2.call(object2, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object2, source, stack) {
        if (isObject2(objValue) && isObject2(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$12, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone2(value) {
        return isPlainObject2(value) ? undefined$12 : value;
      }
      function equalArrays2(array2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array2);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array2;
        }
        var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG2 ? new SetCache2() : undefined$12;
        stack.set(array2, other);
        stack.set(other, array2);
        while (++index2 < arrLength) {
          var arrValue = array2[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
          }
          if (compared !== undefined$12) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome2(other, function(othValue2, othIndex) {
              if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array2);
        stack["delete"](other);
        return result2;
      }
      function equalByTag2(object2, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag2:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag2:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag2:
          case dateTag2:
          case numberTag2:
            return eq2(+object2, +other);
          case errorTag2:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag2:
          case stringTag2:
            return object2 == other + "";
          case mapTag2:
            var convert2 = mapToArray2;
          case setTag2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
            convert2 || (convert2 = setToArray2);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG2;
            stack.set(object2, other);
            var result2 = equalArrays2(convert2(object2), convert2(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object2);
            return result2;
          case symbolTag2:
            if (symbolValueOf2) {
              return symbolValueOf2.call(object2) == symbolValueOf2.call(other);
            }
        }
        return false;
      }
      function equalObjects2(object2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2, objProps = getAllKeys2(object2), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object2);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object2;
        }
        var result2 = true;
        stack.set(object2, other);
        stack.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object2[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
          }
          if (!(compared === undefined$12 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object2);
        stack["delete"](other);
        return result2;
      }
      function flatRest2(func) {
        return setToString2(overRest2(func, undefined$12, flatten2), func + "");
      }
      function getAllKeys2(object2) {
        return baseGetAllKeys2(object2, keys2, getSymbols2);
      }
      function getAllKeysIn2(object2) {
        return baseGetAllKeys2(object2, keysIn2, getSymbolsIn2);
      }
      var getData = !metaMap ? noop2 : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result2 = func.name + "", array2 = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array2.length : 0;
        while (length--) {
          var data = array2[length], otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result2;
      }
      function getHolder(func) {
        var object2 = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
        return object2.placeholder;
      }
      function getIteratee() {
        var result2 = lodash2.iteratee || iteratee;
        result2 = result2 === iteratee ? baseIteratee2 : result2;
        return arguments.length ? result2(arguments[0], arguments[1]) : result2;
      }
      function getMapData2(map3, key) {
        var data = map3.__data__;
        return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getMatchData2(object2) {
        var result2 = keys2(object2), length = result2.length;
        while (length--) {
          var key = result2[length], value = object2[key];
          result2[length] = [key, value, isStrictComparable2(value)];
        }
        return result2;
      }
      function getNative2(object2, key) {
        var value = getValue2(object2, key);
        return baseIsNative2(value) ? value : undefined$12;
      }
      function getRawTag2(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag2), tag = value[symToStringTag2];
        try {
          value[symToStringTag2] = undefined$12;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString2.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag2] = tag;
          } else {
            delete value[symToStringTag2];
          }
        }
        return result2;
      }
      var getSymbols2 = !nativeGetSymbols2 ? stubArray2 : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object2(object2);
        return arrayFilter2(nativeGetSymbols2(object2), function(symbol) {
          return propertyIsEnumerable2.call(object2, symbol);
        });
      };
      var getSymbolsIn2 = !nativeGetSymbols2 ? stubArray2 : function(object2) {
        var result2 = [];
        while (object2) {
          arrayPush2(result2, getSymbols2(object2));
          object2 = getPrototype2(object2);
        }
        return result2;
      };
      var getTag2 = baseGetTag2;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag2 || Map2 && getTag2(new Map2()) != mapTag2 || Promise2 && getTag2(Promise2.resolve()) != promiseTag2 || Set2 && getTag2(new Set2()) != setTag2 || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag2) {
        getTag2 = function(value) {
          var result2 = baseGetTag2(value), Ctor = result2 == objectTag2 ? value.constructor : undefined$12, ctorString = Ctor ? toSource2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString2:
                return dataViewTag2;
              case mapCtorString2:
                return mapTag2;
              case promiseCtorString2:
                return promiseTag2;
              case setCtorString2:
                return setTag2;
              case weakMapCtorString2:
                return weakMapTag2;
            }
          }
          return result2;
        };
      }
      function getView(start, end, transforms) {
        var index2 = -1, length = transforms.length;
        while (++index2 < length) {
          var data = transforms[index2], size2 = data.size;
          switch (data.type) {
            case "drop":
              start += size2;
              break;
            case "dropRight":
              end -= size2;
              break;
            case "take":
              end = nativeMin(end, start + size2);
              break;
            case "takeRight":
              start = nativeMax2(start, end - size2);
              break;
          }
        }
        return { "start": start, "end": end };
      }
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath2(object2, path2, hasFunc) {
        path2 = castPath2(path2, object2);
        var index2 = -1, length = path2.length, result2 = false;
        while (++index2 < length) {
          var key = toKey2(path2[index2]);
          if (!(result2 = object2 != null && hasFunc(object2, key))) {
            break;
          }
          object2 = object2[key];
        }
        if (result2 || ++index2 != length) {
          return result2;
        }
        length = object2 == null ? 0 : object2.length;
        return !!length && isLength2(length) && isIndex2(key, length) && (isArray2(object2) || isArguments2(object2));
      }
      function initCloneArray2(array2) {
        var length = array2.length, result2 = new array2.constructor(length);
        if (length && typeof array2[0] == "string" && hasOwnProperty2.call(array2, "index")) {
          result2.index = array2.index;
          result2.input = array2.input;
        }
        return result2;
      }
      function initCloneObject2(object2) {
        return typeof object2.constructor == "function" && !isPrototype2(object2) ? baseCreate2(getPrototype2(object2)) : {};
      }
      function initCloneByTag2(object2, tag, isDeep) {
        var Ctor = object2.constructor;
        switch (tag) {
          case arrayBufferTag2:
            return cloneArrayBuffer2(object2);
          case boolTag2:
          case dateTag2:
            return new Ctor(+object2);
          case dataViewTag2:
            return cloneDataView2(object2, isDeep);
          case float32Tag2:
          case float64Tag2:
          case int8Tag2:
          case int16Tag2:
          case int32Tag2:
          case uint8Tag2:
          case uint8ClampedTag2:
          case uint16Tag2:
          case uint32Tag2:
            return cloneTypedArray2(object2, isDeep);
          case mapTag2:
            return new Ctor();
          case numberTag2:
          case stringTag2:
            return new Ctor(object2);
          case regexpTag2:
            return cloneRegExp2(object2);
          case setTag2:
            return new Ctor();
          case symbolTag2:
            return cloneSymbol2(object2);
        }
      }
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length > 2 ? ", " : " ");
        return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable2(value) {
        return isArray2(value) || isArguments2(value) || !!(spreadableSymbol2 && value && value[spreadableSymbol2]);
      }
      function isIndex2(value, length) {
        var type2 = typeof value;
        length = length == null ? MAX_SAFE_INTEGER2 : length;
        return !!length && (type2 == "number" || type2 != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index2, object2) {
        if (!isObject2(object2)) {
          return false;
        }
        var type2 = typeof index2;
        if (type2 == "number" ? isArrayLike2(object2) && isIndex2(index2, object2.length) : type2 == "string" && index2 in object2) {
          return eq2(object2[index2], value);
        }
        return false;
      }
      function isKey2(value, object2) {
        if (isArray2(value)) {
          return false;
        }
        var type2 = typeof value;
        if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol2(value)) {
          return true;
        }
        return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object2 != null && value in Object2(object2);
      }
      function isKeyable2(value) {
        var type2 = typeof value;
        return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash2[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }
      function isMasked2(func) {
        return !!maskSrcKey2 && maskSrcKey2 in func;
      }
      var isMaskable = coreJsData2 ? isFunction3 : stubFalse2;
      function isPrototype2(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
        return value === proto;
      }
      function isStrictComparable2(value) {
        return value === value && !isObject2(value);
      }
      function matchesStrictComparable2(key, srcValue) {
        return function(object2) {
          if (object2 == null) {
            return false;
          }
          return object2[key] === srcValue && (srcValue !== undefined$12 || key in Object2(object2));
        };
      }
      function memoizeCapped2(func) {
        var result2 = memoize2(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE2) {
            cache.clear();
          }
          return key;
        });
        var cache = result2.cache;
        return result2;
      }
      function mergeData(data, source) {
        var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        value = source[7];
        if (value) {
          data[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        if (data[9] == null) {
          data[9] = source[9];
        }
        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }
      function nativeKeysIn2(object2) {
        var result2 = [];
        if (object2 != null) {
          for (var key in Object2(object2)) {
            result2.push(key);
          }
        }
        return result2;
      }
      function objectToString2(value) {
        return nativeObjectToString2.call(value);
      }
      function overRest2(func, start, transform3) {
        start = nativeMax2(start === undefined$12 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax2(args.length - start, 0), array2 = Array2(length);
          while (++index2 < length) {
            array2[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array2(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform3(array2);
          return apply2(func, this, otherArgs);
        };
      }
      function parent2(object2, path2) {
        return path2.length < 2 ? object2 : baseGet2(object2, baseSlice2(path2, 0, -1));
      }
      function reorder(array2, indexes) {
        var arrLength = array2.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray2(array2);
        while (length--) {
          var index2 = indexes[length];
          array2[length] = isIndex2(index2, arrLength) ? oldArray[index2] : undefined$12;
        }
        return array2;
      }
      function safeGet(object2, key) {
        if (key === "constructor" && typeof object2[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object2[key];
      }
      var setData = shortOut2(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root2.setTimeout(func, wait);
      };
      var setToString2 = shortOut2(baseSetToString2);
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + "";
        return setToString2(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut2(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow2(), remaining = HOT_SPAN2 - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT2) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$12, arguments);
        };
      }
      function shuffleSelf(array2, size2) {
        var index2 = -1, length = array2.length, lastIndex = length - 1;
        size2 = size2 === undefined$12 ? length : size2;
        while (++index2 < size2) {
          var rand = baseRandom(index2, lastIndex), value = array2[rand];
          array2[rand] = array2[index2];
          array2[index2] = value;
        }
        array2.length = size2;
        return array2;
      }
      var stringToPath3 = memoizeCapped2(function(string2) {
        var result2 = [];
        if (string2.charCodeAt(0) === 46) {
          result2.push("");
        }
        string2.replace(rePropName2, function(match, number2, quote2, subString) {
          result2.push(quote2 ? subString.replace(reEscapeChar2, "$1") : number2 || match);
        });
        return result2;
      });
      function toKey2(value) {
        if (typeof value == "string" || isSymbol2(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY2 ? "-0" : result2;
      }
      function toSource2(func) {
        if (func != null) {
          try {
            return funcToString2.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach2(wrapFlags, function(pair) {
          var value = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result2.__actions__ = copyArray2(wrapper.__actions__);
        result2.__index__ = wrapper.__index__;
        result2.__values__ = wrapper.__values__;
        return result2;
      }
      function chunk(array2, size2, guard) {
        if (guard ? isIterateeCall(array2, size2, guard) : size2 === undefined$12) {
          size2 = 1;
        } else {
          size2 = nativeMax2(toInteger(size2), 0);
        }
        var length = array2 == null ? 0 : array2.length;
        if (!length || size2 < 1) {
          return [];
        }
        var index2 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
        while (index2 < length) {
          result2[resIndex++] = baseSlice2(array2, index2, index2 += size2);
        }
        return result2;
      }
      function compact3(array2) {
        var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
        while (++index2 < length) {
          var value = array2[index2];
          if (value) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array2(length - 1), array2 = arguments[0], index2 = length;
        while (index2--) {
          args[index2 - 1] = arguments[index2];
        }
        return arrayPush2(isArray2(array2) ? copyArray2(array2) : [array2], baseFlatten2(args, 1));
      }
      var difference = baseRest(function(array2, values2) {
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten2(values2, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array2, values2) {
        var iteratee2 = last2(values2);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$12;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten2(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array2, values2) {
        var comparator = last2(values2);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$12;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten2(values2, 1, isArrayLikeObject, true), undefined$12, comparator) : [];
      });
      function drop(array2, n, guard) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$12 ? 1 : toInteger(n);
        return baseSlice2(array2, n < 0 ? 0 : n, length);
      }
      function dropRight(array2, n, guard) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$12 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice2(array2, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
      }
      function fill2(array2, value, start, end) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != "number" && isIterateeCall(array2, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array2, value, start, end);
      }
      function findIndex2(array2, predicate, fromIndex) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax2(length + index2, 0);
        }
        return baseFindIndex2(array2, getIteratee(predicate, 3), index2);
      }
      function findLastIndex(array2, predicate, fromIndex) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return -1;
        }
        var index2 = length - 1;
        if (fromIndex !== undefined$12) {
          index2 = toInteger(fromIndex);
          index2 = fromIndex < 0 ? nativeMax2(length + index2, 0) : nativeMin(index2, length - 1);
        }
        return baseFindIndex2(array2, getIteratee(predicate, 3), index2, true);
      }
      function flatten2(array2) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseFlatten2(array2, 1) : [];
      }
      function flattenDeep(array2) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseFlatten2(array2, INFINITY2) : [];
      }
      function flattenDepth(array2, depth2) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return [];
        }
        depth2 = depth2 === undefined$12 ? 1 : toInteger(depth2);
        return baseFlatten2(array2, depth2);
      }
      function fromPairs2(pairs2) {
        var index2 = -1, length = pairs2 == null ? 0 : pairs2.length, result2 = {};
        while (++index2 < length) {
          var pair = pairs2[index2];
          result2[pair[0]] = pair[1];
        }
        return result2;
      }
      function head(array2) {
        return array2 && array2.length ? array2[0] : undefined$12;
      }
      function indexOf2(array2, value, fromIndex) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax2(length + index2, 0);
        }
        return baseIndexOf2(array2, value, index2);
      }
      function initial(array2) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseSlice2(array2, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap2(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last2(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        if (iteratee2 === last2(mapped)) {
          iteratee2 = undefined$12;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last2(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined$12;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$12, comparator) : [];
      });
      function join(array2, separator) {
        return array2 == null ? "" : nativeJoin.call(array2, separator);
      }
      function last2(array2) {
        var length = array2 == null ? 0 : array2.length;
        return length ? array2[length - 1] : undefined$12;
      }
      function lastIndexOf(array2, value, fromIndex) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return -1;
        }
        var index2 = length;
        if (fromIndex !== undefined$12) {
          index2 = toInteger(fromIndex);
          index2 = index2 < 0 ? nativeMax2(length + index2, 0) : nativeMin(index2, length - 1);
        }
        return value === value ? strictLastIndexOf(array2, value, index2) : baseFindIndex2(array2, baseIsNaN2, index2, true);
      }
      function nth(array2, n) {
        return array2 && array2.length ? baseNth(array2, toInteger(n)) : undefined$12;
      }
      var pull = baseRest(pullAll);
      function pullAll(array2, values2) {
        return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2) : array2;
      }
      function pullAllBy(array2, values2, iteratee2) {
        return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, getIteratee(iteratee2, 2)) : array2;
      }
      function pullAllWith(array2, values2, comparator) {
        return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, undefined$12, comparator) : array2;
      }
      var pullAt = flatRest2(function(array2, indexes) {
        var length = array2 == null ? 0 : array2.length, result2 = baseAt(array2, indexes);
        basePullAt(array2, arrayMap2(indexes, function(index2) {
          return isIndex2(index2, length) ? +index2 : index2;
        }).sort(compareAscending));
        return result2;
      });
      function remove2(array2, predicate) {
        var result2 = [];
        if (!(array2 && array2.length)) {
          return result2;
        }
        var index2 = -1, indexes = [], length = array2.length;
        predicate = getIteratee(predicate, 3);
        while (++index2 < length) {
          var value = array2[index2];
          if (predicate(value, index2, array2)) {
            result2.push(value);
            indexes.push(index2);
          }
        }
        basePullAt(array2, indexes);
        return result2;
      }
      function reverse(array2) {
        return array2 == null ? array2 : nativeReverse.call(array2);
      }
      function slice(array2, start, end) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array2, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$12 ? length : toInteger(end);
        }
        return baseSlice2(array2, start, end);
      }
      function sortedIndex(array2, value) {
        return baseSortedIndex(array2, value);
      }
      function sortedIndexBy(array2, value, iteratee2) {
        return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array2, value) {
        var length = array2 == null ? 0 : array2.length;
        if (length) {
          var index2 = baseSortedIndex(array2, value);
          if (index2 < length && eq2(array2[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      function sortedLastIndex(array2, value) {
        return baseSortedIndex(array2, value, true);
      }
      function sortedLastIndexBy(array2, value, iteratee2) {
        return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array2, value) {
        var length = array2 == null ? 0 : array2.length;
        if (length) {
          var index2 = baseSortedIndex(array2, value, true) - 1;
          if (eq2(array2[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      function sortedUniq(array2) {
        return array2 && array2.length ? baseSortedUniq(array2) : [];
      }
      function sortedUniqBy(array2, iteratee2) {
        return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array2) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseSlice2(array2, 1, length) : [];
      }
      function take(array2, n, guard) {
        if (!(array2 && array2.length)) {
          return [];
        }
        n = guard || n === undefined$12 ? 1 : toInteger(n);
        return baseSlice2(array2, 0, n < 0 ? 0 : n);
      }
      function takeRight(array2, n, guard) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$12 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice2(array2, n < 0 ? 0 : n, length);
      }
      function takeRightWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten2(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last2(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$12;
        }
        return baseUniq(baseFlatten2(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last2(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$12;
        return baseUniq(baseFlatten2(arrays, 1, isArrayLikeObject, true), undefined$12, comparator);
      });
      function uniq(array2) {
        return array2 && array2.length ? baseUniq(array2) : [];
      }
      function uniqBy(array2, iteratee2) {
        return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array2, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined$12;
        return array2 && array2.length ? baseUniq(array2, undefined$12, comparator) : [];
      }
      function unzip(array2) {
        if (!(array2 && array2.length)) {
          return [];
        }
        var length = 0;
        array2 = arrayFilter2(array2, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax2(group.length, length);
            return true;
          }
        });
        return baseTimes2(length, function(index2) {
          return arrayMap2(array2, baseProperty2(index2));
        });
      }
      function unzipWith(array2, iteratee2) {
        if (!(array2 && array2.length)) {
          return [];
        }
        var result2 = unzip(array2);
        if (iteratee2 == null) {
          return result2;
        }
        return arrayMap2(result2, function(group) {
          return apply2(iteratee2, undefined$12, group);
        });
      }
      var without = baseRest(function(array2, values2) {
        return isArrayLikeObject(array2) ? baseDifference(array2, values2) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter2(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last2(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$12;
        }
        return baseXor(arrayFilter2(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last2(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$12;
        return baseXor(arrayFilter2(arrays, isArrayLikeObject), undefined$12, comparator);
      });
      var zip2 = baseRest(unzip);
      function zipObject(props, values2) {
        return baseZipObject(props || [], values2 || [], assignValue2);
      }
      function zipObjectDeep(props, values2) {
        return baseZipObject(props || [], values2 || [], baseSet2);
      }
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$12;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$12;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value) {
        var result2 = lodash2(value);
        result2.__chain__ = true;
        return result2;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest2(function(paths) {
        var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object2) {
          return baseAt(object2, paths);
        };
        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex2(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          "func": thru,
          "args": [interceptor],
          "thisArg": undefined$12
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array2) {
          if (length && !array2.length) {
            array2.push(undefined$12);
          }
          return array2;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined$12) {
          this.__values__ = toArray2(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value = done ? undefined$12 : this.__values__[this.__index__++];
        return { "done": done, "value": value };
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result2, parent3 = this;
        while (parent3 instanceof baseLodash) {
          var clone3 = wrapperClone(parent3);
          clone3.__index__ = 0;
          clone3.__values__ = undefined$12;
          if (result2) {
            previous.__wrapped__ = clone3;
          } else {
            result2 = clone3;
          }
          var previous = clone3;
          parent3 = parent3.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result2;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            "func": thru,
            "args": [reverse],
            "thisArg": undefined$12
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          ++result2[key];
        } else {
          baseAssignValue2(result2, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$12;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter2 : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find2 = createFind(findIndex2);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten2(map2(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten2(map2(collection, iteratee2), INFINITY2);
      }
      function flatMapDepth(collection, iteratee2, depth2) {
        depth2 = depth2 === undefined$12 ? 1 : toInteger(depth2);
        return baseFlatten2(map2(collection, iteratee2), depth2);
      }
      function forEach2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEach2 : baseEach;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          result2[key].push(value);
        } else {
          baseAssignValue2(result2, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike2(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax2(length + fromIndex, 0);
        }
        return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf2(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path2, args) {
        var index2 = -1, isFunc = typeof path2 == "function", result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value) {
          result2[++index2] = isFunc ? apply2(path2, value, args) : baseInvoke(value, path2, args);
        });
        return result2;
      });
      var keyBy = createAggregator(function(result2, value, key) {
        baseAssignValue2(result2, key, value);
      });
      function map2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayMap2 : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray2(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$12 : orders;
        if (!isArray2(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result2, value, key) {
        result2[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduce2 : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter2 : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray2(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined$12) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray2(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike2(collection)) {
          return isString2(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag2(collection);
        if (tag == mapTag2 || tag == setTag2) {
          return collection.size;
        }
        return baseKeys2(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome2 : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$12;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten2(iteratees, 1), []);
      });
      var now = ctxNow || function() {
        return root2.Date.now();
      };
      function after(n, func) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined$12 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$12, undefined$12, undefined$12, undefined$12, n);
      }
      function before(n, func) {
        var result2;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result2 = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$12;
          }
          return result2;
        };
      }
      var bind3 = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind3));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object2, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object2, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined$12 : arity;
        var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$12, undefined$12, undefined$12, undefined$12, undefined$12, arity);
        result2.placeholder = curry.placeholder;
        return result2;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$12 : arity;
        var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$12, undefined$12, undefined$12, undefined$12, undefined$12, arity);
        result2.placeholder = curryRight.placeholder;
        return result2;
      }
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        wait = toNumber(wait) || 0;
        if (isObject2(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax2(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined$12;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined$12 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined$12;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$12;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined$12) {
            clearTimeout2(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$12;
        }
        function flush() {
          return timerId === undefined$12 ? result2 : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined$12) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout2(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$12) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize2(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache.set(key, result2) || cache;
          return result2;
        };
        memoized.cache = new (memoize2.Cache || MapCache2)();
        return memoized;
      }
      memoize2.Cache = MapCache2;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once2(func) {
        return before(2, func);
      }
      var overArgs = castRest(function(func, transforms) {
        transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap2(transforms[0], baseUnary2(getIteratee())) : arrayMap2(baseFlatten2(transforms, 1), baseUnary2(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index2 = -1, length = nativeMin(args.length, funcsLength);
          while (++index2 < length) {
            args[index2] = transforms[index2].call(this, args[index2]);
          }
          return apply2(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$12, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$12, partials, holders);
      });
      var rearg = flatRest2(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$12, undefined$12, undefined$12, indexes);
      });
      function rest(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        start = start === undefined$12 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        start = start == null ? 0 : nativeMax2(toInteger(start), 0);
        return baseRest(function(args) {
          var array2 = args[start], otherArgs = castSlice2(args, 0, start);
          if (array2) {
            arrayPush2(otherArgs, array2);
          }
          return apply2(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        if (isObject2(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
      function castArray2() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray2(value) ? value : [value];
      }
      function clone2(value) {
        return baseClone2(value, CLONE_SYMBOLS_FLAG2);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$12;
        return baseClone2(value, CLONE_SYMBOLS_FLAG2, customizer);
      }
      function cloneDeep2(value) {
        return baseClone2(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$12;
        return baseClone2(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2, customizer);
      }
      function conformsTo(object2, source) {
        return source == null || baseConformsTo(object2, source, keys2(source));
      }
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
      var isArguments2 = baseIsArguments2(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value) {
        return isObjectLike2(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
      };
      var isArray2 = Array2.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary2(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike2(value) {
        return value != null && isLength2(value.length) && !isFunction3(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike2(value) && isArrayLike2(value);
      }
      function isBoolean2(value) {
        return value === true || value === false || isObjectLike2(value) && baseGetTag2(value) == boolTag2;
      }
      var isBuffer3 = nativeIsBuffer || stubFalse2;
      var isDate2 = nodeIsDate ? baseUnary2(nodeIsDate) : baseIsDate;
      function isElement2(value) {
        return isObjectLike2(value) && value.nodeType === 1 && !isPlainObject2(value);
      }
      function isEmpty2(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike2(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer3(value) || isTypedArray2(value) || isArguments2(value))) {
          return !value.length;
        }
        var tag = getTag2(value);
        if (tag == mapTag2 || tag == setTag2) {
          return !value.size;
        }
        if (isPrototype2(value)) {
          return !baseKeys2(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty2.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual2(value, other) {
        return baseIsEqual2(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$12;
        var result2 = customizer ? customizer(value, other) : undefined$12;
        return result2 === undefined$12 ? baseIsEqual2(value, other, undefined$12, customizer) : !!result2;
      }
      function isError2(value) {
        if (!isObjectLike2(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == errorTag2 || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
      }
      function isFinite2(value) {
        return typeof value == "number" && nativeIsFinite(value);
      }
      function isFunction3(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == funcTag2 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
      }
      function isInteger2(value) {
        return typeof value == "number" && value == toInteger(value);
      }
      function isLength2(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
      }
      function isObject2(value) {
        var type2 = typeof value;
        return value != null && (type2 == "object" || type2 == "function");
      }
      function isObjectLike2(value) {
        return value != null && typeof value == "object";
      }
      var isMap2 = nodeIsMap2 ? baseUnary2(nodeIsMap2) : baseIsMap2;
      function isMatch(object2, source) {
        return object2 === source || baseIsMatch2(object2, source, getMatchData2(source));
      }
      function isMatchWith(object2, source, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$12;
        return baseIsMatch2(object2, source, getMatchData2(source), customizer);
      }
      function isNaN2(value) {
        return isNumber2(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative2(value);
      }
      function isNull2(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber2(value) {
        return typeof value == "number" || isObjectLike2(value) && baseGetTag2(value) == numberTag2;
      }
      function isPlainObject2(value) {
        if (!isObjectLike2(value) || baseGetTag2(value) != objectTag2) {
          return false;
        }
        var proto = getPrototype2(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString2.call(Ctor) == objectCtorString2;
      }
      var isRegExp3 = nodeIsRegExp ? baseUnary2(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger2(value) && value >= -MAX_SAFE_INTEGER2 && value <= MAX_SAFE_INTEGER2;
      }
      var isSet2 = nodeIsSet2 ? baseUnary2(nodeIsSet2) : baseIsSet2;
      function isString2(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag2;
      }
      function isSymbol2(value) {
        return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag2;
      }
      var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      function isUndefined2(value) {
        return value === undefined$12;
      }
      function isWeakMap2(value) {
        return isObjectLike2(value) && getTag2(value) == weakMapTag2;
      }
      function isWeakSet2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
      function toArray2(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike2(value)) {
          return isString2(value) ? stringToArray2(value) : copyArray2(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag2(value), func = tag == mapTag2 ? mapToArray2 : tag == setTag2 ? setToArray2 : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY2 || value === -INFINITY2) {
          var sign2 = value < 0 ? -1 : 1;
          return sign2 * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result2 = toFinite(value), remainder = result2 % 1;
        return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol2(value)) {
          return NAN;
        }
        if (isObject2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim2(value);
        var isBinary2 = reIsBinary.test(value);
        return isBinary2 || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject2(value, keysIn2(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2) : value === 0 ? value : 0;
      }
      function toString4(value) {
        return value == null ? "" : baseToString2(value);
      }
      var assign2 = createAssigner(function(object2, source) {
        if (isPrototype2(source) || isArrayLike2(source)) {
          copyObject2(source, keys2(source), object2);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty2.call(source, key)) {
            assignValue2(object2, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function(object2, source) {
        copyObject2(source, keysIn2(source), object2);
      });
      var assignInWith = createAssigner(function(object2, source, srcIndex, customizer) {
        copyObject2(source, keysIn2(source), object2, customizer);
      });
      var assignWith = createAssigner(function(object2, source, srcIndex, customizer) {
        copyObject2(source, keys2(source), object2, customizer);
      });
      var at = flatRest2(baseAt);
      function create2(prototype, properties) {
        var result2 = baseCreate2(prototype);
        return properties == null ? result2 : baseAssign2(result2, properties);
      }
      var defaults2 = baseRest(function(object2, sources) {
        object2 = Object2(object2);
        var index2 = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined$12;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index2 < length) {
          var source = sources[index2];
          var props = keysIn2(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object2[key];
            if (value === undefined$12 || eq2(value, objectProto2[key]) && !hasOwnProperty2.call(object2, key)) {
              object2[key] = source[key];
            }
          }
        }
        return object2;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$12, customDefaultsMerge);
        return apply2(mergeWith, undefined$12, args);
      });
      function findKey(object2, predicate) {
        return baseFindKey(object2, getIteratee(predicate, 3), baseForOwn2);
      }
      function findLastKey(object2, predicate) {
        return baseFindKey(object2, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object2, iteratee2) {
        return object2 == null ? object2 : baseFor2(object2, getIteratee(iteratee2, 3), keysIn2);
      }
      function forInRight(object2, iteratee2) {
        return object2 == null ? object2 : baseForRight(object2, getIteratee(iteratee2, 3), keysIn2);
      }
      function forOwn(object2, iteratee2) {
        return object2 && baseForOwn2(object2, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object2, iteratee2) {
        return object2 && baseForOwnRight(object2, getIteratee(iteratee2, 3));
      }
      function functions(object2) {
        return object2 == null ? [] : baseFunctions(object2, keys2(object2));
      }
      function functionsIn(object2) {
        return object2 == null ? [] : baseFunctions(object2, keysIn2(object2));
      }
      function get2(object2, path2, defaultValue) {
        var result2 = object2 == null ? undefined$12 : baseGet2(object2, path2);
        return result2 === undefined$12 ? defaultValue : result2;
      }
      function has2(object2, path2) {
        return object2 != null && hasPath2(object2, path2, baseHas2);
      }
      function hasIn2(object2, path2) {
        return object2 != null && hasPath2(object2, path2, baseHasIn2);
      }
      var invert = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString2.call(value);
        }
        result2[value] = key;
      }, constant2(identity2));
      var invertBy = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString2.call(value);
        }
        if (hasOwnProperty2.call(result2, value)) {
          result2[value].push(key);
        } else {
          result2[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys2(object2) {
        return isArrayLike2(object2) ? arrayLikeKeys2(object2) : baseKeys2(object2);
      }
      function keysIn2(object2) {
        return isArrayLike2(object2) ? arrayLikeKeys2(object2, true) : baseKeysIn2(object2);
      }
      function mapKeys2(object2, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn2(object2, function(value, key, object3) {
          baseAssignValue2(result2, iteratee2(value, key, object3), value);
        });
        return result2;
      }
      function mapValues2(object2, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn2(object2, function(value, key, object3) {
          baseAssignValue2(result2, key, iteratee2(value, key, object3));
        });
        return result2;
      }
      var merge3 = createAssigner(function(object2, source, srcIndex) {
        baseMerge(object2, source, srcIndex);
      });
      var mergeWith = createAssigner(function(object2, source, srcIndex, customizer) {
        baseMerge(object2, source, srcIndex, customizer);
      });
      var omit2 = flatRest2(function(object2, paths) {
        var result2 = {};
        if (object2 == null) {
          return result2;
        }
        var isDeep = false;
        paths = arrayMap2(paths, function(path2) {
          path2 = castPath2(path2, object2);
          isDeep || (isDeep = path2.length > 1);
          return path2;
        });
        copyObject2(object2, getAllKeysIn2(object2), result2);
        if (isDeep) {
          result2 = baseClone2(result2, CLONE_DEEP_FLAG2 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG2, customOmitClone2);
        }
        var length = paths.length;
        while (length--) {
          baseUnset2(result2, paths[length]);
        }
        return result2;
      });
      function omitBy(object2, predicate) {
        return pickBy(object2, negate(getIteratee(predicate)));
      }
      var pick2 = flatRest2(function(object2, paths) {
        return object2 == null ? {} : basePick2(object2, paths);
      });
      function pickBy(object2, predicate) {
        if (object2 == null) {
          return {};
        }
        var props = arrayMap2(getAllKeysIn2(object2), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy2(object2, props, function(value, path2) {
          return predicate(value, path2[0]);
        });
      }
      function result(object2, path2, defaultValue) {
        path2 = castPath2(path2, object2);
        var index2 = -1, length = path2.length;
        if (!length) {
          length = 1;
          object2 = undefined$12;
        }
        while (++index2 < length) {
          var value = object2 == null ? undefined$12 : object2[toKey2(path2[index2])];
          if (value === undefined$12) {
            index2 = length;
            value = defaultValue;
          }
          object2 = isFunction3(value) ? value.call(object2) : value;
        }
        return object2;
      }
      function set2(object2, path2, value) {
        return object2 == null ? object2 : baseSet2(object2, path2, value);
      }
      function setWith(object2, path2, value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$12;
        return object2 == null ? object2 : baseSet2(object2, path2, value, customizer);
      }
      var toPairs = createToPairs(keys2);
      var toPairsIn = createToPairs(keysIn2);
      function transform2(object2, iteratee2, accumulator) {
        var isArr = isArray2(object2), isArrLike = isArr || isBuffer3(object2) || isTypedArray2(object2);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object2 && object2.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject2(object2)) {
            accumulator = isFunction3(Ctor) ? baseCreate2(getPrototype2(object2)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach2 : baseForOwn2)(object2, function(value, index2, object3) {
          return iteratee2(accumulator, value, index2, object3);
        });
        return accumulator;
      }
      function unset(object2, path2) {
        return object2 == null ? true : baseUnset2(object2, path2);
      }
      function update(object2, path2, updater) {
        return object2 == null ? object2 : baseUpdate(object2, path2, castFunction(updater));
      }
      function updateWith(object2, path2, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$12;
        return object2 == null ? object2 : baseUpdate(object2, path2, castFunction(updater), customizer);
      }
      function values(object2) {
        return object2 == null ? [] : baseValues(object2, keys2(object2));
      }
      function valuesIn(object2) {
        return object2 == null ? [] : baseValues(object2, keysIn2(object2));
      }
      function clamp(number2, lower, upper) {
        if (upper === undefined$12) {
          upper = lower;
          lower = undefined$12;
        }
        if (upper !== undefined$12) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$12) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number2), lower, upper);
      }
      function inRange(number2, start, end) {
        start = toFinite(start);
        if (end === undefined$12) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number2 = toNumber(number2);
        return baseInRange(number2, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$12;
        }
        if (floating === undefined$12) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined$12;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined$12;
          }
        }
        if (lower === undefined$12 && upper === undefined$12) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined$12) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase2 = createCompounder2(function(result2, word, index2) {
        word = word.toLowerCase();
        return result2 + (index2 ? capitalize2(word) : word);
      });
      function capitalize2(string2) {
        return upperFirst2(toString4(string2).toLowerCase());
      }
      function deburr2(string2) {
        string2 = toString4(string2);
        return string2 && string2.replace(reLatin2, deburrLetter2).replace(reComboMark2, "");
      }
      function endsWith(string2, target, position) {
        string2 = toString4(string2);
        target = baseToString2(target);
        var length = string2.length;
        position = position === undefined$12 ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string2.slice(position, end) == target;
      }
      function escape2(string2) {
        string2 = toString4(string2);
        return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
      }
      function escapeRegExp(string2) {
        string2 = toString4(string2);
        return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar2, "\\$&") : string2;
      }
      var kebabCase = createCompounder2(function(result2, word, index2) {
        return result2 + (index2 ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder2(function(result2, word, index2) {
        return result2 + (index2 ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst2("toLowerCase");
      function pad2(string2, length, chars) {
        string2 = toString4(string2);
        length = toInteger(length);
        var strLength = length ? stringSize(string2) : 0;
        if (!length || strLength >= length) {
          return string2;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string2, length, chars) {
        string2 = toString4(string2);
        length = toInteger(length);
        var strLength = length ? stringSize(string2) : 0;
        return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
      }
      function padStart(string2, length, chars) {
        string2 = toString4(string2);
        length = toInteger(length);
        var strLength = length ? stringSize(string2) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
      }
      function parseInt2(string2, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString4(string2).replace(reTrimStart2, ""), radix || 0);
      }
      function repeat3(string2, n, guard) {
        if (guard ? isIterateeCall(string2, n, guard) : n === undefined$12) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString4(string2), n);
      }
      function replace2() {
        var args = arguments, string2 = toString4(args[0]);
        return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
      }
      var snakeCase2 = createCompounder2(function(result2, word, index2) {
        return result2 + (index2 ? "_" : "") + word.toLowerCase();
      });
      function split2(string2, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
          separator = limit = undefined$12;
        }
        limit = limit === undefined$12 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string2 = toString4(string2);
        if (string2 && (typeof separator == "string" || separator != null && !isRegExp3(separator))) {
          separator = baseToString2(separator);
          if (!separator && hasUnicode2(string2)) {
            return castSlice2(stringToArray2(string2), 0, limit);
          }
        }
        return string2.split(separator, limit);
      }
      var startCase = createCompounder2(function(result2, word, index2) {
        return result2 + (index2 ? " " : "") + upperFirst2(word);
      });
      function startsWith(string2, target, position) {
        string2 = toString4(string2);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string2.length);
        target = baseToString2(target);
        return string2.slice(position, position + target.length) == target;
      }
      function template(string2, options, guard) {
        var settings = lodash2.templateSettings;
        if (guard && isIterateeCall(string2, options, guard)) {
          options = undefined$12;
        }
        string2 = toString4(string2);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
        var reDelimiters = RegExp2(
          (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
          "g"
        );
        var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string2.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index2 = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty2.call(options, "variable") && options.variable;
        if (!variable) {
          source = "with (obj) {\n" + source + "\n}\n";
        } else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
        var result2 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$12, importsValues);
        });
        result2.source = source;
        if (isError2(result2)) {
          throw result2;
        }
        return result2;
      }
      function toLower(value) {
        return toString4(value).toLowerCase();
      }
      function toUpper(value) {
        return toString4(value).toUpperCase();
      }
      function trim2(string2, chars, guard) {
        string2 = toString4(string2);
        if (string2 && (guard || chars === undefined$12)) {
          return baseTrim2(string2);
        }
        if (!string2 || !(chars = baseToString2(chars))) {
          return string2;
        }
        var strSymbols = stringToArray2(string2), chrSymbols = stringToArray2(chars), start = charsStartIndex2(strSymbols, chrSymbols), end = charsEndIndex2(strSymbols, chrSymbols) + 1;
        return castSlice2(strSymbols, start, end).join("");
      }
      function trimEnd(string2, chars, guard) {
        string2 = toString4(string2);
        if (string2 && (guard || chars === undefined$12)) {
          return string2.slice(0, trimmedEndIndex2(string2) + 1);
        }
        if (!string2 || !(chars = baseToString2(chars))) {
          return string2;
        }
        var strSymbols = stringToArray2(string2), end = charsEndIndex2(strSymbols, stringToArray2(chars)) + 1;
        return castSlice2(strSymbols, 0, end).join("");
      }
      function trimStart(string2, chars, guard) {
        string2 = toString4(string2);
        if (string2 && (guard || chars === undefined$12)) {
          return string2.replace(reTrimStart2, "");
        }
        if (!string2 || !(chars = baseToString2(chars))) {
          return string2;
        }
        var strSymbols = stringToArray2(string2), start = charsStartIndex2(strSymbols, stringToArray2(chars));
        return castSlice2(strSymbols, start).join("");
      }
      function truncate(string2, options) {
        var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject2(options)) {
          var separator = "separator" in options ? options.separator : separator;
          length = "length" in options ? toInteger(options.length) : length;
          omission = "omission" in options ? baseToString2(options.omission) : omission;
        }
        string2 = toString4(string2);
        var strLength = string2.length;
        if (hasUnicode2(string2)) {
          var strSymbols = stringToArray2(string2);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string2;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result2 = strSymbols ? castSlice2(strSymbols, 0, end).join("") : string2.slice(0, end);
        if (separator === undefined$12) {
          return result2 + omission;
        }
        if (strSymbols) {
          end += result2.length - end;
        }
        if (isRegExp3(separator)) {
          if (string2.slice(end).search(separator)) {
            var match, substring = result2;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString4(reFlags2.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result2 = result2.slice(0, newEnd === undefined$12 ? end : newEnd);
          }
        } else if (string2.indexOf(baseToString2(separator), end) != end) {
          var index2 = result2.lastIndexOf(separator);
          if (index2 > -1) {
            result2 = result2.slice(0, index2);
          }
        }
        return result2 + omission;
      }
      function unescape2(string2) {
        string2 = toString4(string2);
        return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
      }
      var upperCase = createCompounder2(function(result2, word, index2) {
        return result2 + (index2 ? " " : "") + word.toUpperCase();
      });
      var upperFirst2 = createCaseFirst2("toUpperCase");
      function words2(string2, pattern, guard) {
        string2 = toString4(string2);
        pattern = guard ? undefined$12 : pattern;
        if (pattern === undefined$12) {
          return hasUnicodeWord2(string2) ? unicodeWords2(string2) : asciiWords2(string2);
        }
        return string2.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply2(func, undefined$12, args);
        } catch (e) {
          return isError2(e) ? e : new Error2(e);
        }
      });
      var bindAll = flatRest2(function(object2, methodNames) {
        arrayEach2(methodNames, function(key) {
          key = toKey2(key);
          baseAssignValue2(object2, key, bind3(object2[key], object2));
        });
        return object2;
      });
      function cond(pairs2) {
        var length = pairs2 == null ? 0 : pairs2.length, toIteratee = getIteratee();
        pairs2 = !length ? [] : arrayMap2(pairs2, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index2 = -1;
          while (++index2 < length) {
            var pair = pairs2[index2];
            if (apply2(pair[0], this, args)) {
              return apply2(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone2(source, CLONE_DEEP_FLAG2));
      }
      function constant2(value) {
        return function() {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity2(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee2(typeof func == "function" ? func : baseClone2(func, CLONE_DEEP_FLAG2));
      }
      function matches(source) {
        return baseMatches2(baseClone2(source, CLONE_DEEP_FLAG2));
      }
      function matchesProperty(path2, srcValue) {
        return baseMatchesProperty2(path2, baseClone2(srcValue, CLONE_DEEP_FLAG2));
      }
      var method = baseRest(function(path2, args) {
        return function(object2) {
          return baseInvoke(object2, path2, args);
        };
      });
      var methodOf = baseRest(function(object2, args) {
        return function(path2) {
          return baseInvoke(object2, path2, args);
        };
      });
      function mixin(object2, source, options) {
        var props = keys2(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object2;
          object2 = this;
          methodNames = baseFunctions(source, keys2(source));
        }
        var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction3(object2);
        arrayEach2(methodNames, function(methodName) {
          var func = source[methodName];
          object2[methodName] = func;
          if (isFunc) {
            object2.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result2 = object2(this.__wrapped__), actions2 = result2.__actions__ = copyArray2(this.__actions__);
                actions2.push({ "func": func, "args": arguments, "thisArg": object2 });
                result2.__chain__ = chainAll;
                return result2;
              }
              return func.apply(object2, arrayPush2([this.value()], arguments));
            };
          }
        });
        return object2;
      }
      function noConflict() {
        if (root2._ === this) {
          root2._ = oldDash;
        }
        return this;
      }
      function noop2() {
      }
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap2);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome2);
      function property2(path2) {
        return isKey2(path2) ? baseProperty2(toKey2(path2)) : basePropertyDeep2(path2);
      }
      function propertyOf(object2) {
        return function(path2) {
          return object2 == null ? undefined$12 : baseGet2(object2, path2);
        };
      }
      var range2 = createRange();
      var rangeRight = createRange(true);
      function stubArray2() {
        return [];
      }
      function stubFalse2() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee2) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER2) {
          return [];
        }
        var index2 = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n -= MAX_ARRAY_LENGTH;
        var result2 = baseTimes2(length, iteratee2);
        while (++index2 < n) {
          iteratee2(index2);
        }
        return result2;
      }
      function toPath(value) {
        if (isArray2(value)) {
          return arrayMap2(value, toKey2);
        }
        return isSymbol2(value) ? [value] : copyArray2(stringToPath3(toString4(value)));
      }
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString4(prefix) + id;
      }
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound("ceil");
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound("floor");
      function max2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseGt) : undefined$12;
      }
      function maxBy(array2, iteratee2) {
        return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined$12;
      }
      function mean(array2) {
        return baseMean(array2, identity2);
      }
      function meanBy(array2, iteratee2) {
        return baseMean(array2, getIteratee(iteratee2, 2));
      }
      function min(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseLt) : undefined$12;
      }
      function minBy(array2, iteratee2) {
        return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined$12;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound("round");
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum(array2) {
        return array2 && array2.length ? baseSum(array2, identity2) : 0;
      }
      function sumBy(array2, iteratee2) {
        return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
      }
      lodash2.after = after;
      lodash2.ary = ary;
      lodash2.assign = assign2;
      lodash2.assignIn = assignIn;
      lodash2.assignInWith = assignInWith;
      lodash2.assignWith = assignWith;
      lodash2.at = at;
      lodash2.before = before;
      lodash2.bind = bind3;
      lodash2.bindAll = bindAll;
      lodash2.bindKey = bindKey;
      lodash2.castArray = castArray2;
      lodash2.chain = chain;
      lodash2.chunk = chunk;
      lodash2.compact = compact3;
      lodash2.concat = concat;
      lodash2.cond = cond;
      lodash2.conforms = conforms;
      lodash2.constant = constant2;
      lodash2.countBy = countBy;
      lodash2.create = create2;
      lodash2.curry = curry;
      lodash2.curryRight = curryRight;
      lodash2.debounce = debounce;
      lodash2.defaults = defaults2;
      lodash2.defaultsDeep = defaultsDeep;
      lodash2.defer = defer;
      lodash2.delay = delay;
      lodash2.difference = difference;
      lodash2.differenceBy = differenceBy;
      lodash2.differenceWith = differenceWith;
      lodash2.drop = drop;
      lodash2.dropRight = dropRight;
      lodash2.dropRightWhile = dropRightWhile;
      lodash2.dropWhile = dropWhile;
      lodash2.fill = fill2;
      lodash2.filter = filter;
      lodash2.flatMap = flatMap;
      lodash2.flatMapDeep = flatMapDeep;
      lodash2.flatMapDepth = flatMapDepth;
      lodash2.flatten = flatten2;
      lodash2.flattenDeep = flattenDeep;
      lodash2.flattenDepth = flattenDepth;
      lodash2.flip = flip;
      lodash2.flow = flow;
      lodash2.flowRight = flowRight;
      lodash2.fromPairs = fromPairs2;
      lodash2.functions = functions;
      lodash2.functionsIn = functionsIn;
      lodash2.groupBy = groupBy;
      lodash2.initial = initial;
      lodash2.intersection = intersection;
      lodash2.intersectionBy = intersectionBy;
      lodash2.intersectionWith = intersectionWith;
      lodash2.invert = invert;
      lodash2.invertBy = invertBy;
      lodash2.invokeMap = invokeMap;
      lodash2.iteratee = iteratee;
      lodash2.keyBy = keyBy;
      lodash2.keys = keys2;
      lodash2.keysIn = keysIn2;
      lodash2.map = map2;
      lodash2.mapKeys = mapKeys2;
      lodash2.mapValues = mapValues2;
      lodash2.matches = matches;
      lodash2.matchesProperty = matchesProperty;
      lodash2.memoize = memoize2;
      lodash2.merge = merge3;
      lodash2.mergeWith = mergeWith;
      lodash2.method = method;
      lodash2.methodOf = methodOf;
      lodash2.mixin = mixin;
      lodash2.negate = negate;
      lodash2.nthArg = nthArg;
      lodash2.omit = omit2;
      lodash2.omitBy = omitBy;
      lodash2.once = once2;
      lodash2.orderBy = orderBy;
      lodash2.over = over;
      lodash2.overArgs = overArgs;
      lodash2.overEvery = overEvery;
      lodash2.overSome = overSome;
      lodash2.partial = partial;
      lodash2.partialRight = partialRight;
      lodash2.partition = partition;
      lodash2.pick = pick2;
      lodash2.pickBy = pickBy;
      lodash2.property = property2;
      lodash2.propertyOf = propertyOf;
      lodash2.pull = pull;
      lodash2.pullAll = pullAll;
      lodash2.pullAllBy = pullAllBy;
      lodash2.pullAllWith = pullAllWith;
      lodash2.pullAt = pullAt;
      lodash2.range = range2;
      lodash2.rangeRight = rangeRight;
      lodash2.rearg = rearg;
      lodash2.reject = reject;
      lodash2.remove = remove2;
      lodash2.rest = rest;
      lodash2.reverse = reverse;
      lodash2.sampleSize = sampleSize;
      lodash2.set = set2;
      lodash2.setWith = setWith;
      lodash2.shuffle = shuffle;
      lodash2.slice = slice;
      lodash2.sortBy = sortBy;
      lodash2.sortedUniq = sortedUniq;
      lodash2.sortedUniqBy = sortedUniqBy;
      lodash2.split = split2;
      lodash2.spread = spread;
      lodash2.tail = tail;
      lodash2.take = take;
      lodash2.takeRight = takeRight;
      lodash2.takeRightWhile = takeRightWhile;
      lodash2.takeWhile = takeWhile;
      lodash2.tap = tap;
      lodash2.throttle = throttle;
      lodash2.thru = thru;
      lodash2.toArray = toArray2;
      lodash2.toPairs = toPairs;
      lodash2.toPairsIn = toPairsIn;
      lodash2.toPath = toPath;
      lodash2.toPlainObject = toPlainObject;
      lodash2.transform = transform2;
      lodash2.unary = unary;
      lodash2.union = union;
      lodash2.unionBy = unionBy;
      lodash2.unionWith = unionWith;
      lodash2.uniq = uniq;
      lodash2.uniqBy = uniqBy;
      lodash2.uniqWith = uniqWith;
      lodash2.unset = unset;
      lodash2.unzip = unzip;
      lodash2.unzipWith = unzipWith;
      lodash2.update = update;
      lodash2.updateWith = updateWith;
      lodash2.values = values;
      lodash2.valuesIn = valuesIn;
      lodash2.without = without;
      lodash2.words = words2;
      lodash2.wrap = wrap;
      lodash2.xor = xor;
      lodash2.xorBy = xorBy;
      lodash2.xorWith = xorWith;
      lodash2.zip = zip2;
      lodash2.zipObject = zipObject;
      lodash2.zipObjectDeep = zipObjectDeep;
      lodash2.zipWith = zipWith;
      lodash2.entries = toPairs;
      lodash2.entriesIn = toPairsIn;
      lodash2.extend = assignIn;
      lodash2.extendWith = assignInWith;
      mixin(lodash2, lodash2);
      lodash2.add = add;
      lodash2.attempt = attempt;
      lodash2.camelCase = camelCase2;
      lodash2.capitalize = capitalize2;
      lodash2.ceil = ceil;
      lodash2.clamp = clamp;
      lodash2.clone = clone2;
      lodash2.cloneDeep = cloneDeep2;
      lodash2.cloneDeepWith = cloneDeepWith;
      lodash2.cloneWith = cloneWith;
      lodash2.conformsTo = conformsTo;
      lodash2.deburr = deburr2;
      lodash2.defaultTo = defaultTo;
      lodash2.divide = divide;
      lodash2.endsWith = endsWith;
      lodash2.eq = eq2;
      lodash2.escape = escape2;
      lodash2.escapeRegExp = escapeRegExp;
      lodash2.every = every;
      lodash2.find = find2;
      lodash2.findIndex = findIndex2;
      lodash2.findKey = findKey;
      lodash2.findLast = findLast;
      lodash2.findLastIndex = findLastIndex;
      lodash2.findLastKey = findLastKey;
      lodash2.floor = floor;
      lodash2.forEach = forEach2;
      lodash2.forEachRight = forEachRight;
      lodash2.forIn = forIn;
      lodash2.forInRight = forInRight;
      lodash2.forOwn = forOwn;
      lodash2.forOwnRight = forOwnRight;
      lodash2.get = get2;
      lodash2.gt = gt;
      lodash2.gte = gte;
      lodash2.has = has2;
      lodash2.hasIn = hasIn2;
      lodash2.head = head;
      lodash2.identity = identity2;
      lodash2.includes = includes;
      lodash2.indexOf = indexOf2;
      lodash2.inRange = inRange;
      lodash2.invoke = invoke;
      lodash2.isArguments = isArguments2;
      lodash2.isArray = isArray2;
      lodash2.isArrayBuffer = isArrayBuffer;
      lodash2.isArrayLike = isArrayLike2;
      lodash2.isArrayLikeObject = isArrayLikeObject;
      lodash2.isBoolean = isBoolean2;
      lodash2.isBuffer = isBuffer3;
      lodash2.isDate = isDate2;
      lodash2.isElement = isElement2;
      lodash2.isEmpty = isEmpty2;
      lodash2.isEqual = isEqual2;
      lodash2.isEqualWith = isEqualWith;
      lodash2.isError = isError2;
      lodash2.isFinite = isFinite2;
      lodash2.isFunction = isFunction3;
      lodash2.isInteger = isInteger2;
      lodash2.isLength = isLength2;
      lodash2.isMap = isMap2;
      lodash2.isMatch = isMatch;
      lodash2.isMatchWith = isMatchWith;
      lodash2.isNaN = isNaN2;
      lodash2.isNative = isNative;
      lodash2.isNil = isNil;
      lodash2.isNull = isNull2;
      lodash2.isNumber = isNumber2;
      lodash2.isObject = isObject2;
      lodash2.isObjectLike = isObjectLike2;
      lodash2.isPlainObject = isPlainObject2;
      lodash2.isRegExp = isRegExp3;
      lodash2.isSafeInteger = isSafeInteger;
      lodash2.isSet = isSet2;
      lodash2.isString = isString2;
      lodash2.isSymbol = isSymbol2;
      lodash2.isTypedArray = isTypedArray2;
      lodash2.isUndefined = isUndefined2;
      lodash2.isWeakMap = isWeakMap2;
      lodash2.isWeakSet = isWeakSet2;
      lodash2.join = join;
      lodash2.kebabCase = kebabCase;
      lodash2.last = last2;
      lodash2.lastIndexOf = lastIndexOf;
      lodash2.lowerCase = lowerCase;
      lodash2.lowerFirst = lowerFirst;
      lodash2.lt = lt;
      lodash2.lte = lte;
      lodash2.max = max2;
      lodash2.maxBy = maxBy;
      lodash2.mean = mean;
      lodash2.meanBy = meanBy;
      lodash2.min = min;
      lodash2.minBy = minBy;
      lodash2.stubArray = stubArray2;
      lodash2.stubFalse = stubFalse2;
      lodash2.stubObject = stubObject;
      lodash2.stubString = stubString;
      lodash2.stubTrue = stubTrue;
      lodash2.multiply = multiply;
      lodash2.nth = nth;
      lodash2.noConflict = noConflict;
      lodash2.noop = noop2;
      lodash2.now = now;
      lodash2.pad = pad2;
      lodash2.padEnd = padEnd;
      lodash2.padStart = padStart;
      lodash2.parseInt = parseInt2;
      lodash2.random = random;
      lodash2.reduce = reduce;
      lodash2.reduceRight = reduceRight;
      lodash2.repeat = repeat3;
      lodash2.replace = replace2;
      lodash2.result = result;
      lodash2.round = round;
      lodash2.runInContext = runInContext2;
      lodash2.sample = sample;
      lodash2.size = size;
      lodash2.snakeCase = snakeCase2;
      lodash2.some = some;
      lodash2.sortedIndex = sortedIndex;
      lodash2.sortedIndexBy = sortedIndexBy;
      lodash2.sortedIndexOf = sortedIndexOf;
      lodash2.sortedLastIndex = sortedLastIndex;
      lodash2.sortedLastIndexBy = sortedLastIndexBy;
      lodash2.sortedLastIndexOf = sortedLastIndexOf;
      lodash2.startCase = startCase;
      lodash2.startsWith = startsWith;
      lodash2.subtract = subtract;
      lodash2.sum = sum;
      lodash2.sumBy = sumBy;
      lodash2.template = template;
      lodash2.times = times;
      lodash2.toFinite = toFinite;
      lodash2.toInteger = toInteger;
      lodash2.toLength = toLength;
      lodash2.toLower = toLower;
      lodash2.toNumber = toNumber;
      lodash2.toSafeInteger = toSafeInteger;
      lodash2.toString = toString4;
      lodash2.toUpper = toUpper;
      lodash2.trim = trim2;
      lodash2.trimEnd = trimEnd;
      lodash2.trimStart = trimStart;
      lodash2.truncate = truncate;
      lodash2.unescape = unescape2;
      lodash2.uniqueId = uniqueId;
      lodash2.upperCase = upperCase;
      lodash2.upperFirst = upperFirst2;
      lodash2.each = forEach2;
      lodash2.eachRight = forEachRight;
      lodash2.first = head;
      mixin(lodash2, function() {
        var source = {};
        baseForOwn2(lodash2, function(func, methodName) {
          if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), { "chain": false });
      lodash2.VERSION = VERSION;
      arrayEach2(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash2[methodName].placeholder = lodash2;
      });
      arrayEach2(["drop", "take"], function(methodName, index2) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined$12 ? 1 : nativeMax2(toInteger(n), 0);
          var result2 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
          if (result2.__filtered__) {
            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
          } else {
            result2.__views__.push({
              "size": nativeMin(n, MAX_ARRAY_LENGTH),
              "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
            });
          }
          return result2;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach2(["filter", "map", "takeWhile"], function(methodName, index2) {
        var type2 = index2 + 1, isFilter = type2 == LAZY_FILTER_FLAG || type2 == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result2 = this.clone();
          result2.__iteratees__.push({
            "iteratee": getIteratee(iteratee2, 3),
            "type": type2
          });
          result2.__filtered__ = result2.__filtered__ || isFilter;
          return result2;
        };
      });
      arrayEach2(["head", "last"], function(methodName, index2) {
        var takeName = "take" + (index2 ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach2(["initial", "tail"], function(methodName, index2) {
        var dropName = "drop" + (index2 ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity2);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path2, args) {
        if (typeof path2 == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path2, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
        var result2 = this;
        if (result2.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result2);
        }
        if (start < 0) {
          result2 = result2.takeRight(-start);
        } else if (start) {
          result2 = result2.drop(start);
        }
        if (end !== undefined$12) {
          end = toInteger(end);
          result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
        }
        return result2;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash2.prototype[methodName] = function() {
          var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
          var interceptor = function(value2) {
            var result3 = lodashFunc.apply(lodash2, arrayPush2([value2], args));
            return isTaker && chainAll ? result3[0] : result3;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result2 = func.apply(value, args);
            result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$12 });
            return new LodashWrapper(result2, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result2 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
        };
      });
      arrayEach2(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto2[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash2.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray2(value) ? value : [], args);
          }
          return this[chainName](function(value2) {
            return func.apply(isArray2(value2) ? value2 : [], args);
          });
        };
      });
      baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash2[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + "";
          if (!hasOwnProperty2.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ "name": methodName, "func": lodashFunc });
        }
      });
      realNames[createHybrid(undefined$12, WRAP_BIND_KEY_FLAG).name] = [{
        "name": "wrapper",
        "func": undefined$12
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash2.prototype.at = wrapperAt;
      lodash2.prototype.chain = wrapperChain;
      lodash2.prototype.commit = wrapperCommit;
      lodash2.prototype.next = wrapperNext;
      lodash2.prototype.plant = wrapperPlant;
      lodash2.prototype.reverse = wrapperReverse;
      lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
      lodash2.prototype.first = lodash2.prototype.head;
      if (symIterator) {
        lodash2.prototype[symIterator] = wrapperToIterator;
      }
      return lodash2;
    };
    var _2 = runInContext();
    if (freeModule) {
      (freeModule.exports = _2)._ = _2;
      freeExports._ = _2;
    } else {
      root2._ = _2;
    }
  }).call(commonjsGlobal);
})(lodash, lodash.exports);
var lodashExports = lodash.exports;
const ___default = /* @__PURE__ */ getDefaultExportFromCjs(lodashExports);
const errorCodes = {};
const errorMessages = {};
Object.keys(errorMessages).forEach(
  (k) => errorMessages[k] = ___default.template(errorMessages[k], {
    interpolate: /\{\s*(\S+)\s*\}/g
  })
);
class BusinessError extends Error {
  constructor(errorCodeOrMessage, interpolations) {
    const isErrorCode = !!errorCodes[errorCodeOrMessage];
    super(isErrorCode ? errorMessages[errorCodeOrMessage](interpolations) : errorCodeOrMessage);
    this.name = this.constructor.name;
    this.code = isErrorCode ? errorCodeOrMessage : "UNDEFINED";
  }
}
const checkParams = (schema2, obj, options = {}) => {
  const allowUnknown = options.allowUnknown || false;
  const validation = schema2.validate(obj, {
    abortEarly: false,
    allowUnknown
  });
  if (validation.error) {
    const error2 = validation.error.details.map((detail) => detail.message).join(", ");
    throw new BusinessError(error2);
  }
  return validation.value;
};
const handleAsyncError = (fn) => async (ctx) => {
  try {
    const res = await fn(ctx);
    return res;
  } catch (err) {
    strapi.log.error(err);
    if (err instanceof BusinessError) {
      ctx.status = 400;
      ctx.body = {
        message: err.message,
        code: err.code
      };
    } else {
      throw err;
    }
  }
};
const exportData$2 = async (ctx) => {
  if (!hasPermissions$1(ctx)) {
    return ctx.forbidden();
  }
  let data;
  const { data: dataRaw } = ctx.request.body;
  const { slug, search, applySearch, exportFormat, relationsAsId, deepness = 5, exportPluginsContentTypes } = dataRaw;
  if (exportFormat === getService("export").formats.JSON_V2) {
    data = await getService("export").exportDataV2({ slug, search, applySearch, deepness, exportPluginsContentTypes });
  } else {
    data = await getService("export").exportData({ slug, search, applySearch, exportFormat, relationsAsId, deepness });
  }
  ctx.body = {
    data
  };
};
const hasPermissions$1 = (ctx) => {
  const { data } = ctx.request.body;
  const { slug } = data;
  const { userAbility } = ctx.state;
  const slugs = slug === CustomSlugs.WHOLE_DB ? getAllSlugs() : [slug];
  const allowedSlugs = slugs.filter((slug2) => {
    const permissionChecker = strapi.plugin("content-manager").service("permission-checker").create({ userAbility, model: slug2 });
    return permissionChecker.can.read();
  });
  return !!allowedSlugs.length;
};
const exportAdminController = ({ strapi: strapi2 }) => ({
  exportData: handleAsyncError(exportData$2)
});
const getModelAttributesEndpoint = async (ctx) => {
  const { slug } = ctx.params;
  const attributeNames = getModelAttributes(slug).filter(filterAttribute).map((attr) => attr.name);
  attributeNames.unshift("id");
  ctx.body = {
    data: {
      attribute_names: attributeNames
    }
  };
};
const filterAttribute = (attr) => {
  const filters2 = [filterType, filterName];
  return filters2.every((filter) => filter(attr));
};
const filterType = (attr) => !["relation", "component", "dynamiczone"].includes(attr.type);
const filterName = (attr) => !["createdAt", "updatedAt", "publishedAt", "locale"].includes(attr.name);
const getModelAttributesFunc = ({ strapi: strapi2 }) => getModelAttributesEndpoint;
const importDataFunc = ({ strapi: strapi2 }) => importData$3;
async function importData$3(ctx) {
  if (!hasPermissions(ctx)) {
    return ctx.forbidden();
  }
  const { user } = ctx.state;
  const { data } = ctx.request.body;
  const { slug, data: dataRaw, format, idField } = data;
  const fileContent = await getService("import").parseInputData(format, dataRaw, { slug });
  let res;
  if (fileContent?.version === 2) {
    res = await getService("import").importDataV2(fileContent, {
      slug,
      user,
      idField
    });
  } else {
    res = await getService("import").importData(dataRaw, {
      slug,
      format,
      user,
      idField
    });
  }
  ctx.body = {
    failures: res.failures
  };
}
function hasPermissions(ctx) {
  const { data } = ctx.request.body;
  const { slug } = data;
  const { userAbility } = ctx.state;
  let slugsToCheck = [];
  if (slug === CustomSlugs.WHOLE_DB) {
    slugsToCheck.push(...getAllSlugs());
  } else {
    slugsToCheck.push(slug);
  }
  return slugsToCheck.every((slug2) => hasPermissionForSlug(userAbility, slug2));
}
function hasPermissionForSlug(userAbility, slug) {
  const permissionChecker = strapi.plugin("content-manager").service("permission-checker").create({ userAbility, model: slug });
  return permissionChecker.can.create() && permissionChecker.can.update();
}
const importController = ({ strapi: strapi2 }) => ({
  getModelAttributes: getModelAttributesFunc({ strapi: strapi2 }),
  importData: importDataFunc({ strapi: strapi2 })
});
const bodySchema$1 = Joi.object({
  slug: Joi.string().required(),
  exportFormat: Joi.string().valid("csv", "json", "json-v2").required(),
  search: Joi.string().default(""),
  applySearch: Joi.boolean().default(false),
  relationsAsId: Joi.boolean().default(false),
  deepness: Joi.number().integer().min(1).default(5),
  exportPluginsContentTypes: Joi.boolean().default(false)
});
const exportData$1 = async (ctx) => {
  let { slug, search, applySearch, exportFormat, relationsAsId, deepness, exportPluginsContentTypes } = checkParams(bodySchema$1, ctx.request.body);
  let data;
  if (exportFormat === getService("export").formats.JSON_V2) {
    data = await getService("export").exportDataV2({ slug, search, applySearch, deepness, exportPluginsContentTypes });
  } else {
    data = await getService("export").exportData({ slug, search, applySearch, exportFormat, relationsAsId, deepness });
  }
  ctx.body = {
    data
  };
};
const exportContentApiController = ({ strapi: strapi2 }) => ({
  exportData: handleAsyncError(exportData$1)
});
var isMergeableObject = function isMergeableObject2(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === "function" ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    return Object.propertyIsEnumerable.call(target, symbol);
  }) : [];
}
function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object2, property2) {
  try {
    return property2 in object2;
  } catch (_2) {
    return false;
  }
}
function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  getKeys(source).forEach(function(key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }
    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll(array2, options) {
  if (!Array.isArray(array2)) {
    throw new Error("first argument should be an array");
  }
  return array2.reduce(function(prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var cjs = deepmerge_1;
const deepmerge$1 = /* @__PURE__ */ getDefaultExportFromCjs(cjs);
class ObjectBuilder {
  constructor() {
    this._obj = {};
  }
  get() {
    return this._obj;
  }
  extend(obj) {
    if (isObjectSafe(obj)) {
      this._obj = { ...this._obj, ...obj };
    }
  }
}
const isObjectSafe = (val) => {
  return val && !Array.isArray(val) && typeof val === "object";
};
const mergeObjects = (x, y) => {
  return deepmerge$1(x, y, {
    arrayMerge: (target, source) => {
      source.forEach((item) => {
        if (target.indexOf(item) === -1) {
          target.push(item);
        }
      });
      return target;
    }
  });
};
const inputFormatToParser = {
  csv: parseCsv,
  jso: parseJso,
  json: parseJson
};
const InputFormats = Object.keys(inputFormatToParser);
async function parseInputData(format, dataRaw, { slug }) {
  const parser = inputFormatToParser[format];
  if (!parser) {
    throw new Error(`Data input format ${format} is not supported.`);
  }
  const data = await parser(dataRaw, { slug });
  return data;
}
async function parseCsv(dataRaw, { slug }) {
  let data = await csvtojson().fromString(dataRaw);
  const relationNames = getModelAttributes(slug, { filterType: ["component", "dynamiczone", "media", "relation"] }).map((a) => a.name);
  data = data.map((datum) => {
    for (let name of relationNames) {
      try {
        datum[name] = JSON.parse(datum[name]);
      } catch (err) {
        strapi.log.error(err);
      }
    }
    return datum;
  });
  return data;
}
async function parseJson(dataRaw) {
  let data = JSON.parse(dataRaw);
  return data;
}
async function parseJso(dataRaw) {
  if (!isObjectSafe(dataRaw) && !isArraySafe(dataRaw)) {
    throw new Error(`To import JSO, data must be an array or an object`);
  }
  return dataRaw;
}
const bodySchema = Joi.object({
  slug: Joi.string().required(),
  data: Joi.any().required(),
  format: Joi.string().valid(...InputFormats).required(),
  idField: Joi.string()
});
const importData$1 = async (ctx) => {
  const { user } = ctx.state;
  const { slug, data: dataRaw, format, idField } = checkParams(bodySchema, ctx.request.body);
  const fileContent = await getService("import").parseInputData(format, dataRaw, { slug });
  let res;
  if (fileContent?.version === 2) {
    res = await getService("import").importDataV2(fileContent, {
      slug,
      user,
      idField
    });
  } else {
    res = await getService("import").importData(dataRaw, {
      slug,
      format,
      user,
      idField
    });
  }
  ctx.body = {
    failures: res.failures
  };
};
const importData$2 = ({ strapi: strapi2 }) => handleAsyncError(importData$1);
const importContentApiController = ({ strapi: strapi2 }) => ({
  importData: importData$2({ strapi: strapi2 })
});
const controllers = {
  exportAdmin: exportAdminController,
  importAdmin: importController,
  export: exportContentApiController,
  import: importContentApiController
};
const middlewares = {};
const policies = {};
const exportAdminRoutes = {
  type: "admin",
  routes: [
    {
      method: "POST",
      path: "/export/contentTypes",
      handler: "exportAdmin.exportData",
      config: {
        policies: []
      }
    }
  ]
};
const importAdminRoutes = {
  type: "admin",
  routes: [
    {
      method: "GET",
      path: "/import/model-attributes/:slug",
      handler: "importAdmin.getModelAttributes",
      config: {
        policies: []
      }
    },
    {
      method: "POST",
      path: "/import",
      handler: "importAdmin.importData",
      config: {
        policies: []
      }
    }
  ]
};
const exportContentApiRoutes = {
  type: "content-api",
  routes: [
    {
      method: "POST",
      path: "/content/export/contentTypes",
      handler: "export.exportData",
      config: {
        policies: []
      }
    }
  ]
};
const importContentApiRoutes = {
  type: "content-api",
  routes: [
    {
      method: "POST",
      path: "/content/import",
      handler: "import.importData",
      config: {
        policies: []
      }
    }
  ]
};
const routes = {
  exportAdminRoutes,
  importAdminRoutes,
  export: exportContentApiRoutes,
  import: importContentApiRoutes
};
var lodash_min = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_min.exports;
(function(module, exports) {
  (function() {
    function n(n2, t2, r2) {
      switch (r2.length) {
        case 0:
          return n2.call(t2);
        case 1:
          return n2.call(t2, r2[0]);
        case 2:
          return n2.call(t2, r2[0], r2[1]);
        case 3:
          return n2.call(t2, r2[0], r2[1], r2[2]);
      }
      return n2.apply(t2, r2);
    }
    function t(n2, t2, r2, e2) {
      for (var u3 = -1, i2 = null == n2 ? 0 : n2.length; ++u3 < i2; ) {
        var o2 = n2[u3];
        t2(e2, o2, r2(o2), n2);
      }
      return e2;
    }
    function r(n2, t2) {
      for (var r2 = -1, e2 = null == n2 ? 0 : n2.length; ++r2 < e2 && t2(n2[r2], r2, n2) !== false; )
        ;
      return n2;
    }
    function e(n2, t2) {
      for (var r2 = null == n2 ? 0 : n2.length; r2-- && t2(n2[r2], r2, n2) !== false; )
        ;
      return n2;
    }
    function u2(n2, t2) {
      for (var r2 = -1, e2 = null == n2 ? 0 : n2.length; ++r2 < e2; )
        if (!t2(n2[r2], r2, n2))
          return false;
      return true;
    }
    function i(n2, t2) {
      for (var r2 = -1, e2 = null == n2 ? 0 : n2.length, u3 = 0, i2 = []; ++r2 < e2; ) {
        var o2 = n2[r2];
        t2(o2, r2, n2) && (i2[u3++] = o2);
      }
      return i2;
    }
    function o(n2, t2) {
      return !!(null == n2 ? 0 : n2.length) && y(n2, t2, 0) > -1;
    }
    function f(n2, t2, r2) {
      for (var e2 = -1, u3 = null == n2 ? 0 : n2.length; ++e2 < u3; )
        if (r2(t2, n2[e2]))
          return true;
      return false;
    }
    function c(n2, t2) {
      for (var r2 = -1, e2 = null == n2 ? 0 : n2.length, u3 = Array(e2); ++r2 < e2; )
        u3[r2] = t2(n2[r2], r2, n2);
      return u3;
    }
    function a(n2, t2) {
      for (var r2 = -1, e2 = t2.length, u3 = n2.length; ++r2 < e2; )
        n2[u3 + r2] = t2[r2];
      return n2;
    }
    function l(n2, t2, r2, e2) {
      var u3 = -1, i2 = null == n2 ? 0 : n2.length;
      for (e2 && i2 && (r2 = n2[++u3]); ++u3 < i2; )
        r2 = t2(r2, n2[u3], u3, n2);
      return r2;
    }
    function s(n2, t2, r2, e2) {
      var u3 = null == n2 ? 0 : n2.length;
      for (e2 && u3 && (r2 = n2[--u3]); u3--; )
        r2 = t2(r2, n2[u3], u3, n2);
      return r2;
    }
    function h(n2, t2) {
      for (var r2 = -1, e2 = null == n2 ? 0 : n2.length; ++r2 < e2; )
        if (t2(n2[r2], r2, n2))
          return true;
      return false;
    }
    function p(n2) {
      return n2.split("");
    }
    function _2(n2) {
      return n2.match($t) || [];
    }
    function v(n2, t2, r2) {
      var e2;
      return r2(n2, function(n3, r3, u3) {
        if (t2(n3, r3, u3))
          return e2 = r3, false;
      }), e2;
    }
    function g(n2, t2, r2, e2) {
      for (var u3 = n2.length, i2 = r2 + (e2 ? 1 : -1); e2 ? i2-- : ++i2 < u3; )
        if (t2(n2[i2], i2, n2))
          return i2;
      return -1;
    }
    function y(n2, t2, r2) {
      return t2 === t2 ? Z(n2, t2, r2) : g(n2, b, r2);
    }
    function d(n2, t2, r2, e2) {
      for (var u3 = r2 - 1, i2 = n2.length; ++u3 < i2; )
        if (e2(n2[u3], t2))
          return u3;
      return -1;
    }
    function b(n2) {
      return n2 !== n2;
    }
    function w(n2, t2) {
      var r2 = null == n2 ? 0 : n2.length;
      return r2 ? k(n2, t2) / r2 : Cn;
    }
    function m(n2) {
      return function(t2) {
        return null == t2 ? X : t2[n2];
      };
    }
    function x(n2) {
      return function(t2) {
        return null == n2 ? X : n2[t2];
      };
    }
    function j(n2, t2, r2, e2, u3) {
      return u3(n2, function(n3, u4, i2) {
        r2 = e2 ? (e2 = false, n3) : t2(r2, n3, u4, i2);
      }), r2;
    }
    function A(n2, t2) {
      var r2 = n2.length;
      for (n2.sort(t2); r2--; )
        n2[r2] = n2[r2].value;
      return n2;
    }
    function k(n2, t2) {
      for (var r2, e2 = -1, u3 = n2.length; ++e2 < u3; ) {
        var i2 = t2(n2[e2]);
        i2 !== X && (r2 = r2 === X ? i2 : r2 + i2);
      }
      return r2;
    }
    function O(n2, t2) {
      for (var r2 = -1, e2 = Array(n2); ++r2 < n2; )
        e2[r2] = t2(r2);
      return e2;
    }
    function I(n2, t2) {
      return c(t2, function(t3) {
        return [t3, n2[t3]];
      });
    }
    function R(n2) {
      return n2 ? n2.slice(0, H(n2) + 1).replace(Lt, "") : n2;
    }
    function z(n2) {
      return function(t2) {
        return n2(t2);
      };
    }
    function E(n2, t2) {
      return c(t2, function(t3) {
        return n2[t3];
      });
    }
    function S(n2, t2) {
      return n2.has(t2);
    }
    function W(n2, t2) {
      for (var r2 = -1, e2 = n2.length; ++r2 < e2 && y(t2, n2[r2], 0) > -1; )
        ;
      return r2;
    }
    function L(n2, t2) {
      for (var r2 = n2.length; r2-- && y(t2, n2[r2], 0) > -1; )
        ;
      return r2;
    }
    function C(n2, t2) {
      for (var r2 = n2.length, e2 = 0; r2--; )
        n2[r2] === t2 && ++e2;
      return e2;
    }
    function U(n2) {
      return "\\" + Yr[n2];
    }
    function B(n2, t2) {
      return null == n2 ? X : n2[t2];
    }
    function T(n2) {
      return Nr.test(n2);
    }
    function $(n2) {
      return Pr.test(n2);
    }
    function D(n2) {
      for (var t2, r2 = []; !(t2 = n2.next()).done; )
        r2.push(t2.value);
      return r2;
    }
    function M(n2) {
      var t2 = -1, r2 = Array(n2.size);
      return n2.forEach(function(n3, e2) {
        r2[++t2] = [e2, n3];
      }), r2;
    }
    function F(n2, t2) {
      return function(r2) {
        return n2(t2(r2));
      };
    }
    function N(n2, t2) {
      for (var r2 = -1, e2 = n2.length, u3 = 0, i2 = []; ++r2 < e2; ) {
        var o2 = n2[r2];
        o2 !== t2 && o2 !== cn || (n2[r2] = cn, i2[u3++] = r2);
      }
      return i2;
    }
    function P(n2) {
      var t2 = -1, r2 = Array(n2.size);
      return n2.forEach(function(n3) {
        r2[++t2] = n3;
      }), r2;
    }
    function q(n2) {
      var t2 = -1, r2 = Array(n2.size);
      return n2.forEach(function(n3) {
        r2[++t2] = [n3, n3];
      }), r2;
    }
    function Z(n2, t2, r2) {
      for (var e2 = r2 - 1, u3 = n2.length; ++e2 < u3; )
        if (n2[e2] === t2)
          return e2;
      return -1;
    }
    function K(n2, t2, r2) {
      for (var e2 = r2 + 1; e2--; )
        if (n2[e2] === t2)
          return e2;
      return e2;
    }
    function V(n2) {
      return T(n2) ? J(n2) : _e(n2);
    }
    function G(n2) {
      return T(n2) ? Y(n2) : p(n2);
    }
    function H(n2) {
      for (var t2 = n2.length; t2-- && Ct.test(n2.charAt(t2)); )
        ;
      return t2;
    }
    function J(n2) {
      for (var t2 = Mr.lastIndex = 0; Mr.test(n2); )
        ++t2;
      return t2;
    }
    function Y(n2) {
      return n2.match(Mr) || [];
    }
    function Q(n2) {
      return n2.match(Fr) || [];
    }
    var X, nn = "4.17.21", tn = 200, rn = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", en = "Expected a function", un = "Invalid `variable` option passed into `_.template`", on = "__lodash_hash_undefined__", fn = 500, cn = "__lodash_placeholder__", an = 1, ln = 2, sn = 4, hn = 1, pn = 2, _n = 1, vn = 2, gn = 4, yn = 8, dn = 16, bn = 32, wn = 64, mn = 128, xn = 256, jn = 512, An = 30, kn = "...", On = 800, In = 16, Rn = 1, zn = 2, En = 3, Sn = 1 / 0, Wn = 9007199254740991, Ln = 17976931348623157e292, Cn = NaN, Un = 4294967295, Bn = Un - 1, Tn = Un >>> 1, $n = [["ary", mn], ["bind", _n], ["bindKey", vn], ["curry", yn], ["curryRight", dn], ["flip", jn], ["partial", bn], ["partialRight", wn], ["rearg", xn]], Dn = "[object Arguments]", Mn = "[object Array]", Fn = "[object AsyncFunction]", Nn = "[object Boolean]", Pn = "[object Date]", qn = "[object DOMException]", Zn = "[object Error]", Kn = "[object Function]", Vn = "[object GeneratorFunction]", Gn = "[object Map]", Hn = "[object Number]", Jn = "[object Null]", Yn = "[object Object]", Qn = "[object Promise]", Xn = "[object Proxy]", nt = "[object RegExp]", tt = "[object Set]", rt = "[object String]", et = "[object Symbol]", ut = "[object Undefined]", it = "[object WeakMap]", ot = "[object WeakSet]", ft = "[object ArrayBuffer]", ct = "[object DataView]", at = "[object Float32Array]", lt = "[object Float64Array]", st = "[object Int8Array]", ht = "[object Int16Array]", pt = "[object Int32Array]", _t = "[object Uint8Array]", vt = "[object Uint8ClampedArray]", gt = "[object Uint16Array]", yt = "[object Uint32Array]", dt = /\b__p \+= '';/g, bt = /\b(__p \+=) '' \+/g, wt = /(__e\(.*?\)|\b__t\)) \+\n'';/g, mt = /&(?:amp|lt|gt|quot|#39);/g, xt = /[&<>"']/g, jt = RegExp(mt.source), At = RegExp(xt.source), kt = /<%-([\s\S]+?)%>/g, Ot = /<%([\s\S]+?)%>/g, It = /<%=([\s\S]+?)%>/g, Rt = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, zt = /^\w*$/, Et = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, St = /[\\^$.*+?()[\]{}|]/g, Wt = RegExp(St.source), Lt = /^\s+/, Ct = /\s/, Ut = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, Bt = /\{\n\/\* \[wrapped with (.+)\] \*/, Tt = /,? & /, $t = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, Dt = /[()=,{}\[\]\/\s]/, Mt = /\\(\\)?/g, Ft = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, Nt = /\w*$/, Pt = /^[-+]0x[0-9a-f]+$/i, qt = /^0b[01]+$/i, Zt = /^\[object .+?Constructor\]$/, Kt = /^0o[0-7]+$/i, Vt = /^(?:0|[1-9]\d*)$/, Gt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, Ht = /($^)/, Jt = /['\n\r\u2028\u2029\\]/g, Yt = "\\ud800-\\udfff", Qt = "\\u0300-\\u036f", Xt = "\\ufe20-\\ufe2f", nr = "\\u20d0-\\u20ff", tr = Qt + Xt + nr, rr = "\\u2700-\\u27bf", er = "a-z\\xdf-\\xf6\\xf8-\\xff", ur = "\\xac\\xb1\\xd7\\xf7", ir = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", or = "\\u2000-\\u206f", fr = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", cr = "A-Z\\xc0-\\xd6\\xd8-\\xde", ar = "\\ufe0e\\ufe0f", lr = ur + ir + or + fr, sr = "['’]", hr = "[" + Yt + "]", pr = "[" + lr + "]", _r = "[" + tr + "]", vr = "\\d+", gr = "[" + rr + "]", yr = "[" + er + "]", dr = "[^" + Yt + lr + vr + rr + er + cr + "]", br = "\\ud83c[\\udffb-\\udfff]", wr = "(?:" + _r + "|" + br + ")", mr = "[^" + Yt + "]", xr = "(?:\\ud83c[\\udde6-\\uddff]){2}", jr = "[\\ud800-\\udbff][\\udc00-\\udfff]", Ar = "[" + cr + "]", kr = "\\u200d", Or = "(?:" + yr + "|" + dr + ")", Ir = "(?:" + Ar + "|" + dr + ")", Rr = "(?:" + sr + "(?:d|ll|m|re|s|t|ve))?", zr = "(?:" + sr + "(?:D|LL|M|RE|S|T|VE))?", Er = wr + "?", Sr = "[" + ar + "]?", Wr = "(?:" + kr + "(?:" + [mr, xr, jr].join("|") + ")" + Sr + Er + ")*", Lr = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", Cr = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", Ur = Sr + Er + Wr, Br = "(?:" + [gr, xr, jr].join("|") + ")" + Ur, Tr = "(?:" + [mr + _r + "?", _r, xr, jr, hr].join("|") + ")", $r = RegExp(sr, "g"), Dr = RegExp(_r, "g"), Mr = RegExp(br + "(?=" + br + ")|" + Tr + Ur, "g"), Fr = RegExp([Ar + "?" + yr + "+" + Rr + "(?=" + [pr, Ar, "$"].join("|") + ")", Ir + "+" + zr + "(?=" + [pr, Ar + Or, "$"].join("|") + ")", Ar + "?" + Or + "+" + Rr, Ar + "+" + zr, Cr, Lr, vr, Br].join("|"), "g"), Nr = RegExp("[" + kr + Yt + tr + ar + "]"), Pr = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, qr = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"], Zr = -1, Kr = {};
    Kr[at] = Kr[lt] = Kr[st] = Kr[ht] = Kr[pt] = Kr[_t] = Kr[vt] = Kr[gt] = Kr[yt] = true, Kr[Dn] = Kr[Mn] = Kr[ft] = Kr[Nn] = Kr[ct] = Kr[Pn] = Kr[Zn] = Kr[Kn] = Kr[Gn] = Kr[Hn] = Kr[Yn] = Kr[nt] = Kr[tt] = Kr[rt] = Kr[it] = false;
    var Vr = {};
    Vr[Dn] = Vr[Mn] = Vr[ft] = Vr[ct] = Vr[Nn] = Vr[Pn] = Vr[at] = Vr[lt] = Vr[st] = Vr[ht] = Vr[pt] = Vr[Gn] = Vr[Hn] = Vr[Yn] = Vr[nt] = Vr[tt] = Vr[rt] = Vr[et] = Vr[_t] = Vr[vt] = Vr[gt] = Vr[yt] = true, Vr[Zn] = Vr[Kn] = Vr[it] = false;
    var Gr = {
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    }, Hr = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }, Jr = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" }, Yr = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" }, Qr = parseFloat, Xr = parseInt, ne = "object" == typeof commonjsGlobal && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal, te = "object" == typeof self && self && self.Object === Object && self, re = ne || te || Function("return this")(), ee = exports && !exports.nodeType && exports, ue = ee && true && module && !module.nodeType && module, ie = ue && ue.exports === ee, oe = ie && ne.process, fe = function() {
      try {
        var n2 = ue && ue.require && ue.require("util").types;
        return n2 ? n2 : oe && oe.binding && oe.binding("util");
      } catch (n3) {
      }
    }(), ce = fe && fe.isArrayBuffer, ae = fe && fe.isDate, le = fe && fe.isMap, se = fe && fe.isRegExp, he = fe && fe.isSet, pe = fe && fe.isTypedArray, _e = m("length"), ve = x(Gr), ge = x(Hr), ye = x(Jr), de = function p2(x2) {
      function Z2(n2) {
        if (cc(n2) && !bh(n2) && !(n2 instanceof Ct2)) {
          if (n2 instanceof Y2)
            return n2;
          if (bl.call(n2, "__wrapped__"))
            return eo(n2);
        }
        return new Y2(n2);
      }
      function J2() {
      }
      function Y2(n2, t2) {
        this.__wrapped__ = n2, this.__actions__ = [], this.__chain__ = !!t2, this.__index__ = 0, this.__values__ = X;
      }
      function Ct2(n2) {
        this.__wrapped__ = n2, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = Un, this.__views__ = [];
      }
      function $t2() {
        var n2 = new Ct2(this.__wrapped__);
        return n2.__actions__ = Tu(this.__actions__), n2.__dir__ = this.__dir__, n2.__filtered__ = this.__filtered__, n2.__iteratees__ = Tu(this.__iteratees__), n2.__takeCount__ = this.__takeCount__, n2.__views__ = Tu(this.__views__), n2;
      }
      function Yt2() {
        if (this.__filtered__) {
          var n2 = new Ct2(this);
          n2.__dir__ = -1, n2.__filtered__ = true;
        } else
          n2 = this.clone(), n2.__dir__ *= -1;
        return n2;
      }
      function Qt2() {
        var n2 = this.__wrapped__.value(), t2 = this.__dir__, r2 = bh(n2), e2 = t2 < 0, u3 = r2 ? n2.length : 0, i2 = Oi(0, u3, this.__views__), o2 = i2.start, f2 = i2.end, c2 = f2 - o2, a2 = e2 ? f2 : o2 - 1, l2 = this.__iteratees__, s2 = l2.length, h2 = 0, p3 = Hl(c2, this.__takeCount__);
        if (!r2 || !e2 && u3 == c2 && p3 == c2)
          return wu(n2, this.__actions__);
        var _3 = [];
        n:
          for (; c2-- && h2 < p3; ) {
            a2 += t2;
            for (var v2 = -1, g2 = n2[a2]; ++v2 < s2; ) {
              var y2 = l2[v2], d2 = y2.iteratee, b2 = y2.type, w2 = d2(g2);
              if (b2 == zn)
                g2 = w2;
              else if (!w2) {
                if (b2 == Rn)
                  continue n;
                break n;
              }
            }
            _3[h2++] = g2;
          }
        return _3;
      }
      function Xt2(n2) {
        var t2 = -1, r2 = null == n2 ? 0 : n2.length;
        for (this.clear(); ++t2 < r2; ) {
          var e2 = n2[t2];
          this.set(e2[0], e2[1]);
        }
      }
      function nr2() {
        this.__data__ = is ? is(null) : {}, this.size = 0;
      }
      function tr2(n2) {
        var t2 = this.has(n2) && delete this.__data__[n2];
        return this.size -= t2 ? 1 : 0, t2;
      }
      function rr2(n2) {
        var t2 = this.__data__;
        if (is) {
          var r2 = t2[n2];
          return r2 === on ? X : r2;
        }
        return bl.call(t2, n2) ? t2[n2] : X;
      }
      function er2(n2) {
        var t2 = this.__data__;
        return is ? t2[n2] !== X : bl.call(t2, n2);
      }
      function ur2(n2, t2) {
        var r2 = this.__data__;
        return this.size += this.has(n2) ? 0 : 1, r2[n2] = is && t2 === X ? on : t2, this;
      }
      function ir2(n2) {
        var t2 = -1, r2 = null == n2 ? 0 : n2.length;
        for (this.clear(); ++t2 < r2; ) {
          var e2 = n2[t2];
          this.set(e2[0], e2[1]);
        }
      }
      function or2() {
        this.__data__ = [], this.size = 0;
      }
      function fr2(n2) {
        var t2 = this.__data__, r2 = Wr2(t2, n2);
        return !(r2 < 0) && (r2 == t2.length - 1 ? t2.pop() : Ll.call(t2, r2, 1), --this.size, true);
      }
      function cr2(n2) {
        var t2 = this.__data__, r2 = Wr2(t2, n2);
        return r2 < 0 ? X : t2[r2][1];
      }
      function ar2(n2) {
        return Wr2(this.__data__, n2) > -1;
      }
      function lr2(n2, t2) {
        var r2 = this.__data__, e2 = Wr2(r2, n2);
        return e2 < 0 ? (++this.size, r2.push([n2, t2])) : r2[e2][1] = t2, this;
      }
      function sr2(n2) {
        var t2 = -1, r2 = null == n2 ? 0 : n2.length;
        for (this.clear(); ++t2 < r2; ) {
          var e2 = n2[t2];
          this.set(e2[0], e2[1]);
        }
      }
      function hr2() {
        this.size = 0, this.__data__ = { hash: new Xt2(), map: new (ts || ir2)(), string: new Xt2() };
      }
      function pr2(n2) {
        var t2 = xi(this, n2).delete(n2);
        return this.size -= t2 ? 1 : 0, t2;
      }
      function _r2(n2) {
        return xi(this, n2).get(n2);
      }
      function vr2(n2) {
        return xi(this, n2).has(n2);
      }
      function gr2(n2, t2) {
        var r2 = xi(this, n2), e2 = r2.size;
        return r2.set(n2, t2), this.size += r2.size == e2 ? 0 : 1, this;
      }
      function yr2(n2) {
        var t2 = -1, r2 = null == n2 ? 0 : n2.length;
        for (this.__data__ = new sr2(); ++t2 < r2; )
          this.add(n2[t2]);
      }
      function dr2(n2) {
        return this.__data__.set(n2, on), this;
      }
      function br2(n2) {
        return this.__data__.has(n2);
      }
      function wr2(n2) {
        this.size = (this.__data__ = new ir2(n2)).size;
      }
      function mr2() {
        this.__data__ = new ir2(), this.size = 0;
      }
      function xr2(n2) {
        var t2 = this.__data__, r2 = t2.delete(n2);
        return this.size = t2.size, r2;
      }
      function jr2(n2) {
        return this.__data__.get(n2);
      }
      function Ar2(n2) {
        return this.__data__.has(n2);
      }
      function kr2(n2, t2) {
        var r2 = this.__data__;
        if (r2 instanceof ir2) {
          var e2 = r2.__data__;
          if (!ts || e2.length < tn - 1)
            return e2.push([n2, t2]), this.size = ++r2.size, this;
          r2 = this.__data__ = new sr2(e2);
        }
        return r2.set(n2, t2), this.size = r2.size, this;
      }
      function Or2(n2, t2) {
        var r2 = bh(n2), e2 = !r2 && dh(n2), u3 = !r2 && !e2 && mh(n2), i2 = !r2 && !e2 && !u3 && Oh(n2), o2 = r2 || e2 || u3 || i2, f2 = o2 ? O(n2.length, hl) : [], c2 = f2.length;
        for (var a2 in n2)
          !t2 && !bl.call(n2, a2) || o2 && ("length" == a2 || u3 && ("offset" == a2 || "parent" == a2) || i2 && ("buffer" == a2 || "byteLength" == a2 || "byteOffset" == a2) || Ci(a2, c2)) || f2.push(a2);
        return f2;
      }
      function Ir2(n2) {
        var t2 = n2.length;
        return t2 ? n2[tu(0, t2 - 1)] : X;
      }
      function Rr2(n2, t2) {
        return Xi(Tu(n2), Mr2(t2, 0, n2.length));
      }
      function zr2(n2) {
        return Xi(Tu(n2));
      }
      function Er2(n2, t2, r2) {
        (r2 === X || Gf(n2[t2], r2)) && (r2 !== X || t2 in n2) || Br2(n2, t2, r2);
      }
      function Sr2(n2, t2, r2) {
        var e2 = n2[t2];
        bl.call(n2, t2) && Gf(e2, r2) && (r2 !== X || t2 in n2) || Br2(n2, t2, r2);
      }
      function Wr2(n2, t2) {
        for (var r2 = n2.length; r2--; )
          if (Gf(n2[r2][0], t2))
            return r2;
        return -1;
      }
      function Lr2(n2, t2, r2, e2) {
        return ys(n2, function(n3, u3, i2) {
          t2(e2, n3, r2(n3), i2);
        }), e2;
      }
      function Cr2(n2, t2) {
        return n2 && $u(t2, Pc(t2), n2);
      }
      function Ur2(n2, t2) {
        return n2 && $u(t2, qc(t2), n2);
      }
      function Br2(n2, t2, r2) {
        "__proto__" == t2 && Tl ? Tl(n2, t2, { configurable: true, enumerable: true, value: r2, writable: true }) : n2[t2] = r2;
      }
      function Tr2(n2, t2) {
        for (var r2 = -1, e2 = t2.length, u3 = il(e2), i2 = null == n2; ++r2 < e2; )
          u3[r2] = i2 ? X : Mc(n2, t2[r2]);
        return u3;
      }
      function Mr2(n2, t2, r2) {
        return n2 === n2 && (r2 !== X && (n2 = n2 <= r2 ? n2 : r2), t2 !== X && (n2 = n2 >= t2 ? n2 : t2)), n2;
      }
      function Fr2(n2, t2, e2, u3, i2, o2) {
        var f2, c2 = t2 & an, a2 = t2 & ln, l2 = t2 & sn;
        if (e2 && (f2 = i2 ? e2(n2, u3, i2, o2) : e2(n2)), f2 !== X)
          return f2;
        if (!fc(n2))
          return n2;
        var s2 = bh(n2);
        if (s2) {
          if (f2 = zi(n2), !c2)
            return Tu(n2, f2);
        } else {
          var h2 = zs(n2), p3 = h2 == Kn || h2 == Vn;
          if (mh(n2))
            return Iu(n2, c2);
          if (h2 == Yn || h2 == Dn || p3 && !i2) {
            if (f2 = a2 || p3 ? {} : Ei(n2), !c2)
              return a2 ? Mu(n2, Ur2(f2, n2)) : Du(n2, Cr2(f2, n2));
          } else {
            if (!Vr[h2])
              return i2 ? n2 : {};
            f2 = Si(n2, h2, c2);
          }
        }
        o2 || (o2 = new wr2());
        var _3 = o2.get(n2);
        if (_3)
          return _3;
        o2.set(n2, f2), kh(n2) ? n2.forEach(function(r2) {
          f2.add(Fr2(r2, t2, e2, r2, n2, o2));
        }) : jh(n2) && n2.forEach(function(r2, u4) {
          f2.set(u4, Fr2(r2, t2, e2, u4, n2, o2));
        });
        var v2 = l2 ? a2 ? di : yi : a2 ? qc : Pc, g2 = s2 ? X : v2(n2);
        return r(g2 || n2, function(r2, u4) {
          g2 && (u4 = r2, r2 = n2[u4]), Sr2(f2, u4, Fr2(r2, t2, e2, u4, n2, o2));
        }), f2;
      }
      function Nr2(n2) {
        var t2 = Pc(n2);
        return function(r2) {
          return Pr2(r2, n2, t2);
        };
      }
      function Pr2(n2, t2, r2) {
        var e2 = r2.length;
        if (null == n2)
          return !e2;
        for (n2 = ll(n2); e2--; ) {
          var u3 = r2[e2], i2 = t2[u3], o2 = n2[u3];
          if (o2 === X && !(u3 in n2) || !i2(o2))
            return false;
        }
        return true;
      }
      function Gr2(n2, t2, r2) {
        if ("function" != typeof n2)
          throw new pl(en);
        return Ws(function() {
          n2.apply(X, r2);
        }, t2);
      }
      function Hr2(n2, t2, r2, e2) {
        var u3 = -1, i2 = o, a2 = true, l2 = n2.length, s2 = [], h2 = t2.length;
        if (!l2)
          return s2;
        r2 && (t2 = c(t2, z(r2))), e2 ? (i2 = f, a2 = false) : t2.length >= tn && (i2 = S, a2 = false, t2 = new yr2(t2));
        n:
          for (; ++u3 < l2; ) {
            var p3 = n2[u3], _3 = null == r2 ? p3 : r2(p3);
            if (p3 = e2 || 0 !== p3 ? p3 : 0, a2 && _3 === _3) {
              for (var v2 = h2; v2--; )
                if (t2[v2] === _3)
                  continue n;
              s2.push(p3);
            } else
              i2(t2, _3, e2) || s2.push(p3);
          }
        return s2;
      }
      function Jr2(n2, t2) {
        var r2 = true;
        return ys(n2, function(n3, e2, u3) {
          return r2 = !!t2(n3, e2, u3);
        }), r2;
      }
      function Yr2(n2, t2, r2) {
        for (var e2 = -1, u3 = n2.length; ++e2 < u3; ) {
          var i2 = n2[e2], o2 = t2(i2);
          if (null != o2 && (f2 === X ? o2 === o2 && !bc(o2) : r2(o2, f2)))
            var f2 = o2, c2 = i2;
        }
        return c2;
      }
      function ne2(n2, t2, r2, e2) {
        var u3 = n2.length;
        for (r2 = kc(r2), r2 < 0 && (r2 = -r2 > u3 ? 0 : u3 + r2), e2 = e2 === X || e2 > u3 ? u3 : kc(e2), e2 < 0 && (e2 += u3), e2 = r2 > e2 ? 0 : Oc(e2); r2 < e2; )
          n2[r2++] = t2;
        return n2;
      }
      function te2(n2, t2) {
        var r2 = [];
        return ys(n2, function(n3, e2, u3) {
          t2(n3, e2, u3) && r2.push(n3);
        }), r2;
      }
      function ee2(n2, t2, r2, e2, u3) {
        var i2 = -1, o2 = n2.length;
        for (r2 || (r2 = Li), u3 || (u3 = []); ++i2 < o2; ) {
          var f2 = n2[i2];
          t2 > 0 && r2(f2) ? t2 > 1 ? ee2(f2, t2 - 1, r2, e2, u3) : a(u3, f2) : e2 || (u3[u3.length] = f2);
        }
        return u3;
      }
      function ue2(n2, t2) {
        return n2 && bs(n2, t2, Pc);
      }
      function oe2(n2, t2) {
        return n2 && ws(n2, t2, Pc);
      }
      function fe2(n2, t2) {
        return i(t2, function(t3) {
          return uc(n2[t3]);
        });
      }
      function _e2(n2, t2) {
        t2 = ku(t2, n2);
        for (var r2 = 0, e2 = t2.length; null != n2 && r2 < e2; )
          n2 = n2[no(t2[r2++])];
        return r2 && r2 == e2 ? n2 : X;
      }
      function de2(n2, t2, r2) {
        var e2 = t2(n2);
        return bh(n2) ? e2 : a(e2, r2(n2));
      }
      function we(n2) {
        return null == n2 ? n2 === X ? ut : Jn : Bl && Bl in ll(n2) ? ki(n2) : Ki(n2);
      }
      function me(n2, t2) {
        return n2 > t2;
      }
      function xe(n2, t2) {
        return null != n2 && bl.call(n2, t2);
      }
      function je(n2, t2) {
        return null != n2 && t2 in ll(n2);
      }
      function Ae(n2, t2, r2) {
        return n2 >= Hl(t2, r2) && n2 < Gl(t2, r2);
      }
      function ke(n2, t2, r2) {
        for (var e2 = r2 ? f : o, u3 = n2[0].length, i2 = n2.length, a2 = i2, l2 = il(i2), s2 = 1 / 0, h2 = []; a2--; ) {
          var p3 = n2[a2];
          a2 && t2 && (p3 = c(p3, z(t2))), s2 = Hl(p3.length, s2), l2[a2] = !r2 && (t2 || u3 >= 120 && p3.length >= 120) ? new yr2(a2 && p3) : X;
        }
        p3 = n2[0];
        var _3 = -1, v2 = l2[0];
        n:
          for (; ++_3 < u3 && h2.length < s2; ) {
            var g2 = p3[_3], y2 = t2 ? t2(g2) : g2;
            if (g2 = r2 || 0 !== g2 ? g2 : 0, !(v2 ? S(v2, y2) : e2(h2, y2, r2))) {
              for (a2 = i2; --a2; ) {
                var d2 = l2[a2];
                if (!(d2 ? S(d2, y2) : e2(n2[a2], y2, r2)))
                  continue n;
              }
              v2 && v2.push(y2), h2.push(g2);
            }
          }
        return h2;
      }
      function Oe(n2, t2, r2, e2) {
        return ue2(n2, function(n3, u3, i2) {
          t2(e2, r2(n3), u3, i2);
        }), e2;
      }
      function Ie(t2, r2, e2) {
        r2 = ku(r2, t2), t2 = Gi(t2, r2);
        var u3 = null == t2 ? t2 : t2[no(jo(r2))];
        return null == u3 ? X : n(u3, t2, e2);
      }
      function Re(n2) {
        return cc(n2) && we(n2) == Dn;
      }
      function ze(n2) {
        return cc(n2) && we(n2) == ft;
      }
      function Ee(n2) {
        return cc(n2) && we(n2) == Pn;
      }
      function Se(n2, t2, r2, e2, u3) {
        return n2 === t2 || (null == n2 || null == t2 || !cc(n2) && !cc(t2) ? n2 !== n2 && t2 !== t2 : We(n2, t2, r2, e2, Se, u3));
      }
      function We(n2, t2, r2, e2, u3, i2) {
        var o2 = bh(n2), f2 = bh(t2), c2 = o2 ? Mn : zs(n2), a2 = f2 ? Mn : zs(t2);
        c2 = c2 == Dn ? Yn : c2, a2 = a2 == Dn ? Yn : a2;
        var l2 = c2 == Yn, s2 = a2 == Yn, h2 = c2 == a2;
        if (h2 && mh(n2)) {
          if (!mh(t2))
            return false;
          o2 = true, l2 = false;
        }
        if (h2 && !l2)
          return i2 || (i2 = new wr2()), o2 || Oh(n2) ? pi(n2, t2, r2, e2, u3, i2) : _i(n2, t2, c2, r2, e2, u3, i2);
        if (!(r2 & hn)) {
          var p3 = l2 && bl.call(n2, "__wrapped__"), _3 = s2 && bl.call(t2, "__wrapped__");
          if (p3 || _3) {
            var v2 = p3 ? n2.value() : n2, g2 = _3 ? t2.value() : t2;
            return i2 || (i2 = new wr2()), u3(v2, g2, r2, e2, i2);
          }
        }
        return !!h2 && (i2 || (i2 = new wr2()), vi(n2, t2, r2, e2, u3, i2));
      }
      function Le(n2) {
        return cc(n2) && zs(n2) == Gn;
      }
      function Ce(n2, t2, r2, e2) {
        var u3 = r2.length, i2 = u3, o2 = !e2;
        if (null == n2)
          return !i2;
        for (n2 = ll(n2); u3--; ) {
          var f2 = r2[u3];
          if (o2 && f2[2] ? f2[1] !== n2[f2[0]] : !(f2[0] in n2))
            return false;
        }
        for (; ++u3 < i2; ) {
          f2 = r2[u3];
          var c2 = f2[0], a2 = n2[c2], l2 = f2[1];
          if (o2 && f2[2]) {
            if (a2 === X && !(c2 in n2))
              return false;
          } else {
            var s2 = new wr2();
            if (e2)
              var h2 = e2(a2, l2, c2, n2, t2, s2);
            if (!(h2 === X ? Se(l2, a2, hn | pn, e2, s2) : h2))
              return false;
          }
        }
        return true;
      }
      function Ue(n2) {
        return !(!fc(n2) || Di(n2)) && (uc(n2) ? kl : Zt).test(to(n2));
      }
      function Be(n2) {
        return cc(n2) && we(n2) == nt;
      }
      function Te(n2) {
        return cc(n2) && zs(n2) == tt;
      }
      function $e(n2) {
        return cc(n2) && oc(n2.length) && !!Kr[we(n2)];
      }
      function De(n2) {
        return "function" == typeof n2 ? n2 : null == n2 ? La : "object" == typeof n2 ? bh(n2) ? Ze(n2[0], n2[1]) : qe(n2) : Fa(n2);
      }
      function Me(n2) {
        if (!Mi(n2))
          return Vl(n2);
        var t2 = [];
        for (var r2 in ll(n2))
          bl.call(n2, r2) && "constructor" != r2 && t2.push(r2);
        return t2;
      }
      function Fe(n2) {
        if (!fc(n2))
          return Zi(n2);
        var t2 = Mi(n2), r2 = [];
        for (var e2 in n2)
          ("constructor" != e2 || !t2 && bl.call(n2, e2)) && r2.push(e2);
        return r2;
      }
      function Ne(n2, t2) {
        return n2 < t2;
      }
      function Pe(n2, t2) {
        var r2 = -1, e2 = Hf(n2) ? il(n2.length) : [];
        return ys(n2, function(n3, u3, i2) {
          e2[++r2] = t2(n3, u3, i2);
        }), e2;
      }
      function qe(n2) {
        var t2 = ji(n2);
        return 1 == t2.length && t2[0][2] ? Ni(t2[0][0], t2[0][1]) : function(r2) {
          return r2 === n2 || Ce(r2, n2, t2);
        };
      }
      function Ze(n2, t2) {
        return Bi(n2) && Fi(t2) ? Ni(no(n2), t2) : function(r2) {
          var e2 = Mc(r2, n2);
          return e2 === X && e2 === t2 ? Nc(r2, n2) : Se(t2, e2, hn | pn);
        };
      }
      function Ke(n2, t2, r2, e2, u3) {
        n2 !== t2 && bs(t2, function(i2, o2) {
          if (u3 || (u3 = new wr2()), fc(i2))
            Ve(n2, t2, o2, r2, Ke, e2, u3);
          else {
            var f2 = e2 ? e2(Ji(n2, o2), i2, o2 + "", n2, t2, u3) : X;
            f2 === X && (f2 = i2), Er2(n2, o2, f2);
          }
        }, qc);
      }
      function Ve(n2, t2, r2, e2, u3, i2, o2) {
        var f2 = Ji(n2, r2), c2 = Ji(t2, r2), a2 = o2.get(c2);
        if (a2)
          return Er2(n2, r2, a2), X;
        var l2 = i2 ? i2(f2, c2, r2 + "", n2, t2, o2) : X, s2 = l2 === X;
        if (s2) {
          var h2 = bh(c2), p3 = !h2 && mh(c2), _3 = !h2 && !p3 && Oh(c2);
          l2 = c2, h2 || p3 || _3 ? bh(f2) ? l2 = f2 : Jf(f2) ? l2 = Tu(f2) : p3 ? (s2 = false, l2 = Iu(c2, true)) : _3 ? (s2 = false, l2 = Wu(c2, true)) : l2 = [] : gc(c2) || dh(c2) ? (l2 = f2, dh(f2) ? l2 = Rc(f2) : fc(f2) && !uc(f2) || (l2 = Ei(c2))) : s2 = false;
        }
        s2 && (o2.set(c2, l2), u3(l2, c2, e2, i2, o2), o2.delete(c2)), Er2(n2, r2, l2);
      }
      function Ge(n2, t2) {
        var r2 = n2.length;
        if (r2)
          return t2 += t2 < 0 ? r2 : 0, Ci(t2, r2) ? n2[t2] : X;
      }
      function He(n2, t2, r2) {
        t2 = t2.length ? c(t2, function(n3) {
          return bh(n3) ? function(t3) {
            return _e2(t3, 1 === n3.length ? n3[0] : n3);
          } : n3;
        }) : [La];
        var e2 = -1;
        return t2 = c(t2, z(mi())), A(Pe(n2, function(n3, r3, u3) {
          return { criteria: c(t2, function(t3) {
            return t3(n3);
          }), index: ++e2, value: n3 };
        }), function(n3, t3) {
          return Cu(n3, t3, r2);
        });
      }
      function Je(n2, t2) {
        return Ye(n2, t2, function(t3, r2) {
          return Nc(n2, r2);
        });
      }
      function Ye(n2, t2, r2) {
        for (var e2 = -1, u3 = t2.length, i2 = {}; ++e2 < u3; ) {
          var o2 = t2[e2], f2 = _e2(n2, o2);
          r2(f2, o2) && fu(i2, ku(o2, n2), f2);
        }
        return i2;
      }
      function Qe(n2) {
        return function(t2) {
          return _e2(t2, n2);
        };
      }
      function Xe(n2, t2, r2, e2) {
        var u3 = e2 ? d : y, i2 = -1, o2 = t2.length, f2 = n2;
        for (n2 === t2 && (t2 = Tu(t2)), r2 && (f2 = c(n2, z(r2))); ++i2 < o2; )
          for (var a2 = 0, l2 = t2[i2], s2 = r2 ? r2(l2) : l2; (a2 = u3(f2, s2, a2, e2)) > -1; )
            f2 !== n2 && Ll.call(f2, a2, 1), Ll.call(n2, a2, 1);
        return n2;
      }
      function nu(n2, t2) {
        for (var r2 = n2 ? t2.length : 0, e2 = r2 - 1; r2--; ) {
          var u3 = t2[r2];
          if (r2 == e2 || u3 !== i2) {
            var i2 = u3;
            Ci(u3) ? Ll.call(n2, u3, 1) : yu(n2, u3);
          }
        }
        return n2;
      }
      function tu(n2, t2) {
        return n2 + Nl(Ql() * (t2 - n2 + 1));
      }
      function ru(n2, t2, r2, e2) {
        for (var u3 = -1, i2 = Gl(Fl((t2 - n2) / (r2 || 1)), 0), o2 = il(i2); i2--; )
          o2[e2 ? i2 : ++u3] = n2, n2 += r2;
        return o2;
      }
      function eu(n2, t2) {
        var r2 = "";
        if (!n2 || t2 < 1 || t2 > Wn)
          return r2;
        do
          t2 % 2 && (r2 += n2), t2 = Nl(t2 / 2), t2 && (n2 += n2);
        while (t2);
        return r2;
      }
      function uu(n2, t2) {
        return Ls(Vi(n2, t2, La), n2 + "");
      }
      function iu(n2) {
        return Ir2(ra(n2));
      }
      function ou(n2, t2) {
        var r2 = ra(n2);
        return Xi(r2, Mr2(t2, 0, r2.length));
      }
      function fu(n2, t2, r2, e2) {
        if (!fc(n2))
          return n2;
        t2 = ku(t2, n2);
        for (var u3 = -1, i2 = t2.length, o2 = i2 - 1, f2 = n2; null != f2 && ++u3 < i2; ) {
          var c2 = no(t2[u3]), a2 = r2;
          if ("__proto__" === c2 || "constructor" === c2 || "prototype" === c2)
            return n2;
          if (u3 != o2) {
            var l2 = f2[c2];
            a2 = e2 ? e2(l2, c2, f2) : X, a2 === X && (a2 = fc(l2) ? l2 : Ci(t2[u3 + 1]) ? [] : {});
          }
          Sr2(f2, c2, a2), f2 = f2[c2];
        }
        return n2;
      }
      function cu(n2) {
        return Xi(ra(n2));
      }
      function au(n2, t2, r2) {
        var e2 = -1, u3 = n2.length;
        t2 < 0 && (t2 = -t2 > u3 ? 0 : u3 + t2), r2 = r2 > u3 ? u3 : r2, r2 < 0 && (r2 += u3), u3 = t2 > r2 ? 0 : r2 - t2 >>> 0, t2 >>>= 0;
        for (var i2 = il(u3); ++e2 < u3; )
          i2[e2] = n2[e2 + t2];
        return i2;
      }
      function lu(n2, t2) {
        var r2;
        return ys(n2, function(n3, e2, u3) {
          return r2 = t2(n3, e2, u3), !r2;
        }), !!r2;
      }
      function su(n2, t2, r2) {
        var e2 = 0, u3 = null == n2 ? e2 : n2.length;
        if ("number" == typeof t2 && t2 === t2 && u3 <= Tn) {
          for (; e2 < u3; ) {
            var i2 = e2 + u3 >>> 1, o2 = n2[i2];
            null !== o2 && !bc(o2) && (r2 ? o2 <= t2 : o2 < t2) ? e2 = i2 + 1 : u3 = i2;
          }
          return u3;
        }
        return hu(n2, t2, La, r2);
      }
      function hu(n2, t2, r2, e2) {
        var u3 = 0, i2 = null == n2 ? 0 : n2.length;
        if (0 === i2)
          return 0;
        t2 = r2(t2);
        for (var o2 = t2 !== t2, f2 = null === t2, c2 = bc(t2), a2 = t2 === X; u3 < i2; ) {
          var l2 = Nl((u3 + i2) / 2), s2 = r2(n2[l2]), h2 = s2 !== X, p3 = null === s2, _3 = s2 === s2, v2 = bc(s2);
          if (o2)
            var g2 = e2 || _3;
          else
            g2 = a2 ? _3 && (e2 || h2) : f2 ? _3 && h2 && (e2 || !p3) : c2 ? _3 && h2 && !p3 && (e2 || !v2) : !p3 && !v2 && (e2 ? s2 <= t2 : s2 < t2);
          g2 ? u3 = l2 + 1 : i2 = l2;
        }
        return Hl(i2, Bn);
      }
      function pu(n2, t2) {
        for (var r2 = -1, e2 = n2.length, u3 = 0, i2 = []; ++r2 < e2; ) {
          var o2 = n2[r2], f2 = t2 ? t2(o2) : o2;
          if (!r2 || !Gf(f2, c2)) {
            var c2 = f2;
            i2[u3++] = 0 === o2 ? 0 : o2;
          }
        }
        return i2;
      }
      function _u(n2) {
        return "number" == typeof n2 ? n2 : bc(n2) ? Cn : +n2;
      }
      function vu(n2) {
        if ("string" == typeof n2)
          return n2;
        if (bh(n2))
          return c(n2, vu) + "";
        if (bc(n2))
          return vs ? vs.call(n2) : "";
        var t2 = n2 + "";
        return "0" == t2 && 1 / n2 == -Sn ? "-0" : t2;
      }
      function gu(n2, t2, r2) {
        var e2 = -1, u3 = o, i2 = n2.length, c2 = true, a2 = [], l2 = a2;
        if (r2)
          c2 = false, u3 = f;
        else if (i2 >= tn) {
          var s2 = t2 ? null : ks(n2);
          if (s2)
            return P(s2);
          c2 = false, u3 = S, l2 = new yr2();
        } else
          l2 = t2 ? [] : a2;
        n:
          for (; ++e2 < i2; ) {
            var h2 = n2[e2], p3 = t2 ? t2(h2) : h2;
            if (h2 = r2 || 0 !== h2 ? h2 : 0, c2 && p3 === p3) {
              for (var _3 = l2.length; _3--; )
                if (l2[_3] === p3)
                  continue n;
              t2 && l2.push(p3), a2.push(h2);
            } else
              u3(l2, p3, r2) || (l2 !== a2 && l2.push(p3), a2.push(h2));
          }
        return a2;
      }
      function yu(n2, t2) {
        return t2 = ku(t2, n2), n2 = Gi(n2, t2), null == n2 || delete n2[no(jo(t2))];
      }
      function du(n2, t2, r2, e2) {
        return fu(n2, t2, r2(_e2(n2, t2)), e2);
      }
      function bu(n2, t2, r2, e2) {
        for (var u3 = n2.length, i2 = e2 ? u3 : -1; (e2 ? i2-- : ++i2 < u3) && t2(n2[i2], i2, n2); )
          ;
        return r2 ? au(n2, e2 ? 0 : i2, e2 ? i2 + 1 : u3) : au(n2, e2 ? i2 + 1 : 0, e2 ? u3 : i2);
      }
      function wu(n2, t2) {
        var r2 = n2;
        return r2 instanceof Ct2 && (r2 = r2.value()), l(t2, function(n3, t3) {
          return t3.func.apply(t3.thisArg, a([n3], t3.args));
        }, r2);
      }
      function mu(n2, t2, r2) {
        var e2 = n2.length;
        if (e2 < 2)
          return e2 ? gu(n2[0]) : [];
        for (var u3 = -1, i2 = il(e2); ++u3 < e2; )
          for (var o2 = n2[u3], f2 = -1; ++f2 < e2; )
            f2 != u3 && (i2[u3] = Hr2(i2[u3] || o2, n2[f2], t2, r2));
        return gu(ee2(i2, 1), t2, r2);
      }
      function xu(n2, t2, r2) {
        for (var e2 = -1, u3 = n2.length, i2 = t2.length, o2 = {}; ++e2 < u3; ) {
          r2(o2, n2[e2], e2 < i2 ? t2[e2] : X);
        }
        return o2;
      }
      function ju(n2) {
        return Jf(n2) ? n2 : [];
      }
      function Au(n2) {
        return "function" == typeof n2 ? n2 : La;
      }
      function ku(n2, t2) {
        return bh(n2) ? n2 : Bi(n2, t2) ? [n2] : Cs(Ec(n2));
      }
      function Ou(n2, t2, r2) {
        var e2 = n2.length;
        return r2 = r2 === X ? e2 : r2, !t2 && r2 >= e2 ? n2 : au(n2, t2, r2);
      }
      function Iu(n2, t2) {
        if (t2)
          return n2.slice();
        var r2 = n2.length, e2 = zl ? zl(r2) : new n2.constructor(r2);
        return n2.copy(e2), e2;
      }
      function Ru(n2) {
        var t2 = new n2.constructor(n2.byteLength);
        return new Rl(t2).set(new Rl(n2)), t2;
      }
      function zu(n2, t2) {
        return new n2.constructor(t2 ? Ru(n2.buffer) : n2.buffer, n2.byteOffset, n2.byteLength);
      }
      function Eu(n2) {
        var t2 = new n2.constructor(n2.source, Nt.exec(n2));
        return t2.lastIndex = n2.lastIndex, t2;
      }
      function Su(n2) {
        return _s ? ll(_s.call(n2)) : {};
      }
      function Wu(n2, t2) {
        return new n2.constructor(t2 ? Ru(n2.buffer) : n2.buffer, n2.byteOffset, n2.length);
      }
      function Lu(n2, t2) {
        if (n2 !== t2) {
          var r2 = n2 !== X, e2 = null === n2, u3 = n2 === n2, i2 = bc(n2), o2 = t2 !== X, f2 = null === t2, c2 = t2 === t2, a2 = bc(t2);
          if (!f2 && !a2 && !i2 && n2 > t2 || i2 && o2 && c2 && !f2 && !a2 || e2 && o2 && c2 || !r2 && c2 || !u3)
            return 1;
          if (!e2 && !i2 && !a2 && n2 < t2 || a2 && r2 && u3 && !e2 && !i2 || f2 && r2 && u3 || !o2 && u3 || !c2)
            return -1;
        }
        return 0;
      }
      function Cu(n2, t2, r2) {
        for (var e2 = -1, u3 = n2.criteria, i2 = t2.criteria, o2 = u3.length, f2 = r2.length; ++e2 < o2; ) {
          var c2 = Lu(u3[e2], i2[e2]);
          if (c2) {
            if (e2 >= f2)
              return c2;
            return c2 * ("desc" == r2[e2] ? -1 : 1);
          }
        }
        return n2.index - t2.index;
      }
      function Uu(n2, t2, r2, e2) {
        for (var u3 = -1, i2 = n2.length, o2 = r2.length, f2 = -1, c2 = t2.length, a2 = Gl(i2 - o2, 0), l2 = il(c2 + a2), s2 = !e2; ++f2 < c2; )
          l2[f2] = t2[f2];
        for (; ++u3 < o2; )
          (s2 || u3 < i2) && (l2[r2[u3]] = n2[u3]);
        for (; a2--; )
          l2[f2++] = n2[u3++];
        return l2;
      }
      function Bu(n2, t2, r2, e2) {
        for (var u3 = -1, i2 = n2.length, o2 = -1, f2 = r2.length, c2 = -1, a2 = t2.length, l2 = Gl(i2 - f2, 0), s2 = il(l2 + a2), h2 = !e2; ++u3 < l2; )
          s2[u3] = n2[u3];
        for (var p3 = u3; ++c2 < a2; )
          s2[p3 + c2] = t2[c2];
        for (; ++o2 < f2; )
          (h2 || u3 < i2) && (s2[p3 + r2[o2]] = n2[u3++]);
        return s2;
      }
      function Tu(n2, t2) {
        var r2 = -1, e2 = n2.length;
        for (t2 || (t2 = il(e2)); ++r2 < e2; )
          t2[r2] = n2[r2];
        return t2;
      }
      function $u(n2, t2, r2, e2) {
        var u3 = !r2;
        r2 || (r2 = {});
        for (var i2 = -1, o2 = t2.length; ++i2 < o2; ) {
          var f2 = t2[i2], c2 = e2 ? e2(r2[f2], n2[f2], f2, r2, n2) : X;
          c2 === X && (c2 = n2[f2]), u3 ? Br2(r2, f2, c2) : Sr2(r2, f2, c2);
        }
        return r2;
      }
      function Du(n2, t2) {
        return $u(n2, Is(n2), t2);
      }
      function Mu(n2, t2) {
        return $u(n2, Rs(n2), t2);
      }
      function Fu(n2, r2) {
        return function(e2, u3) {
          var i2 = bh(e2) ? t : Lr2, o2 = r2 ? r2() : {};
          return i2(e2, n2, mi(u3, 2), o2);
        };
      }
      function Nu(n2) {
        return uu(function(t2, r2) {
          var e2 = -1, u3 = r2.length, i2 = u3 > 1 ? r2[u3 - 1] : X, o2 = u3 > 2 ? r2[2] : X;
          for (i2 = n2.length > 3 && "function" == typeof i2 ? (u3--, i2) : X, o2 && Ui(r2[0], r2[1], o2) && (i2 = u3 < 3 ? X : i2, u3 = 1), t2 = ll(t2); ++e2 < u3; ) {
            var f2 = r2[e2];
            f2 && n2(t2, f2, e2, i2);
          }
          return t2;
        });
      }
      function Pu(n2, t2) {
        return function(r2, e2) {
          if (null == r2)
            return r2;
          if (!Hf(r2))
            return n2(r2, e2);
          for (var u3 = r2.length, i2 = t2 ? u3 : -1, o2 = ll(r2); (t2 ? i2-- : ++i2 < u3) && e2(o2[i2], i2, o2) !== false; )
            ;
          return r2;
        };
      }
      function qu(n2) {
        return function(t2, r2, e2) {
          for (var u3 = -1, i2 = ll(t2), o2 = e2(t2), f2 = o2.length; f2--; ) {
            var c2 = o2[n2 ? f2 : ++u3];
            if (r2(i2[c2], c2, i2) === false)
              break;
          }
          return t2;
        };
      }
      function Zu(n2, t2, r2) {
        function e2() {
          return (this && this !== re && this instanceof e2 ? i2 : n2).apply(u3 ? r2 : this, arguments);
        }
        var u3 = t2 & _n, i2 = Gu(n2);
        return e2;
      }
      function Ku(n2) {
        return function(t2) {
          t2 = Ec(t2);
          var r2 = T(t2) ? G(t2) : X, e2 = r2 ? r2[0] : t2.charAt(0), u3 = r2 ? Ou(r2, 1).join("") : t2.slice(1);
          return e2[n2]() + u3;
        };
      }
      function Vu(n2) {
        return function(t2) {
          return l(Ra(ca(t2).replace($r, "")), n2, "");
        };
      }
      function Gu(n2) {
        return function() {
          var t2 = arguments;
          switch (t2.length) {
            case 0:
              return new n2();
            case 1:
              return new n2(t2[0]);
            case 2:
              return new n2(t2[0], t2[1]);
            case 3:
              return new n2(t2[0], t2[1], t2[2]);
            case 4:
              return new n2(t2[0], t2[1], t2[2], t2[3]);
            case 5:
              return new n2(t2[0], t2[1], t2[2], t2[3], t2[4]);
            case 6:
              return new n2(t2[0], t2[1], t2[2], t2[3], t2[4], t2[5]);
            case 7:
              return new n2(t2[0], t2[1], t2[2], t2[3], t2[4], t2[5], t2[6]);
          }
          var r2 = gs(n2.prototype), e2 = n2.apply(r2, t2);
          return fc(e2) ? e2 : r2;
        };
      }
      function Hu(t2, r2, e2) {
        function u3() {
          for (var o2 = arguments.length, f2 = il(o2), c2 = o2, a2 = wi(u3); c2--; )
            f2[c2] = arguments[c2];
          var l2 = o2 < 3 && f2[0] !== a2 && f2[o2 - 1] !== a2 ? [] : N(f2, a2);
          return o2 -= l2.length, o2 < e2 ? oi(t2, r2, Qu, u3.placeholder, X, f2, l2, X, X, e2 - o2) : n(this && this !== re && this instanceof u3 ? i2 : t2, this, f2);
        }
        var i2 = Gu(t2);
        return u3;
      }
      function Ju(n2) {
        return function(t2, r2, e2) {
          var u3 = ll(t2);
          if (!Hf(t2)) {
            var i2 = mi(r2, 3);
            t2 = Pc(t2), r2 = function(n3) {
              return i2(u3[n3], n3, u3);
            };
          }
          var o2 = n2(t2, r2, e2);
          return o2 > -1 ? u3[i2 ? t2[o2] : o2] : X;
        };
      }
      function Yu(n2) {
        return gi(function(t2) {
          var r2 = t2.length, e2 = r2, u3 = Y2.prototype.thru;
          for (n2 && t2.reverse(); e2--; ) {
            var i2 = t2[e2];
            if ("function" != typeof i2)
              throw new pl(en);
            if (u3 && !o2 && "wrapper" == bi(i2))
              var o2 = new Y2([], true);
          }
          for (e2 = o2 ? e2 : r2; ++e2 < r2; ) {
            i2 = t2[e2];
            var f2 = bi(i2), c2 = "wrapper" == f2 ? Os(i2) : X;
            o2 = c2 && $i(c2[0]) && c2[1] == (mn | yn | bn | xn) && !c2[4].length && 1 == c2[9] ? o2[bi(c2[0])].apply(o2, c2[3]) : 1 == i2.length && $i(i2) ? o2[f2]() : o2.thru(i2);
          }
          return function() {
            var n3 = arguments, e3 = n3[0];
            if (o2 && 1 == n3.length && bh(e3))
              return o2.plant(e3).value();
            for (var u4 = 0, i3 = r2 ? t2[u4].apply(this, n3) : e3; ++u4 < r2; )
              i3 = t2[u4].call(this, i3);
            return i3;
          };
        });
      }
      function Qu(n2, t2, r2, e2, u3, i2, o2, f2, c2, a2) {
        function l2() {
          for (var y2 = arguments.length, d2 = il(y2), b2 = y2; b2--; )
            d2[b2] = arguments[b2];
          if (_3)
            var w2 = wi(l2), m2 = C(d2, w2);
          if (e2 && (d2 = Uu(d2, e2, u3, _3)), i2 && (d2 = Bu(d2, i2, o2, _3)), y2 -= m2, _3 && y2 < a2) {
            return oi(n2, t2, Qu, l2.placeholder, r2, d2, N(d2, w2), f2, c2, a2 - y2);
          }
          var x3 = h2 ? r2 : this, j2 = p3 ? x3[n2] : n2;
          return y2 = d2.length, f2 ? d2 = Hi(d2, f2) : v2 && y2 > 1 && d2.reverse(), s2 && c2 < y2 && (d2.length = c2), this && this !== re && this instanceof l2 && (j2 = g2 || Gu(j2)), j2.apply(x3, d2);
        }
        var s2 = t2 & mn, h2 = t2 & _n, p3 = t2 & vn, _3 = t2 & (yn | dn), v2 = t2 & jn, g2 = p3 ? X : Gu(n2);
        return l2;
      }
      function Xu(n2, t2) {
        return function(r2, e2) {
          return Oe(r2, n2, t2(e2), {});
        };
      }
      function ni(n2, t2) {
        return function(r2, e2) {
          var u3;
          if (r2 === X && e2 === X)
            return t2;
          if (r2 !== X && (u3 = r2), e2 !== X) {
            if (u3 === X)
              return e2;
            "string" == typeof r2 || "string" == typeof e2 ? (r2 = vu(r2), e2 = vu(e2)) : (r2 = _u(r2), e2 = _u(e2)), u3 = n2(r2, e2);
          }
          return u3;
        };
      }
      function ti(t2) {
        return gi(function(r2) {
          return r2 = c(r2, z(mi())), uu(function(e2) {
            var u3 = this;
            return t2(r2, function(t3) {
              return n(t3, u3, e2);
            });
          });
        });
      }
      function ri(n2, t2) {
        t2 = t2 === X ? " " : vu(t2);
        var r2 = t2.length;
        if (r2 < 2)
          return r2 ? eu(t2, n2) : t2;
        var e2 = eu(t2, Fl(n2 / V(t2)));
        return T(t2) ? Ou(G(e2), 0, n2).join("") : e2.slice(0, n2);
      }
      function ei(t2, r2, e2, u3) {
        function i2() {
          for (var r3 = -1, c2 = arguments.length, a2 = -1, l2 = u3.length, s2 = il(l2 + c2), h2 = this && this !== re && this instanceof i2 ? f2 : t2; ++a2 < l2; )
            s2[a2] = u3[a2];
          for (; c2--; )
            s2[a2++] = arguments[++r3];
          return n(h2, o2 ? e2 : this, s2);
        }
        var o2 = r2 & _n, f2 = Gu(t2);
        return i2;
      }
      function ui(n2) {
        return function(t2, r2, e2) {
          return e2 && "number" != typeof e2 && Ui(t2, r2, e2) && (r2 = e2 = X), t2 = Ac(t2), r2 === X ? (r2 = t2, t2 = 0) : r2 = Ac(r2), e2 = e2 === X ? t2 < r2 ? 1 : -1 : Ac(e2), ru(t2, r2, e2, n2);
        };
      }
      function ii(n2) {
        return function(t2, r2) {
          return "string" == typeof t2 && "string" == typeof r2 || (t2 = Ic(t2), r2 = Ic(r2)), n2(t2, r2);
        };
      }
      function oi(n2, t2, r2, e2, u3, i2, o2, f2, c2, a2) {
        var l2 = t2 & yn, s2 = l2 ? o2 : X, h2 = l2 ? X : o2, p3 = l2 ? i2 : X, _3 = l2 ? X : i2;
        t2 |= l2 ? bn : wn, t2 &= ~(l2 ? wn : bn), t2 & gn || (t2 &= ~(_n | vn));
        var v2 = [n2, t2, u3, p3, s2, _3, h2, f2, c2, a2], g2 = r2.apply(X, v2);
        return $i(n2) && Ss(g2, v2), g2.placeholder = e2, Yi(g2, n2, t2);
      }
      function fi(n2) {
        var t2 = al[n2];
        return function(n3, r2) {
          if (n3 = Ic(n3), r2 = null == r2 ? 0 : Hl(kc(r2), 292), r2 && Zl(n3)) {
            var e2 = (Ec(n3) + "e").split("e");
            return e2 = (Ec(t2(e2[0] + "e" + (+e2[1] + r2))) + "e").split("e"), +(e2[0] + "e" + (+e2[1] - r2));
          }
          return t2(n3);
        };
      }
      function ci(n2) {
        return function(t2) {
          var r2 = zs(t2);
          return r2 == Gn ? M(t2) : r2 == tt ? q(t2) : I(t2, n2(t2));
        };
      }
      function ai(n2, t2, r2, e2, u3, i2, o2, f2) {
        var c2 = t2 & vn;
        if (!c2 && "function" != typeof n2)
          throw new pl(en);
        var a2 = e2 ? e2.length : 0;
        if (a2 || (t2 &= ~(bn | wn), e2 = u3 = X), o2 = o2 === X ? o2 : Gl(kc(o2), 0), f2 = f2 === X ? f2 : kc(f2), a2 -= u3 ? u3.length : 0, t2 & wn) {
          var l2 = e2, s2 = u3;
          e2 = u3 = X;
        }
        var h2 = c2 ? X : Os(n2), p3 = [n2, t2, r2, e2, u3, l2, s2, i2, o2, f2];
        if (h2 && qi(p3, h2), n2 = p3[0], t2 = p3[1], r2 = p3[2], e2 = p3[3], u3 = p3[4], f2 = p3[9] = p3[9] === X ? c2 ? 0 : n2.length : Gl(p3[9] - a2, 0), !f2 && t2 & (yn | dn) && (t2 &= ~(yn | dn)), t2 && t2 != _n)
          _3 = t2 == yn || t2 == dn ? Hu(n2, t2, f2) : t2 != bn && t2 != (_n | bn) || u3.length ? Qu.apply(X, p3) : ei(n2, t2, r2, e2);
        else
          var _3 = Zu(n2, t2, r2);
        return Yi((h2 ? ms : Ss)(_3, p3), n2, t2);
      }
      function li(n2, t2, r2, e2) {
        return n2 === X || Gf(n2, gl[r2]) && !bl.call(e2, r2) ? t2 : n2;
      }
      function si(n2, t2, r2, e2, u3, i2) {
        return fc(n2) && fc(t2) && (i2.set(t2, n2), Ke(n2, t2, X, si, i2), i2.delete(t2)), n2;
      }
      function hi(n2) {
        return gc(n2) ? X : n2;
      }
      function pi(n2, t2, r2, e2, u3, i2) {
        var o2 = r2 & hn, f2 = n2.length, c2 = t2.length;
        if (f2 != c2 && !(o2 && c2 > f2))
          return false;
        var a2 = i2.get(n2), l2 = i2.get(t2);
        if (a2 && l2)
          return a2 == t2 && l2 == n2;
        var s2 = -1, p3 = true, _3 = r2 & pn ? new yr2() : X;
        for (i2.set(n2, t2), i2.set(t2, n2); ++s2 < f2; ) {
          var v2 = n2[s2], g2 = t2[s2];
          if (e2)
            var y2 = o2 ? e2(g2, v2, s2, t2, n2, i2) : e2(v2, g2, s2, n2, t2, i2);
          if (y2 !== X) {
            if (y2)
              continue;
            p3 = false;
            break;
          }
          if (_3) {
            if (!h(t2, function(n3, t3) {
              if (!S(_3, t3) && (v2 === n3 || u3(v2, n3, r2, e2, i2)))
                return _3.push(t3);
            })) {
              p3 = false;
              break;
            }
          } else if (v2 !== g2 && !u3(v2, g2, r2, e2, i2)) {
            p3 = false;
            break;
          }
        }
        return i2.delete(n2), i2.delete(t2), p3;
      }
      function _i(n2, t2, r2, e2, u3, i2, o2) {
        switch (r2) {
          case ct:
            if (n2.byteLength != t2.byteLength || n2.byteOffset != t2.byteOffset)
              return false;
            n2 = n2.buffer, t2 = t2.buffer;
          case ft:
            return !(n2.byteLength != t2.byteLength || !i2(new Rl(n2), new Rl(t2)));
          case Nn:
          case Pn:
          case Hn:
            return Gf(+n2, +t2);
          case Zn:
            return n2.name == t2.name && n2.message == t2.message;
          case nt:
          case rt:
            return n2 == t2 + "";
          case Gn:
            var f2 = M;
          case tt:
            var c2 = e2 & hn;
            if (f2 || (f2 = P), n2.size != t2.size && !c2)
              return false;
            var a2 = o2.get(n2);
            if (a2)
              return a2 == t2;
            e2 |= pn, o2.set(n2, t2);
            var l2 = pi(f2(n2), f2(t2), e2, u3, i2, o2);
            return o2.delete(n2), l2;
          case et:
            if (_s)
              return _s.call(n2) == _s.call(t2);
        }
        return false;
      }
      function vi(n2, t2, r2, e2, u3, i2) {
        var o2 = r2 & hn, f2 = yi(n2), c2 = f2.length;
        if (c2 != yi(t2).length && !o2)
          return false;
        for (var a2 = c2; a2--; ) {
          var l2 = f2[a2];
          if (!(o2 ? l2 in t2 : bl.call(t2, l2)))
            return false;
        }
        var s2 = i2.get(n2), h2 = i2.get(t2);
        if (s2 && h2)
          return s2 == t2 && h2 == n2;
        var p3 = true;
        i2.set(n2, t2), i2.set(t2, n2);
        for (var _3 = o2; ++a2 < c2; ) {
          l2 = f2[a2];
          var v2 = n2[l2], g2 = t2[l2];
          if (e2)
            var y2 = o2 ? e2(g2, v2, l2, t2, n2, i2) : e2(v2, g2, l2, n2, t2, i2);
          if (!(y2 === X ? v2 === g2 || u3(v2, g2, r2, e2, i2) : y2)) {
            p3 = false;
            break;
          }
          _3 || (_3 = "constructor" == l2);
        }
        if (p3 && !_3) {
          var d2 = n2.constructor, b2 = t2.constructor;
          d2 != b2 && "constructor" in n2 && "constructor" in t2 && !("function" == typeof d2 && d2 instanceof d2 && "function" == typeof b2 && b2 instanceof b2) && (p3 = false);
        }
        return i2.delete(n2), i2.delete(t2), p3;
      }
      function gi(n2) {
        return Ls(Vi(n2, X, _o), n2 + "");
      }
      function yi(n2) {
        return de2(n2, Pc, Is);
      }
      function di(n2) {
        return de2(n2, qc, Rs);
      }
      function bi(n2) {
        for (var t2 = n2.name + "", r2 = fs2[t2], e2 = bl.call(fs2, t2) ? r2.length : 0; e2--; ) {
          var u3 = r2[e2], i2 = u3.func;
          if (null == i2 || i2 == n2)
            return u3.name;
        }
        return t2;
      }
      function wi(n2) {
        return (bl.call(Z2, "placeholder") ? Z2 : n2).placeholder;
      }
      function mi() {
        var n2 = Z2.iteratee || Ca;
        return n2 = n2 === Ca ? De : n2, arguments.length ? n2(arguments[0], arguments[1]) : n2;
      }
      function xi(n2, t2) {
        var r2 = n2.__data__;
        return Ti(t2) ? r2["string" == typeof t2 ? "string" : "hash"] : r2.map;
      }
      function ji(n2) {
        for (var t2 = Pc(n2), r2 = t2.length; r2--; ) {
          var e2 = t2[r2], u3 = n2[e2];
          t2[r2] = [e2, u3, Fi(u3)];
        }
        return t2;
      }
      function Ai(n2, t2) {
        var r2 = B(n2, t2);
        return Ue(r2) ? r2 : X;
      }
      function ki(n2) {
        var t2 = bl.call(n2, Bl), r2 = n2[Bl];
        try {
          n2[Bl] = X;
          var e2 = true;
        } catch (n3) {
        }
        var u3 = xl.call(n2);
        return e2 && (t2 ? n2[Bl] = r2 : delete n2[Bl]), u3;
      }
      function Oi(n2, t2, r2) {
        for (var e2 = -1, u3 = r2.length; ++e2 < u3; ) {
          var i2 = r2[e2], o2 = i2.size;
          switch (i2.type) {
            case "drop":
              n2 += o2;
              break;
            case "dropRight":
              t2 -= o2;
              break;
            case "take":
              t2 = Hl(t2, n2 + o2);
              break;
            case "takeRight":
              n2 = Gl(n2, t2 - o2);
          }
        }
        return { start: n2, end: t2 };
      }
      function Ii(n2) {
        var t2 = n2.match(Bt);
        return t2 ? t2[1].split(Tt) : [];
      }
      function Ri(n2, t2, r2) {
        t2 = ku(t2, n2);
        for (var e2 = -1, u3 = t2.length, i2 = false; ++e2 < u3; ) {
          var o2 = no(t2[e2]);
          if (!(i2 = null != n2 && r2(n2, o2)))
            break;
          n2 = n2[o2];
        }
        return i2 || ++e2 != u3 ? i2 : (u3 = null == n2 ? 0 : n2.length, !!u3 && oc(u3) && Ci(o2, u3) && (bh(n2) || dh(n2)));
      }
      function zi(n2) {
        var t2 = n2.length, r2 = new n2.constructor(t2);
        return t2 && "string" == typeof n2[0] && bl.call(n2, "index") && (r2.index = n2.index, r2.input = n2.input), r2;
      }
      function Ei(n2) {
        return "function" != typeof n2.constructor || Mi(n2) ? {} : gs(El(n2));
      }
      function Si(n2, t2, r2) {
        var e2 = n2.constructor;
        switch (t2) {
          case ft:
            return Ru(n2);
          case Nn:
          case Pn:
            return new e2(+n2);
          case ct:
            return zu(n2, r2);
          case at:
          case lt:
          case st:
          case ht:
          case pt:
          case _t:
          case vt:
          case gt:
          case yt:
            return Wu(n2, r2);
          case Gn:
            return new e2();
          case Hn:
          case rt:
            return new e2(n2);
          case nt:
            return Eu(n2);
          case tt:
            return new e2();
          case et:
            return Su(n2);
        }
      }
      function Wi(n2, t2) {
        var r2 = t2.length;
        if (!r2)
          return n2;
        var e2 = r2 - 1;
        return t2[e2] = (r2 > 1 ? "& " : "") + t2[e2], t2 = t2.join(r2 > 2 ? ", " : " "), n2.replace(Ut, "{\n/* [wrapped with " + t2 + "] */\n");
      }
      function Li(n2) {
        return bh(n2) || dh(n2) || !!(Cl && n2 && n2[Cl]);
      }
      function Ci(n2, t2) {
        var r2 = typeof n2;
        return t2 = null == t2 ? Wn : t2, !!t2 && ("number" == r2 || "symbol" != r2 && Vt.test(n2)) && n2 > -1 && n2 % 1 == 0 && n2 < t2;
      }
      function Ui(n2, t2, r2) {
        if (!fc(r2))
          return false;
        var e2 = typeof t2;
        return !!("number" == e2 ? Hf(r2) && Ci(t2, r2.length) : "string" == e2 && t2 in r2) && Gf(r2[t2], n2);
      }
      function Bi(n2, t2) {
        if (bh(n2))
          return false;
        var r2 = typeof n2;
        return !("number" != r2 && "symbol" != r2 && "boolean" != r2 && null != n2 && !bc(n2)) || (zt.test(n2) || !Rt.test(n2) || null != t2 && n2 in ll(t2));
      }
      function Ti(n2) {
        var t2 = typeof n2;
        return "string" == t2 || "number" == t2 || "symbol" == t2 || "boolean" == t2 ? "__proto__" !== n2 : null === n2;
      }
      function $i(n2) {
        var t2 = bi(n2), r2 = Z2[t2];
        if ("function" != typeof r2 || !(t2 in Ct2.prototype))
          return false;
        if (n2 === r2)
          return true;
        var e2 = Os(r2);
        return !!e2 && n2 === e2[0];
      }
      function Di(n2) {
        return !!ml && ml in n2;
      }
      function Mi(n2) {
        var t2 = n2 && n2.constructor;
        return n2 === ("function" == typeof t2 && t2.prototype || gl);
      }
      function Fi(n2) {
        return n2 === n2 && !fc(n2);
      }
      function Ni(n2, t2) {
        return function(r2) {
          return null != r2 && (r2[n2] === t2 && (t2 !== X || n2 in ll(r2)));
        };
      }
      function Pi(n2) {
        var t2 = Cf(n2, function(n3) {
          return r2.size === fn && r2.clear(), n3;
        }), r2 = t2.cache;
        return t2;
      }
      function qi(n2, t2) {
        var r2 = n2[1], e2 = t2[1], u3 = r2 | e2, i2 = u3 < (_n | vn | mn), o2 = e2 == mn && r2 == yn || e2 == mn && r2 == xn && n2[7].length <= t2[8] || e2 == (mn | xn) && t2[7].length <= t2[8] && r2 == yn;
        if (!i2 && !o2)
          return n2;
        e2 & _n && (n2[2] = t2[2], u3 |= r2 & _n ? 0 : gn);
        var f2 = t2[3];
        if (f2) {
          var c2 = n2[3];
          n2[3] = c2 ? Uu(c2, f2, t2[4]) : f2, n2[4] = c2 ? N(n2[3], cn) : t2[4];
        }
        return f2 = t2[5], f2 && (c2 = n2[5], n2[5] = c2 ? Bu(c2, f2, t2[6]) : f2, n2[6] = c2 ? N(n2[5], cn) : t2[6]), f2 = t2[7], f2 && (n2[7] = f2), e2 & mn && (n2[8] = null == n2[8] ? t2[8] : Hl(n2[8], t2[8])), null == n2[9] && (n2[9] = t2[9]), n2[0] = t2[0], n2[1] = u3, n2;
      }
      function Zi(n2) {
        var t2 = [];
        if (null != n2)
          for (var r2 in ll(n2))
            t2.push(r2);
        return t2;
      }
      function Ki(n2) {
        return xl.call(n2);
      }
      function Vi(t2, r2, e2) {
        return r2 = Gl(r2 === X ? t2.length - 1 : r2, 0), function() {
          for (var u3 = arguments, i2 = -1, o2 = Gl(u3.length - r2, 0), f2 = il(o2); ++i2 < o2; )
            f2[i2] = u3[r2 + i2];
          i2 = -1;
          for (var c2 = il(r2 + 1); ++i2 < r2; )
            c2[i2] = u3[i2];
          return c2[r2] = e2(f2), n(t2, this, c2);
        };
      }
      function Gi(n2, t2) {
        return t2.length < 2 ? n2 : _e2(n2, au(t2, 0, -1));
      }
      function Hi(n2, t2) {
        for (var r2 = n2.length, e2 = Hl(t2.length, r2), u3 = Tu(n2); e2--; ) {
          var i2 = t2[e2];
          n2[e2] = Ci(i2, r2) ? u3[i2] : X;
        }
        return n2;
      }
      function Ji(n2, t2) {
        if (("constructor" !== t2 || "function" != typeof n2[t2]) && "__proto__" != t2)
          return n2[t2];
      }
      function Yi(n2, t2, r2) {
        var e2 = t2 + "";
        return Ls(n2, Wi(e2, ro(Ii(e2), r2)));
      }
      function Qi(n2) {
        var t2 = 0, r2 = 0;
        return function() {
          var e2 = Jl(), u3 = In - (e2 - r2);
          if (r2 = e2, u3 > 0) {
            if (++t2 >= On)
              return arguments[0];
          } else
            t2 = 0;
          return n2.apply(X, arguments);
        };
      }
      function Xi(n2, t2) {
        var r2 = -1, e2 = n2.length, u3 = e2 - 1;
        for (t2 = t2 === X ? e2 : t2; ++r2 < t2; ) {
          var i2 = tu(r2, u3), o2 = n2[i2];
          n2[i2] = n2[r2], n2[r2] = o2;
        }
        return n2.length = t2, n2;
      }
      function no(n2) {
        if ("string" == typeof n2 || bc(n2))
          return n2;
        var t2 = n2 + "";
        return "0" == t2 && 1 / n2 == -Sn ? "-0" : t2;
      }
      function to(n2) {
        if (null != n2) {
          try {
            return dl.call(n2);
          } catch (n3) {
          }
          try {
            return n2 + "";
          } catch (n3) {
          }
        }
        return "";
      }
      function ro(n2, t2) {
        return r($n, function(r2) {
          var e2 = "_." + r2[0];
          t2 & r2[1] && !o(n2, e2) && n2.push(e2);
        }), n2.sort();
      }
      function eo(n2) {
        if (n2 instanceof Ct2)
          return n2.clone();
        var t2 = new Y2(n2.__wrapped__, n2.__chain__);
        return t2.__actions__ = Tu(n2.__actions__), t2.__index__ = n2.__index__, t2.__values__ = n2.__values__, t2;
      }
      function uo(n2, t2, r2) {
        t2 = (r2 ? Ui(n2, t2, r2) : t2 === X) ? 1 : Gl(kc(t2), 0);
        var e2 = null == n2 ? 0 : n2.length;
        if (!e2 || t2 < 1)
          return [];
        for (var u3 = 0, i2 = 0, o2 = il(Fl(e2 / t2)); u3 < e2; )
          o2[i2++] = au(n2, u3, u3 += t2);
        return o2;
      }
      function io(n2) {
        for (var t2 = -1, r2 = null == n2 ? 0 : n2.length, e2 = 0, u3 = []; ++t2 < r2; ) {
          var i2 = n2[t2];
          i2 && (u3[e2++] = i2);
        }
        return u3;
      }
      function oo() {
        var n2 = arguments.length;
        if (!n2)
          return [];
        for (var t2 = il(n2 - 1), r2 = arguments[0], e2 = n2; e2--; )
          t2[e2 - 1] = arguments[e2];
        return a(bh(r2) ? Tu(r2) : [r2], ee2(t2, 1));
      }
      function fo(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        return e2 ? (t2 = r2 || t2 === X ? 1 : kc(t2), au(n2, t2 < 0 ? 0 : t2, e2)) : [];
      }
      function co(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        return e2 ? (t2 = r2 || t2 === X ? 1 : kc(t2), t2 = e2 - t2, au(n2, 0, t2 < 0 ? 0 : t2)) : [];
      }
      function ao(n2, t2) {
        return n2 && n2.length ? bu(n2, mi(t2, 3), true, true) : [];
      }
      function lo(n2, t2) {
        return n2 && n2.length ? bu(n2, mi(t2, 3), true) : [];
      }
      function so(n2, t2, r2, e2) {
        var u3 = null == n2 ? 0 : n2.length;
        return u3 ? (r2 && "number" != typeof r2 && Ui(n2, t2, r2) && (r2 = 0, e2 = u3), ne2(n2, t2, r2, e2)) : [];
      }
      function ho(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        if (!e2)
          return -1;
        var u3 = null == r2 ? 0 : kc(r2);
        return u3 < 0 && (u3 = Gl(e2 + u3, 0)), g(n2, mi(t2, 3), u3);
      }
      function po(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        if (!e2)
          return -1;
        var u3 = e2 - 1;
        return r2 !== X && (u3 = kc(r2), u3 = r2 < 0 ? Gl(e2 + u3, 0) : Hl(u3, e2 - 1)), g(n2, mi(t2, 3), u3, true);
      }
      function _o(n2) {
        return (null == n2 ? 0 : n2.length) ? ee2(n2, 1) : [];
      }
      function vo(n2) {
        return (null == n2 ? 0 : n2.length) ? ee2(n2, Sn) : [];
      }
      function go(n2, t2) {
        return (null == n2 ? 0 : n2.length) ? (t2 = t2 === X ? 1 : kc(t2), ee2(n2, t2)) : [];
      }
      function yo(n2) {
        for (var t2 = -1, r2 = null == n2 ? 0 : n2.length, e2 = {}; ++t2 < r2; ) {
          var u3 = n2[t2];
          e2[u3[0]] = u3[1];
        }
        return e2;
      }
      function bo(n2) {
        return n2 && n2.length ? n2[0] : X;
      }
      function wo(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        if (!e2)
          return -1;
        var u3 = null == r2 ? 0 : kc(r2);
        return u3 < 0 && (u3 = Gl(e2 + u3, 0)), y(n2, t2, u3);
      }
      function mo(n2) {
        return (null == n2 ? 0 : n2.length) ? au(n2, 0, -1) : [];
      }
      function xo(n2, t2) {
        return null == n2 ? "" : Kl.call(n2, t2);
      }
      function jo(n2) {
        var t2 = null == n2 ? 0 : n2.length;
        return t2 ? n2[t2 - 1] : X;
      }
      function Ao(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        if (!e2)
          return -1;
        var u3 = e2;
        return r2 !== X && (u3 = kc(r2), u3 = u3 < 0 ? Gl(e2 + u3, 0) : Hl(u3, e2 - 1)), t2 === t2 ? K(n2, t2, u3) : g(n2, b, u3, true);
      }
      function ko(n2, t2) {
        return n2 && n2.length ? Ge(n2, kc(t2)) : X;
      }
      function Oo(n2, t2) {
        return n2 && n2.length && t2 && t2.length ? Xe(n2, t2) : n2;
      }
      function Io(n2, t2, r2) {
        return n2 && n2.length && t2 && t2.length ? Xe(n2, t2, mi(r2, 2)) : n2;
      }
      function Ro(n2, t2, r2) {
        return n2 && n2.length && t2 && t2.length ? Xe(n2, t2, X, r2) : n2;
      }
      function zo(n2, t2) {
        var r2 = [];
        if (!n2 || !n2.length)
          return r2;
        var e2 = -1, u3 = [], i2 = n2.length;
        for (t2 = mi(t2, 3); ++e2 < i2; ) {
          var o2 = n2[e2];
          t2(o2, e2, n2) && (r2.push(o2), u3.push(e2));
        }
        return nu(n2, u3), r2;
      }
      function Eo(n2) {
        return null == n2 ? n2 : Xl.call(n2);
      }
      function So(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        return e2 ? (r2 && "number" != typeof r2 && Ui(n2, t2, r2) ? (t2 = 0, r2 = e2) : (t2 = null == t2 ? 0 : kc(t2), r2 = r2 === X ? e2 : kc(r2)), au(n2, t2, r2)) : [];
      }
      function Wo(n2, t2) {
        return su(n2, t2);
      }
      function Lo(n2, t2, r2) {
        return hu(n2, t2, mi(r2, 2));
      }
      function Co(n2, t2) {
        var r2 = null == n2 ? 0 : n2.length;
        if (r2) {
          var e2 = su(n2, t2);
          if (e2 < r2 && Gf(n2[e2], t2))
            return e2;
        }
        return -1;
      }
      function Uo(n2, t2) {
        return su(n2, t2, true);
      }
      function Bo(n2, t2, r2) {
        return hu(n2, t2, mi(r2, 2), true);
      }
      function To(n2, t2) {
        if (null == n2 ? 0 : n2.length) {
          var r2 = su(n2, t2, true) - 1;
          if (Gf(n2[r2], t2))
            return r2;
        }
        return -1;
      }
      function $o(n2) {
        return n2 && n2.length ? pu(n2) : [];
      }
      function Do(n2, t2) {
        return n2 && n2.length ? pu(n2, mi(t2, 2)) : [];
      }
      function Mo(n2) {
        var t2 = null == n2 ? 0 : n2.length;
        return t2 ? au(n2, 1, t2) : [];
      }
      function Fo(n2, t2, r2) {
        return n2 && n2.length ? (t2 = r2 || t2 === X ? 1 : kc(t2), au(n2, 0, t2 < 0 ? 0 : t2)) : [];
      }
      function No(n2, t2, r2) {
        var e2 = null == n2 ? 0 : n2.length;
        return e2 ? (t2 = r2 || t2 === X ? 1 : kc(t2), t2 = e2 - t2, au(n2, t2 < 0 ? 0 : t2, e2)) : [];
      }
      function Po(n2, t2) {
        return n2 && n2.length ? bu(n2, mi(t2, 3), false, true) : [];
      }
      function qo(n2, t2) {
        return n2 && n2.length ? bu(n2, mi(t2, 3)) : [];
      }
      function Zo(n2) {
        return n2 && n2.length ? gu(n2) : [];
      }
      function Ko(n2, t2) {
        return n2 && n2.length ? gu(n2, mi(t2, 2)) : [];
      }
      function Vo(n2, t2) {
        return t2 = "function" == typeof t2 ? t2 : X, n2 && n2.length ? gu(n2, X, t2) : [];
      }
      function Go(n2) {
        if (!n2 || !n2.length)
          return [];
        var t2 = 0;
        return n2 = i(n2, function(n3) {
          if (Jf(n3))
            return t2 = Gl(n3.length, t2), true;
        }), O(t2, function(t3) {
          return c(n2, m(t3));
        });
      }
      function Ho(t2, r2) {
        if (!t2 || !t2.length)
          return [];
        var e2 = Go(t2);
        return null == r2 ? e2 : c(e2, function(t3) {
          return n(r2, X, t3);
        });
      }
      function Jo(n2, t2) {
        return xu(n2 || [], t2 || [], Sr2);
      }
      function Yo(n2, t2) {
        return xu(n2 || [], t2 || [], fu);
      }
      function Qo(n2) {
        var t2 = Z2(n2);
        return t2.__chain__ = true, t2;
      }
      function Xo(n2, t2) {
        return t2(n2), n2;
      }
      function nf(n2, t2) {
        return t2(n2);
      }
      function tf() {
        return Qo(this);
      }
      function rf() {
        return new Y2(this.value(), this.__chain__);
      }
      function ef() {
        this.__values__ === X && (this.__values__ = jc(this.value()));
        var n2 = this.__index__ >= this.__values__.length;
        return { done: n2, value: n2 ? X : this.__values__[this.__index__++] };
      }
      function uf() {
        return this;
      }
      function of(n2) {
        for (var t2, r2 = this; r2 instanceof J2; ) {
          var e2 = eo(r2);
          e2.__index__ = 0, e2.__values__ = X, t2 ? u3.__wrapped__ = e2 : t2 = e2;
          var u3 = e2;
          r2 = r2.__wrapped__;
        }
        return u3.__wrapped__ = n2, t2;
      }
      function ff() {
        var n2 = this.__wrapped__;
        if (n2 instanceof Ct2) {
          var t2 = n2;
          return this.__actions__.length && (t2 = new Ct2(this)), t2 = t2.reverse(), t2.__actions__.push({ func: nf, args: [Eo], thisArg: X }), new Y2(t2, this.__chain__);
        }
        return this.thru(Eo);
      }
      function cf() {
        return wu(this.__wrapped__, this.__actions__);
      }
      function af(n2, t2, r2) {
        var e2 = bh(n2) ? u2 : Jr2;
        return r2 && Ui(n2, t2, r2) && (t2 = X), e2(n2, mi(t2, 3));
      }
      function lf(n2, t2) {
        return (bh(n2) ? i : te2)(n2, mi(t2, 3));
      }
      function sf(n2, t2) {
        return ee2(yf(n2, t2), 1);
      }
      function hf(n2, t2) {
        return ee2(yf(n2, t2), Sn);
      }
      function pf(n2, t2, r2) {
        return r2 = r2 === X ? 1 : kc(r2), ee2(yf(n2, t2), r2);
      }
      function _f(n2, t2) {
        return (bh(n2) ? r : ys)(n2, mi(t2, 3));
      }
      function vf(n2, t2) {
        return (bh(n2) ? e : ds)(n2, mi(t2, 3));
      }
      function gf(n2, t2, r2, e2) {
        n2 = Hf(n2) ? n2 : ra(n2), r2 = r2 && !e2 ? kc(r2) : 0;
        var u3 = n2.length;
        return r2 < 0 && (r2 = Gl(u3 + r2, 0)), dc(n2) ? r2 <= u3 && n2.indexOf(t2, r2) > -1 : !!u3 && y(n2, t2, r2) > -1;
      }
      function yf(n2, t2) {
        return (bh(n2) ? c : Pe)(n2, mi(t2, 3));
      }
      function df(n2, t2, r2, e2) {
        return null == n2 ? [] : (bh(t2) || (t2 = null == t2 ? [] : [t2]), r2 = e2 ? X : r2, bh(r2) || (r2 = null == r2 ? [] : [r2]), He(n2, t2, r2));
      }
      function bf(n2, t2, r2) {
        var e2 = bh(n2) ? l : j, u3 = arguments.length < 3;
        return e2(n2, mi(t2, 4), r2, u3, ys);
      }
      function wf(n2, t2, r2) {
        var e2 = bh(n2) ? s : j, u3 = arguments.length < 3;
        return e2(n2, mi(t2, 4), r2, u3, ds);
      }
      function mf(n2, t2) {
        return (bh(n2) ? i : te2)(n2, Uf(mi(t2, 3)));
      }
      function xf(n2) {
        return (bh(n2) ? Ir2 : iu)(n2);
      }
      function jf(n2, t2, r2) {
        return t2 = (r2 ? Ui(n2, t2, r2) : t2 === X) ? 1 : kc(t2), (bh(n2) ? Rr2 : ou)(n2, t2);
      }
      function Af(n2) {
        return (bh(n2) ? zr2 : cu)(n2);
      }
      function kf(n2) {
        if (null == n2)
          return 0;
        if (Hf(n2))
          return dc(n2) ? V(n2) : n2.length;
        var t2 = zs(n2);
        return t2 == Gn || t2 == tt ? n2.size : Me(n2).length;
      }
      function Of(n2, t2, r2) {
        var e2 = bh(n2) ? h : lu;
        return r2 && Ui(n2, t2, r2) && (t2 = X), e2(n2, mi(t2, 3));
      }
      function If(n2, t2) {
        if ("function" != typeof t2)
          throw new pl(en);
        return n2 = kc(n2), function() {
          if (--n2 < 1)
            return t2.apply(this, arguments);
        };
      }
      function Rf(n2, t2, r2) {
        return t2 = r2 ? X : t2, t2 = n2 && null == t2 ? n2.length : t2, ai(n2, mn, X, X, X, X, t2);
      }
      function zf(n2, t2) {
        var r2;
        if ("function" != typeof t2)
          throw new pl(en);
        return n2 = kc(n2), function() {
          return --n2 > 0 && (r2 = t2.apply(this, arguments)), n2 <= 1 && (t2 = X), r2;
        };
      }
      function Ef(n2, t2, r2) {
        t2 = r2 ? X : t2;
        var e2 = ai(n2, yn, X, X, X, X, X, t2);
        return e2.placeholder = Ef.placeholder, e2;
      }
      function Sf(n2, t2, r2) {
        t2 = r2 ? X : t2;
        var e2 = ai(n2, dn, X, X, X, X, X, t2);
        return e2.placeholder = Sf.placeholder, e2;
      }
      function Wf(n2, t2, r2) {
        function e2(t3) {
          var r3 = h2, e3 = p3;
          return h2 = p3 = X, d2 = t3, v2 = n2.apply(e3, r3);
        }
        function u3(n3) {
          return d2 = n3, g2 = Ws(f2, t2), b2 ? e2(n3) : v2;
        }
        function i2(n3) {
          var r3 = n3 - y2, e3 = n3 - d2, u4 = t2 - r3;
          return w2 ? Hl(u4, _3 - e3) : u4;
        }
        function o2(n3) {
          var r3 = n3 - y2, e3 = n3 - d2;
          return y2 === X || r3 >= t2 || r3 < 0 || w2 && e3 >= _3;
        }
        function f2() {
          var n3 = fh();
          return o2(n3) ? c2(n3) : (g2 = Ws(f2, i2(n3)), X);
        }
        function c2(n3) {
          return g2 = X, m2 && h2 ? e2(n3) : (h2 = p3 = X, v2);
        }
        function a2() {
          g2 !== X && As(g2), d2 = 0, h2 = y2 = p3 = g2 = X;
        }
        function l2() {
          return g2 === X ? v2 : c2(fh());
        }
        function s2() {
          var n3 = fh(), r3 = o2(n3);
          if (h2 = arguments, p3 = this, y2 = n3, r3) {
            if (g2 === X)
              return u3(y2);
            if (w2)
              return As(g2), g2 = Ws(f2, t2), e2(y2);
          }
          return g2 === X && (g2 = Ws(f2, t2)), v2;
        }
        var h2, p3, _3, v2, g2, y2, d2 = 0, b2 = false, w2 = false, m2 = true;
        if ("function" != typeof n2)
          throw new pl(en);
        return t2 = Ic(t2) || 0, fc(r2) && (b2 = !!r2.leading, w2 = "maxWait" in r2, _3 = w2 ? Gl(Ic(r2.maxWait) || 0, t2) : _3, m2 = "trailing" in r2 ? !!r2.trailing : m2), s2.cancel = a2, s2.flush = l2, s2;
      }
      function Lf(n2) {
        return ai(n2, jn);
      }
      function Cf(n2, t2) {
        if ("function" != typeof n2 || null != t2 && "function" != typeof t2)
          throw new pl(en);
        var r2 = function() {
          var e2 = arguments, u3 = t2 ? t2.apply(this, e2) : e2[0], i2 = r2.cache;
          if (i2.has(u3))
            return i2.get(u3);
          var o2 = n2.apply(this, e2);
          return r2.cache = i2.set(u3, o2) || i2, o2;
        };
        return r2.cache = new (Cf.Cache || sr2)(), r2;
      }
      function Uf(n2) {
        if ("function" != typeof n2)
          throw new pl(en);
        return function() {
          var t2 = arguments;
          switch (t2.length) {
            case 0:
              return !n2.call(this);
            case 1:
              return !n2.call(this, t2[0]);
            case 2:
              return !n2.call(this, t2[0], t2[1]);
            case 3:
              return !n2.call(this, t2[0], t2[1], t2[2]);
          }
          return !n2.apply(this, t2);
        };
      }
      function Bf(n2) {
        return zf(2, n2);
      }
      function Tf(n2, t2) {
        if ("function" != typeof n2)
          throw new pl(en);
        return t2 = t2 === X ? t2 : kc(t2), uu(n2, t2);
      }
      function $f(t2, r2) {
        if ("function" != typeof t2)
          throw new pl(en);
        return r2 = null == r2 ? 0 : Gl(kc(r2), 0), uu(function(e2) {
          var u3 = e2[r2], i2 = Ou(e2, 0, r2);
          return u3 && a(i2, u3), n(t2, this, i2);
        });
      }
      function Df(n2, t2, r2) {
        var e2 = true, u3 = true;
        if ("function" != typeof n2)
          throw new pl(en);
        return fc(r2) && (e2 = "leading" in r2 ? !!r2.leading : e2, u3 = "trailing" in r2 ? !!r2.trailing : u3), Wf(n2, t2, { leading: e2, maxWait: t2, trailing: u3 });
      }
      function Mf(n2) {
        return Rf(n2, 1);
      }
      function Ff(n2, t2) {
        return ph(Au(t2), n2);
      }
      function Nf() {
        if (!arguments.length)
          return [];
        var n2 = arguments[0];
        return bh(n2) ? n2 : [n2];
      }
      function Pf(n2) {
        return Fr2(n2, sn);
      }
      function qf(n2, t2) {
        return t2 = "function" == typeof t2 ? t2 : X, Fr2(n2, sn, t2);
      }
      function Zf(n2) {
        return Fr2(n2, an | sn);
      }
      function Kf(n2, t2) {
        return t2 = "function" == typeof t2 ? t2 : X, Fr2(n2, an | sn, t2);
      }
      function Vf(n2, t2) {
        return null == t2 || Pr2(n2, t2, Pc(t2));
      }
      function Gf(n2, t2) {
        return n2 === t2 || n2 !== n2 && t2 !== t2;
      }
      function Hf(n2) {
        return null != n2 && oc(n2.length) && !uc(n2);
      }
      function Jf(n2) {
        return cc(n2) && Hf(n2);
      }
      function Yf(n2) {
        return n2 === true || n2 === false || cc(n2) && we(n2) == Nn;
      }
      function Qf(n2) {
        return cc(n2) && 1 === n2.nodeType && !gc(n2);
      }
      function Xf(n2) {
        if (null == n2)
          return true;
        if (Hf(n2) && (bh(n2) || "string" == typeof n2 || "function" == typeof n2.splice || mh(n2) || Oh(n2) || dh(n2)))
          return !n2.length;
        var t2 = zs(n2);
        if (t2 == Gn || t2 == tt)
          return !n2.size;
        if (Mi(n2))
          return !Me(n2).length;
        for (var r2 in n2)
          if (bl.call(n2, r2))
            return false;
        return true;
      }
      function nc(n2, t2) {
        return Se(n2, t2);
      }
      function tc(n2, t2, r2) {
        r2 = "function" == typeof r2 ? r2 : X;
        var e2 = r2 ? r2(n2, t2) : X;
        return e2 === X ? Se(n2, t2, X, r2) : !!e2;
      }
      function rc(n2) {
        if (!cc(n2))
          return false;
        var t2 = we(n2);
        return t2 == Zn || t2 == qn || "string" == typeof n2.message && "string" == typeof n2.name && !gc(n2);
      }
      function ec(n2) {
        return "number" == typeof n2 && Zl(n2);
      }
      function uc(n2) {
        if (!fc(n2))
          return false;
        var t2 = we(n2);
        return t2 == Kn || t2 == Vn || t2 == Fn || t2 == Xn;
      }
      function ic(n2) {
        return "number" == typeof n2 && n2 == kc(n2);
      }
      function oc(n2) {
        return "number" == typeof n2 && n2 > -1 && n2 % 1 == 0 && n2 <= Wn;
      }
      function fc(n2) {
        var t2 = typeof n2;
        return null != n2 && ("object" == t2 || "function" == t2);
      }
      function cc(n2) {
        return null != n2 && "object" == typeof n2;
      }
      function ac(n2, t2) {
        return n2 === t2 || Ce(n2, t2, ji(t2));
      }
      function lc(n2, t2, r2) {
        return r2 = "function" == typeof r2 ? r2 : X, Ce(n2, t2, ji(t2), r2);
      }
      function sc(n2) {
        return vc(n2) && n2 != +n2;
      }
      function hc(n2) {
        if (Es(n2))
          throw new fl(rn);
        return Ue(n2);
      }
      function pc(n2) {
        return null === n2;
      }
      function _c(n2) {
        return null == n2;
      }
      function vc(n2) {
        return "number" == typeof n2 || cc(n2) && we(n2) == Hn;
      }
      function gc(n2) {
        if (!cc(n2) || we(n2) != Yn)
          return false;
        var t2 = El(n2);
        if (null === t2)
          return true;
        var r2 = bl.call(t2, "constructor") && t2.constructor;
        return "function" == typeof r2 && r2 instanceof r2 && dl.call(r2) == jl;
      }
      function yc(n2) {
        return ic(n2) && n2 >= -Wn && n2 <= Wn;
      }
      function dc(n2) {
        return "string" == typeof n2 || !bh(n2) && cc(n2) && we(n2) == rt;
      }
      function bc(n2) {
        return "symbol" == typeof n2 || cc(n2) && we(n2) == et;
      }
      function wc(n2) {
        return n2 === X;
      }
      function mc(n2) {
        return cc(n2) && zs(n2) == it;
      }
      function xc(n2) {
        return cc(n2) && we(n2) == ot;
      }
      function jc(n2) {
        if (!n2)
          return [];
        if (Hf(n2))
          return dc(n2) ? G(n2) : Tu(n2);
        if (Ul && n2[Ul])
          return D(n2[Ul]());
        var t2 = zs(n2);
        return (t2 == Gn ? M : t2 == tt ? P : ra)(n2);
      }
      function Ac(n2) {
        if (!n2)
          return 0 === n2 ? n2 : 0;
        if (n2 = Ic(n2), n2 === Sn || n2 === -Sn) {
          return (n2 < 0 ? -1 : 1) * Ln;
        }
        return n2 === n2 ? n2 : 0;
      }
      function kc(n2) {
        var t2 = Ac(n2), r2 = t2 % 1;
        return t2 === t2 ? r2 ? t2 - r2 : t2 : 0;
      }
      function Oc(n2) {
        return n2 ? Mr2(kc(n2), 0, Un) : 0;
      }
      function Ic(n2) {
        if ("number" == typeof n2)
          return n2;
        if (bc(n2))
          return Cn;
        if (fc(n2)) {
          var t2 = "function" == typeof n2.valueOf ? n2.valueOf() : n2;
          n2 = fc(t2) ? t2 + "" : t2;
        }
        if ("string" != typeof n2)
          return 0 === n2 ? n2 : +n2;
        n2 = R(n2);
        var r2 = qt.test(n2);
        return r2 || Kt.test(n2) ? Xr(n2.slice(2), r2 ? 2 : 8) : Pt.test(n2) ? Cn : +n2;
      }
      function Rc(n2) {
        return $u(n2, qc(n2));
      }
      function zc(n2) {
        return n2 ? Mr2(kc(n2), -Wn, Wn) : 0 === n2 ? n2 : 0;
      }
      function Ec(n2) {
        return null == n2 ? "" : vu(n2);
      }
      function Sc(n2, t2) {
        var r2 = gs(n2);
        return null == t2 ? r2 : Cr2(r2, t2);
      }
      function Wc(n2, t2) {
        return v(n2, mi(t2, 3), ue2);
      }
      function Lc(n2, t2) {
        return v(n2, mi(t2, 3), oe2);
      }
      function Cc(n2, t2) {
        return null == n2 ? n2 : bs(n2, mi(t2, 3), qc);
      }
      function Uc(n2, t2) {
        return null == n2 ? n2 : ws(n2, mi(t2, 3), qc);
      }
      function Bc(n2, t2) {
        return n2 && ue2(n2, mi(t2, 3));
      }
      function Tc(n2, t2) {
        return n2 && oe2(n2, mi(t2, 3));
      }
      function $c(n2) {
        return null == n2 ? [] : fe2(n2, Pc(n2));
      }
      function Dc(n2) {
        return null == n2 ? [] : fe2(n2, qc(n2));
      }
      function Mc(n2, t2, r2) {
        var e2 = null == n2 ? X : _e2(n2, t2);
        return e2 === X ? r2 : e2;
      }
      function Fc(n2, t2) {
        return null != n2 && Ri(n2, t2, xe);
      }
      function Nc(n2, t2) {
        return null != n2 && Ri(n2, t2, je);
      }
      function Pc(n2) {
        return Hf(n2) ? Or2(n2) : Me(n2);
      }
      function qc(n2) {
        return Hf(n2) ? Or2(n2, true) : Fe(n2);
      }
      function Zc(n2, t2) {
        var r2 = {};
        return t2 = mi(t2, 3), ue2(n2, function(n3, e2, u3) {
          Br2(r2, t2(n3, e2, u3), n3);
        }), r2;
      }
      function Kc(n2, t2) {
        var r2 = {};
        return t2 = mi(t2, 3), ue2(n2, function(n3, e2, u3) {
          Br2(r2, e2, t2(n3, e2, u3));
        }), r2;
      }
      function Vc(n2, t2) {
        return Gc(n2, Uf(mi(t2)));
      }
      function Gc(n2, t2) {
        if (null == n2)
          return {};
        var r2 = c(di(n2), function(n3) {
          return [n3];
        });
        return t2 = mi(t2), Ye(n2, r2, function(n3, r3) {
          return t2(n3, r3[0]);
        });
      }
      function Hc(n2, t2, r2) {
        t2 = ku(t2, n2);
        var e2 = -1, u3 = t2.length;
        for (u3 || (u3 = 1, n2 = X); ++e2 < u3; ) {
          var i2 = null == n2 ? X : n2[no(t2[e2])];
          i2 === X && (e2 = u3, i2 = r2), n2 = uc(i2) ? i2.call(n2) : i2;
        }
        return n2;
      }
      function Jc(n2, t2, r2) {
        return null == n2 ? n2 : fu(n2, t2, r2);
      }
      function Yc(n2, t2, r2, e2) {
        return e2 = "function" == typeof e2 ? e2 : X, null == n2 ? n2 : fu(n2, t2, r2, e2);
      }
      function Qc(n2, t2, e2) {
        var u3 = bh(n2), i2 = u3 || mh(n2) || Oh(n2);
        if (t2 = mi(t2, 4), null == e2) {
          var o2 = n2 && n2.constructor;
          e2 = i2 ? u3 ? new o2() : [] : fc(n2) && uc(o2) ? gs(El(n2)) : {};
        }
        return (i2 ? r : ue2)(n2, function(n3, r2, u4) {
          return t2(e2, n3, r2, u4);
        }), e2;
      }
      function Xc(n2, t2) {
        return null == n2 || yu(n2, t2);
      }
      function na(n2, t2, r2) {
        return null == n2 ? n2 : du(n2, t2, Au(r2));
      }
      function ta(n2, t2, r2, e2) {
        return e2 = "function" == typeof e2 ? e2 : X, null == n2 ? n2 : du(n2, t2, Au(r2), e2);
      }
      function ra(n2) {
        return null == n2 ? [] : E(n2, Pc(n2));
      }
      function ea(n2) {
        return null == n2 ? [] : E(n2, qc(n2));
      }
      function ua(n2, t2, r2) {
        return r2 === X && (r2 = t2, t2 = X), r2 !== X && (r2 = Ic(r2), r2 = r2 === r2 ? r2 : 0), t2 !== X && (t2 = Ic(t2), t2 = t2 === t2 ? t2 : 0), Mr2(Ic(n2), t2, r2);
      }
      function ia(n2, t2, r2) {
        return t2 = Ac(t2), r2 === X ? (r2 = t2, t2 = 0) : r2 = Ac(r2), n2 = Ic(n2), Ae(n2, t2, r2);
      }
      function oa(n2, t2, r2) {
        if (r2 && "boolean" != typeof r2 && Ui(n2, t2, r2) && (t2 = r2 = X), r2 === X && ("boolean" == typeof t2 ? (r2 = t2, t2 = X) : "boolean" == typeof n2 && (r2 = n2, n2 = X)), n2 === X && t2 === X ? (n2 = 0, t2 = 1) : (n2 = Ac(n2), t2 === X ? (t2 = n2, n2 = 0) : t2 = Ac(t2)), n2 > t2) {
          var e2 = n2;
          n2 = t2, t2 = e2;
        }
        if (r2 || n2 % 1 || t2 % 1) {
          var u3 = Ql();
          return Hl(n2 + u3 * (t2 - n2 + Qr("1e-" + ((u3 + "").length - 1))), t2);
        }
        return tu(n2, t2);
      }
      function fa(n2) {
        return Qh(Ec(n2).toLowerCase());
      }
      function ca(n2) {
        return n2 = Ec(n2), n2 && n2.replace(Gt, ve).replace(Dr, "");
      }
      function aa(n2, t2, r2) {
        n2 = Ec(n2), t2 = vu(t2);
        var e2 = n2.length;
        r2 = r2 === X ? e2 : Mr2(kc(r2), 0, e2);
        var u3 = r2;
        return r2 -= t2.length, r2 >= 0 && n2.slice(r2, u3) == t2;
      }
      function la(n2) {
        return n2 = Ec(n2), n2 && At.test(n2) ? n2.replace(xt, ge) : n2;
      }
      function sa(n2) {
        return n2 = Ec(n2), n2 && Wt.test(n2) ? n2.replace(St, "\\$&") : n2;
      }
      function ha(n2, t2, r2) {
        n2 = Ec(n2), t2 = kc(t2);
        var e2 = t2 ? V(n2) : 0;
        if (!t2 || e2 >= t2)
          return n2;
        var u3 = (t2 - e2) / 2;
        return ri(Nl(u3), r2) + n2 + ri(Fl(u3), r2);
      }
      function pa(n2, t2, r2) {
        n2 = Ec(n2), t2 = kc(t2);
        var e2 = t2 ? V(n2) : 0;
        return t2 && e2 < t2 ? n2 + ri(t2 - e2, r2) : n2;
      }
      function _a(n2, t2, r2) {
        n2 = Ec(n2), t2 = kc(t2);
        var e2 = t2 ? V(n2) : 0;
        return t2 && e2 < t2 ? ri(t2 - e2, r2) + n2 : n2;
      }
      function va(n2, t2, r2) {
        return r2 || null == t2 ? t2 = 0 : t2 && (t2 = +t2), Yl(Ec(n2).replace(Lt, ""), t2 || 0);
      }
      function ga(n2, t2, r2) {
        return t2 = (r2 ? Ui(n2, t2, r2) : t2 === X) ? 1 : kc(t2), eu(Ec(n2), t2);
      }
      function ya() {
        var n2 = arguments, t2 = Ec(n2[0]);
        return n2.length < 3 ? t2 : t2.replace(n2[1], n2[2]);
      }
      function da(n2, t2, r2) {
        return r2 && "number" != typeof r2 && Ui(n2, t2, r2) && (t2 = r2 = X), (r2 = r2 === X ? Un : r2 >>> 0) ? (n2 = Ec(n2), n2 && ("string" == typeof t2 || null != t2 && !Ah(t2)) && (t2 = vu(t2), !t2 && T(n2)) ? Ou(G(n2), 0, r2) : n2.split(t2, r2)) : [];
      }
      function ba(n2, t2, r2) {
        return n2 = Ec(n2), r2 = null == r2 ? 0 : Mr2(kc(r2), 0, n2.length), t2 = vu(t2), n2.slice(r2, r2 + t2.length) == t2;
      }
      function wa(n2, t2, r2) {
        var e2 = Z2.templateSettings;
        r2 && Ui(n2, t2, r2) && (t2 = X), n2 = Ec(n2), t2 = Sh({}, t2, e2, li);
        var u3, i2, o2 = Sh({}, t2.imports, e2.imports, li), f2 = Pc(o2), c2 = E(o2, f2), a2 = 0, l2 = t2.interpolate || Ht, s2 = "__p += '", h2 = sl((t2.escape || Ht).source + "|" + l2.source + "|" + (l2 === It ? Ft : Ht).source + "|" + (t2.evaluate || Ht).source + "|$", "g"), p3 = "//# sourceURL=" + (bl.call(t2, "sourceURL") ? (t2.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++Zr + "]") + "\n";
        n2.replace(h2, function(t3, r3, e3, o3, f3, c3) {
          return e3 || (e3 = o3), s2 += n2.slice(a2, c3).replace(Jt, U), r3 && (u3 = true, s2 += "' +\n__e(" + r3 + ") +\n'"), f3 && (i2 = true, s2 += "';\n" + f3 + ";\n__p += '"), e3 && (s2 += "' +\n((__t = (" + e3 + ")) == null ? '' : __t) +\n'"), a2 = c3 + t3.length, t3;
        }), s2 += "';\n";
        var _3 = bl.call(t2, "variable") && t2.variable;
        if (_3) {
          if (Dt.test(_3))
            throw new fl(un);
        } else
          s2 = "with (obj) {\n" + s2 + "\n}\n";
        s2 = (i2 ? s2.replace(dt, "") : s2).replace(bt, "$1").replace(wt, "$1;"), s2 = "function(" + (_3 || "obj") + ") {\n" + (_3 ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (u3 ? ", __e = _.escape" : "") + (i2 ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + s2 + "return __p\n}";
        var v2 = Xh(function() {
          return cl(f2, p3 + "return " + s2).apply(X, c2);
        });
        if (v2.source = s2, rc(v2))
          throw v2;
        return v2;
      }
      function ma(n2) {
        return Ec(n2).toLowerCase();
      }
      function xa(n2) {
        return Ec(n2).toUpperCase();
      }
      function ja(n2, t2, r2) {
        if (n2 = Ec(n2), n2 && (r2 || t2 === X))
          return R(n2);
        if (!n2 || !(t2 = vu(t2)))
          return n2;
        var e2 = G(n2), u3 = G(t2);
        return Ou(e2, W(e2, u3), L(e2, u3) + 1).join("");
      }
      function Aa(n2, t2, r2) {
        if (n2 = Ec(n2), n2 && (r2 || t2 === X))
          return n2.slice(0, H(n2) + 1);
        if (!n2 || !(t2 = vu(t2)))
          return n2;
        var e2 = G(n2);
        return Ou(e2, 0, L(e2, G(t2)) + 1).join("");
      }
      function ka(n2, t2, r2) {
        if (n2 = Ec(n2), n2 && (r2 || t2 === X))
          return n2.replace(Lt, "");
        if (!n2 || !(t2 = vu(t2)))
          return n2;
        var e2 = G(n2);
        return Ou(e2, W(e2, G(t2))).join("");
      }
      function Oa(n2, t2) {
        var r2 = An, e2 = kn;
        if (fc(t2)) {
          var u3 = "separator" in t2 ? t2.separator : u3;
          r2 = "length" in t2 ? kc(t2.length) : r2, e2 = "omission" in t2 ? vu(t2.omission) : e2;
        }
        n2 = Ec(n2);
        var i2 = n2.length;
        if (T(n2)) {
          var o2 = G(n2);
          i2 = o2.length;
        }
        if (r2 >= i2)
          return n2;
        var f2 = r2 - V(e2);
        if (f2 < 1)
          return e2;
        var c2 = o2 ? Ou(o2, 0, f2).join("") : n2.slice(0, f2);
        if (u3 === X)
          return c2 + e2;
        if (o2 && (f2 += c2.length - f2), Ah(u3)) {
          if (n2.slice(f2).search(u3)) {
            var a2, l2 = c2;
            for (u3.global || (u3 = sl(u3.source, Ec(Nt.exec(u3)) + "g")), u3.lastIndex = 0; a2 = u3.exec(l2); )
              var s2 = a2.index;
            c2 = c2.slice(0, s2 === X ? f2 : s2);
          }
        } else if (n2.indexOf(vu(u3), f2) != f2) {
          var h2 = c2.lastIndexOf(u3);
          h2 > -1 && (c2 = c2.slice(0, h2));
        }
        return c2 + e2;
      }
      function Ia(n2) {
        return n2 = Ec(n2), n2 && jt.test(n2) ? n2.replace(mt, ye) : n2;
      }
      function Ra(n2, t2, r2) {
        return n2 = Ec(n2), t2 = r2 ? X : t2, t2 === X ? $(n2) ? Q(n2) : _2(n2) : n2.match(t2) || [];
      }
      function za(t2) {
        var r2 = null == t2 ? 0 : t2.length, e2 = mi();
        return t2 = r2 ? c(t2, function(n2) {
          if ("function" != typeof n2[1])
            throw new pl(en);
          return [e2(n2[0]), n2[1]];
        }) : [], uu(function(e3) {
          for (var u3 = -1; ++u3 < r2; ) {
            var i2 = t2[u3];
            if (n(i2[0], this, e3))
              return n(i2[1], this, e3);
          }
        });
      }
      function Ea(n2) {
        return Nr2(Fr2(n2, an));
      }
      function Sa(n2) {
        return function() {
          return n2;
        };
      }
      function Wa(n2, t2) {
        return null == n2 || n2 !== n2 ? t2 : n2;
      }
      function La(n2) {
        return n2;
      }
      function Ca(n2) {
        return De("function" == typeof n2 ? n2 : Fr2(n2, an));
      }
      function Ua(n2) {
        return qe(Fr2(n2, an));
      }
      function Ba(n2, t2) {
        return Ze(n2, Fr2(t2, an));
      }
      function Ta(n2, t2, e2) {
        var u3 = Pc(t2), i2 = fe2(t2, u3);
        null != e2 || fc(t2) && (i2.length || !u3.length) || (e2 = t2, t2 = n2, n2 = this, i2 = fe2(t2, Pc(t2)));
        var o2 = !(fc(e2) && "chain" in e2 && !e2.chain), f2 = uc(n2);
        return r(i2, function(r2) {
          var e3 = t2[r2];
          n2[r2] = e3, f2 && (n2.prototype[r2] = function() {
            var t3 = this.__chain__;
            if (o2 || t3) {
              var r3 = n2(this.__wrapped__);
              return (r3.__actions__ = Tu(this.__actions__)).push({ func: e3, args: arguments, thisArg: n2 }), r3.__chain__ = t3, r3;
            }
            return e3.apply(n2, a([this.value()], arguments));
          });
        }), n2;
      }
      function $a() {
        return re._ === this && (re._ = Al), this;
      }
      function Da() {
      }
      function Ma(n2) {
        return n2 = kc(n2), uu(function(t2) {
          return Ge(t2, n2);
        });
      }
      function Fa(n2) {
        return Bi(n2) ? m(no(n2)) : Qe(n2);
      }
      function Na(n2) {
        return function(t2) {
          return null == n2 ? X : _e2(n2, t2);
        };
      }
      function Pa() {
        return [];
      }
      function qa() {
        return false;
      }
      function Za() {
        return {};
      }
      function Ka() {
        return "";
      }
      function Va() {
        return true;
      }
      function Ga(n2, t2) {
        if (n2 = kc(n2), n2 < 1 || n2 > Wn)
          return [];
        var r2 = Un, e2 = Hl(n2, Un);
        t2 = mi(t2), n2 -= Un;
        for (var u3 = O(e2, t2); ++r2 < n2; )
          t2(r2);
        return u3;
      }
      function Ha(n2) {
        return bh(n2) ? c(n2, no) : bc(n2) ? [n2] : Tu(Cs(Ec(n2)));
      }
      function Ja(n2) {
        var t2 = ++wl;
        return Ec(n2) + t2;
      }
      function Ya(n2) {
        return n2 && n2.length ? Yr2(n2, La, me) : X;
      }
      function Qa(n2, t2) {
        return n2 && n2.length ? Yr2(n2, mi(t2, 2), me) : X;
      }
      function Xa(n2) {
        return w(n2, La);
      }
      function nl(n2, t2) {
        return w(n2, mi(t2, 2));
      }
      function tl(n2) {
        return n2 && n2.length ? Yr2(n2, La, Ne) : X;
      }
      function rl(n2, t2) {
        return n2 && n2.length ? Yr2(n2, mi(t2, 2), Ne) : X;
      }
      function el(n2) {
        return n2 && n2.length ? k(n2, La) : 0;
      }
      function ul(n2, t2) {
        return n2 && n2.length ? k(n2, mi(t2, 2)) : 0;
      }
      x2 = null == x2 ? re : be.defaults(re.Object(), x2, be.pick(re, qr));
      var il = x2.Array, ol = x2.Date, fl = x2.Error, cl = x2.Function, al = x2.Math, ll = x2.Object, sl = x2.RegExp, hl = x2.String, pl = x2.TypeError, _l = il.prototype, vl = cl.prototype, gl = ll.prototype, yl = x2["__core-js_shared__"], dl = vl.toString, bl = gl.hasOwnProperty, wl = 0, ml = function() {
        var n2 = /[^.]+$/.exec(yl && yl.keys && yl.keys.IE_PROTO || "");
        return n2 ? "Symbol(src)_1." + n2 : "";
      }(), xl = gl.toString, jl = dl.call(ll), Al = re._, kl = sl("^" + dl.call(bl).replace(St, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), Ol = ie ? x2.Buffer : X, Il = x2.Symbol, Rl = x2.Uint8Array, zl = Ol ? Ol.allocUnsafe : X, El = F(ll.getPrototypeOf, ll), Sl = ll.create, Wl = gl.propertyIsEnumerable, Ll = _l.splice, Cl = Il ? Il.isConcatSpreadable : X, Ul = Il ? Il.iterator : X, Bl = Il ? Il.toStringTag : X, Tl = function() {
        try {
          var n2 = Ai(ll, "defineProperty");
          return n2({}, "", {}), n2;
        } catch (n3) {
        }
      }(), $l = x2.clearTimeout !== re.clearTimeout && x2.clearTimeout, Dl = ol && ol.now !== re.Date.now && ol.now, Ml = x2.setTimeout !== re.setTimeout && x2.setTimeout, Fl = al.ceil, Nl = al.floor, Pl = ll.getOwnPropertySymbols, ql = Ol ? Ol.isBuffer : X, Zl = x2.isFinite, Kl = _l.join, Vl = F(ll.keys, ll), Gl = al.max, Hl = al.min, Jl = ol.now, Yl = x2.parseInt, Ql = al.random, Xl = _l.reverse, ns = Ai(x2, "DataView"), ts = Ai(x2, "Map"), rs = Ai(x2, "Promise"), es = Ai(x2, "Set"), us = Ai(x2, "WeakMap"), is = Ai(ll, "create"), os2 = us && new us(), fs2 = {}, cs = to(ns), as = to(ts), ls = to(rs), ss = to(es), hs = to(us), ps = Il ? Il.prototype : X, _s = ps ? ps.valueOf : X, vs = ps ? ps.toString : X, gs = /* @__PURE__ */ function() {
        function n2() {
        }
        return function(t2) {
          if (!fc(t2))
            return {};
          if (Sl)
            return Sl(t2);
          n2.prototype = t2;
          var r2 = new n2();
          return n2.prototype = X, r2;
        };
      }();
      Z2.templateSettings = { escape: kt, evaluate: Ot, interpolate: It, variable: "", imports: { _: Z2 } }, Z2.prototype = J2.prototype, Z2.prototype.constructor = Z2, Y2.prototype = gs(J2.prototype), Y2.prototype.constructor = Y2, Ct2.prototype = gs(J2.prototype), Ct2.prototype.constructor = Ct2, Xt2.prototype.clear = nr2, Xt2.prototype.delete = tr2, Xt2.prototype.get = rr2, Xt2.prototype.has = er2, Xt2.prototype.set = ur2, ir2.prototype.clear = or2, ir2.prototype.delete = fr2, ir2.prototype.get = cr2, ir2.prototype.has = ar2, ir2.prototype.set = lr2, sr2.prototype.clear = hr2, sr2.prototype.delete = pr2, sr2.prototype.get = _r2, sr2.prototype.has = vr2, sr2.prototype.set = gr2, yr2.prototype.add = yr2.prototype.push = dr2, yr2.prototype.has = br2, wr2.prototype.clear = mr2, wr2.prototype.delete = xr2, wr2.prototype.get = jr2, wr2.prototype.has = Ar2, wr2.prototype.set = kr2;
      var ys = Pu(ue2), ds = Pu(oe2, true), bs = qu(), ws = qu(true), ms = os2 ? function(n2, t2) {
        return os2.set(n2, t2), n2;
      } : La, xs = Tl ? function(n2, t2) {
        return Tl(n2, "toString", {
          configurable: true,
          enumerable: false,
          value: Sa(t2),
          writable: true
        });
      } : La, js = uu, As = $l || function(n2) {
        return re.clearTimeout(n2);
      }, ks = es && 1 / P(new es([, -0]))[1] == Sn ? function(n2) {
        return new es(n2);
      } : Da, Os = os2 ? function(n2) {
        return os2.get(n2);
      } : Da, Is = Pl ? function(n2) {
        return null == n2 ? [] : (n2 = ll(n2), i(Pl(n2), function(t2) {
          return Wl.call(n2, t2);
        }));
      } : Pa, Rs = Pl ? function(n2) {
        for (var t2 = []; n2; )
          a(t2, Is(n2)), n2 = El(n2);
        return t2;
      } : Pa, zs = we;
      (ns && zs(new ns(new ArrayBuffer(1))) != ct || ts && zs(new ts()) != Gn || rs && zs(rs.resolve()) != Qn || es && zs(new es()) != tt || us && zs(new us()) != it) && (zs = function(n2) {
        var t2 = we(n2), r2 = t2 == Yn ? n2.constructor : X, e2 = r2 ? to(r2) : "";
        if (e2)
          switch (e2) {
            case cs:
              return ct;
            case as:
              return Gn;
            case ls:
              return Qn;
            case ss:
              return tt;
            case hs:
              return it;
          }
        return t2;
      });
      var Es = yl ? uc : qa, Ss = Qi(ms), Ws = Ml || function(n2, t2) {
        return re.setTimeout(n2, t2);
      }, Ls = Qi(xs), Cs = Pi(function(n2) {
        var t2 = [];
        return 46 === n2.charCodeAt(0) && t2.push(""), n2.replace(Et, function(n3, r2, e2, u3) {
          t2.push(e2 ? u3.replace(Mt, "$1") : r2 || n3);
        }), t2;
      }), Us = uu(function(n2, t2) {
        return Jf(n2) ? Hr2(n2, ee2(t2, 1, Jf, true)) : [];
      }), Bs = uu(function(n2, t2) {
        var r2 = jo(t2);
        return Jf(r2) && (r2 = X), Jf(n2) ? Hr2(n2, ee2(t2, 1, Jf, true), mi(r2, 2)) : [];
      }), Ts = uu(function(n2, t2) {
        var r2 = jo(t2);
        return Jf(r2) && (r2 = X), Jf(n2) ? Hr2(n2, ee2(t2, 1, Jf, true), X, r2) : [];
      }), $s = uu(function(n2) {
        var t2 = c(n2, ju);
        return t2.length && t2[0] === n2[0] ? ke(t2) : [];
      }), Ds = uu(function(n2) {
        var t2 = jo(n2), r2 = c(n2, ju);
        return t2 === jo(r2) ? t2 = X : r2.pop(), r2.length && r2[0] === n2[0] ? ke(r2, mi(t2, 2)) : [];
      }), Ms = uu(function(n2) {
        var t2 = jo(n2), r2 = c(n2, ju);
        return t2 = "function" == typeof t2 ? t2 : X, t2 && r2.pop(), r2.length && r2[0] === n2[0] ? ke(r2, X, t2) : [];
      }), Fs = uu(Oo), Ns = gi(function(n2, t2) {
        var r2 = null == n2 ? 0 : n2.length, e2 = Tr2(n2, t2);
        return nu(n2, c(t2, function(n3) {
          return Ci(n3, r2) ? +n3 : n3;
        }).sort(Lu)), e2;
      }), Ps = uu(function(n2) {
        return gu(ee2(n2, 1, Jf, true));
      }), qs2 = uu(function(n2) {
        var t2 = jo(n2);
        return Jf(t2) && (t2 = X), gu(ee2(n2, 1, Jf, true), mi(t2, 2));
      }), Zs = uu(function(n2) {
        var t2 = jo(n2);
        return t2 = "function" == typeof t2 ? t2 : X, gu(ee2(n2, 1, Jf, true), X, t2);
      }), Ks = uu(function(n2, t2) {
        return Jf(n2) ? Hr2(n2, t2) : [];
      }), Vs = uu(function(n2) {
        return mu(i(n2, Jf));
      }), Gs = uu(function(n2) {
        var t2 = jo(n2);
        return Jf(t2) && (t2 = X), mu(i(n2, Jf), mi(t2, 2));
      }), Hs = uu(function(n2) {
        var t2 = jo(n2);
        return t2 = "function" == typeof t2 ? t2 : X, mu(i(n2, Jf), X, t2);
      }), Js = uu(Go), Ys = uu(function(n2) {
        var t2 = n2.length, r2 = t2 > 1 ? n2[t2 - 1] : X;
        return r2 = "function" == typeof r2 ? (n2.pop(), r2) : X, Ho(n2, r2);
      }), Qs = gi(function(n2) {
        var t2 = n2.length, r2 = t2 ? n2[0] : 0, e2 = this.__wrapped__, u3 = function(t3) {
          return Tr2(t3, n2);
        };
        return !(t2 > 1 || this.__actions__.length) && e2 instanceof Ct2 && Ci(r2) ? (e2 = e2.slice(r2, +r2 + (t2 ? 1 : 0)), e2.__actions__.push({ func: nf, args: [u3], thisArg: X }), new Y2(e2, this.__chain__).thru(function(n3) {
          return t2 && !n3.length && n3.push(X), n3;
        })) : this.thru(u3);
      }), Xs = Fu(function(n2, t2, r2) {
        bl.call(n2, r2) ? ++n2[r2] : Br2(n2, r2, 1);
      }), nh = Ju(ho), th = Ju(po), rh = Fu(function(n2, t2, r2) {
        bl.call(n2, r2) ? n2[r2].push(t2) : Br2(n2, r2, [t2]);
      }), eh = uu(function(t2, r2, e2) {
        var u3 = -1, i2 = "function" == typeof r2, o2 = Hf(t2) ? il(t2.length) : [];
        return ys(t2, function(t3) {
          o2[++u3] = i2 ? n(r2, t3, e2) : Ie(t3, r2, e2);
        }), o2;
      }), uh = Fu(function(n2, t2, r2) {
        Br2(n2, r2, t2);
      }), ih = Fu(function(n2, t2, r2) {
        n2[r2 ? 0 : 1].push(t2);
      }, function() {
        return [[], []];
      }), oh = uu(function(n2, t2) {
        if (null == n2)
          return [];
        var r2 = t2.length;
        return r2 > 1 && Ui(n2, t2[0], t2[1]) ? t2 = [] : r2 > 2 && Ui(t2[0], t2[1], t2[2]) && (t2 = [t2[0]]), He(n2, ee2(t2, 1), []);
      }), fh = Dl || function() {
        return re.Date.now();
      }, ch = uu(function(n2, t2, r2) {
        var e2 = _n;
        if (r2.length) {
          var u3 = N(r2, wi(ch));
          e2 |= bn;
        }
        return ai(n2, e2, t2, r2, u3);
      }), ah = uu(function(n2, t2, r2) {
        var e2 = _n | vn;
        if (r2.length) {
          var u3 = N(r2, wi(ah));
          e2 |= bn;
        }
        return ai(t2, e2, n2, r2, u3);
      }), lh = uu(function(n2, t2) {
        return Gr2(n2, 1, t2);
      }), sh = uu(function(n2, t2, r2) {
        return Gr2(n2, Ic(t2) || 0, r2);
      });
      Cf.Cache = sr2;
      var hh = js(function(t2, r2) {
        r2 = 1 == r2.length && bh(r2[0]) ? c(r2[0], z(mi())) : c(ee2(r2, 1), z(mi()));
        var e2 = r2.length;
        return uu(function(u3) {
          for (var i2 = -1, o2 = Hl(u3.length, e2); ++i2 < o2; )
            u3[i2] = r2[i2].call(this, u3[i2]);
          return n(t2, this, u3);
        });
      }), ph = uu(function(n2, t2) {
        return ai(n2, bn, X, t2, N(t2, wi(ph)));
      }), _h = uu(function(n2, t2) {
        return ai(n2, wn, X, t2, N(t2, wi(_h)));
      }), vh = gi(function(n2, t2) {
        return ai(n2, xn, X, X, X, t2);
      }), gh = ii(me), yh = ii(function(n2, t2) {
        return n2 >= t2;
      }), dh = Re(/* @__PURE__ */ function() {
        return arguments;
      }()) ? Re : function(n2) {
        return cc(n2) && bl.call(n2, "callee") && !Wl.call(n2, "callee");
      }, bh = il.isArray, wh = ce ? z(ce) : ze, mh = ql || qa, xh = ae ? z(ae) : Ee, jh = le ? z(le) : Le, Ah = se ? z(se) : Be, kh = he ? z(he) : Te, Oh = pe ? z(pe) : $e, Ih = ii(Ne), Rh = ii(function(n2, t2) {
        return n2 <= t2;
      }), zh = Nu(function(n2, t2) {
        if (Mi(t2) || Hf(t2))
          return $u(t2, Pc(t2), n2), X;
        for (var r2 in t2)
          bl.call(t2, r2) && Sr2(n2, r2, t2[r2]);
      }), Eh = Nu(function(n2, t2) {
        $u(t2, qc(t2), n2);
      }), Sh = Nu(function(n2, t2, r2, e2) {
        $u(t2, qc(t2), n2, e2);
      }), Wh = Nu(function(n2, t2, r2, e2) {
        $u(t2, Pc(t2), n2, e2);
      }), Lh = gi(Tr2), Ch = uu(function(n2, t2) {
        n2 = ll(n2);
        var r2 = -1, e2 = t2.length, u3 = e2 > 2 ? t2[2] : X;
        for (u3 && Ui(t2[0], t2[1], u3) && (e2 = 1); ++r2 < e2; )
          for (var i2 = t2[r2], o2 = qc(i2), f2 = -1, c2 = o2.length; ++f2 < c2; ) {
            var a2 = o2[f2], l2 = n2[a2];
            (l2 === X || Gf(l2, gl[a2]) && !bl.call(n2, a2)) && (n2[a2] = i2[a2]);
          }
        return n2;
      }), Uh = uu(function(t2) {
        return t2.push(X, si), n(Mh, X, t2);
      }), Bh = Xu(function(n2, t2, r2) {
        null != t2 && "function" != typeof t2.toString && (t2 = xl.call(t2)), n2[t2] = r2;
      }, Sa(La)), Th = Xu(function(n2, t2, r2) {
        null != t2 && "function" != typeof t2.toString && (t2 = xl.call(t2)), bl.call(n2, t2) ? n2[t2].push(r2) : n2[t2] = [r2];
      }, mi), $h = uu(Ie), Dh = Nu(function(n2, t2, r2) {
        Ke(n2, t2, r2);
      }), Mh = Nu(function(n2, t2, r2, e2) {
        Ke(n2, t2, r2, e2);
      }), Fh = gi(function(n2, t2) {
        var r2 = {};
        if (null == n2)
          return r2;
        var e2 = false;
        t2 = c(t2, function(t3) {
          return t3 = ku(t3, n2), e2 || (e2 = t3.length > 1), t3;
        }), $u(n2, di(n2), r2), e2 && (r2 = Fr2(r2, an | ln | sn, hi));
        for (var u3 = t2.length; u3--; )
          yu(r2, t2[u3]);
        return r2;
      }), Nh = gi(function(n2, t2) {
        return null == n2 ? {} : Je(n2, t2);
      }), Ph = ci(Pc), qh = ci(qc), Zh = Vu(function(n2, t2, r2) {
        return t2 = t2.toLowerCase(), n2 + (r2 ? fa(t2) : t2);
      }), Kh = Vu(function(n2, t2, r2) {
        return n2 + (r2 ? "-" : "") + t2.toLowerCase();
      }), Vh = Vu(function(n2, t2, r2) {
        return n2 + (r2 ? " " : "") + t2.toLowerCase();
      }), Gh = Ku("toLowerCase"), Hh = Vu(function(n2, t2, r2) {
        return n2 + (r2 ? "_" : "") + t2.toLowerCase();
      }), Jh = Vu(function(n2, t2, r2) {
        return n2 + (r2 ? " " : "") + Qh(t2);
      }), Yh = Vu(function(n2, t2, r2) {
        return n2 + (r2 ? " " : "") + t2.toUpperCase();
      }), Qh = Ku("toUpperCase"), Xh = uu(function(t2, r2) {
        try {
          return n(t2, X, r2);
        } catch (n2) {
          return rc(n2) ? n2 : new fl(n2);
        }
      }), np = gi(function(n2, t2) {
        return r(t2, function(t3) {
          t3 = no(t3), Br2(n2, t3, ch(n2[t3], n2));
        }), n2;
      }), tp = Yu(), rp = Yu(true), ep = uu(function(n2, t2) {
        return function(r2) {
          return Ie(r2, n2, t2);
        };
      }), up = uu(function(n2, t2) {
        return function(r2) {
          return Ie(n2, r2, t2);
        };
      }), ip = ti(c), op = ti(u2), fp2 = ti(h), cp2 = ui(), ap = ui(true), lp = ni(function(n2, t2) {
        return n2 + t2;
      }, 0), sp = fi("ceil"), hp = ni(function(n2, t2) {
        return n2 / t2;
      }, 1), pp = fi("floor"), _p = ni(function(n2, t2) {
        return n2 * t2;
      }, 1), vp = fi("round"), gp = ni(function(n2, t2) {
        return n2 - t2;
      }, 0);
      return Z2.after = If, Z2.ary = Rf, Z2.assign = zh, Z2.assignIn = Eh, Z2.assignInWith = Sh, Z2.assignWith = Wh, Z2.at = Lh, Z2.before = zf, Z2.bind = ch, Z2.bindAll = np, Z2.bindKey = ah, Z2.castArray = Nf, Z2.chain = Qo, Z2.chunk = uo, Z2.compact = io, Z2.concat = oo, Z2.cond = za, Z2.conforms = Ea, Z2.constant = Sa, Z2.countBy = Xs, Z2.create = Sc, Z2.curry = Ef, Z2.curryRight = Sf, Z2.debounce = Wf, Z2.defaults = Ch, Z2.defaultsDeep = Uh, Z2.defer = lh, Z2.delay = sh, Z2.difference = Us, Z2.differenceBy = Bs, Z2.differenceWith = Ts, Z2.drop = fo, Z2.dropRight = co, Z2.dropRightWhile = ao, Z2.dropWhile = lo, Z2.fill = so, Z2.filter = lf, Z2.flatMap = sf, Z2.flatMapDeep = hf, Z2.flatMapDepth = pf, Z2.flatten = _o, Z2.flattenDeep = vo, Z2.flattenDepth = go, Z2.flip = Lf, Z2.flow = tp, Z2.flowRight = rp, Z2.fromPairs = yo, Z2.functions = $c, Z2.functionsIn = Dc, Z2.groupBy = rh, Z2.initial = mo, Z2.intersection = $s, Z2.intersectionBy = Ds, Z2.intersectionWith = Ms, Z2.invert = Bh, Z2.invertBy = Th, Z2.invokeMap = eh, Z2.iteratee = Ca, Z2.keyBy = uh, Z2.keys = Pc, Z2.keysIn = qc, Z2.map = yf, Z2.mapKeys = Zc, Z2.mapValues = Kc, Z2.matches = Ua, Z2.matchesProperty = Ba, Z2.memoize = Cf, Z2.merge = Dh, Z2.mergeWith = Mh, Z2.method = ep, Z2.methodOf = up, Z2.mixin = Ta, Z2.negate = Uf, Z2.nthArg = Ma, Z2.omit = Fh, Z2.omitBy = Vc, Z2.once = Bf, Z2.orderBy = df, Z2.over = ip, Z2.overArgs = hh, Z2.overEvery = op, Z2.overSome = fp2, Z2.partial = ph, Z2.partialRight = _h, Z2.partition = ih, Z2.pick = Nh, Z2.pickBy = Gc, Z2.property = Fa, Z2.propertyOf = Na, Z2.pull = Fs, Z2.pullAll = Oo, Z2.pullAllBy = Io, Z2.pullAllWith = Ro, Z2.pullAt = Ns, Z2.range = cp2, Z2.rangeRight = ap, Z2.rearg = vh, Z2.reject = mf, Z2.remove = zo, Z2.rest = Tf, Z2.reverse = Eo, Z2.sampleSize = jf, Z2.set = Jc, Z2.setWith = Yc, Z2.shuffle = Af, Z2.slice = So, Z2.sortBy = oh, Z2.sortedUniq = $o, Z2.sortedUniqBy = Do, Z2.split = da, Z2.spread = $f, Z2.tail = Mo, Z2.take = Fo, Z2.takeRight = No, Z2.takeRightWhile = Po, Z2.takeWhile = qo, Z2.tap = Xo, Z2.throttle = Df, Z2.thru = nf, Z2.toArray = jc, Z2.toPairs = Ph, Z2.toPairsIn = qh, Z2.toPath = Ha, Z2.toPlainObject = Rc, Z2.transform = Qc, Z2.unary = Mf, Z2.union = Ps, Z2.unionBy = qs2, Z2.unionWith = Zs, Z2.uniq = Zo, Z2.uniqBy = Ko, Z2.uniqWith = Vo, Z2.unset = Xc, Z2.unzip = Go, Z2.unzipWith = Ho, Z2.update = na, Z2.updateWith = ta, Z2.values = ra, Z2.valuesIn = ea, Z2.without = Ks, Z2.words = Ra, Z2.wrap = Ff, Z2.xor = Vs, Z2.xorBy = Gs, Z2.xorWith = Hs, Z2.zip = Js, Z2.zipObject = Jo, Z2.zipObjectDeep = Yo, Z2.zipWith = Ys, Z2.entries = Ph, Z2.entriesIn = qh, Z2.extend = Eh, Z2.extendWith = Sh, Ta(Z2, Z2), Z2.add = lp, Z2.attempt = Xh, Z2.camelCase = Zh, Z2.capitalize = fa, Z2.ceil = sp, Z2.clamp = ua, Z2.clone = Pf, Z2.cloneDeep = Zf, Z2.cloneDeepWith = Kf, Z2.cloneWith = qf, Z2.conformsTo = Vf, Z2.deburr = ca, Z2.defaultTo = Wa, Z2.divide = hp, Z2.endsWith = aa, Z2.eq = Gf, Z2.escape = la, Z2.escapeRegExp = sa, Z2.every = af, Z2.find = nh, Z2.findIndex = ho, Z2.findKey = Wc, Z2.findLast = th, Z2.findLastIndex = po, Z2.findLastKey = Lc, Z2.floor = pp, Z2.forEach = _f, Z2.forEachRight = vf, Z2.forIn = Cc, Z2.forInRight = Uc, Z2.forOwn = Bc, Z2.forOwnRight = Tc, Z2.get = Mc, Z2.gt = gh, Z2.gte = yh, Z2.has = Fc, Z2.hasIn = Nc, Z2.head = bo, Z2.identity = La, Z2.includes = gf, Z2.indexOf = wo, Z2.inRange = ia, Z2.invoke = $h, Z2.isArguments = dh, Z2.isArray = bh, Z2.isArrayBuffer = wh, Z2.isArrayLike = Hf, Z2.isArrayLikeObject = Jf, Z2.isBoolean = Yf, Z2.isBuffer = mh, Z2.isDate = xh, Z2.isElement = Qf, Z2.isEmpty = Xf, Z2.isEqual = nc, Z2.isEqualWith = tc, Z2.isError = rc, Z2.isFinite = ec, Z2.isFunction = uc, Z2.isInteger = ic, Z2.isLength = oc, Z2.isMap = jh, Z2.isMatch = ac, Z2.isMatchWith = lc, Z2.isNaN = sc, Z2.isNative = hc, Z2.isNil = _c, Z2.isNull = pc, Z2.isNumber = vc, Z2.isObject = fc, Z2.isObjectLike = cc, Z2.isPlainObject = gc, Z2.isRegExp = Ah, Z2.isSafeInteger = yc, Z2.isSet = kh, Z2.isString = dc, Z2.isSymbol = bc, Z2.isTypedArray = Oh, Z2.isUndefined = wc, Z2.isWeakMap = mc, Z2.isWeakSet = xc, Z2.join = xo, Z2.kebabCase = Kh, Z2.last = jo, Z2.lastIndexOf = Ao, Z2.lowerCase = Vh, Z2.lowerFirst = Gh, Z2.lt = Ih, Z2.lte = Rh, Z2.max = Ya, Z2.maxBy = Qa, Z2.mean = Xa, Z2.meanBy = nl, Z2.min = tl, Z2.minBy = rl, Z2.stubArray = Pa, Z2.stubFalse = qa, Z2.stubObject = Za, Z2.stubString = Ka, Z2.stubTrue = Va, Z2.multiply = _p, Z2.nth = ko, Z2.noConflict = $a, Z2.noop = Da, Z2.now = fh, Z2.pad = ha, Z2.padEnd = pa, Z2.padStart = _a, Z2.parseInt = va, Z2.random = oa, Z2.reduce = bf, Z2.reduceRight = wf, Z2.repeat = ga, Z2.replace = ya, Z2.result = Hc, Z2.round = vp, Z2.runInContext = p2, Z2.sample = xf, Z2.size = kf, Z2.snakeCase = Hh, Z2.some = Of, Z2.sortedIndex = Wo, Z2.sortedIndexBy = Lo, Z2.sortedIndexOf = Co, Z2.sortedLastIndex = Uo, Z2.sortedLastIndexBy = Bo, Z2.sortedLastIndexOf = To, Z2.startCase = Jh, Z2.startsWith = ba, Z2.subtract = gp, Z2.sum = el, Z2.sumBy = ul, Z2.template = wa, Z2.times = Ga, Z2.toFinite = Ac, Z2.toInteger = kc, Z2.toLength = Oc, Z2.toLower = ma, Z2.toNumber = Ic, Z2.toSafeInteger = zc, Z2.toString = Ec, Z2.toUpper = xa, Z2.trim = ja, Z2.trimEnd = Aa, Z2.trimStart = ka, Z2.truncate = Oa, Z2.unescape = Ia, Z2.uniqueId = Ja, Z2.upperCase = Yh, Z2.upperFirst = Qh, Z2.each = _f, Z2.eachRight = vf, Z2.first = bo, Ta(Z2, function() {
        var n2 = {};
        return ue2(Z2, function(t2, r2) {
          bl.call(Z2.prototype, r2) || (n2[r2] = t2);
        }), n2;
      }(), { chain: false }), Z2.VERSION = nn, r(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(n2) {
        Z2[n2].placeholder = Z2;
      }), r(["drop", "take"], function(n2, t2) {
        Ct2.prototype[n2] = function(r2) {
          r2 = r2 === X ? 1 : Gl(kc(r2), 0);
          var e2 = this.__filtered__ && !t2 ? new Ct2(this) : this.clone();
          return e2.__filtered__ ? e2.__takeCount__ = Hl(r2, e2.__takeCount__) : e2.__views__.push({ size: Hl(r2, Un), type: n2 + (e2.__dir__ < 0 ? "Right" : "") }), e2;
        }, Ct2.prototype[n2 + "Right"] = function(t3) {
          return this.reverse()[n2](t3).reverse();
        };
      }), r(["filter", "map", "takeWhile"], function(n2, t2) {
        var r2 = t2 + 1, e2 = r2 == Rn || r2 == En;
        Ct2.prototype[n2] = function(n3) {
          var t3 = this.clone();
          return t3.__iteratees__.push({ iteratee: mi(n3, 3), type: r2 }), t3.__filtered__ = t3.__filtered__ || e2, t3;
        };
      }), r(["head", "last"], function(n2, t2) {
        var r2 = "take" + (t2 ? "Right" : "");
        Ct2.prototype[n2] = function() {
          return this[r2](1).value()[0];
        };
      }), r(["initial", "tail"], function(n2, t2) {
        var r2 = "drop" + (t2 ? "" : "Right");
        Ct2.prototype[n2] = function() {
          return this.__filtered__ ? new Ct2(this) : this[r2](1);
        };
      }), Ct2.prototype.compact = function() {
        return this.filter(La);
      }, Ct2.prototype.find = function(n2) {
        return this.filter(n2).head();
      }, Ct2.prototype.findLast = function(n2) {
        return this.reverse().find(n2);
      }, Ct2.prototype.invokeMap = uu(function(n2, t2) {
        return "function" == typeof n2 ? new Ct2(this) : this.map(function(r2) {
          return Ie(r2, n2, t2);
        });
      }), Ct2.prototype.reject = function(n2) {
        return this.filter(Uf(mi(n2)));
      }, Ct2.prototype.slice = function(n2, t2) {
        n2 = kc(n2);
        var r2 = this;
        return r2.__filtered__ && (n2 > 0 || t2 < 0) ? new Ct2(r2) : (n2 < 0 ? r2 = r2.takeRight(-n2) : n2 && (r2 = r2.drop(n2)), t2 !== X && (t2 = kc(t2), r2 = t2 < 0 ? r2.dropRight(-t2) : r2.take(t2 - n2)), r2);
      }, Ct2.prototype.takeRightWhile = function(n2) {
        return this.reverse().takeWhile(n2).reverse();
      }, Ct2.prototype.toArray = function() {
        return this.take(Un);
      }, ue2(Ct2.prototype, function(n2, t2) {
        var r2 = /^(?:filter|find|map|reject)|While$/.test(t2), e2 = /^(?:head|last)$/.test(t2), u3 = Z2[e2 ? "take" + ("last" == t2 ? "Right" : "") : t2], i2 = e2 || /^find/.test(t2);
        u3 && (Z2.prototype[t2] = function() {
          var t3 = this.__wrapped__, o2 = e2 ? [1] : arguments, f2 = t3 instanceof Ct2, c2 = o2[0], l2 = f2 || bh(t3), s2 = function(n3) {
            var t4 = u3.apply(Z2, a([n3], o2));
            return e2 && h2 ? t4[0] : t4;
          };
          l2 && r2 && "function" == typeof c2 && 1 != c2.length && (f2 = l2 = false);
          var h2 = this.__chain__, p3 = !!this.__actions__.length, _3 = i2 && !h2, v2 = f2 && !p3;
          if (!i2 && l2) {
            t3 = v2 ? t3 : new Ct2(this);
            var g2 = n2.apply(t3, o2);
            return g2.__actions__.push({ func: nf, args: [s2], thisArg: X }), new Y2(g2, h2);
          }
          return _3 && v2 ? n2.apply(this, o2) : (g2 = this.thru(s2), _3 ? e2 ? g2.value()[0] : g2.value() : g2);
        });
      }), r(["pop", "push", "shift", "sort", "splice", "unshift"], function(n2) {
        var t2 = _l[n2], r2 = /^(?:push|sort|unshift)$/.test(n2) ? "tap" : "thru", e2 = /^(?:pop|shift)$/.test(n2);
        Z2.prototype[n2] = function() {
          var n3 = arguments;
          if (e2 && !this.__chain__) {
            var u3 = this.value();
            return t2.apply(bh(u3) ? u3 : [], n3);
          }
          return this[r2](function(r3) {
            return t2.apply(bh(r3) ? r3 : [], n3);
          });
        };
      }), ue2(Ct2.prototype, function(n2, t2) {
        var r2 = Z2[t2];
        if (r2) {
          var e2 = r2.name + "";
          bl.call(fs2, e2) || (fs2[e2] = []), fs2[e2].push({ name: t2, func: r2 });
        }
      }), fs2[Qu(X, vn).name] = [{ name: "wrapper", func: X }], Ct2.prototype.clone = $t2, Ct2.prototype.reverse = Yt2, Ct2.prototype.value = Qt2, Z2.prototype.at = Qs, Z2.prototype.chain = tf, Z2.prototype.commit = rf, Z2.prototype.next = ef, Z2.prototype.plant = of, Z2.prototype.reverse = ff, Z2.prototype.toJSON = Z2.prototype.valueOf = Z2.prototype.value = cf, Z2.prototype.first = Z2.prototype.head, Ul && (Z2.prototype[Ul] = uf), Z2;
    }, be = de();
    ue ? ((ue.exports = be)._ = be, ee._ = be) : re._ = be;
  }).call(commonjsGlobal);
})(lodash_min, lodash_min.exports);
var lodash_minExports = lodash_min.exports;
var _mapping = {};
(function(exports) {
  exports.aliasToReal = {
    // Lodash aliases.
    "each": "forEach",
    "eachRight": "forEachRight",
    "entries": "toPairs",
    "entriesIn": "toPairsIn",
    "extend": "assignIn",
    "extendAll": "assignInAll",
    "extendAllWith": "assignInAllWith",
    "extendWith": "assignInWith",
    "first": "head",
    // Methods that are curried variants of others.
    "conforms": "conformsTo",
    "matches": "isMatch",
    "property": "get",
    // Ramda aliases.
    "__": "placeholder",
    "F": "stubFalse",
    "T": "stubTrue",
    "all": "every",
    "allPass": "overEvery",
    "always": "constant",
    "any": "some",
    "anyPass": "overSome",
    "apply": "spread",
    "assoc": "set",
    "assocPath": "set",
    "complement": "negate",
    "compose": "flowRight",
    "contains": "includes",
    "dissoc": "unset",
    "dissocPath": "unset",
    "dropLast": "dropRight",
    "dropLastWhile": "dropRightWhile",
    "equals": "isEqual",
    "identical": "eq",
    "indexBy": "keyBy",
    "init": "initial",
    "invertObj": "invert",
    "juxt": "over",
    "omitAll": "omit",
    "nAry": "ary",
    "path": "get",
    "pathEq": "matchesProperty",
    "pathOr": "getOr",
    "paths": "at",
    "pickAll": "pick",
    "pipe": "flow",
    "pluck": "map",
    "prop": "get",
    "propEq": "matchesProperty",
    "propOr": "getOr",
    "props": "at",
    "symmetricDifference": "xor",
    "symmetricDifferenceBy": "xorBy",
    "symmetricDifferenceWith": "xorWith",
    "takeLast": "takeRight",
    "takeLastWhile": "takeRightWhile",
    "unapply": "rest",
    "unnest": "flatten",
    "useWith": "overArgs",
    "where": "conformsTo",
    "whereEq": "isMatch",
    "zipObj": "zipObject"
  };
  exports.aryMethod = {
    "1": [
      "assignAll",
      "assignInAll",
      "attempt",
      "castArray",
      "ceil",
      "create",
      "curry",
      "curryRight",
      "defaultsAll",
      "defaultsDeepAll",
      "floor",
      "flow",
      "flowRight",
      "fromPairs",
      "invert",
      "iteratee",
      "memoize",
      "method",
      "mergeAll",
      "methodOf",
      "mixin",
      "nthArg",
      "over",
      "overEvery",
      "overSome",
      "rest",
      "reverse",
      "round",
      "runInContext",
      "spread",
      "template",
      "trim",
      "trimEnd",
      "trimStart",
      "uniqueId",
      "words",
      "zipAll"
    ],
    "2": [
      "add",
      "after",
      "ary",
      "assign",
      "assignAllWith",
      "assignIn",
      "assignInAllWith",
      "at",
      "before",
      "bind",
      "bindAll",
      "bindKey",
      "chunk",
      "cloneDeepWith",
      "cloneWith",
      "concat",
      "conformsTo",
      "countBy",
      "curryN",
      "curryRightN",
      "debounce",
      "defaults",
      "defaultsDeep",
      "defaultTo",
      "delay",
      "difference",
      "divide",
      "drop",
      "dropRight",
      "dropRightWhile",
      "dropWhile",
      "endsWith",
      "eq",
      "every",
      "filter",
      "find",
      "findIndex",
      "findKey",
      "findLast",
      "findLastIndex",
      "findLastKey",
      "flatMap",
      "flatMapDeep",
      "flattenDepth",
      "forEach",
      "forEachRight",
      "forIn",
      "forInRight",
      "forOwn",
      "forOwnRight",
      "get",
      "groupBy",
      "gt",
      "gte",
      "has",
      "hasIn",
      "includes",
      "indexOf",
      "intersection",
      "invertBy",
      "invoke",
      "invokeMap",
      "isEqual",
      "isMatch",
      "join",
      "keyBy",
      "lastIndexOf",
      "lt",
      "lte",
      "map",
      "mapKeys",
      "mapValues",
      "matchesProperty",
      "maxBy",
      "meanBy",
      "merge",
      "mergeAllWith",
      "minBy",
      "multiply",
      "nth",
      "omit",
      "omitBy",
      "overArgs",
      "pad",
      "padEnd",
      "padStart",
      "parseInt",
      "partial",
      "partialRight",
      "partition",
      "pick",
      "pickBy",
      "propertyOf",
      "pull",
      "pullAll",
      "pullAt",
      "random",
      "range",
      "rangeRight",
      "rearg",
      "reject",
      "remove",
      "repeat",
      "restFrom",
      "result",
      "sampleSize",
      "some",
      "sortBy",
      "sortedIndex",
      "sortedIndexOf",
      "sortedLastIndex",
      "sortedLastIndexOf",
      "sortedUniqBy",
      "split",
      "spreadFrom",
      "startsWith",
      "subtract",
      "sumBy",
      "take",
      "takeRight",
      "takeRightWhile",
      "takeWhile",
      "tap",
      "throttle",
      "thru",
      "times",
      "trimChars",
      "trimCharsEnd",
      "trimCharsStart",
      "truncate",
      "union",
      "uniqBy",
      "uniqWith",
      "unset",
      "unzipWith",
      "without",
      "wrap",
      "xor",
      "zip",
      "zipObject",
      "zipObjectDeep"
    ],
    "3": [
      "assignInWith",
      "assignWith",
      "clamp",
      "differenceBy",
      "differenceWith",
      "findFrom",
      "findIndexFrom",
      "findLastFrom",
      "findLastIndexFrom",
      "getOr",
      "includesFrom",
      "indexOfFrom",
      "inRange",
      "intersectionBy",
      "intersectionWith",
      "invokeArgs",
      "invokeArgsMap",
      "isEqualWith",
      "isMatchWith",
      "flatMapDepth",
      "lastIndexOfFrom",
      "mergeWith",
      "orderBy",
      "padChars",
      "padCharsEnd",
      "padCharsStart",
      "pullAllBy",
      "pullAllWith",
      "rangeStep",
      "rangeStepRight",
      "reduce",
      "reduceRight",
      "replace",
      "set",
      "slice",
      "sortedIndexBy",
      "sortedLastIndexBy",
      "transform",
      "unionBy",
      "unionWith",
      "update",
      "xorBy",
      "xorWith",
      "zipWith"
    ],
    "4": [
      "fill",
      "setWith",
      "updateWith"
    ]
  };
  exports.aryRearg = {
    "2": [1, 0],
    "3": [2, 0, 1],
    "4": [3, 2, 0, 1]
  };
  exports.iterateeAry = {
    "dropRightWhile": 1,
    "dropWhile": 1,
    "every": 1,
    "filter": 1,
    "find": 1,
    "findFrom": 1,
    "findIndex": 1,
    "findIndexFrom": 1,
    "findKey": 1,
    "findLast": 1,
    "findLastFrom": 1,
    "findLastIndex": 1,
    "findLastIndexFrom": 1,
    "findLastKey": 1,
    "flatMap": 1,
    "flatMapDeep": 1,
    "flatMapDepth": 1,
    "forEach": 1,
    "forEachRight": 1,
    "forIn": 1,
    "forInRight": 1,
    "forOwn": 1,
    "forOwnRight": 1,
    "map": 1,
    "mapKeys": 1,
    "mapValues": 1,
    "partition": 1,
    "reduce": 2,
    "reduceRight": 2,
    "reject": 1,
    "remove": 1,
    "some": 1,
    "takeRightWhile": 1,
    "takeWhile": 1,
    "times": 1,
    "transform": 2
  };
  exports.iterateeRearg = {
    "mapKeys": [1],
    "reduceRight": [1, 0]
  };
  exports.methodRearg = {
    "assignInAllWith": [1, 0],
    "assignInWith": [1, 2, 0],
    "assignAllWith": [1, 0],
    "assignWith": [1, 2, 0],
    "differenceBy": [1, 2, 0],
    "differenceWith": [1, 2, 0],
    "getOr": [2, 1, 0],
    "intersectionBy": [1, 2, 0],
    "intersectionWith": [1, 2, 0],
    "isEqualWith": [1, 2, 0],
    "isMatchWith": [2, 1, 0],
    "mergeAllWith": [1, 0],
    "mergeWith": [1, 2, 0],
    "padChars": [2, 1, 0],
    "padCharsEnd": [2, 1, 0],
    "padCharsStart": [2, 1, 0],
    "pullAllBy": [2, 1, 0],
    "pullAllWith": [2, 1, 0],
    "rangeStep": [1, 2, 0],
    "rangeStepRight": [1, 2, 0],
    "setWith": [3, 1, 2, 0],
    "sortedIndexBy": [2, 1, 0],
    "sortedLastIndexBy": [2, 1, 0],
    "unionBy": [1, 2, 0],
    "unionWith": [1, 2, 0],
    "updateWith": [3, 1, 2, 0],
    "xorBy": [1, 2, 0],
    "xorWith": [1, 2, 0],
    "zipWith": [1, 2, 0]
  };
  exports.methodSpread = {
    "assignAll": { "start": 0 },
    "assignAllWith": { "start": 0 },
    "assignInAll": { "start": 0 },
    "assignInAllWith": { "start": 0 },
    "defaultsAll": { "start": 0 },
    "defaultsDeepAll": { "start": 0 },
    "invokeArgs": { "start": 2 },
    "invokeArgsMap": { "start": 2 },
    "mergeAll": { "start": 0 },
    "mergeAllWith": { "start": 0 },
    "partial": { "start": 1 },
    "partialRight": { "start": 1 },
    "without": { "start": 1 },
    "zipAll": { "start": 0 }
  };
  exports.mutate = {
    "array": {
      "fill": true,
      "pull": true,
      "pullAll": true,
      "pullAllBy": true,
      "pullAllWith": true,
      "pullAt": true,
      "remove": true,
      "reverse": true
    },
    "object": {
      "assign": true,
      "assignAll": true,
      "assignAllWith": true,
      "assignIn": true,
      "assignInAll": true,
      "assignInAllWith": true,
      "assignInWith": true,
      "assignWith": true,
      "defaults": true,
      "defaultsAll": true,
      "defaultsDeep": true,
      "defaultsDeepAll": true,
      "merge": true,
      "mergeAll": true,
      "mergeAllWith": true,
      "mergeWith": true
    },
    "set": {
      "set": true,
      "setWith": true,
      "unset": true,
      "update": true,
      "updateWith": true
    }
  };
  exports.realToAlias = function() {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty, object2 = exports.aliasToReal, result = {};
    for (var key in object2) {
      var value = object2[key];
      if (hasOwnProperty2.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }
    return result;
  }();
  exports.remap = {
    "assignAll": "assign",
    "assignAllWith": "assignWith",
    "assignInAll": "assignIn",
    "assignInAllWith": "assignInWith",
    "curryN": "curry",
    "curryRightN": "curryRight",
    "defaultsAll": "defaults",
    "defaultsDeepAll": "defaultsDeep",
    "findFrom": "find",
    "findIndexFrom": "findIndex",
    "findLastFrom": "findLast",
    "findLastIndexFrom": "findLastIndex",
    "getOr": "get",
    "includesFrom": "includes",
    "indexOfFrom": "indexOf",
    "invokeArgs": "invoke",
    "invokeArgsMap": "invokeMap",
    "lastIndexOfFrom": "lastIndexOf",
    "mergeAll": "merge",
    "mergeAllWith": "mergeWith",
    "padChars": "pad",
    "padCharsEnd": "padEnd",
    "padCharsStart": "padStart",
    "propertyOf": "get",
    "rangeStep": "range",
    "rangeStepRight": "rangeRight",
    "restFrom": "rest",
    "spreadFrom": "spread",
    "trimChars": "trim",
    "trimCharsEnd": "trimEnd",
    "trimCharsStart": "trimStart",
    "zipAll": "zip"
  };
  exports.skipFixed = {
    "castArray": true,
    "flow": true,
    "flowRight": true,
    "iteratee": true,
    "mixin": true,
    "rearg": true,
    "runInContext": true
  };
  exports.skipRearg = {
    "add": true,
    "assign": true,
    "assignIn": true,
    "bind": true,
    "bindKey": true,
    "concat": true,
    "difference": true,
    "divide": true,
    "eq": true,
    "gt": true,
    "gte": true,
    "isEqual": true,
    "lt": true,
    "lte": true,
    "matchesProperty": true,
    "merge": true,
    "multiply": true,
    "overArgs": true,
    "partial": true,
    "partialRight": true,
    "propertyOf": true,
    "random": true,
    "range": true,
    "rangeRight": true,
    "subtract": true,
    "zip": true,
    "zipObject": true,
    "zipObjectDeep": true
  };
})(_mapping);
var placeholder = {};
var mapping = _mapping, fallbackHolder = placeholder;
var push$1 = Array.prototype.push;
function baseArity(func, n) {
  return n == 2 ? function(a, b) {
    return func.apply(void 0, arguments);
  } : function(a) {
    return func.apply(void 0, arguments);
  };
}
function baseAry(func, n) {
  return n == 2 ? function(a, b) {
    return func(a, b);
  } : function(a) {
    return func(a);
  };
}
function cloneArray(array2) {
  var length = array2 ? array2.length : 0, result = Array(length);
  while (length--) {
    result[length] = array2[length];
  }
  return result;
}
function createCloner(func) {
  return function(object2) {
    return func({}, object2);
  };
}
function flatSpread(func, start) {
  return function() {
    var length = arguments.length, lastIndex = length - 1, args = Array(length);
    while (length--) {
      args[length] = arguments[length];
    }
    var array2 = args[start], otherArgs = args.slice(0, start);
    if (array2) {
      push$1.apply(otherArgs, array2);
    }
    if (start != lastIndex) {
      push$1.apply(otherArgs, args.slice(start + 1));
    }
    return func.apply(this, otherArgs);
  };
}
function wrapImmutable(func, cloner) {
  return function() {
    var length = arguments.length;
    if (!length) {
      return;
    }
    var args = Array(length);
    while (length--) {
      args[length] = arguments[length];
    }
    var result = args[0] = cloner.apply(void 0, args);
    func.apply(void 0, args);
    return result;
  };
}
function baseConvert(util2, name, func, options) {
  var isLib = typeof name == "function", isObj2 = name === Object(name);
  if (isObj2) {
    options = func;
    func = name;
    name = void 0;
  }
  if (func == null) {
    throw new TypeError();
  }
  options || (options = {});
  var config2 = {
    "cap": "cap" in options ? options.cap : true,
    "curry": "curry" in options ? options.curry : true,
    "fixed": "fixed" in options ? options.fixed : true,
    "immutable": "immutable" in options ? options.immutable : true,
    "rearg": "rearg" in options ? options.rearg : true
  };
  var defaultHolder = isLib ? func : fallbackHolder, forceCurry = "curry" in options && options.curry, forceFixed = "fixed" in options && options.fixed, forceRearg = "rearg" in options && options.rearg, pristine = isLib ? func.runInContext() : void 0;
  var helpers = isLib ? func : {
    "ary": util2.ary,
    "assign": util2.assign,
    "clone": util2.clone,
    "curry": util2.curry,
    "forEach": util2.forEach,
    "isArray": util2.isArray,
    "isError": util2.isError,
    "isFunction": util2.isFunction,
    "isWeakMap": util2.isWeakMap,
    "iteratee": util2.iteratee,
    "keys": util2.keys,
    "rearg": util2.rearg,
    "toInteger": util2.toInteger,
    "toPath": util2.toPath
  };
  var ary = helpers.ary, assign2 = helpers.assign, clone2 = helpers.clone, curry = helpers.curry, each = helpers.forEach, isArray2 = helpers.isArray, isError2 = helpers.isError, isFunction3 = helpers.isFunction, isWeakMap2 = helpers.isWeakMap, keys2 = helpers.keys, rearg = helpers.rearg, toInteger = helpers.toInteger, toPath = helpers.toPath;
  var aryMethodKeys = keys2(mapping.aryMethod);
  var wrappers = {
    "castArray": function(castArray2) {
      return function() {
        var value = arguments[0];
        return isArray2(value) ? castArray2(cloneArray(value)) : castArray2.apply(void 0, arguments);
      };
    },
    "iteratee": function(iteratee) {
      return function() {
        var func2 = arguments[0], arity = arguments[1], result = iteratee(func2, arity), length = result.length;
        if (config2.cap && typeof arity == "number") {
          arity = arity > 2 ? arity - 2 : 1;
          return length && length <= arity ? result : baseAry(result, arity);
        }
        return result;
      };
    },
    "mixin": function(mixin) {
      return function(source) {
        var func2 = this;
        if (!isFunction3(func2)) {
          return mixin(func2, Object(source));
        }
        var pairs3 = [];
        each(keys2(source), function(key) {
          if (isFunction3(source[key])) {
            pairs3.push([key, func2.prototype[key]]);
          }
        });
        mixin(func2, Object(source));
        each(pairs3, function(pair) {
          var value = pair[1];
          if (isFunction3(value)) {
            func2.prototype[pair[0]] = value;
          } else {
            delete func2.prototype[pair[0]];
          }
        });
        return func2;
      };
    },
    "nthArg": function(nthArg) {
      return function(n) {
        var arity = n < 0 ? 1 : toInteger(n) + 1;
        return curry(nthArg(n), arity);
      };
    },
    "rearg": function(rearg2) {
      return function(func2, indexes) {
        var arity = indexes ? indexes.length : 0;
        return curry(rearg2(func2, indexes), arity);
      };
    },
    "runInContext": function(runInContext) {
      return function(context) {
        return baseConvert(util2, runInContext(context), options);
      };
    }
  };
  function castCap(name2, func2) {
    if (config2.cap) {
      var indexes = mapping.iterateeRearg[name2];
      if (indexes) {
        return iterateeRearg(func2, indexes);
      }
      var n = !isLib && mapping.iterateeAry[name2];
      if (n) {
        return iterateeAry(func2, n);
      }
    }
    return func2;
  }
  function castCurry(name2, func2, n) {
    return forceCurry || config2.curry && n > 1 ? curry(func2, n) : func2;
  }
  function castFixed(name2, func2, n) {
    if (config2.fixed && (forceFixed || !mapping.skipFixed[name2])) {
      var data = mapping.methodSpread[name2], start = data && data.start;
      return start === void 0 ? ary(func2, n) : flatSpread(func2, start);
    }
    return func2;
  }
  function castRearg(name2, func2, n) {
    return config2.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name2]) ? rearg(func2, mapping.methodRearg[name2] || mapping.aryRearg[n]) : func2;
  }
  function cloneByPath(object2, path2) {
    path2 = toPath(path2);
    var index2 = -1, length = path2.length, lastIndex = length - 1, result = clone2(Object(object2)), nested = result;
    while (nested != null && ++index2 < length) {
      var key = path2[index2], value = nested[key];
      if (value != null && !(isFunction3(value) || isError2(value) || isWeakMap2(value))) {
        nested[key] = clone2(index2 == lastIndex ? value : Object(value));
      }
      nested = nested[key];
    }
    return result;
  }
  function convertLib(options2) {
    return _2.runInContext.convert(options2)(void 0);
  }
  function createConverter(name2, func2) {
    var realName = mapping.aliasToReal[name2] || name2, methodName = mapping.remap[realName] || realName, oldOptions = options;
    return function(options2) {
      var newUtil = isLib ? pristine : helpers, newFunc = isLib ? pristine[methodName] : func2, newOptions = assign2(assign2({}, oldOptions), options2);
      return baseConvert(newUtil, realName, newFunc, newOptions);
    };
  }
  function iterateeAry(func2, n) {
    return overArg2(func2, function(func3) {
      return typeof func3 == "function" ? baseAry(func3, n) : func3;
    });
  }
  function iterateeRearg(func2, indexes) {
    return overArg2(func2, function(func3) {
      var n = indexes.length;
      return baseArity(rearg(baseAry(func3, n), indexes), n);
    });
  }
  function overArg2(func2, transform2) {
    return function() {
      var length = arguments.length;
      if (!length) {
        return func2();
      }
      var args = Array(length);
      while (length--) {
        args[length] = arguments[length];
      }
      var index2 = config2.rearg ? 0 : length - 1;
      args[index2] = transform2(args[index2]);
      return func2.apply(void 0, args);
    };
  }
  function wrap(name2, func2, placeholder2) {
    var result, realName = mapping.aliasToReal[name2] || name2, wrapped = func2, wrapper = wrappers[realName];
    if (wrapper) {
      wrapped = wrapper(func2);
    } else if (config2.immutable) {
      if (mapping.mutate.array[realName]) {
        wrapped = wrapImmutable(func2, cloneArray);
      } else if (mapping.mutate.object[realName]) {
        wrapped = wrapImmutable(func2, createCloner(func2));
      } else if (mapping.mutate.set[realName]) {
        wrapped = wrapImmutable(func2, cloneByPath);
      }
    }
    each(aryMethodKeys, function(aryKey) {
      each(mapping.aryMethod[aryKey], function(otherName) {
        if (realName == otherName) {
          var data = mapping.methodSpread[realName], afterRearg = data && data.afterRearg;
          result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
          result = castCap(realName, result);
          result = castCurry(realName, result, aryKey);
          return false;
        }
      });
      return !result;
    });
    result || (result = wrapped);
    if (result == func2) {
      result = forceCurry ? curry(result, 1) : function() {
        return func2.apply(this, arguments);
      };
    }
    result.convert = createConverter(realName, func2);
    result.placeholder = func2.placeholder = placeholder2;
    return result;
  }
  if (!isObj2) {
    return wrap(name, func, defaultHolder);
  }
  var _2 = func;
  var pairs2 = [];
  each(aryMethodKeys, function(aryKey) {
    each(mapping.aryMethod[aryKey], function(key) {
      var func2 = _2[mapping.remap[key] || key];
      if (func2) {
        pairs2.push([key, wrap(key, func2, _2)]);
      }
    });
  });
  each(keys2(_2), function(key) {
    var func2 = _2[key];
    if (typeof func2 == "function") {
      var length = pairs2.length;
      while (length--) {
        if (pairs2[length][0] == key) {
          return;
        }
      }
      func2.convert = createConverter(key, func2);
      pairs2.push([key, func2]);
    }
  });
  each(pairs2, function(pair) {
    _2[pair[0]] = pair[1];
  });
  _2.convert = convertLib;
  _2.placeholder = _2;
  each(keys2(_2), function(key) {
    each(mapping.realToAlias[key] || [], function(alias) {
      _2[alias] = _2[key];
    });
  });
  return _2;
}
var _baseConvert = baseConvert;
var _ = lodash_minExports.runInContext();
var fp = _baseConvert(_, _);
var esErrors = Error;
var _eval = EvalError;
var range = RangeError;
var ref = ReferenceError;
var syntax = SyntaxError;
var type$1 = TypeError;
var uri = URIError;
var shams = function hasSymbols() {
  if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
    return false;
  }
  if (typeof Symbol.iterator === "symbol") {
    return true;
  }
  var obj = {};
  var sym = Symbol("test");
  var symObj = Object(sym);
  if (typeof sym === "string") {
    return false;
  }
  if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
    return false;
  }
  if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
    return false;
  }
  var symVal = 42;
  obj[sym] = symVal;
  for (sym in obj) {
    return false;
  }
  if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
    return false;
  }
  if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }
  var syms = Object.getOwnPropertySymbols(obj);
  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }
  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }
  if (typeof Object.getOwnPropertyDescriptor === "function") {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }
  return true;
};
var origSymbol = typeof Symbol !== "undefined" && Symbol;
var hasSymbolSham = shams;
var hasSymbols$1 = function hasNativeSymbols() {
  if (typeof origSymbol !== "function") {
    return false;
  }
  if (typeof Symbol !== "function") {
    return false;
  }
  if (typeof origSymbol("foo") !== "symbol") {
    return false;
  }
  if (typeof Symbol("bar") !== "symbol") {
    return false;
  }
  return hasSymbolSham();
};
var test = {
  __proto__: null,
  foo: {}
};
var $Object = Object;
var hasProto$1 = function hasProto() {
  return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
};
var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var toStr$1 = Object.prototype.toString;
var max = Math.max;
var funcType = "[object Function]";
var concatty = function concatty2(a, b) {
  var arr = [];
  for (var i = 0; i < a.length; i += 1) {
    arr[i] = a[i];
  }
  for (var j = 0; j < b.length; j += 1) {
    arr[j + a.length] = b[j];
  }
  return arr;
};
var slicy = function slicy2(arrLike, offset) {
  var arr = [];
  for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {
    arr[j] = arrLike[i];
  }
  return arr;
};
var joiny = function(arr, joiner) {
  var str2 = "";
  for (var i = 0; i < arr.length; i += 1) {
    str2 += arr[i];
    if (i + 1 < arr.length) {
      str2 += joiner;
    }
  }
  return str2;
};
var implementation$1 = function bind(that) {
  var target = this;
  if (typeof target !== "function" || toStr$1.apply(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }
  var args = slicy(arguments, 1);
  var bound;
  var binder = function() {
    if (this instanceof bound) {
      var result = target.apply(
        this,
        concatty(args, arguments)
      );
      if (Object(result) === result) {
        return result;
      }
      return this;
    }
    return target.apply(
      that,
      concatty(args, arguments)
    );
  };
  var boundLength = max(0, target.length - args.length);
  var boundArgs = [];
  for (var i = 0; i < boundLength; i++) {
    boundArgs[i] = "$" + i;
  }
  bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
  if (target.prototype) {
    var Empty = function Empty2() {
    };
    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }
  return bound;
};
var implementation = implementation$1;
var functionBind = Function.prototype.bind || implementation;
var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind$1 = functionBind;
var hasown = bind$1.call(call, $hasOwn);
var undefined$1;
var $Error = esErrors;
var $EvalError = _eval;
var $RangeError = range;
var $ReferenceError = ref;
var $SyntaxError$1 = syntax;
var $TypeError$3 = type$1;
var $URIError = uri;
var $Function = Function;
var getEvalledConstructor = function(expressionSyntax) {
  try {
    return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
  } catch (e) {
  }
};
var $gOPD$1 = Object.getOwnPropertyDescriptor;
if ($gOPD$1) {
  try {
    $gOPD$1({}, "");
  } catch (e) {
    $gOPD$1 = null;
  }
}
var throwTypeError = function() {
  throw new $TypeError$3();
};
var ThrowTypeError = $gOPD$1 ? function() {
  try {
    arguments.callee;
    return throwTypeError;
  } catch (calleeThrows) {
    try {
      return $gOPD$1(arguments, "callee").get;
    } catch (gOPDthrows) {
      return throwTypeError;
    }
  }
}() : throwTypeError;
var hasSymbols2 = hasSymbols$1();
var hasProto2 = hasProto$1();
var getProto = Object.getPrototypeOf || (hasProto2 ? function(x) {
  return x.__proto__;
} : null);
var needsEval = {};
var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
var INTRINSICS = {
  __proto__: null,
  "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
  "%Array%": Array,
  "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
  "%ArrayIteratorPrototype%": hasSymbols2 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
  "%AsyncFromSyncIteratorPrototype%": undefined$1,
  "%AsyncFunction%": needsEval,
  "%AsyncGenerator%": needsEval,
  "%AsyncGeneratorFunction%": needsEval,
  "%AsyncIteratorPrototype%": needsEval,
  "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
  "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
  "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
  "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
  "%Boolean%": Boolean,
  "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
  "%Date%": Date,
  "%decodeURI%": decodeURI,
  "%decodeURIComponent%": decodeURIComponent,
  "%encodeURI%": encodeURI,
  "%encodeURIComponent%": encodeURIComponent,
  "%Error%": $Error,
  "%eval%": eval,
  // eslint-disable-line no-eval
  "%EvalError%": $EvalError,
  "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
  "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
  "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
  "%Function%": $Function,
  "%GeneratorFunction%": needsEval,
  "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
  "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
  "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
  "%isFinite%": isFinite,
  "%isNaN%": isNaN,
  "%IteratorPrototype%": hasSymbols2 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
  "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
  "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
  "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
  "%Math%": Math,
  "%Number%": Number,
  "%Object%": Object,
  "%parseFloat%": parseFloat,
  "%parseInt%": parseInt,
  "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
  "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
  "%RangeError%": $RangeError,
  "%ReferenceError%": $ReferenceError,
  "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
  "%RegExp%": RegExp,
  "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
  "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
  "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
  "%String%": String,
  "%StringIteratorPrototype%": hasSymbols2 && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
  "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
  "%SyntaxError%": $SyntaxError$1,
  "%ThrowTypeError%": ThrowTypeError,
  "%TypedArray%": TypedArray,
  "%TypeError%": $TypeError$3,
  "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
  "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
  "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
  "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
  "%URIError%": $URIError,
  "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
  "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
  "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
};
if (getProto) {
  try {
    null.error;
  } catch (e) {
    var errorProto = getProto(getProto(e));
    INTRINSICS["%Error.prototype%"] = errorProto;
  }
}
var doEval = function doEval2(name) {
  var value;
  if (name === "%AsyncFunction%") {
    value = getEvalledConstructor("async function () {}");
  } else if (name === "%GeneratorFunction%") {
    value = getEvalledConstructor("function* () {}");
  } else if (name === "%AsyncGeneratorFunction%") {
    value = getEvalledConstructor("async function* () {}");
  } else if (name === "%AsyncGenerator%") {
    var fn = doEval2("%AsyncGeneratorFunction%");
    if (fn) {
      value = fn.prototype;
    }
  } else if (name === "%AsyncIteratorPrototype%") {
    var gen = doEval2("%AsyncGenerator%");
    if (gen && getProto) {
      value = getProto(gen.prototype);
    }
  }
  INTRINSICS[name] = value;
  return value;
};
var LEGACY_ALIASES = {
  __proto__: null,
  "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
  "%ArrayPrototype%": ["Array", "prototype"],
  "%ArrayProto_entries%": ["Array", "prototype", "entries"],
  "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
  "%ArrayProto_keys%": ["Array", "prototype", "keys"],
  "%ArrayProto_values%": ["Array", "prototype", "values"],
  "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
  "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
  "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
  "%BooleanPrototype%": ["Boolean", "prototype"],
  "%DataViewPrototype%": ["DataView", "prototype"],
  "%DatePrototype%": ["Date", "prototype"],
  "%ErrorPrototype%": ["Error", "prototype"],
  "%EvalErrorPrototype%": ["EvalError", "prototype"],
  "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
  "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
  "%FunctionPrototype%": ["Function", "prototype"],
  "%Generator%": ["GeneratorFunction", "prototype"],
  "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
  "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
  "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
  "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
  "%JSONParse%": ["JSON", "parse"],
  "%JSONStringify%": ["JSON", "stringify"],
  "%MapPrototype%": ["Map", "prototype"],
  "%NumberPrototype%": ["Number", "prototype"],
  "%ObjectPrototype%": ["Object", "prototype"],
  "%ObjProto_toString%": ["Object", "prototype", "toString"],
  "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
  "%PromisePrototype%": ["Promise", "prototype"],
  "%PromiseProto_then%": ["Promise", "prototype", "then"],
  "%Promise_all%": ["Promise", "all"],
  "%Promise_reject%": ["Promise", "reject"],
  "%Promise_resolve%": ["Promise", "resolve"],
  "%RangeErrorPrototype%": ["RangeError", "prototype"],
  "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
  "%RegExpPrototype%": ["RegExp", "prototype"],
  "%SetPrototype%": ["Set", "prototype"],
  "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
  "%StringPrototype%": ["String", "prototype"],
  "%SymbolPrototype%": ["Symbol", "prototype"],
  "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
  "%TypedArrayPrototype%": ["TypedArray", "prototype"],
  "%TypeErrorPrototype%": ["TypeError", "prototype"],
  "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
  "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
  "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
  "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
  "%URIErrorPrototype%": ["URIError", "prototype"],
  "%WeakMapPrototype%": ["WeakMap", "prototype"],
  "%WeakSetPrototype%": ["WeakSet", "prototype"]
};
var bind2 = functionBind;
var hasOwn$1 = hasown;
var $concat$1 = bind2.call(Function.call, Array.prototype.concat);
var $spliceApply = bind2.call(Function.apply, Array.prototype.splice);
var $replace$1 = bind2.call(Function.call, String.prototype.replace);
var $strSlice = bind2.call(Function.call, String.prototype.slice);
var $exec = bind2.call(Function.call, RegExp.prototype.exec);
var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar$1 = /\\(\\)?/g;
var stringToPath$2 = function stringToPath(string2) {
  var first = $strSlice(string2, 0, 1);
  var last2 = $strSlice(string2, -1);
  if (first === "%" && last2 !== "%") {
    throw new $SyntaxError$1("invalid intrinsic syntax, expected closing `%`");
  } else if (last2 === "%" && first !== "%") {
    throw new $SyntaxError$1("invalid intrinsic syntax, expected opening `%`");
  }
  var result = [];
  $replace$1(string2, rePropName$1, function(match, number2, quote2, subString) {
    result[result.length] = quote2 ? $replace$1(subString, reEscapeChar$1, "$1") : number2 || match;
  });
  return result;
};
var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
  var intrinsicName = name;
  var alias;
  if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
    alias = LEGACY_ALIASES[intrinsicName];
    intrinsicName = "%" + alias[0] + "%";
  }
  if (hasOwn$1(INTRINSICS, intrinsicName)) {
    var value = INTRINSICS[intrinsicName];
    if (value === needsEval) {
      value = doEval(intrinsicName);
    }
    if (typeof value === "undefined" && !allowMissing) {
      throw new $TypeError$3("intrinsic " + name + " exists, but is not available. Please file an issue!");
    }
    return {
      alias,
      name: intrinsicName,
      value
    };
  }
  throw new $SyntaxError$1("intrinsic " + name + " does not exist!");
};
var getIntrinsic = function GetIntrinsic(name, allowMissing) {
  if (typeof name !== "string" || name.length === 0) {
    throw new $TypeError$3("intrinsic name must be a non-empty string");
  }
  if (arguments.length > 1 && typeof allowMissing !== "boolean") {
    throw new $TypeError$3('"allowMissing" argument must be a boolean');
  }
  if ($exec(/^%?[^%]*%?$/, name) === null) {
    throw new $SyntaxError$1("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
  }
  var parts = stringToPath$2(name);
  var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
  var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
  var intrinsicRealName = intrinsic.name;
  var value = intrinsic.value;
  var skipFurtherCaching = false;
  var alias = intrinsic.alias;
  if (alias) {
    intrinsicBaseName = alias[0];
    $spliceApply(parts, $concat$1([0, 1], alias));
  }
  for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    var part = parts[i];
    var first = $strSlice(part, 0, 1);
    var last2 = $strSlice(part, -1);
    if ((first === '"' || first === "'" || first === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first !== last2) {
      throw new $SyntaxError$1("property names with quotes must have matching quotes");
    }
    if (part === "constructor" || !isOwn) {
      skipFurtherCaching = true;
    }
    intrinsicBaseName += "." + part;
    intrinsicRealName = "%" + intrinsicBaseName + "%";
    if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
      value = INTRINSICS[intrinsicRealName];
    } else if (value != null) {
      if (!(part in value)) {
        if (!allowMissing) {
          throw new $TypeError$3("base intrinsic for " + name + " exists, but the property is not available.");
        }
        return void 0;
      }
      if ($gOPD$1 && i + 1 >= parts.length) {
        var desc = $gOPD$1(value, part);
        isOwn = !!desc;
        if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
          value = desc.get;
        } else {
          value = value[part];
        }
      } else {
        isOwn = hasOwn$1(value, part);
        value = value[part];
      }
      if (isOwn && !skipFurtherCaching) {
        INTRINSICS[intrinsicRealName] = value;
      }
    }
  }
  return value;
};
var callBind$1 = { exports: {} };
var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty)
    return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var GetIntrinsic3 = getIntrinsic;
  var $defineProperty2 = GetIntrinsic3("%Object.defineProperty%", true) || false;
  if ($defineProperty2) {
    try {
      $defineProperty2({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty2 = false;
    }
  }
  esDefineProperty = $defineProperty2;
  return esDefineProperty;
}
var GetIntrinsic$3 = getIntrinsic;
var $gOPD = GetIntrinsic$3("%Object.getOwnPropertyDescriptor%", true);
if ($gOPD) {
  try {
    $gOPD([], "length");
  } catch (e) {
    $gOPD = null;
  }
}
var gopd$1 = $gOPD;
var $defineProperty$1 = requireEsDefineProperty();
var $SyntaxError = syntax;
var $TypeError$2 = type$1;
var gopd = gopd$1;
var defineDataProperty = function defineDataProperty2(obj, property2, value) {
  if (!obj || typeof obj !== "object" && typeof obj !== "function") {
    throw new $TypeError$2("`obj` must be an object or a function`");
  }
  if (typeof property2 !== "string" && typeof property2 !== "symbol") {
    throw new $TypeError$2("`property` must be a string or a symbol`");
  }
  if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
    throw new $TypeError$2("`nonEnumerable`, if provided, must be a boolean or null");
  }
  if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
    throw new $TypeError$2("`nonWritable`, if provided, must be a boolean or null");
  }
  if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
    throw new $TypeError$2("`nonConfigurable`, if provided, must be a boolean or null");
  }
  if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
    throw new $TypeError$2("`loose`, if provided, must be a boolean");
  }
  var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
  var nonWritable = arguments.length > 4 ? arguments[4] : null;
  var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
  var loose = arguments.length > 6 ? arguments[6] : false;
  var desc = !!gopd && gopd(obj, property2);
  if ($defineProperty$1) {
    $defineProperty$1(obj, property2, {
      configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
      enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
      value,
      writable: nonWritable === null && desc ? desc.writable : !nonWritable
    });
  } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
    obj[property2] = value;
  } else {
    throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  }
};
var $defineProperty = requireEsDefineProperty();
var hasPropertyDescriptors = function hasPropertyDescriptors2() {
  return !!$defineProperty;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
  if (!$defineProperty) {
    return null;
  }
  try {
    return $defineProperty([], "length", { value: 1 }).length !== 1;
  } catch (e) {
    return true;
  }
};
var hasPropertyDescriptors_1 = hasPropertyDescriptors;
var GetIntrinsic$2 = getIntrinsic;
var define = defineDataProperty;
var hasDescriptors = hasPropertyDescriptors_1();
var gOPD = gopd$1;
var $TypeError$1 = type$1;
var $floor$1 = GetIntrinsic$2("%Math.floor%");
var setFunctionLength = function setFunctionLength2(fn, length) {
  if (typeof fn !== "function") {
    throw new $TypeError$1("`fn` is not a function");
  }
  if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor$1(length) !== length) {
    throw new $TypeError$1("`length` must be a positive 32-bit integer");
  }
  var loose = arguments.length > 2 && !!arguments[2];
  var functionLengthIsConfigurable = true;
  var functionLengthIsWritable = true;
  if ("length" in fn && gOPD) {
    var desc = gOPD(fn, "length");
    if (desc && !desc.configurable) {
      functionLengthIsConfigurable = false;
    }
    if (desc && !desc.writable) {
      functionLengthIsWritable = false;
    }
  }
  if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
    if (hasDescriptors) {
      define(
        /** @type {Parameters<define>[0]} */
        fn,
        "length",
        length,
        true,
        true
      );
    } else {
      define(
        /** @type {Parameters<define>[0]} */
        fn,
        "length",
        length
      );
    }
  }
  return fn;
};
(function(module) {
  var bind3 = functionBind;
  var GetIntrinsic3 = getIntrinsic;
  var setFunctionLength$1 = setFunctionLength;
  var $TypeError2 = type$1;
  var $apply = GetIntrinsic3("%Function.prototype.apply%");
  var $call = GetIntrinsic3("%Function.prototype.call%");
  var $reflectApply = GetIntrinsic3("%Reflect.apply%", true) || bind3.call($call, $apply);
  var $defineProperty2 = requireEsDefineProperty();
  var $max = GetIntrinsic3("%Math.max%");
  module.exports = function callBind2(originalFunction) {
    if (typeof originalFunction !== "function") {
      throw new $TypeError2("a function is required");
    }
    var func = $reflectApply(bind3, $call, arguments);
    return setFunctionLength$1(
      func,
      1 + $max(0, originalFunction.length - (arguments.length - 1)),
      true
    );
  };
  var applyBind = function applyBind2() {
    return $reflectApply(bind3, $apply, arguments);
  };
  if ($defineProperty2) {
    $defineProperty2(module.exports, "apply", { value: applyBind });
  } else {
    module.exports.apply = applyBind;
  }
})(callBind$1);
var callBindExports = callBind$1.exports;
var GetIntrinsic$1 = getIntrinsic;
var callBind = callBindExports;
var $indexOf = callBind(GetIntrinsic$1("String.prototype.indexOf"));
var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic$1(name, !!allowMissing);
  if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
    return callBind(intrinsic);
  }
  return intrinsic;
};
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var hasMap = typeof Map === "function" && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === "function" && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString$3 = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
  return O.__proto__;
} : null);
function addNumericSeparator(num, str2) {
  if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str2)) {
    return str2;
  }
  var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
  if (typeof num === "number") {
    var int2 = num < 0 ? -$floor(-num) : $floor(num);
    if (int2 !== num) {
      var intStr = String(int2);
      var dec = $slice.call(str2, intStr.length + 1);
      return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
    }
  }
  return $replace.call(str2, sepRegex, "$&_");
}
var utilInspect = require$$0$1;
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol$5(inspectCustom) ? inspectCustom : null;
var objectInspect = function inspect_(obj, options, depth2, seen) {
  var opts = options || {};
  if (has$5(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
    throw new TypeError('option "quoteStyle" must be "single" or "double"');
  }
  if (has$5(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
    throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
  }
  var customInspect = has$5(opts, "customInspect") ? opts.customInspect : true;
  if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
    throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
  }
  if (has$5(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
    throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
  }
  if (has$5(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
    throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
  }
  var numericSeparator = opts.numericSeparator;
  if (typeof obj === "undefined") {
    return "undefined";
  }
  if (obj === null) {
    return "null";
  }
  if (typeof obj === "boolean") {
    return obj ? "true" : "false";
  }
  if (typeof obj === "string") {
    return inspectString(obj, opts);
  }
  if (typeof obj === "number") {
    if (obj === 0) {
      return Infinity / obj > 0 ? "0" : "-0";
    }
    var str2 = String(obj);
    return numericSeparator ? addNumericSeparator(obj, str2) : str2;
  }
  if (typeof obj === "bigint") {
    var bigIntStr = String(obj) + "n";
    return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
  }
  var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
  if (typeof depth2 === "undefined") {
    depth2 = 0;
  }
  if (depth2 >= maxDepth && maxDepth > 0 && typeof obj === "object") {
    return isArray$g(obj) ? "[Array]" : "[Object]";
  }
  var indent = getIndent(opts, depth2);
  if (typeof seen === "undefined") {
    seen = [];
  } else if (indexOf(seen, obj) >= 0) {
    return "[Circular]";
  }
  function inspect2(value, from, noIndent) {
    if (from) {
      seen = $arrSlice.call(seen);
      seen.push(from);
    }
    if (noIndent) {
      var newOpts = {
        depth: opts.depth
      };
      if (has$5(opts, "quoteStyle")) {
        newOpts.quoteStyle = opts.quoteStyle;
      }
      return inspect_(value, newOpts, depth2 + 1, seen);
    }
    return inspect_(value, opts, depth2 + 1, seen);
  }
  if (typeof obj === "function" && !isRegExp$2(obj)) {
    var name = nameOf(obj);
    var keys2 = arrObjKeys(obj, inspect2);
    return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys2.length > 0 ? " { " + $join.call(keys2, ", ") + " }" : "");
  }
  if (isSymbol$5(obj)) {
    var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
    return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
  }
  if (isElement(obj)) {
    var s = "<" + $toLowerCase.call(String(obj.nodeName));
    var attrs = obj.attributes || [];
    for (var i = 0; i < attrs.length; i++) {
      s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
    }
    s += ">";
    if (obj.childNodes && obj.childNodes.length) {
      s += "...";
    }
    s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
    return s;
  }
  if (isArray$g(obj)) {
    if (obj.length === 0) {
      return "[]";
    }
    var xs = arrObjKeys(obj, inspect2);
    if (indent && !singleLineValues(xs)) {
      return "[" + indentedJoin(xs, indent) + "]";
    }
    return "[ " + $join.call(xs, ", ") + " ]";
  }
  if (isError(obj)) {
    var parts = arrObjKeys(obj, inspect2);
    if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
      return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect2(obj.cause), parts), ", ") + " }";
    }
    if (parts.length === 0) {
      return "[" + String(obj) + "]";
    }
    return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
  }
  if (typeof obj === "object" && customInspect) {
    if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
      return utilInspect(obj, { depth: maxDepth - depth2 });
    } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
      return obj.inspect();
    }
  }
  if (isMap$2(obj)) {
    var mapParts = [];
    if (mapForEach) {
      mapForEach.call(obj, function(value, key) {
        mapParts.push(inspect2(key, obj, true) + " => " + inspect2(value, obj));
      });
    }
    return collectionOf("Map", mapSize.call(obj), mapParts, indent);
  }
  if (isSet$2(obj)) {
    var setParts = [];
    if (setForEach) {
      setForEach.call(obj, function(value) {
        setParts.push(inspect2(value, obj));
      });
    }
    return collectionOf("Set", setSize.call(obj), setParts, indent);
  }
  if (isWeakMap(obj)) {
    return weakCollectionOf("WeakMap");
  }
  if (isWeakSet(obj)) {
    return weakCollectionOf("WeakSet");
  }
  if (isWeakRef(obj)) {
    return weakCollectionOf("WeakRef");
  }
  if (isNumber$3(obj)) {
    return markBoxed(inspect2(Number(obj)));
  }
  if (isBigInt(obj)) {
    return markBoxed(inspect2(bigIntValueOf.call(obj)));
  }
  if (isBoolean$1(obj)) {
    return markBoxed(booleanValueOf.call(obj));
  }
  if (isString(obj)) {
    return markBoxed(inspect2(String(obj)));
  }
  if (typeof window !== "undefined" && obj === window) {
    return "{ [object Window] }";
  }
  if (typeof globalThis !== "undefined" && obj === globalThis || typeof commonjsGlobal !== "undefined" && obj === commonjsGlobal) {
    return "{ [object globalThis] }";
  }
  if (!isDate$1(obj) && !isRegExp$2(obj)) {
    var ys = arrObjKeys(obj, inspect2);
    var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
    var protoTag = obj instanceof Object ? "" : "null prototype";
    var stringTag2 = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
    var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
    var tag = constructorTag + (stringTag2 || protoTag ? "[" + $join.call($concat.call([], stringTag2 || [], protoTag || []), ": ") + "] " : "");
    if (ys.length === 0) {
      return tag + "{}";
    }
    if (indent) {
      return tag + "{" + indentedJoin(ys, indent) + "}";
    }
    return tag + "{ " + $join.call(ys, ", ") + " }";
  }
  return String(obj);
};
function wrapQuotes(s, defaultStyle, opts) {
  var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
  return quoteChar + s + quoteChar;
}
function quote(s) {
  return $replace.call(String(s), /"/g, "&quot;");
}
function isArray$g(obj) {
  return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isDate$1(obj) {
  return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isRegExp$2(obj) {
  return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isError(obj) {
  return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isString(obj) {
  return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isNumber$3(obj) {
  return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isBoolean$1(obj) {
  return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isSymbol$5(obj) {
  if (hasShammedSymbols) {
    return obj && typeof obj === "object" && obj instanceof Symbol;
  }
  if (typeof obj === "symbol") {
    return true;
  }
  if (!obj || typeof obj !== "object" || !symToString) {
    return false;
  }
  try {
    symToString.call(obj);
    return true;
  } catch (e) {
  }
  return false;
}
function isBigInt(obj) {
  if (!obj || typeof obj !== "object" || !bigIntValueOf) {
    return false;
  }
  try {
    bigIntValueOf.call(obj);
    return true;
  } catch (e) {
  }
  return false;
}
var hasOwn = Object.prototype.hasOwnProperty || function(key) {
  return key in this;
};
function has$5(obj, key) {
  return hasOwn.call(obj, key);
}
function toStr(obj) {
  return objectToString$3.call(obj);
}
function nameOf(f) {
  if (f.name) {
    return f.name;
  }
  var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
  if (m) {
    return m[1];
  }
  return null;
}
function indexOf(xs, x) {
  if (xs.indexOf) {
    return xs.indexOf(x);
  }
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) {
      return i;
    }
  }
  return -1;
}
function isMap$2(x) {
  if (!mapSize || !x || typeof x !== "object") {
    return false;
  }
  try {
    mapSize.call(x);
    try {
      setSize.call(x);
    } catch (s) {
      return true;
    }
    return x instanceof Map;
  } catch (e) {
  }
  return false;
}
function isWeakMap(x) {
  if (!weakMapHas || !x || typeof x !== "object") {
    return false;
  }
  try {
    weakMapHas.call(x, weakMapHas);
    try {
      weakSetHas.call(x, weakSetHas);
    } catch (s) {
      return true;
    }
    return x instanceof WeakMap;
  } catch (e) {
  }
  return false;
}
function isWeakRef(x) {
  if (!weakRefDeref || !x || typeof x !== "object") {
    return false;
  }
  try {
    weakRefDeref.call(x);
    return true;
  } catch (e) {
  }
  return false;
}
function isSet$2(x) {
  if (!setSize || !x || typeof x !== "object") {
    return false;
  }
  try {
    setSize.call(x);
    try {
      mapSize.call(x);
    } catch (m) {
      return true;
    }
    return x instanceof Set;
  } catch (e) {
  }
  return false;
}
function isWeakSet(x) {
  if (!weakSetHas || !x || typeof x !== "object") {
    return false;
  }
  try {
    weakSetHas.call(x, weakSetHas);
    try {
      weakMapHas.call(x, weakMapHas);
    } catch (s) {
      return true;
    }
    return x instanceof WeakSet;
  } catch (e) {
  }
  return false;
}
function isElement(x) {
  if (!x || typeof x !== "object") {
    return false;
  }
  if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
    return true;
  }
  return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
}
function inspectString(str2, opts) {
  if (str2.length > opts.maxStringLength) {
    var remaining = str2.length - opts.maxStringLength;
    var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
    return inspectString($slice.call(str2, 0, opts.maxStringLength), opts) + trailer;
  }
  var s = $replace.call($replace.call(str2, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
  return wrapQuotes(s, "single", opts);
}
function lowbyte(c) {
  var n = c.charCodeAt(0);
  var x = {
    8: "b",
    9: "t",
    10: "n",
    12: "f",
    13: "r"
  }[n];
  if (x) {
    return "\\" + x;
  }
  return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
}
function markBoxed(str2) {
  return "Object(" + str2 + ")";
}
function weakCollectionOf(type2) {
  return type2 + " { ? }";
}
function collectionOf(type2, size, entries, indent) {
  var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
  return type2 + " (" + size + ") {" + joinedEntries + "}";
}
function singleLineValues(xs) {
  for (var i = 0; i < xs.length; i++) {
    if (indexOf(xs[i], "\n") >= 0) {
      return false;
    }
  }
  return true;
}
function getIndent(opts, depth2) {
  var baseIndent;
  if (opts.indent === "	") {
    baseIndent = "	";
  } else if (typeof opts.indent === "number" && opts.indent > 0) {
    baseIndent = $join.call(Array(opts.indent + 1), " ");
  } else {
    return null;
  }
  return {
    base: baseIndent,
    prev: $join.call(Array(depth2 + 1), baseIndent)
  };
}
function indentedJoin(xs, indent) {
  if (xs.length === 0) {
    return "";
  }
  var lineJoiner = "\n" + indent.prev + indent.base;
  return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
}
function arrObjKeys(obj, inspect2) {
  var isArr = isArray$g(obj);
  var xs = [];
  if (isArr) {
    xs.length = obj.length;
    for (var i = 0; i < obj.length; i++) {
      xs[i] = has$5(obj, i) ? inspect2(obj[i], obj) : "";
    }
  }
  var syms = typeof gOPS === "function" ? gOPS(obj) : [];
  var symMap;
  if (hasShammedSymbols) {
    symMap = {};
    for (var k = 0; k < syms.length; k++) {
      symMap["$" + syms[k]] = syms[k];
    }
  }
  for (var key in obj) {
    if (!has$5(obj, key)) {
      continue;
    }
    if (isArr && String(Number(key)) === key && key < obj.length) {
      continue;
    }
    if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
      continue;
    } else if ($test.call(/[^\w$]/, key)) {
      xs.push(inspect2(key, obj) + ": " + inspect2(obj[key], obj));
    } else {
      xs.push(key + ": " + inspect2(obj[key], obj));
    }
  }
  if (typeof gOPS === "function") {
    for (var j = 0; j < syms.length; j++) {
      if (isEnumerable.call(obj, syms[j])) {
        xs.push("[" + inspect2(syms[j]) + "]: " + inspect2(obj[syms[j]], obj));
      }
    }
  }
  return xs;
}
var GetIntrinsic2 = getIntrinsic;
var callBound = callBound$1;
var inspect = objectInspect;
var $TypeError = type$1;
var $WeakMap = GetIntrinsic2("%WeakMap%", true);
var $Map = GetIntrinsic2("%Map%", true);
var $weakMapGet = callBound("WeakMap.prototype.get", true);
var $weakMapSet = callBound("WeakMap.prototype.set", true);
var $weakMapHas = callBound("WeakMap.prototype.has", true);
var $mapGet = callBound("Map.prototype.get", true);
var $mapSet = callBound("Map.prototype.set", true);
var $mapHas = callBound("Map.prototype.has", true);
var listGetNode = function(list, key) {
  var prev = list;
  var curr;
  for (; (curr = prev.next) !== null; prev = curr) {
    if (curr.key === key) {
      prev.next = curr.next;
      curr.next = /** @type {NonNullable<typeof list.next>} */
      list.next;
      list.next = curr;
      return curr;
    }
  }
};
var listGet = function(objects, key) {
  var node = listGetNode(objects, key);
  return node && node.value;
};
var listSet = function(objects, key, value) {
  var node = listGetNode(objects, key);
  if (node) {
    node.value = value;
  } else {
    objects.next = /** @type {import('.').ListNode<typeof value>} */
    {
      // eslint-disable-line no-param-reassign, no-extra-parens
      key,
      next: objects.next,
      value
    };
  }
};
var listHas = function(objects, key) {
  return !!listGetNode(objects, key);
};
var sideChannel = function getSideChannel() {
  var $wm;
  var $m;
  var $o;
  var channel = {
    assert: function(key) {
      if (!channel.has(key)) {
        throw new $TypeError("Side channel does not contain " + inspect(key));
      }
    },
    get: function(key) {
      if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
        if ($wm) {
          return $weakMapGet($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapGet($m, key);
        }
      } else {
        if ($o) {
          return listGet($o, key);
        }
      }
    },
    has: function(key) {
      if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
        if ($wm) {
          return $weakMapHas($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapHas($m, key);
        }
      } else {
        if ($o) {
          return listHas($o, key);
        }
      }
      return false;
    },
    set: function(key, value) {
      if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
        if (!$wm) {
          $wm = new $WeakMap();
        }
        $weakMapSet($wm, key, value);
      } else if ($Map) {
        if (!$m) {
          $m = new $Map();
        }
        $mapSet($m, key, value);
      } else {
        if (!$o) {
          $o = { key: {}, next: null };
        }
        listSet($o, key, value);
      }
    }
  };
  return channel;
};
var replace = String.prototype.replace;
var percentTwenties = /%20/g;
var Format = {
  RFC1738: "RFC1738",
  RFC3986: "RFC3986"
};
var formats$3 = {
  "default": Format.RFC3986,
  formatters: {
    RFC1738: function(value) {
      return replace.call(value, percentTwenties, "+");
    },
    RFC3986: function(value) {
      return String(value);
    }
  },
  RFC1738: Format.RFC1738,
  RFC3986: Format.RFC3986
};
var formats$2 = formats$3;
var has$4 = Object.prototype.hasOwnProperty;
var isArray$f = Array.isArray;
var hexTable = function() {
  var array2 = [];
  for (var i = 0; i < 256; ++i) {
    array2.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
  }
  return array2;
}();
var compactQueue = function compactQueue2(queue) {
  while (queue.length > 1) {
    var item = queue.pop();
    var obj = item.obj[item.prop];
    if (isArray$f(obj)) {
      var compacted = [];
      for (var j = 0; j < obj.length; ++j) {
        if (typeof obj[j] !== "undefined") {
          compacted.push(obj[j]);
        }
      }
      item.obj[item.prop] = compacted;
    }
  }
};
var arrayToObject = function arrayToObject2(source, options) {
  var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
  for (var i = 0; i < source.length; ++i) {
    if (typeof source[i] !== "undefined") {
      obj[i] = source[i];
    }
  }
  return obj;
};
var merge$1 = function merge(target, source, options) {
  if (!source) {
    return target;
  }
  if (typeof source !== "object") {
    if (isArray$f(target)) {
      target.push(source);
    } else if (target && typeof target === "object") {
      if (options && (options.plainObjects || options.allowPrototypes) || !has$4.call(Object.prototype, source)) {
        target[source] = true;
      }
    } else {
      return [target, source];
    }
    return target;
  }
  if (!target || typeof target !== "object") {
    return [target].concat(source);
  }
  var mergeTarget = target;
  if (isArray$f(target) && !isArray$f(source)) {
    mergeTarget = arrayToObject(target, options);
  }
  if (isArray$f(target) && isArray$f(source)) {
    source.forEach(function(item, i) {
      if (has$4.call(target, i)) {
        var targetItem = target[i];
        if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
          target[i] = merge(targetItem, item, options);
        } else {
          target.push(item);
        }
      } else {
        target[i] = item;
      }
    });
    return target;
  }
  return Object.keys(source).reduce(function(acc, key) {
    var value = source[key];
    if (has$4.call(acc, key)) {
      acc[key] = merge(acc[key], value, options);
    } else {
      acc[key] = value;
    }
    return acc;
  }, mergeTarget);
};
var assign = function assignSingleSource(target, source) {
  return Object.keys(source).reduce(function(acc, key) {
    acc[key] = source[key];
    return acc;
  }, target);
};
var decode = function(str2, decoder, charset) {
  var strWithoutPlus = str2.replace(/\+/g, " ");
  if (charset === "iso-8859-1") {
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
  }
  try {
    return decodeURIComponent(strWithoutPlus);
  } catch (e) {
    return strWithoutPlus;
  }
};
var encode = function encode2(str2, defaultEncoder, charset, kind, format) {
  if (str2.length === 0) {
    return str2;
  }
  var string2 = str2;
  if (typeof str2 === "symbol") {
    string2 = Symbol.prototype.toString.call(str2);
  } else if (typeof str2 !== "string") {
    string2 = String(str2);
  }
  if (charset === "iso-8859-1") {
    return escape(string2).replace(/%u[0-9a-f]{4}/gi, function($0) {
      return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
    });
  }
  var out = "";
  for (var i = 0; i < string2.length; ++i) {
    var c = string2.charCodeAt(i);
    if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats$2.RFC1738 && (c === 40 || c === 41)) {
      out += string2.charAt(i);
      continue;
    }
    if (c < 128) {
      out = out + hexTable[c];
      continue;
    }
    if (c < 2048) {
      out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
      continue;
    }
    if (c < 55296 || c >= 57344) {
      out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
      continue;
    }
    i += 1;
    c = 65536 + ((c & 1023) << 10 | string2.charCodeAt(i) & 1023);
    out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
  }
  return out;
};
var compact = function compact2(value) {
  var queue = [{ obj: { o: value }, prop: "o" }];
  var refs = [];
  for (var i = 0; i < queue.length; ++i) {
    var item = queue[i];
    var obj = item.obj[item.prop];
    var keys2 = Object.keys(obj);
    for (var j = 0; j < keys2.length; ++j) {
      var key = keys2[j];
      var val = obj[key];
      if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
        queue.push({ obj, prop: key });
        refs.push(val);
      }
    }
  }
  compactQueue(queue);
  return value;
};
var isRegExp$1 = function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === "[object RegExp]";
};
var isBuffer$5 = function isBuffer(obj) {
  if (!obj || typeof obj !== "object") {
    return false;
  }
  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var combine = function combine2(a, b) {
  return [].concat(a, b);
};
var maybeMap = function maybeMap2(val, fn) {
  if (isArray$f(val)) {
    var mapped = [];
    for (var i = 0; i < val.length; i += 1) {
      mapped.push(fn(val[i]));
    }
    return mapped;
  }
  return fn(val);
};
var utils$f = {
  arrayToObject,
  assign,
  combine,
  compact,
  decode,
  encode,
  isBuffer: isBuffer$5,
  isRegExp: isRegExp$1,
  maybeMap,
  merge: merge$1
};
var getSideChannel2 = sideChannel;
var utils$e = utils$f;
var formats$1 = formats$3;
var has$3 = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    return prefix + "[]";
  },
  comma: "comma",
  indices: function indices(prefix, key) {
    return prefix + "[" + key + "]";
  },
  repeat: function repeat(prefix) {
    return prefix;
  }
};
var isArray$e = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function(arr, valueOrArray) {
  push.apply(arr, isArray$e(valueOrArray) ? valueOrArray : [valueOrArray]);
};
var toISO = Date.prototype.toISOString;
var defaultFormat = formats$1["default"];
var defaults$1 = {
  addQueryPrefix: false,
  allowDots: false,
  charset: "utf-8",
  charsetSentinel: false,
  delimiter: "&",
  encode: true,
  encoder: utils$e.encode,
  encodeValuesOnly: false,
  format: defaultFormat,
  formatter: formats$1.formatters[defaultFormat],
  // deprecated
  indices: false,
  serializeDate: function serializeDate(date2) {
    return toISO.call(date2);
  },
  skipNulls: false,
  strictNullHandling: false
};
var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
  return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
};
var sentinel = {};
var stringify$a = function stringify(object2, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort2, allowDots, serializeDate2, format, formatter, encodeValuesOnly, charset, sideChannel2) {
  var obj = object2;
  var tmpSc = sideChannel2;
  var step = 0;
  var findFlag = false;
  while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
    var pos = tmpSc.get(object2);
    step += 1;
    if (typeof pos !== "undefined") {
      if (pos === step) {
        throw new RangeError("Cyclic object value");
      } else {
        findFlag = true;
      }
    }
    if (typeof tmpSc.get(sentinel) === "undefined") {
      step = 0;
    }
  }
  if (typeof filter === "function") {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate2(obj);
  } else if (generateArrayPrefix === "comma" && isArray$e(obj)) {
    obj = utils$e.maybeMap(obj, function(value2) {
      if (value2 instanceof Date) {
        return serializeDate2(value2);
      }
      return value2;
    });
  }
  if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder, charset, "key", format) : prefix;
    }
    obj = "";
  }
  if (isNonNullishPrimitive(obj) || utils$e.isBuffer(obj)) {
    if (encoder) {
      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder, charset, "key", format);
      return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults$1.encoder, charset, "value", format))];
    }
    return [formatter(prefix) + "=" + formatter(String(obj))];
  }
  var values = [];
  if (typeof obj === "undefined") {
    return values;
  }
  var objKeys;
  if (generateArrayPrefix === "comma" && isArray$e(obj)) {
    if (encodeValuesOnly && encoder) {
      obj = utils$e.maybeMap(obj, encoder);
    }
    objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
  } else if (isArray$e(filter)) {
    objKeys = filter;
  } else {
    var keys2 = Object.keys(obj);
    objKeys = sort2 ? keys2.sort(sort2) : keys2;
  }
  var adjustedPrefix = commaRoundTrip && isArray$e(obj) && obj.length === 1 ? prefix + "[]" : prefix;
  for (var j = 0; j < objKeys.length; ++j) {
    var key = objKeys[j];
    var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
    if (skipNulls && value === null) {
      continue;
    }
    var keyPrefix = isArray$e(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
    sideChannel2.set(object2, step);
    var valueSideChannel = getSideChannel2();
    valueSideChannel.set(sentinel, sideChannel2);
    pushToArray(values, stringify(
      value,
      keyPrefix,
      generateArrayPrefix,
      commaRoundTrip,
      strictNullHandling,
      skipNulls,
      generateArrayPrefix === "comma" && encodeValuesOnly && isArray$e(obj) ? null : encoder,
      filter,
      sort2,
      allowDots,
      serializeDate2,
      format,
      formatter,
      encodeValuesOnly,
      charset,
      valueSideChannel
    ));
  }
  return values;
};
var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
  if (!opts) {
    return defaults$1;
  }
  if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
    throw new TypeError("Encoder has to be a function.");
  }
  var charset = opts.charset || defaults$1.charset;
  if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
    throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
  }
  var format = formats$1["default"];
  if (typeof opts.format !== "undefined") {
    if (!has$3.call(formats$1.formatters, opts.format)) {
      throw new TypeError("Unknown format option provided.");
    }
    format = opts.format;
  }
  var formatter = formats$1.formatters[format];
  var filter = defaults$1.filter;
  if (typeof opts.filter === "function" || isArray$e(opts.filter)) {
    filter = opts.filter;
  }
  return {
    addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults$1.addQueryPrefix,
    allowDots: typeof opts.allowDots === "undefined" ? defaults$1.allowDots : !!opts.allowDots,
    charset,
    charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults$1.charsetSentinel,
    delimiter: typeof opts.delimiter === "undefined" ? defaults$1.delimiter : opts.delimiter,
    encode: typeof opts.encode === "boolean" ? opts.encode : defaults$1.encode,
    encoder: typeof opts.encoder === "function" ? opts.encoder : defaults$1.encoder,
    encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults$1.encodeValuesOnly,
    filter,
    format,
    formatter,
    serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults$1.serializeDate,
    skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults$1.skipNulls,
    sort: typeof opts.sort === "function" ? opts.sort : null,
    strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults$1.strictNullHandling
  };
};
var stringify_1 = function(object2, opts) {
  var obj = object2;
  var options = normalizeStringifyOptions(opts);
  var objKeys;
  var filter;
  if (typeof options.filter === "function") {
    filter = options.filter;
    obj = filter("", obj);
  } else if (isArray$e(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }
  var keys2 = [];
  if (typeof obj !== "object" || obj === null) {
    return "";
  }
  var arrayFormat;
  if (opts && opts.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = opts.arrayFormat;
  } else if (opts && "indices" in opts) {
    arrayFormat = opts.indices ? "indices" : "repeat";
  } else {
    arrayFormat = "indices";
  }
  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
  if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
    throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
  }
  var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
  if (!objKeys) {
    objKeys = Object.keys(obj);
  }
  if (options.sort) {
    objKeys.sort(options.sort);
  }
  var sideChannel2 = getSideChannel2();
  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];
    if (options.skipNulls && obj[key] === null) {
      continue;
    }
    pushToArray(keys2, stringify$a(
      obj[key],
      key,
      generateArrayPrefix,
      commaRoundTrip,
      options.strictNullHandling,
      options.skipNulls,
      options.encode ? options.encoder : null,
      options.filter,
      options.sort,
      options.allowDots,
      options.serializeDate,
      options.format,
      options.formatter,
      options.encodeValuesOnly,
      options.charset,
      sideChannel2
    ));
  }
  var joined = keys2.join(options.delimiter);
  var prefix = options.addQueryPrefix === true ? "?" : "";
  if (options.charsetSentinel) {
    if (options.charset === "iso-8859-1") {
      prefix += "utf8=%26%2310003%3B&";
    } else {
      prefix += "utf8=%E2%9C%93&";
    }
  }
  return joined.length > 0 ? prefix + joined : "";
};
var utils$d = utils$f;
var has$2 = Object.prototype.hasOwnProperty;
var isArray$d = Array.isArray;
var defaults = {
  allowDots: false,
  allowPrototypes: false,
  allowSparse: false,
  arrayLimit: 20,
  charset: "utf-8",
  charsetSentinel: false,
  comma: false,
  decoder: utils$d.decode,
  delimiter: "&",
  depth: 5,
  ignoreQueryPrefix: false,
  interpretNumericEntities: false,
  parameterLimit: 1e3,
  parseArrays: true,
  plainObjects: false,
  strictNullHandling: false
};
var interpretNumericEntities = function(str2) {
  return str2.replace(/&#(\d+);/g, function($0, numberStr) {
    return String.fromCharCode(parseInt(numberStr, 10));
  });
};
var parseArrayValue = function(val, options) {
  if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
    return val.split(",");
  }
  return val;
};
var isoSentinel = "utf8=%26%2310003%3B";
var charsetSentinel = "utf8=%E2%9C%93";
var parseValues = function parseQueryStringValues(str2, options) {
  var obj = {};
  var cleanStr = options.ignoreQueryPrefix ? str2.replace(/^\?/, "") : str2;
  var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);
  var skipIndex = -1;
  var i;
  var charset = options.charset;
  if (options.charsetSentinel) {
    for (i = 0; i < parts.length; ++i) {
      if (parts[i].indexOf("utf8=") === 0) {
        if (parts[i] === charsetSentinel) {
          charset = "utf-8";
        } else if (parts[i] === isoSentinel) {
          charset = "iso-8859-1";
        }
        skipIndex = i;
        i = parts.length;
      }
    }
  }
  for (i = 0; i < parts.length; ++i) {
    if (i === skipIndex) {
      continue;
    }
    var part = parts[i];
    var bracketEqualsPos = part.indexOf("]=");
    var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
    var key, val;
    if (pos === -1) {
      key = options.decoder(part, defaults.decoder, charset, "key");
      val = options.strictNullHandling ? null : "";
    } else {
      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
      val = utils$d.maybeMap(
        parseArrayValue(part.slice(pos + 1), options),
        function(encodedVal) {
          return options.decoder(encodedVal, defaults.decoder, charset, "value");
        }
      );
    }
    if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
      val = interpretNumericEntities(val);
    }
    if (part.indexOf("[]=") > -1) {
      val = isArray$d(val) ? [val] : val;
    }
    if (has$2.call(obj, key)) {
      obj[key] = utils$d.combine(obj[key], val);
    } else {
      obj[key] = val;
    }
  }
  return obj;
};
var parseObject = function(chain, val, options, valuesParsed) {
  var leaf = valuesParsed ? val : parseArrayValue(val, options);
  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root2 = chain[i];
    if (root2 === "[]" && options.parseArrays) {
      obj = [].concat(leaf);
    } else {
      obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var cleanRoot = root2.charAt(0) === "[" && root2.charAt(root2.length - 1) === "]" ? root2.slice(1, -1) : root2;
      var index2 = parseInt(cleanRoot, 10);
      if (!options.parseArrays && cleanRoot === "") {
        obj = { 0: leaf };
      } else if (!isNaN(index2) && root2 !== cleanRoot && String(index2) === cleanRoot && index2 >= 0 && (options.parseArrays && index2 <= options.arrayLimit)) {
        obj = [];
        obj[index2] = leaf;
      } else if (cleanRoot !== "__proto__") {
        obj[cleanRoot] = leaf;
      }
    }
    leaf = obj;
  }
  return leaf;
};
var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
  if (!givenKey) {
    return;
  }
  var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
  var brackets2 = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g;
  var segment = options.depth > 0 && brackets2.exec(key);
  var parent2 = segment ? key.slice(0, segment.index) : key;
  var keys2 = [];
  if (parent2) {
    if (!options.plainObjects && has$2.call(Object.prototype, parent2)) {
      if (!options.allowPrototypes) {
        return;
      }
    }
    keys2.push(parent2);
  }
  var i = 0;
  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;
    if (!options.plainObjects && has$2.call(Object.prototype, segment[1].slice(1, -1))) {
      if (!options.allowPrototypes) {
        return;
      }
    }
    keys2.push(segment[1]);
  }
  if (segment) {
    keys2.push("[" + key.slice(segment.index) + "]");
  }
  return parseObject(keys2, val, options, valuesParsed);
};
var normalizeParseOptions = function normalizeParseOptions2(opts) {
  if (!opts) {
    return defaults;
  }
  if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
    throw new TypeError("Decoder has to be a function.");
  }
  if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
    throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
  }
  var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
  return {
    allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
    allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
    allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
    arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
    charset,
    charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
    comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
    decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
    delimiter: typeof opts.delimiter === "string" || utils$d.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
    // eslint-disable-next-line no-implicit-coercion, no-extra-parens
    depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
    interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
    parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
    parseArrays: opts.parseArrays !== false,
    plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
    strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
  };
};
var parse$8 = function(str2, opts) {
  var options = normalizeParseOptions(opts);
  if (str2 === "" || str2 === null || typeof str2 === "undefined") {
    return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
  }
  var tempObj = typeof str2 === "string" ? parseValues(str2, options) : str2;
  var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
  var keys2 = Object.keys(tempObj);
  for (var i = 0; i < keys2.length; ++i) {
    var key = keys2[i];
    var newObj = parseKeys(key, tempObj[key], options, typeof str2 === "string");
    obj = utils$d.merge(obj, newObj, options);
  }
  if (options.allowSparse === true) {
    return obj;
  }
  return utils$d.compact(obj);
};
var stringify$9 = stringify_1;
var parse$7 = parse$8;
var formats = formats$3;
var lib$2 = {
  formats,
  parse: parse$7,
  stringify: stringify$9
};
const qs = /* @__PURE__ */ getDefaultExportFromCjs(lib$2);
const getConfig = (param) => {
  return strapi.config.get(`plugin.${pluginId}.${param}`);
};
const convertToCsv = (entries, options) => {
  entries = toArray$2(entries);
  const columnTitles = ["id"].concat(getModelAttributes(options.slug, { filterOutTarget: ["admin::user"] }).map((attr) => attr.name));
  const content = [convertStrArrayToCsv(columnTitles)].concat(entries.map((entry) => convertEntryToStrArray(entry, columnTitles)).map(convertStrArrayToCsv)).join("\r\n");
  return content;
};
const convertStrArrayToCsv = (entry) => {
  return entry.map(stringifyEntry).map((v) => v.replace(/"/g, '""')).map((v) => `"${v}"`).join(",");
};
const stringifyEntry = (entry) => {
  if (typeof entry === "object") {
    return JSON.stringify(entry);
  }
  return String(entry);
};
const convertEntryToStrArray = (entry, keys2) => {
  return keys2.map((key) => entry[key]);
};
const convertToJson$1 = (entries, options) => {
  entries = JSON.stringify(entries, null, "	");
  return entries;
};
const withBeforeConvert$1 = (convertFn) => (entries, options) => {
  entries = beforeConvert$1(entries, options);
  entries = convertFn(entries, options);
  return entries;
};
const beforeConvert$1 = (entries, options) => {
  entries = toArray$2(entries);
  entries = exportMedia(entries, options);
  if (options.relationsAsId) {
    entries = exportRelationsAsId(entries, options);
  }
  if (getModel(options.slug).kind === "singleType") {
    return entries?.[0];
  }
  return entries;
};
const exportMedia = (entries, options) => {
  if (options.slug === CustomSlugToSlug[CustomSlugs.MEDIA]) {
    entries = entries.map((entry) => {
      if (isObjectSafe(entry) && entry.url.startsWith("/")) {
        entry.url = computeUrl(entry.url);
      }
      return entry;
    });
    return entries;
  }
  const mediaKeys = getModelAttributes(options.slug, { filterOutTarget: ["admin::user"], filterType: ["media"] }).map((attr) => attr.name);
  const relationsAttr = getModelAttributes(options.slug, { filterOutTarget: ["admin::user"], filterType: ["component", "dynamiczone", "relation"] });
  entries = entries.map((entry) => {
    mediaKeys.forEach((key) => {
      if (isArraySafe(entry[key])) {
        entry[key] = entry[key].map((entryItem) => {
          if (isObjectSafe(entryItem) && entryItem.url.startsWith("/")) {
            entryItem.url = computeUrl(entryItem.url);
          }
          return entryItem;
        });
      } else if (isObjectSafe(entry[key]) && entry[key].url.startsWith("/")) {
        entry[key].url = computeUrl(entry[key].url);
      }
    });
    relationsAttr.forEach((attr) => {
      if (attr.type === "component") {
        if (entry[attr.name]) {
          const areMultiple = attr.repeatable;
          const relEntriesProcessed = exportMedia(toArray$2(entry[attr.name]), { slug: attr.component });
          entry[attr.name] = areMultiple ? relEntriesProcessed : relEntriesProcessed?.[0] || null;
        }
      } else if (attr.type === "dynamiczone") {
        if (entry[attr.name]) {
          entry[attr.name] = entry[attr.name].map((component) => exportMedia([component], { slug: component.__component })?.[0] || null);
        }
      } else if (attr.type === "relation") {
        if (entry[attr.name]) {
          const areMultiple = isArraySafe(entry[attr.name]);
          const relEntriesProcessed = exportMedia(toArray$2(entry[attr.name]), { slug: attr.target });
          entry[attr.name] = areMultiple ? relEntriesProcessed : relEntriesProcessed?.[0] || null;
        }
      }
    });
    return entry;
  });
  return entries;
};
const computeUrl = (relativeUrl) => {
  return getConfig("serverPublicHostname") + relativeUrl;
};
const exportRelationsAsId = (entries, options) => {
  const relationKeys = getModelAttributes(options.slug, { filterOutTarget: ["admin::user"], filterType: ["component", "dynamiczone", "media", "relation"] }).map(
    (attr) => attr.name
  );
  return entries.map((entry) => {
    relationKeys.forEach((key) => {
      if (entry[key] == null) {
        entry[key] = null;
      } else if (isArraySafe(entry[key])) {
        entry[key] = entry[key].map((rel) => {
          if (typeof rel === "object") {
            return rel.id;
          }
          return rel;
        });
      } else if (isObjectSafe(entry[key])) {
        entry[key] = entry[key].id;
      }
    });
    return entry;
  });
};
const convertToCsvWithBeforeConvert = withBeforeConvert$1(convertToCsv);
const convertToJsonWithBeforeConvert = withBeforeConvert$1(convertToJson$1);
const dataFormats$1 = {
  CSV: "csv",
  JSON: "json",
  JSON_V2: "json-v2"
};
const dataConverterConfigs$1 = {
  [dataFormats$1.CSV]: {
    convertEntries: convertToCsvWithBeforeConvert
  },
  [dataFormats$1.JSON]: {
    convertEntries: convertToJsonWithBeforeConvert
  }
};
const exportData = async ({ slug, search, applySearch, exportFormat, relationsAsId, deepness = 5 }) => {
  const slugToProcess = CustomSlugToSlug[slug] || slug;
  const queryBuilder = new ObjectBuilder();
  queryBuilder.extend(getPopulateFromSchema$1(slugToProcess, deepness));
  if (applySearch) {
    queryBuilder.extend(buildFilterQuery$1(search));
  }
  const query = queryBuilder.get();
  const entries = await strapi.documents(slugToProcess).findMany(query);
  const data = convertData$1(entries, {
    slug: slugToProcess,
    dataFormat: exportFormat,
    relationsAsId
  });
  return data;
};
const buildFilterQuery$1 = (search) => {
  let { filters: filters2, sort: sortRaw } = qs.parse(search);
  const [attr, value] = sortRaw?.split(":") || [];
  let sort2 = {};
  if (attr && value) {
    sort2[attr] = value.toLowerCase();
  }
  return {
    filters: filters2,
    sort: sort2
  };
};
const convertData$1 = (entries, options) => {
  const converter = getConverter$1(options.dataFormat);
  const convertedData = converter.convertEntries(entries, options);
  return convertedData;
};
const getConverter$1 = (dataFormat) => {
  const converter = dataConverterConfigs$1[dataFormat];
  if (!converter) {
    throw new Error(`Data format ${dataFormat} is not supported.`);
  }
  return converter;
};
const getPopulateFromSchema$1 = (slug, deepness = 5) => {
  if (deepness <= 1) {
    return true;
  }
  if (slug === "admin::user") {
    return void 0;
  }
  const populate2 = {};
  const model = strapi.getModel(slug);
  for (const [attributeName, attribute] of Object.entries(getModelPopulationAttributes$1(model))) {
    if (!attribute) {
      continue;
    }
    if (attribute.type === "component") {
      populate2[attributeName] = getPopulateFromSchema$1(attribute.component, deepness - 1);
    } else if (attribute.type === "dynamiczone") {
      const dynamicPopulate = attribute.components.reduce((zonePopulate, component) => {
        const compPopulate = getPopulateFromSchema$1(component, deepness - 1);
        return compPopulate === true ? zonePopulate : fp.merge(zonePopulate, compPopulate);
      }, {});
      populate2[attributeName] = fp.isEmpty(dynamicPopulate) ? true : dynamicPopulate;
    } else if (attribute.type === "relation") {
      const relationPopulate = getPopulateFromSchema$1(attribute.target, deepness - 1);
      if (relationPopulate) {
        populate2[attributeName] = relationPopulate;
      }
    } else if (attribute.type === "media") {
      populate2[attributeName] = true;
    }
  }
  return fp.isEmpty(populate2) ? true : { populate: populate2 };
};
const getModelPopulationAttributes$1 = (model) => {
  if (model.uid === "plugin::upload.file") {
    const { related, ...attributes } = model.attributes;
    return attributes;
  }
  return model.attributes;
};
function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear$1;
function eq$3(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_1 = eq$3;
var eq$2 = eq_1;
function assocIndexOf$4(array2, key) {
  var length = array2.length;
  while (length--) {
    if (eq$2(array2[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf$4;
var assocIndexOf$3 = _assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete$1(key) {
  var data = this.__data__, index2 = assocIndexOf$3(data, key);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index2 == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index2, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete$1;
var assocIndexOf$2 = _assocIndexOf;
function listCacheGet$1(key) {
  var data = this.__data__, index2 = assocIndexOf$2(data, key);
  return index2 < 0 ? void 0 : data[index2][1];
}
var _listCacheGet = listCacheGet$1;
var assocIndexOf$1 = _assocIndexOf;
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}
var _listCacheHas = listCacheHas$1;
var assocIndexOf = _assocIndexOf;
function listCacheSet$1(key, value) {
  var data = this.__data__, index2 = assocIndexOf(data, key);
  if (index2 < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index2][1] = value;
  }
  return this;
}
var _listCacheSet = listCacheSet$1;
var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
function ListCache$4(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype["delete"] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;
var _ListCache = ListCache$4;
var ListCache$3 = _ListCache;
function stackClear$1() {
  this.__data__ = new ListCache$3();
  this.size = 0;
}
var _stackClear = stackClear$1;
function stackDelete$1(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
var _stackDelete = stackDelete$1;
function stackGet$1(key) {
  return this.__data__.get(key);
}
var _stackGet = stackGet$1;
function stackHas$1(key) {
  return this.__data__.has(key);
}
var _stackHas = stackHas$1;
var freeGlobal$2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$2;
var freeGlobal$1 = _freeGlobal;
var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
var root$9 = freeGlobal$1 || freeSelf$1 || Function("return this")();
var _root = root$9;
var root$8 = _root;
var Symbol$8 = root$8.Symbol;
var _Symbol = Symbol$8;
var Symbol$7 = _Symbol;
var objectProto$i = Object.prototype;
var hasOwnProperty$e = objectProto$i.hasOwnProperty;
var nativeObjectToString$1 = objectProto$i.toString;
var symToStringTag$1 = Symbol$7 ? Symbol$7.toStringTag : void 0;
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$e.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto$h = Object.prototype;
var nativeObjectToString = objectProto$h.toString;
function objectToString$2(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString$2;
var Symbol$6 = _Symbol, getRawTag = _getRawTag, objectToString$1 = _objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$6 ? Symbol$6.toStringTag : void 0;
function baseGetTag$6(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString$1(value);
}
var _baseGetTag = baseGetTag$6;
function isObject$b(value) {
  var type2 = typeof value;
  return value != null && (type2 == "object" || type2 == "function");
}
var isObject_1 = isObject$b;
var baseGetTag$5 = _baseGetTag, isObject$a = isObject_1;
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$3(value) {
  if (!isObject$a(value)) {
    return false;
  }
  var tag = baseGetTag$5(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction$3;
var root$7 = _root;
var coreJsData$1 = root$7["__core-js_shared__"];
var _coreJsData = coreJsData$1;
var coreJsData = _coreJsData;
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked$1(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked$1;
var funcProto$2 = Function.prototype;
var funcToString$2 = funcProto$2.toString;
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var _toSource = toSource$2;
var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$9 = isObject_1, toSource$1 = _toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto$1 = Function.prototype, objectProto$g = Object.prototype;
var funcToString$1 = funcProto$1.toString;
var hasOwnProperty$d = objectProto$g.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString$1.call(hasOwnProperty$d).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative$1(value) {
  if (!isObject$9(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value));
}
var _baseIsNative = baseIsNative$1;
function getValue$1(object2, key) {
  return object2 == null ? void 0 : object2[key];
}
var _getValue = getValue$1;
var baseIsNative = _baseIsNative, getValue = _getValue;
function getNative$7(object2, key) {
  var value = getValue(object2, key);
  return baseIsNative(value) ? value : void 0;
}
var _getNative = getNative$7;
var getNative$6 = _getNative, root$6 = _root;
var Map$4 = getNative$6(root$6, "Map");
var _Map = Map$4;
var getNative$5 = _getNative;
var nativeCreate$4 = getNative$5(Object, "create");
var _nativeCreate = nativeCreate$4;
var nativeCreate$3 = _nativeCreate;
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}
var _hashClear = hashClear$1;
function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var _hashDelete = hashDelete$1;
var nativeCreate$2 = _nativeCreate;
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$f = Object.prototype;
var hasOwnProperty$c = objectProto$f.hasOwnProperty;
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? void 0 : result;
  }
  return hasOwnProperty$c.call(data, key) ? data[key] : void 0;
}
var _hashGet = hashGet$1;
var nativeCreate$1 = _nativeCreate;
var objectProto$e = Object.prototype;
var hasOwnProperty$b = objectProto$e.hasOwnProperty;
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$b.call(data, key);
}
var _hashHas = hashHas$1;
var nativeCreate = _nativeCreate;
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
  return this;
}
var _hashSet = hashSet$1;
var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
function Hash$1(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash$1.prototype.clear = hashClear;
Hash$1.prototype["delete"] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;
var _Hash = Hash$1;
var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$3 || ListCache$2)(),
    "string": new Hash()
  };
}
var _mapCacheClear = mapCacheClear$1;
function isKeyable$1(value) {
  var type2 = typeof value;
  return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
}
var _isKeyable = isKeyable$1;
var isKeyable = _isKeyable;
function getMapData$4(map2, key) {
  var data = map2.__data__;
  return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var _getMapData = getMapData$4;
var getMapData$3 = _getMapData;
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var _mapCacheDelete = mapCacheDelete$1;
var getMapData$2 = _getMapData;
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}
var _mapCacheGet = mapCacheGet$1;
var getMapData$1 = _getMapData;
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}
var _mapCacheHas = mapCacheHas$1;
var getMapData = _getMapData;
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet$1;
var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
function MapCache$3(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype["delete"] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;
var _MapCache = MapCache$3;
var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
var LARGE_ARRAY_SIZE = 200;
function stackSet$1(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$1) {
    var pairs2 = data.__data__;
    if (!Map$2 || pairs2.length < LARGE_ARRAY_SIZE - 1) {
      pairs2.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$2(pairs2);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
var _stackSet = stackSet$1;
var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
function Stack$3(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}
Stack$3.prototype.clear = stackClear;
Stack$3.prototype["delete"] = stackDelete;
Stack$3.prototype.get = stackGet;
Stack$3.prototype.has = stackHas;
Stack$3.prototype.set = stackSet;
var _Stack = Stack$3;
function arrayEach$1(array2, iteratee) {
  var index2 = -1, length = array2 == null ? 0 : array2.length;
  while (++index2 < length) {
    if (iteratee(array2[index2], index2, array2) === false) {
      break;
    }
  }
  return array2;
}
var _arrayEach = arrayEach$1;
var getNative$4 = _getNative;
var defineProperty$2 = function() {
  try {
    var func = getNative$4(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var _defineProperty = defineProperty$2;
var defineProperty$1 = _defineProperty;
function baseAssignValue$4(object2, key, value) {
  if (key == "__proto__" && defineProperty$1) {
    defineProperty$1(object2, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object2[key] = value;
  }
}
var _baseAssignValue = baseAssignValue$4;
var baseAssignValue$3 = _baseAssignValue, eq$1 = eq_1;
var objectProto$d = Object.prototype;
var hasOwnProperty$a = objectProto$d.hasOwnProperty;
function assignValue$3(object2, key, value) {
  var objValue = object2[key];
  if (!(hasOwnProperty$a.call(object2, key) && eq$1(objValue, value)) || value === void 0 && !(key in object2)) {
    baseAssignValue$3(object2, key, value);
  }
}
var _assignValue = assignValue$3;
var assignValue$2 = _assignValue, baseAssignValue$2 = _baseAssignValue;
function copyObject$5(source, props, object2, customizer) {
  var isNew = !object2;
  object2 || (object2 = {});
  var index2 = -1, length = props.length;
  while (++index2 < length) {
    var key = props[index2];
    var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue$2(object2, key, newValue);
    } else {
      assignValue$2(object2, key, newValue);
    }
  }
  return object2;
}
var _copyObject = copyObject$5;
function baseTimes$1(n, iteratee) {
  var index2 = -1, result = Array(n);
  while (++index2 < n) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var _baseTimes = baseTimes$1;
function isObjectLike$9(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike$9;
var baseGetTag$4 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
var argsTag$3 = "[object Arguments]";
function baseIsArguments$1(value) {
  return isObjectLike$8(value) && baseGetTag$4(value) == argsTag$3;
}
var _baseIsArguments = baseIsArguments$1;
var baseIsArguments = _baseIsArguments, isObjectLike$7 = isObjectLike_1;
var objectProto$c = Object.prototype;
var hasOwnProperty$9 = objectProto$c.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
var isArguments$4 = baseIsArguments(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments : function(value) {
  return isObjectLike$7(value) && hasOwnProperty$9.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
};
var isArguments_1 = isArguments$4;
var isArray$c = Array.isArray;
var isArray_1 = isArray$c;
var isBuffer$4 = { exports: {} };
function stubFalse() {
  return false;
}
var stubFalse_1 = stubFalse;
isBuffer$4.exports;
(function(module, exports) {
  var root2 = _root, stubFalse2 = stubFalse_1;
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root2.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer3 = nativeIsBuffer || stubFalse2;
  module.exports = isBuffer3;
})(isBuffer$4, isBuffer$4.exports);
var isBufferExports = isBuffer$4.exports;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex$3(value, length) {
  var type2 = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var _isIndex = isIndex$3;
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength$3(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
var isLength_1 = isLength$3;
var baseGetTag$3 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$6 = isObjectLike_1;
var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$6 = "[object Map]", numberTag$3 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$6 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray$1(value) {
  return isObjectLike$6(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$3(value)];
}
var _baseIsTypedArray = baseIsTypedArray$1;
function baseUnary$3(func) {
  return function(value) {
    return func(value);
  };
}
var _baseUnary = baseUnary$3;
var _nodeUtil = { exports: {} };
_nodeUtil.exports;
(function(module, exports) {
  var freeGlobal2 = _freeGlobal;
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal2.process;
  var nodeUtil2 = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  module.exports = nodeUtil2;
})(_nodeUtil, _nodeUtil.exports);
var _nodeUtilExports = _nodeUtil.exports;
var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtilExports;
var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
var isTypedArray_1 = isTypedArray$3;
var baseTimes = _baseTimes, isArguments$3 = isArguments_1, isArray$b = isArray_1, isBuffer$3 = isBufferExports, isIndex$2 = _isIndex, isTypedArray$2 = isTypedArray_1;
var objectProto$b = Object.prototype;
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;
function arrayLikeKeys$2(value, inherited) {
  var isArr = isArray$b(value), isArg = !isArr && isArguments$3(value), isBuff = !isArr && !isArg && isBuffer$3(value), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty$8.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex$2(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var _arrayLikeKeys = arrayLikeKeys$2;
var objectProto$a = Object.prototype;
function isPrototype$4(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
  return value === proto;
}
var _isPrototype = isPrototype$4;
function overArg$2(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var _overArg = overArg$2;
var overArg$1 = _overArg;
var nativeKeys$1 = overArg$1(Object.keys, Object);
var _nativeKeys = nativeKeys$1;
var isPrototype$3 = _isPrototype, nativeKeys = _nativeKeys;
var objectProto$9 = Object.prototype;
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
function baseKeys$2(object2) {
  if (!isPrototype$3(object2)) {
    return nativeKeys(object2);
  }
  var result = [];
  for (var key in Object(object2)) {
    if (hasOwnProperty$7.call(object2, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
var _baseKeys = baseKeys$2;
var isFunction$1 = isFunction_1, isLength$1 = isLength_1;
function isArrayLike$3(value) {
  return value != null && isLength$1(value.length) && !isFunction$1(value);
}
var isArrayLike_1 = isArrayLike$3;
var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys$1 = _baseKeys, isArrayLike$2 = isArrayLike_1;
function keys$5(object2) {
  return isArrayLike$2(object2) ? arrayLikeKeys$1(object2) : baseKeys$1(object2);
}
var keys_1 = keys$5;
var copyObject$4 = _copyObject, keys$4 = keys_1;
function baseAssign$1(object2, source) {
  return object2 && copyObject$4(source, keys$4(source), object2);
}
var _baseAssign = baseAssign$1;
function nativeKeysIn$1(object2) {
  var result = [];
  if (object2 != null) {
    for (var key in Object(object2)) {
      result.push(key);
    }
  }
  return result;
}
var _nativeKeysIn = nativeKeysIn$1;
var isObject$8 = isObject_1, isPrototype$2 = _isPrototype, nativeKeysIn = _nativeKeysIn;
var objectProto$8 = Object.prototype;
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
function baseKeysIn$1(object2) {
  if (!isObject$8(object2)) {
    return nativeKeysIn(object2);
  }
  var isProto = isPrototype$2(object2), result = [];
  for (var key in object2) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$6.call(object2, key)))) {
      result.push(key);
    }
  }
  return result;
}
var _baseKeysIn = baseKeysIn$1;
var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$1 = isArrayLike_1;
function keysIn$3(object2) {
  return isArrayLike$1(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
}
var keysIn_1 = keysIn$3;
var copyObject$3 = _copyObject, keysIn$2 = keysIn_1;
function baseAssignIn$1(object2, source) {
  return object2 && copyObject$3(source, keysIn$2(source), object2);
}
var _baseAssignIn = baseAssignIn$1;
var _cloneBuffer = { exports: {} };
_cloneBuffer.exports;
(function(module, exports) {
  var root2 = _root;
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
  function cloneBuffer2(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }
  module.exports = cloneBuffer2;
})(_cloneBuffer, _cloneBuffer.exports);
var _cloneBufferExports = _cloneBuffer.exports;
function copyArray$1(source, array2) {
  var index2 = -1, length = source.length;
  array2 || (array2 = Array(length));
  while (++index2 < length) {
    array2[index2] = source[index2];
  }
  return array2;
}
var _copyArray = copyArray$1;
function arrayFilter$1(array2, predicate) {
  var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
  while (++index2 < length) {
    var value = array2[index2];
    if (predicate(value, index2, array2)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
var _arrayFilter = arrayFilter$1;
function stubArray$2() {
  return [];
}
var stubArray_1 = stubArray$2;
var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
var objectProto$7 = Object.prototype;
var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object2) {
  if (object2 == null) {
    return [];
  }
  object2 = Object(object2);
  return arrayFilter(nativeGetSymbols$1(object2), function(symbol) {
    return propertyIsEnumerable.call(object2, symbol);
  });
};
var _getSymbols = getSymbols$3;
var copyObject$2 = _copyObject, getSymbols$2 = _getSymbols;
function copySymbols$1(source, object2) {
  return copyObject$2(source, getSymbols$2(source), object2);
}
var _copySymbols = copySymbols$1;
function arrayPush$3(array2, values) {
  var index2 = -1, length = values.length, offset = array2.length;
  while (++index2 < length) {
    array2[offset + index2] = values[index2];
  }
  return array2;
}
var _arrayPush = arrayPush$3;
var overArg = _overArg;
var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
var _getPrototype = getPrototype$3;
var arrayPush$2 = _arrayPush, getPrototype$2 = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object2) {
  var result = [];
  while (object2) {
    arrayPush$2(result, getSymbols$1(object2));
    object2 = getPrototype$2(object2);
  }
  return result;
};
var _getSymbolsIn = getSymbolsIn$2;
var copyObject$1 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
function copySymbolsIn$1(source, object2) {
  return copyObject$1(source, getSymbolsIn$1(source), object2);
}
var _copySymbolsIn = copySymbolsIn$1;
var arrayPush$1 = _arrayPush, isArray$a = isArray_1;
function baseGetAllKeys$2(object2, keysFunc, symbolsFunc) {
  var result = keysFunc(object2);
  return isArray$a(object2) ? result : arrayPush$1(result, symbolsFunc(object2));
}
var _baseGetAllKeys = baseGetAllKeys$2;
var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$3 = keys_1;
function getAllKeys$2(object2) {
  return baseGetAllKeys$1(object2, keys$3, getSymbols);
}
var _getAllKeys = getAllKeys$2;
var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$1 = keysIn_1;
function getAllKeysIn$2(object2) {
  return baseGetAllKeys(object2, keysIn$1, getSymbolsIn);
}
var _getAllKeysIn = getAllKeysIn$2;
var getNative$3 = _getNative, root$5 = _root;
var DataView$2 = getNative$3(root$5, "DataView");
var _DataView = DataView$2;
var getNative$2 = _getNative, root$4 = _root;
var Promise$2 = getNative$2(root$4, "Promise");
var _Promise = Promise$2;
var getNative$1 = _getNative, root$3 = _root;
var Set$2 = getNative$1(root$3, "Set");
var _Set = Set$2;
var getNative = _getNative, root$2 = _root;
var WeakMap$2 = getNative(root$2, "WeakMap");
var _WeakMap = WeakMap$2;
var DataView$1 = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$2 = _baseGetTag, toSource = _toSource;
var mapTag$5 = "[object Map]", objectTag$3 = "[object Object]", promiseTag = "[object Promise]", setTag$5 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$3 = "[object DataView]";
var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
var getTag$5 = baseGetTag$2;
if (DataView$1 && getTag$5(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
  getTag$5 = function(value) {
    var result = baseGetTag$2(value), Ctor = result == objectTag$3 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$3;
        case mapCtorString:
          return mapTag$5;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$5;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
var _getTag = getTag$5;
var objectProto$6 = Object.prototype;
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
function initCloneArray$1(array2) {
  var length = array2.length, result = new array2.constructor(length);
  if (length && typeof array2[0] == "string" && hasOwnProperty$5.call(array2, "index")) {
    result.index = array2.index;
    result.input = array2.input;
  }
  return result;
}
var _initCloneArray = initCloneArray$1;
var root$1 = _root;
var Uint8Array$3 = root$1.Uint8Array;
var _Uint8Array = Uint8Array$3;
var Uint8Array$2 = _Uint8Array;
function cloneArrayBuffer$3(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
  return result;
}
var _cloneArrayBuffer = cloneArrayBuffer$3;
var cloneArrayBuffer$2 = _cloneArrayBuffer;
function cloneDataView$1(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var _cloneDataView = cloneDataView$1;
var reFlags = /\w*$/;
function cloneRegExp$1(regexp2) {
  var result = new regexp2.constructor(regexp2.source, reFlags.exec(regexp2));
  result.lastIndex = regexp2.lastIndex;
  return result;
}
var _cloneRegExp = cloneRegExp$1;
var Symbol$5 = _Symbol;
var symbolProto$3 = Symbol$5 ? Symbol$5.prototype : void 0, symbolValueOf$1 = symbolProto$3 ? symbolProto$3.valueOf : void 0;
function cloneSymbol$1(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}
var _cloneSymbol = cloneSymbol$1;
var cloneArrayBuffer$1 = _cloneArrayBuffer;
function cloneTypedArray$1(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var _cloneTypedArray = cloneTypedArray$1;
var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray = _cloneTypedArray;
var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", symbolTag$4 = "[object Symbol]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag$1(object2, tag, isDeep) {
  var Ctor = object2.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object2);
    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object2);
    case dataViewTag$2:
      return cloneDataView(object2, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(object2, isDeep);
    case mapTag$4:
      return new Ctor();
    case numberTag$2:
    case stringTag$2:
      return new Ctor(object2);
    case regexpTag$2:
      return cloneRegExp(object2);
    case setTag$4:
      return new Ctor();
    case symbolTag$4:
      return cloneSymbol(object2);
  }
}
var _initCloneByTag = initCloneByTag$1;
var isObject$7 = isObject_1;
var objectCreate = Object.create;
var baseCreate$1 = /* @__PURE__ */ function() {
  function object2() {
  }
  return function(proto) {
    if (!isObject$7(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object2.prototype = proto;
    var result = new object2();
    object2.prototype = void 0;
    return result;
  };
}();
var _baseCreate = baseCreate$1;
var baseCreate = _baseCreate, getPrototype$1 = _getPrototype, isPrototype$1 = _isPrototype;
function initCloneObject$1(object2) {
  return typeof object2.constructor == "function" && !isPrototype$1(object2) ? baseCreate(getPrototype$1(object2)) : {};
}
var _initCloneObject = initCloneObject$1;
var getTag$4 = _getTag, isObjectLike$5 = isObjectLike_1;
var mapTag$3 = "[object Map]";
function baseIsMap$1(value) {
  return isObjectLike$5(value) && getTag$4(value) == mapTag$3;
}
var _baseIsMap = baseIsMap$1;
var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtilExports;
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
var isMap_1 = isMap$1;
var getTag$3 = _getTag, isObjectLike$4 = isObjectLike_1;
var setTag$3 = "[object Set]";
function baseIsSet$1(value) {
  return isObjectLike$4(value) && getTag$3(value) == setTag$3;
}
var _baseIsSet = baseIsSet$1;
var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtilExports;
var nodeIsSet = nodeUtil && nodeUtil.isSet;
var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
var isSet_1 = isSet$1;
var Stack$2 = _Stack, arrayEach = _arrayEach, assignValue$1 = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer = _cloneBufferExports, copyArray = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$1 = _getAllKeysIn, getTag$2 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject = _initCloneObject, isArray$9 = isArray_1, isBuffer$2 = isBufferExports, isMap = isMap_1, isObject$6 = isObject_1, isSet = isSet_1, keys$2 = keys_1, keysIn = keysIn_1;
var CLONE_DEEP_FLAG$2 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$2 = 4;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$3 = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$1] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$3] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone$3(value, bitmask, customizer, key, object2, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG$2, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
  if (customizer) {
    result = object2 ? customizer(value, key, object2, stack) : customizer(value);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject$6(value)) {
    return value;
  }
  var isArr = isArray$9(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$2(value), isFunc = tag == funcTag || tag == genTag;
    if (isBuffer$2(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object2) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object2 ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack$2());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);
  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone$3(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key2) {
      result.set(key2, baseClone$3(subValue, bitmask, customizer, key2, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn : keys$2;
  var props = isArr ? void 0 : keysFunc(value);
  arrayEach(props || value, function(subValue, key2) {
    if (props) {
      key2 = subValue;
      subValue = value[key2];
    }
    assignValue$1(result, key2, baseClone$3(subValue, bitmask, customizer, key2, value, stack));
  });
  return result;
}
var _baseClone = baseClone$3;
var baseClone$2 = _baseClone;
var CLONE_DEEP_FLAG$1 = 1, CLONE_SYMBOLS_FLAG$1 = 4;
function cloneDeep(value) {
  return baseClone$2(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
}
var cloneDeep_1 = cloneDeep;
const cloneDeep$1 = /* @__PURE__ */ getDefaultExportFromCjs(cloneDeep_1);
function fromPairs(pairs2) {
  var index2 = -1, length = pairs2 == null ? 0 : pairs2.length, result = {};
  while (++index2 < length) {
    var pair = pairs2[index2];
    result[pair[0]] = pair[1];
  }
  return result;
}
var fromPairs_1 = fromPairs;
const fromPairs$1 = /* @__PURE__ */ getDefaultExportFromCjs(fromPairs_1);
const convertToJson = withBeforeConvert(convertToJsonImpl);
function convertToJsonImpl(jsoContent) {
  return JSON.stringify(jsoContent, null, "	");
}
function withBeforeConvert(convertFn) {
  return (jsoContent, options) => {
    return convertFn(beforeConvert(jsoContent), options);
  };
}
function beforeConvert(jsoContent, options) {
  jsoContent = buildMediaUrl(jsoContent);
  jsoContent = pickMediaAttributes(jsoContent);
  return jsoContent;
}
function buildMediaUrl(jsoContent, options) {
  let mediaSlug = CustomSlugToSlug[CustomSlugs.MEDIA];
  let media = jsoContent.data[mediaSlug];
  if (!media) {
    return jsoContent;
  }
  media = lodashExports.fromPairs(
    lodashExports.toPairs(media).map(([id, medium]) => {
      if (isRelativeUrl(medium.url)) {
        medium.url = buildAbsoluteUrl(medium.url);
      }
      return [id, medium];
    })
  );
  jsoContent.data[mediaSlug] = media;
  return jsoContent;
}
function isRelativeUrl(url) {
  return url.startsWith("/");
}
function buildAbsoluteUrl(relativeUrl) {
  return getConfig("serverPublicHostname") + relativeUrl;
}
function pickMediaAttributes(jsoContent, options) {
  let mediaSlug = CustomSlugToSlug[CustomSlugs.MEDIA];
  let media = jsoContent.data[mediaSlug];
  if (!media) {
    return jsoContent;
  }
  media = lodashExports.fromPairs(
    lodashExports.toPairs(media).map(([id, medium]) => {
      medium = lodashExports.pick(medium, ["id", "name", "alternativeText", "caption", "hash", "ext", "mime", "url", "createdAt", "updatedAt", "createdBy", "updatedBy"]);
      return [id, medium];
    })
  );
  jsoContent.data[mediaSlug] = media;
  return jsoContent;
}
const dataFormats = {
  JSON: "json"
};
const dataConverterConfigs = {
  [dataFormats.JSON]: {
    convertEntries: convertToJson
  }
};
async function exportDataV2({
  slug,
  search,
  applySearch,
  deepness = 5,
  exportPluginsContentTypes
}) {
  const slugsToExport = slug === CustomSlugs.WHOLE_DB ? getAllSlugs({ includePluginsContentTypes: exportPluginsContentTypes }) : toArray$2(CustomSlugToSlug[slug] || slug);
  let store = {};
  for (const slug2 of slugsToExport) {
    const hierarchy = buildSlugHierarchy(slug2, deepness);
    store = await findEntriesForHierarchy(store, slug2, hierarchy, deepness, { ...applySearch ? { search } : {} });
  }
  const jsoContent = {
    version: 2,
    data: store
  };
  const fileContent = convertData(jsoContent, {
    dataFormat: "json"
  });
  return fileContent;
}
async function findEntriesForHierarchy(store, slug, hierarchy, deepness, { search, ids }) {
  const schema2 = getModel(slug);
  if (schema2.uid === "admin::user") {
    return {};
  }
  let entries = await findEntries(slug, deepness, { search, ids }).then((entries2) => {
    entries2 = toArray$2(entries2).filter(Boolean);
    if (schema2.pluginOptions?.i18n?.localized) {
      const allEntries = [...entries2];
      const entryIdsToExported = fromPairs$1(allEntries.map((entry) => [entry.id, true]));
      for (const entry of entries2) {
        (entry.localizations || []).forEach((localization) => {
          if (localization.id && !entryIdsToExported[localization.id]) {
            allEntries.push(localization);
            entryIdsToExported[localization.id] = true;
          }
        });
      }
      return allEntries;
    }
    return entries2;
  }).then((entries2) => toArray$2(entries2));
  let entriesFlatten = cloneDeep$1(entries);
  (() => {
    const flattenEntryCommon = (entry) => {
      if (entry == null) {
        return null;
      } else if (isArraySafe(entry)) {
        return entry.map((rel) => {
          if (isObjectSafe(rel)) {
            return rel.id;
          }
          return rel;
        });
      } else if (isObjectSafe(entry)) {
        return entry.id;
      }
      return entry;
    };
    const flattenProperty = (propAttribute, propEntries) => {
      if (propEntries == null) {
        return null;
      } else if (isComponentAttribute(propAttribute)) {
        return flattenEntryCommon(propEntries);
      } else if (isDynamicZoneAttribute$1(propAttribute)) {
        return propEntries.map((entry) => ({
          __component: entry.__component,
          id: entry.id
        }));
      } else if (isMediaAttribute$1(propAttribute)) {
        return flattenEntryCommon(propEntries);
      } else if (isRelationAttribute(propAttribute)) {
        return flattenEntryCommon(propEntries);
      }
      return propEntries;
    };
    const flattenEntry = (entry, slug2) => {
      const attributes = getModelAttributes(slug2, { filterType: ["component", "dynamiczone", "media", "relation"] });
      for (const attribute of attributes) {
        setEntryProp(entry, attribute.name, flattenProperty(attribute, getEntryProp(entry, attribute.name)));
      }
      return entry;
    };
    entriesFlatten = entriesFlatten.map((entry) => flattenEntry(entry, slug));
  })();
  store = mergeObjects({ [slug]: Object.fromEntries(entriesFlatten.map((entry) => [entry.id, entry])) }, store);
  const filterOutUnwantedRelations = () => {
    const UNWANTED_RELATIONS = ["admin::user"];
    const attributes = getModelAttributes(slug, { filterType: ["relation"] });
    return entries.map((entry) => {
      attributes.forEach((attribute) => {
        if (UNWANTED_RELATIONS.includes(attribute.target)) {
          deleteEntryProp(entry, attribute.name);
        }
      });
      return entry;
    });
  };
  filterOutUnwantedRelations();
  const findAndFlattenComponentAttributes = async () => {
    let attributes = getModelAttributes(slug, { filterType: ["component"] });
    for (const attribute of attributes) {
      const attributeSlug = hierarchy[attribute.name]?.__slug;
      if (!attributeSlug) {
        continue;
      }
      const ids2 = entries.filter((entry) => !!getEntryProp(entry, attribute.name)).flatMap((entry) => getEntryProp(entry, attribute.name)).filter((entry) => !!entry.id).map((entry) => entry.id).filter((id) => typeof store?.[attributeSlug]?.[`${id}`] === "undefined");
      const dataToStore = await findEntriesForHierarchy(store, attributeSlug, hierarchy[attribute.name], deepness - 1, { ids: ids2 });
      store = mergeObjects(dataToStore, store);
    }
  };
  await findAndFlattenComponentAttributes();
  const findAndFlattenDynamicZoneAttributes = async () => {
    let attributes = getModelAttributes(slug, { filterType: ["dynamiczone"] });
    for (const attribute of attributes) {
      for (const slugFromAttribute of attribute.components) {
        const componentHierarchy = hierarchy[attribute.name]?.[slugFromAttribute];
        const componentSlug = componentHierarchy?.__slug;
        if (!componentSlug) {
          continue;
        }
        const ids2 = entries.filter((entry) => !!getEntryProp(entry, attribute.name)).flatMap((entry) => getEntryProp(entry, attribute.name)).filter((entry) => entry?.__component === slugFromAttribute).map((entry) => entry.id).filter((id) => typeof store?.[componentSlug]?.[`${id}`] === "undefined");
        const dataToStore = await findEntriesForHierarchy(store, componentSlug, componentHierarchy, deepness - 1, { ids: ids2 });
        store = mergeObjects(dataToStore, store);
      }
    }
  };
  await findAndFlattenDynamicZoneAttributes();
  const findAndFlattenMediaAttributes = async () => {
    let attributes = getModelAttributes(slug, { filterType: ["media"] });
    for (const attribute of attributes) {
      const attributeSlug = hierarchy[attribute.name]?.__slug;
      if (!attributeSlug) {
        continue;
      }
      const ids2 = entries.filter((entry) => !!getEntryProp(entry, attribute.name)).flatMap((entry) => getEntryProp(entry, attribute.name)).filter((entry) => !!entry.id).map((entry) => entry.id).filter((id) => typeof store?.[attributeSlug]?.[`${id}`] === "undefined");
      const dataToStore = await findEntriesForHierarchy(store, attributeSlug, hierarchy[attribute.name], deepness - 1, { ids: ids2 });
      store = mergeObjects(dataToStore, store);
    }
  };
  await findAndFlattenMediaAttributes();
  const findAndFlattenRelationAttributes = async () => {
    let attributes = getModelAttributes(slug, { filterType: ["relation"] });
    for (const attribute of attributes) {
      const attributeSlug = hierarchy[attribute.name]?.__slug;
      if (!attributeSlug) {
        continue;
      }
      const ids2 = entries.filter((entry) => !!getEntryProp(entry, attribute.name)).flatMap((entry) => getEntryProp(entry, attribute.name)).filter((entry) => !!entry.id).map((entry) => entry.id).filter((id) => typeof store?.[attributeSlug]?.[`${id}`] === "undefined");
      const dataToStore = await findEntriesForHierarchy(store, attributeSlug, hierarchy[attribute.name], deepness - 1, { ids: ids2 });
      store = mergeObjects(dataToStore, store);
    }
  };
  await findAndFlattenRelationAttributes();
  return store;
}
async function findEntries(slug, deepness, { search, ids }) {
  try {
    const queryBuilder = new ObjectBuilder();
    queryBuilder.extend(getPopulateFromSchema(slug, deepness));
    if (search) {
      queryBuilder.extend(buildFilterQuery(search));
    } else if (ids) {
      queryBuilder.extend({
        filters: {
          id: { $in: ids }
        }
      });
    }
    const entries = await strapi.documents(slug).findMany(queryBuilder.get());
    return entries;
  } catch (_2) {
    return [];
  }
}
function buildFilterQuery(search = "") {
  let { filters: filters2, sort: sortRaw } = qs.parse(search);
  const [attr, value] = sortRaw?.split(":") || [];
  const sort2 = {};
  if (attr && value) {
    sort2[attr] = value.toLowerCase();
  }
  return {
    filters: filters2,
    sort: sort2
  };
}
function convertData(exportContent, options) {
  const converter = getConverter(options.dataFormat);
  const convertedData = converter.convertEntries(exportContent, options);
  return convertedData;
}
function getConverter(dataFormat) {
  const converter = dataConverterConfigs[dataFormat];
  if (!converter) {
    throw new Error(`Data format ${dataFormat} is not supported.`);
  }
  return converter;
}
function getPopulateFromSchema(slug, deepness = 5) {
  if (deepness <= 1) {
    return true;
  }
  if (slug === "admin::user") {
    return void 0;
  }
  const populate2 = {};
  const model = strapi.getModel(slug);
  for (const [attributeName, attribute] of Object.entries(getModelPopulationAttributes(model))) {
    if (!attribute) {
      continue;
    }
    if (isComponentAttribute(attribute)) {
      populate2[attributeName] = getPopulateFromSchema(attribute.component, deepness - 1);
    } else if (isDynamicZoneAttribute$1(attribute)) {
      const dynamicPopulate = attribute.components.reduce((zonePopulate, component) => {
        const compPopulate = getPopulateFromSchema(component, deepness - 1);
        return compPopulate === true ? zonePopulate : fp.merge(zonePopulate, compPopulate);
      }, {});
      populate2[attributeName] = fp.isEmpty(dynamicPopulate) ? true : dynamicPopulate;
    } else if (isRelationAttribute(attribute)) {
      const relationPopulate = getPopulateFromSchema(attribute.target, deepness - 1);
      if (relationPopulate) {
        populate2[attributeName] = relationPopulate;
      }
    } else if (isMediaAttribute$1(attribute)) {
      populate2[attributeName] = true;
    }
  }
  return fp.isEmpty(populate2) ? true : { populate: populate2 };
}
function buildSlugHierarchy(slug, deepness = 5) {
  slug = CustomSlugToSlug[slug] || slug;
  if (deepness <= 1) {
    return { __slug: slug };
  }
  const hierarchy = {
    __slug: slug
  };
  const model = getModel(slug);
  for (const [attributeName, attribute] of Object.entries(getModelPopulationAttributes(model))) {
    if (!attribute) {
      continue;
    }
    if (isComponentAttribute(attribute)) {
      hierarchy[attributeName] = buildSlugHierarchy(attribute.component, deepness - 1);
    } else if (isDynamicZoneAttribute$1(attribute)) {
      hierarchy[attributeName] = Object.fromEntries(attribute.components.map((componentSlug) => [componentSlug, buildSlugHierarchy(componentSlug, deepness - 1)]));
    } else if (isRelationAttribute(attribute)) {
      const relationHierarchy = buildSlugHierarchy(attribute.target, deepness - 1);
      if (relationHierarchy) {
        hierarchy[attributeName] = relationHierarchy;
      }
    } else if (isMediaAttribute$1(attribute)) {
      hierarchy[attributeName] = buildSlugHierarchy(CustomSlugs.MEDIA, deepness - 1);
    }
  }
  return hierarchy;
}
function getModelPopulationAttributes(model) {
  if (model.uid === "plugin::upload.file") {
    const { related, ...attributes } = model.attributes;
    return attributes;
  }
  return model.attributes;
}
const exportService = {
  formats: dataFormats$1,
  exportData,
  getPopulateFromSchema: getPopulateFromSchema$1,
  exportDataV2
};
var dist = { exports: {} };
(function(module, exports) {
  !function(t, n) {
    module.exports = n(require$$0$2, require$$1$1);
  }(commonjsGlobal, function(t, n) {
    return function(t2) {
      function n2(e) {
        if (r[e])
          return r[e].exports;
        var o = r[e] = { exports: {}, id: e, loaded: false };
        return t2[e].call(o.exports, o, o.exports, n2), o.loaded = true, o.exports;
      }
      var r = {};
      return n2.m = t2, n2.c = r, n2.p = "", n2(0);
    }([function(t2, n2, r) {
      t2.exports = r(34);
    }, function(t2, n2, r) {
      var e = r(29)("wks"), o = r(33), i = r(2).Symbol, c = "function" == typeof i, u2 = t2.exports = function(t3) {
        return e[t3] || (e[t3] = c && i[t3] || (c ? i : o)("Symbol." + t3));
      };
      u2.store = e;
    }, function(t2, n2) {
      var r = t2.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
      "number" == typeof __g && (__g = r);
    }, function(t2, n2, r) {
      var e = r(9);
      t2.exports = function(t3) {
        if (!e(t3))
          throw TypeError(t3 + " is not an object!");
        return t3;
      };
    }, function(t2, n2, r) {
      t2.exports = !r(24)(function() {
        return 7 != Object.defineProperty({}, "a", { get: function() {
          return 7;
        } }).a;
      });
    }, function(t2, n2, r) {
      var e = r(12), o = r(17);
      t2.exports = r(4) ? function(t3, n3, r2) {
        return e.f(t3, n3, o(1, r2));
      } : function(t3, n3, r2) {
        return t3[n3] = r2, t3;
      };
    }, function(t2, n2) {
      var r = t2.exports = { version: "2.4.0" };
      "number" == typeof __e && (__e = r);
    }, function(t2, n2, r) {
      var e = r(14);
      t2.exports = function(t3, n3, r2) {
        if (e(t3), void 0 === n3)
          return t3;
        switch (r2) {
          case 1:
            return function(r3) {
              return t3.call(n3, r3);
            };
          case 2:
            return function(r3, e2) {
              return t3.call(n3, r3, e2);
            };
          case 3:
            return function(r3, e2, o) {
              return t3.call(n3, r3, e2, o);
            };
        }
        return function() {
          return t3.apply(n3, arguments);
        };
      };
    }, function(t2, n2) {
      var r = {}.hasOwnProperty;
      t2.exports = function(t3, n3) {
        return r.call(t3, n3);
      };
    }, function(t2, n2) {
      t2.exports = function(t3) {
        return "object" == typeof t3 ? null !== t3 : "function" == typeof t3;
      };
    }, function(t2, n2) {
      t2.exports = {};
    }, function(t2, n2) {
      var r = {}.toString;
      t2.exports = function(t3) {
        return r.call(t3).slice(8, -1);
      };
    }, function(t2, n2, r) {
      var e = r(3), o = r(26), i = r(32), c = Object.defineProperty;
      n2.f = r(4) ? Object.defineProperty : function(t3, n3, r2) {
        if (e(t3), n3 = i(n3, true), e(r2), o)
          try {
            return c(t3, n3, r2);
          } catch (t4) {
          }
        if ("get" in r2 || "set" in r2)
          throw TypeError("Accessors not supported!");
        return "value" in r2 && (t3[n3] = r2.value), t3;
      };
    }, function(t2, n2, r) {
      var e = r(42), o = r(15);
      t2.exports = function(t3) {
        return e(o(t3));
      };
    }, function(t2, n2) {
      t2.exports = function(t3) {
        if ("function" != typeof t3)
          throw TypeError(t3 + " is not a function!");
        return t3;
      };
    }, function(t2, n2) {
      t2.exports = function(t3) {
        if (void 0 == t3)
          throw TypeError("Can't call method on  " + t3);
        return t3;
      };
    }, function(t2, n2, r) {
      var e = r(9), o = r(2).document, i = e(o) && e(o.createElement);
      t2.exports = function(t3) {
        return i ? o.createElement(t3) : {};
      };
    }, function(t2, n2) {
      t2.exports = function(t3, n3) {
        return { enumerable: !(1 & t3), configurable: !(2 & t3), writable: !(4 & t3), value: n3 };
      };
    }, function(t2, n2, r) {
      var e = r(12).f, o = r(8), i = r(1)("toStringTag");
      t2.exports = function(t3, n3, r2) {
        t3 && !o(t3 = r2 ? t3 : t3.prototype, i) && e(t3, i, { configurable: true, value: n3 });
      };
    }, function(t2, n2, r) {
      var e = r(29)("keys"), o = r(33);
      t2.exports = function(t3) {
        return e[t3] || (e[t3] = o(t3));
      };
    }, function(t2, n2) {
      var r = Math.ceil, e = Math.floor;
      t2.exports = function(t3) {
        return isNaN(t3 = +t3) ? 0 : (t3 > 0 ? e : r)(t3);
      };
    }, function(t2, n2, r) {
      var e = r(11), o = r(1)("toStringTag"), i = "Arguments" == e(/* @__PURE__ */ function() {
        return arguments;
      }()), c = function(t3, n3) {
        try {
          return t3[n3];
        } catch (t4) {
        }
      };
      t2.exports = function(t3) {
        var n3, r2, u2;
        return void 0 === t3 ? "Undefined" : null === t3 ? "Null" : "string" == typeof (r2 = c(n3 = Object(t3), o)) ? r2 : i ? e(n3) : "Object" == (u2 = e(n3)) && "function" == typeof n3.callee ? "Arguments" : u2;
      };
    }, function(t2, n2) {
      t2.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }, function(t2, n2, r) {
      var e = r(2), o = r(6), i = r(7), c = r(5), u2 = "prototype", s = function(t3, n3, r2) {
        var f, a, p, l = t3 & s.F, v = t3 & s.G, h = t3 & s.S, d = t3 & s.P, y = t3 & s.B, _2 = t3 & s.W, x = v ? o : o[n3] || (o[n3] = {}), m = x[u2], w = v ? e : h ? e[n3] : (e[n3] || {})[u2];
        v && (r2 = n3);
        for (f in r2)
          a = !l && w && void 0 !== w[f], a && f in x || (p = a ? w[f] : r2[f], x[f] = v && "function" != typeof w[f] ? r2[f] : y && a ? i(p, e) : _2 && w[f] == p ? function(t4) {
            var n4 = function(n5, r3, e2) {
              if (this instanceof t4) {
                switch (arguments.length) {
                  case 0:
                    return new t4();
                  case 1:
                    return new t4(n5);
                  case 2:
                    return new t4(n5, r3);
                }
                return new t4(n5, r3, e2);
              }
              return t4.apply(this, arguments);
            };
            return n4[u2] = t4[u2], n4;
          }(p) : d && "function" == typeof p ? i(Function.call, p) : p, d && ((x.virtual || (x.virtual = {}))[f] = p, t3 & s.R && m && !m[f] && c(m, f, p)));
      };
      s.F = 1, s.G = 2, s.S = 4, s.P = 8, s.B = 16, s.W = 32, s.U = 64, s.R = 128, t2.exports = s;
    }, function(t2, n2) {
      t2.exports = function(t3) {
        try {
          return !!t3();
        } catch (t4) {
          return true;
        }
      };
    }, function(t2, n2, r) {
      t2.exports = r(2).document && document.documentElement;
    }, function(t2, n2, r) {
      t2.exports = !r(4) && !r(24)(function() {
        return 7 != Object.defineProperty(r(16)("div"), "a", { get: function() {
          return 7;
        } }).a;
      });
    }, function(t2, n2, r) {
      var e = r(28), o = r(23), i = r(57), c = r(5), u2 = r(8), s = r(10), f = r(45), a = r(18), p = r(52), l = r(1)("iterator"), v = !([].keys && "next" in [].keys()), h = "@@iterator", d = "keys", y = "values", _2 = function() {
        return this;
      };
      t2.exports = function(t3, n3, r2, x, m, w, g) {
        f(r2, n3, x);
        var b, O, j, S = function(t4) {
          if (!v && t4 in T)
            return T[t4];
          switch (t4) {
            case d:
              return function() {
                return new r2(this, t4);
              };
            case y:
              return function() {
                return new r2(this, t4);
              };
          }
          return function() {
            return new r2(this, t4);
          };
        }, E = n3 + " Iterator", P = m == y, M = false, T = t3.prototype, A = T[l] || T[h] || m && T[m], k = A || S(m), C = m ? P ? S("entries") : k : void 0, I = "Array" == n3 ? T.entries || A : A;
        if (I && (j = p(I.call(new t3())), j !== Object.prototype && (a(j, E, true), e || u2(j, l) || c(j, l, _2))), P && A && A.name !== y && (M = true, k = function() {
          return A.call(this);
        }), e && !g || !v && !M && T[l] || c(T, l, k), s[n3] = k, s[E] = _2, m)
          if (b = { values: P ? k : S(y), keys: w ? k : S(d), entries: C }, g)
            for (O in b)
              O in T || i(T, O, b[O]);
          else
            o(o.P + o.F * (v || M), n3, b);
        return b;
      };
    }, function(t2, n2) {
      t2.exports = true;
    }, function(t2, n2, r) {
      var e = r(2), o = "__core-js_shared__", i = e[o] || (e[o] = {});
      t2.exports = function(t3) {
        return i[t3] || (i[t3] = {});
      };
    }, function(t2, n2, r) {
      var e, o, i, c = r(7), u2 = r(41), s = r(25), f = r(16), a = r(2), p = a.process, l = a.setImmediate, v = a.clearImmediate, h = a.MessageChannel, d = 0, y = {}, _2 = "onreadystatechange", x = function() {
        var t3 = +this;
        if (y.hasOwnProperty(t3)) {
          var n3 = y[t3];
          delete y[t3], n3();
        }
      }, m = function(t3) {
        x.call(t3.data);
      };
      l && v || (l = function(t3) {
        for (var n3 = [], r2 = 1; arguments.length > r2; )
          n3.push(arguments[r2++]);
        return y[++d] = function() {
          u2("function" == typeof t3 ? t3 : Function(t3), n3);
        }, e(d), d;
      }, v = function(t3) {
        delete y[t3];
      }, "process" == r(11)(p) ? e = function(t3) {
        p.nextTick(c(x, t3, 1));
      } : h ? (o = new h(), i = o.port2, o.port1.onmessage = m, e = c(i.postMessage, i, 1)) : a.addEventListener && "function" == typeof postMessage && !a.importScripts ? (e = function(t3) {
        a.postMessage(t3 + "", "*");
      }, a.addEventListener("message", m, false)) : e = _2 in f("script") ? function(t3) {
        s.appendChild(f("script"))[_2] = function() {
          s.removeChild(this), x.call(t3);
        };
      } : function(t3) {
        setTimeout(c(x, t3, 1), 0);
      }), t2.exports = { set: l, clear: v };
    }, function(t2, n2, r) {
      var e = r(20), o = Math.min;
      t2.exports = function(t3) {
        return t3 > 0 ? o(e(t3), 9007199254740991) : 0;
      };
    }, function(t2, n2, r) {
      var e = r(9);
      t2.exports = function(t3, n3) {
        if (!e(t3))
          return t3;
        var r2, o;
        if (n3 && "function" == typeof (r2 = t3.toString) && !e(o = r2.call(t3)))
          return o;
        if ("function" == typeof (r2 = t3.valueOf) && !e(o = r2.call(t3)))
          return o;
        if (!n3 && "function" == typeof (r2 = t3.toString) && !e(o = r2.call(t3)))
          return o;
        throw TypeError("Can't convert object to primitive value");
      };
    }, function(t2, n2) {
      var r = 0, e = Math.random();
      t2.exports = function(t3) {
        return "Symbol(".concat(void 0 === t3 ? "" : t3, ")_", (++r + e).toString(36));
      };
    }, function(t2, n2, r) {
      function e(t3) {
        return t3 && t3.__esModule ? t3 : { default: t3 };
      }
      function o() {
        return "win32" !== process.platform ? "" : "ia32" === process.arch && process.env.hasOwnProperty("PROCESSOR_ARCHITEW6432") ? "mixed" : "native";
      }
      function i(t3) {
        return (0, l.createHash)("sha256").update(t3).digest("hex");
      }
      function c(t3) {
        switch (h) {
          case "darwin":
            return t3.split("IOPlatformUUID")[1].split("\n")[0].replace(/\=|\s+|\"/gi, "").toLowerCase();
          case "win32":
            return t3.toString().split("REG_SZ")[1].replace(/\r+|\n+|\s+/gi, "").toLowerCase();
          case "linux":
            return t3.toString().replace(/\r+|\n+|\s+/gi, "").toLowerCase();
          case "freebsd":
            return t3.toString().replace(/\r+|\n+|\s+/gi, "").toLowerCase();
          default:
            throw new Error("Unsupported platform: " + process.platform);
        }
      }
      function u2(t3) {
        var n3 = c((0, p.execSync)(y[h]).toString());
        return t3 ? n3 : i(n3);
      }
      function s(t3) {
        return new a.default(function(n3, r2) {
          return (0, p.exec)(y[h], {}, function(e2, o2, u3) {
            if (e2)
              return r2(new Error("Error while obtaining machine id: " + e2.stack));
            var s2 = c(o2.toString());
            return n3(t3 ? s2 : i(s2));
          });
        });
      }
      Object.defineProperty(n2, "__esModule", { value: true });
      var f = r(35), a = e(f);
      n2.machineIdSync = u2, n2.machineId = s;
      var p = r(70), l = r(71), v = process, h = v.platform, d = { native: "%windir%\\System32", mixed: "%windir%\\sysnative\\cmd.exe /c %windir%\\System32" }, y = { darwin: "ioreg -rd1 -c IOPlatformExpertDevice", win32: d[o()] + "\\REG.exe QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid", linux: "( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :", freebsd: "kenv -q smbios.system.uuid || sysctl -n kern.hostuuid" };
    }, function(t2, n2, r) {
      t2.exports = { default: r(36), __esModule: true };
    }, function(t2, n2, r) {
      r(66), r(68), r(69), r(67), t2.exports = r(6).Promise;
    }, function(t2, n2) {
      t2.exports = function() {
      };
    }, function(t2, n2) {
      t2.exports = function(t3, n3, r, e) {
        if (!(t3 instanceof n3) || void 0 !== e && e in t3)
          throw TypeError(r + ": incorrect invocation!");
        return t3;
      };
    }, function(t2, n2, r) {
      var e = r(13), o = r(31), i = r(62);
      t2.exports = function(t3) {
        return function(n3, r2, c) {
          var u2, s = e(n3), f = o(s.length), a = i(c, f);
          if (t3 && r2 != r2) {
            for (; f > a; )
              if (u2 = s[a++], u2 != u2)
                return true;
          } else
            for (; f > a; a++)
              if ((t3 || a in s) && s[a] === r2)
                return t3 || a || 0;
          return !t3 && -1;
        };
      };
    }, function(t2, n2, r) {
      var e = r(7), o = r(44), i = r(43), c = r(3), u2 = r(31), s = r(64), f = {}, a = {}, n2 = t2.exports = function(t3, n3, r2, p, l) {
        var v, h, d, y, _2 = l ? function() {
          return t3;
        } : s(t3), x = e(r2, p, n3 ? 2 : 1), m = 0;
        if ("function" != typeof _2)
          throw TypeError(t3 + " is not iterable!");
        if (i(_2)) {
          for (v = u2(t3.length); v > m; m++)
            if (y = n3 ? x(c(h = t3[m])[0], h[1]) : x(t3[m]), y === f || y === a)
              return y;
        } else
          for (d = _2.call(t3); !(h = d.next()).done; )
            if (y = o(d, x, h.value, n3), y === f || y === a)
              return y;
      };
      n2.BREAK = f, n2.RETURN = a;
    }, function(t2, n2) {
      t2.exports = function(t3, n3, r) {
        var e = void 0 === r;
        switch (n3.length) {
          case 0:
            return e ? t3() : t3.call(r);
          case 1:
            return e ? t3(n3[0]) : t3.call(r, n3[0]);
          case 2:
            return e ? t3(n3[0], n3[1]) : t3.call(r, n3[0], n3[1]);
          case 3:
            return e ? t3(n3[0], n3[1], n3[2]) : t3.call(r, n3[0], n3[1], n3[2]);
          case 4:
            return e ? t3(n3[0], n3[1], n3[2], n3[3]) : t3.call(r, n3[0], n3[1], n3[2], n3[3]);
        }
        return t3.apply(r, n3);
      };
    }, function(t2, n2, r) {
      var e = r(11);
      t2.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t3) {
        return "String" == e(t3) ? t3.split("") : Object(t3);
      };
    }, function(t2, n2, r) {
      var e = r(10), o = r(1)("iterator"), i = Array.prototype;
      t2.exports = function(t3) {
        return void 0 !== t3 && (e.Array === t3 || i[o] === t3);
      };
    }, function(t2, n2, r) {
      var e = r(3);
      t2.exports = function(t3, n3, r2, o) {
        try {
          return o ? n3(e(r2)[0], r2[1]) : n3(r2);
        } catch (n4) {
          var i = t3.return;
          throw void 0 !== i && e(i.call(t3)), n4;
        }
      };
    }, function(t2, n2, r) {
      var e = r(49), o = r(17), i = r(18), c = {};
      r(5)(c, r(1)("iterator"), function() {
        return this;
      }), t2.exports = function(t3, n3, r2) {
        t3.prototype = e(c, { next: o(1, r2) }), i(t3, n3 + " Iterator");
      };
    }, function(t2, n2, r) {
      var e = r(1)("iterator"), o = false;
      try {
        var i = [7][e]();
        i.return = function() {
          o = true;
        }, Array.from(i, function() {
          throw 2;
        });
      } catch (t3) {
      }
      t2.exports = function(t3, n3) {
        if (!n3 && !o)
          return false;
        var r2 = false;
        try {
          var i2 = [7], c = i2[e]();
          c.next = function() {
            return { done: r2 = true };
          }, i2[e] = function() {
            return c;
          }, t3(i2);
        } catch (t4) {
        }
        return r2;
      };
    }, function(t2, n2) {
      t2.exports = function(t3, n3) {
        return { value: n3, done: !!t3 };
      };
    }, function(t2, n2, r) {
      var e = r(2), o = r(30).set, i = e.MutationObserver || e.WebKitMutationObserver, c = e.process, u2 = e.Promise, s = "process" == r(11)(c);
      t2.exports = function() {
        var t3, n3, r2, f = function() {
          var e2, o2;
          for (s && (e2 = c.domain) && e2.exit(); t3; ) {
            o2 = t3.fn, t3 = t3.next;
            try {
              o2();
            } catch (e3) {
              throw t3 ? r2() : n3 = void 0, e3;
            }
          }
          n3 = void 0, e2 && e2.enter();
        };
        if (s)
          r2 = function() {
            c.nextTick(f);
          };
        else if (i) {
          var a = true, p = document.createTextNode("");
          new i(f).observe(p, { characterData: true }), r2 = function() {
            p.data = a = !a;
          };
        } else if (u2 && u2.resolve) {
          var l = u2.resolve();
          r2 = function() {
            l.then(f);
          };
        } else
          r2 = function() {
            o.call(e, f);
          };
        return function(e2) {
          var o2 = { fn: e2, next: void 0 };
          n3 && (n3.next = o2), t3 || (t3 = o2, r2()), n3 = o2;
        };
      };
    }, function(t2, n2, r) {
      var e = r(3), o = r(50), i = r(22), c = r(19)("IE_PROTO"), u2 = function() {
      }, s = "prototype", f = function() {
        var t3, n3 = r(16)("iframe"), e2 = i.length, o2 = ">";
        for (n3.style.display = "none", r(25).appendChild(n3), n3.src = "javascript:", t3 = n3.contentWindow.document, t3.open(), t3.write("<script>document.F=Object<\/script" + o2), t3.close(), f = t3.F; e2--; )
          delete f[s][i[e2]];
        return f();
      };
      t2.exports = Object.create || function(t3, n3) {
        var r2;
        return null !== t3 ? (u2[s] = e(t3), r2 = new u2(), u2[s] = null, r2[c] = t3) : r2 = f(), void 0 === n3 ? r2 : o(r2, n3);
      };
    }, function(t2, n2, r) {
      var e = r(12), o = r(3), i = r(54);
      t2.exports = r(4) ? Object.defineProperties : function(t3, n3) {
        o(t3);
        for (var r2, c = i(n3), u2 = c.length, s = 0; u2 > s; )
          e.f(t3, r2 = c[s++], n3[r2]);
        return t3;
      };
    }, function(t2, n2, r) {
      var e = r(55), o = r(17), i = r(13), c = r(32), u2 = r(8), s = r(26), f = Object.getOwnPropertyDescriptor;
      n2.f = r(4) ? f : function(t3, n3) {
        if (t3 = i(t3), n3 = c(n3, true), s)
          try {
            return f(t3, n3);
          } catch (t4) {
          }
        if (u2(t3, n3))
          return o(!e.f.call(t3, n3), t3[n3]);
      };
    }, function(t2, n2, r) {
      var e = r(8), o = r(63), i = r(19)("IE_PROTO"), c = Object.prototype;
      t2.exports = Object.getPrototypeOf || function(t3) {
        return t3 = o(t3), e(t3, i) ? t3[i] : "function" == typeof t3.constructor && t3 instanceof t3.constructor ? t3.constructor.prototype : t3 instanceof Object ? c : null;
      };
    }, function(t2, n2, r) {
      var e = r(8), o = r(13), i = r(39)(false), c = r(19)("IE_PROTO");
      t2.exports = function(t3, n3) {
        var r2, u2 = o(t3), s = 0, f = [];
        for (r2 in u2)
          r2 != c && e(u2, r2) && f.push(r2);
        for (; n3.length > s; )
          e(u2, r2 = n3[s++]) && (~i(f, r2) || f.push(r2));
        return f;
      };
    }, function(t2, n2, r) {
      var e = r(53), o = r(22);
      t2.exports = Object.keys || function(t3) {
        return e(t3, o);
      };
    }, function(t2, n2) {
      n2.f = {}.propertyIsEnumerable;
    }, function(t2, n2, r) {
      var e = r(5);
      t2.exports = function(t3, n3, r2) {
        for (var o in n3)
          r2 && t3[o] ? t3[o] = n3[o] : e(t3, o, n3[o]);
        return t3;
      };
    }, function(t2, n2, r) {
      t2.exports = r(5);
    }, function(t2, n2, r) {
      var e = r(9), o = r(3), i = function(t3, n3) {
        if (o(t3), !e(n3) && null !== n3)
          throw TypeError(n3 + ": can't set as prototype!");
      };
      t2.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function(t3, n3, e2) {
        try {
          e2 = r(7)(Function.call, r(51).f(Object.prototype, "__proto__").set, 2), e2(t3, []), n3 = !(t3 instanceof Array);
        } catch (t4) {
          n3 = true;
        }
        return function(t4, r2) {
          return i(t4, r2), n3 ? t4.__proto__ = r2 : e2(t4, r2), t4;
        };
      }({}, false) : void 0), check: i };
    }, function(t2, n2, r) {
      var e = r(2), o = r(6), i = r(12), c = r(4), u2 = r(1)("species");
      t2.exports = function(t3) {
        var n3 = "function" == typeof o[t3] ? o[t3] : e[t3];
        c && n3 && !n3[u2] && i.f(n3, u2, { configurable: true, get: function() {
          return this;
        } });
      };
    }, function(t2, n2, r) {
      var e = r(3), o = r(14), i = r(1)("species");
      t2.exports = function(t3, n3) {
        var r2, c = e(t3).constructor;
        return void 0 === c || void 0 == (r2 = e(c)[i]) ? n3 : o(r2);
      };
    }, function(t2, n2, r) {
      var e = r(20), o = r(15);
      t2.exports = function(t3) {
        return function(n3, r2) {
          var i, c, u2 = String(o(n3)), s = e(r2), f = u2.length;
          return s < 0 || s >= f ? t3 ? "" : void 0 : (i = u2.charCodeAt(s), i < 55296 || i > 56319 || s + 1 === f || (c = u2.charCodeAt(s + 1)) < 56320 || c > 57343 ? t3 ? u2.charAt(s) : i : t3 ? u2.slice(s, s + 2) : (i - 55296 << 10) + (c - 56320) + 65536);
        };
      };
    }, function(t2, n2, r) {
      var e = r(20), o = Math.max, i = Math.min;
      t2.exports = function(t3, n3) {
        return t3 = e(t3), t3 < 0 ? o(t3 + n3, 0) : i(t3, n3);
      };
    }, function(t2, n2, r) {
      var e = r(15);
      t2.exports = function(t3) {
        return Object(e(t3));
      };
    }, function(t2, n2, r) {
      var e = r(21), o = r(1)("iterator"), i = r(10);
      t2.exports = r(6).getIteratorMethod = function(t3) {
        if (void 0 != t3)
          return t3[o] || t3["@@iterator"] || i[e(t3)];
      };
    }, function(t2, n2, r) {
      var e = r(37), o = r(47), i = r(10), c = r(13);
      t2.exports = r(27)(Array, "Array", function(t3, n3) {
        this._t = c(t3), this._i = 0, this._k = n3;
      }, function() {
        var t3 = this._t, n3 = this._k, r2 = this._i++;
        return !t3 || r2 >= t3.length ? (this._t = void 0, o(1)) : "keys" == n3 ? o(0, r2) : "values" == n3 ? o(0, t3[r2]) : o(0, [r2, t3[r2]]);
      }, "values"), i.Arguments = i.Array, e("keys"), e("values"), e("entries");
    }, function(t2, n2) {
    }, function(t2, n2, r) {
      var e, o, i, c = r(28), u2 = r(2), s = r(7), f = r(21), a = r(23), p = r(9), l = (r(3), r(14)), v = r(38), h = r(40), d = (r(58).set, r(60)), y = r(30).set, _2 = r(48)(), x = "Promise", m = u2.TypeError, w = u2.process, g = u2[x], w = u2.process, b = "process" == f(w), O = function() {
      }, j = !!function() {
        try {
          var t3 = g.resolve(1), n3 = (t3.constructor = {})[r(1)("species")] = function(t4) {
            t4(O, O);
          };
          return (b || "function" == typeof PromiseRejectionEvent) && t3.then(O) instanceof n3;
        } catch (t4) {
        }
      }(), S = function(t3, n3) {
        return t3 === n3 || t3 === g && n3 === i;
      }, E = function(t3) {
        var n3;
        return !(!p(t3) || "function" != typeof (n3 = t3.then)) && n3;
      }, P = function(t3) {
        return S(g, t3) ? new M(t3) : new o(t3);
      }, M = o = function(t3) {
        var n3, r2;
        this.promise = new t3(function(t4, e2) {
          if (void 0 !== n3 || void 0 !== r2)
            throw m("Bad Promise constructor");
          n3 = t4, r2 = e2;
        }), this.resolve = l(n3), this.reject = l(r2);
      }, T = function(t3) {
        try {
          t3();
        } catch (t4) {
          return { error: t4 };
        }
      }, A = function(t3, n3) {
        if (!t3._n) {
          t3._n = true;
          var r2 = t3._c;
          _2(function() {
            for (var e2 = t3._v, o2 = 1 == t3._s, i2 = 0, c2 = function(n4) {
              var r3, i3, c3 = o2 ? n4.ok : n4.fail, u3 = n4.resolve, s2 = n4.reject, f2 = n4.domain;
              try {
                c3 ? (o2 || (2 == t3._h && I(t3), t3._h = 1), c3 === true ? r3 = e2 : (f2 && f2.enter(), r3 = c3(e2), f2 && f2.exit()), r3 === n4.promise ? s2(m("Promise-chain cycle")) : (i3 = E(r3)) ? i3.call(r3, u3, s2) : u3(r3)) : s2(e2);
              } catch (t4) {
                s2(t4);
              }
            }; r2.length > i2; )
              c2(r2[i2++]);
            t3._c = [], t3._n = false, n3 && !t3._h && k(t3);
          });
        }
      }, k = function(t3) {
        y.call(u2, function() {
          var n3, r2, e2, o2 = t3._v;
          if (C(t3) && (n3 = T(function() {
            b ? w.emit("unhandledRejection", o2, t3) : (r2 = u2.onunhandledrejection) ? r2({ promise: t3, reason: o2 }) : (e2 = u2.console) && e2.error && e2.error("Unhandled promise rejection", o2);
          }), t3._h = b || C(t3) ? 2 : 1), t3._a = void 0, n3)
            throw n3.error;
        });
      }, C = function(t3) {
        if (1 == t3._h)
          return false;
        for (var n3, r2 = t3._a || t3._c, e2 = 0; r2.length > e2; )
          if (n3 = r2[e2++], n3.fail || !C(n3.promise))
            return false;
        return true;
      }, I = function(t3) {
        y.call(u2, function() {
          var n3;
          b ? w.emit("rejectionHandled", t3) : (n3 = u2.onrejectionhandled) && n3({ promise: t3, reason: t3._v });
        });
      }, R = function(t3) {
        var n3 = this;
        n3._d || (n3._d = true, n3 = n3._w || n3, n3._v = t3, n3._s = 2, n3._a || (n3._a = n3._c.slice()), A(n3, true));
      }, F = function(t3) {
        var n3, r2 = this;
        if (!r2._d) {
          r2._d = true, r2 = r2._w || r2;
          try {
            if (r2 === t3)
              throw m("Promise can't be resolved itself");
            (n3 = E(t3)) ? _2(function() {
              var e2 = { _w: r2, _d: false };
              try {
                n3.call(t3, s(F, e2, 1), s(R, e2, 1));
              } catch (t4) {
                R.call(e2, t4);
              }
            }) : (r2._v = t3, r2._s = 1, A(r2, false));
          } catch (t4) {
            R.call({ _w: r2, _d: false }, t4);
          }
        }
      };
      j || (g = function(t3) {
        v(this, g, x, "_h"), l(t3), e.call(this);
        try {
          t3(s(F, this, 1), s(R, this, 1));
        } catch (t4) {
          R.call(this, t4);
        }
      }, e = function(t3) {
        this._c = [], this._a = void 0, this._s = 0, this._d = false, this._v = void 0, this._h = 0, this._n = false;
      }, e.prototype = r(56)(g.prototype, { then: function(t3, n3) {
        var r2 = P(d(this, g));
        return r2.ok = "function" != typeof t3 || t3, r2.fail = "function" == typeof n3 && n3, r2.domain = b ? w.domain : void 0, this._c.push(r2), this._a && this._a.push(r2), this._s && A(this, false), r2.promise;
      }, catch: function(t3) {
        return this.then(void 0, t3);
      } }), M = function() {
        var t3 = new e();
        this.promise = t3, this.resolve = s(F, t3, 1), this.reject = s(R, t3, 1);
      }), a(a.G + a.W + a.F * !j, { Promise: g }), r(18)(g, x), r(59)(x), i = r(6)[x], a(a.S + a.F * !j, x, { reject: function(t3) {
        var n3 = P(this), r2 = n3.reject;
        return r2(t3), n3.promise;
      } }), a(a.S + a.F * (c || !j), x, { resolve: function(t3) {
        if (t3 instanceof g && S(t3.constructor, this))
          return t3;
        var n3 = P(this), r2 = n3.resolve;
        return r2(t3), n3.promise;
      } }), a(a.S + a.F * !(j && r(46)(function(t3) {
        g.all(t3).catch(O);
      })), x, { all: function(t3) {
        var n3 = this, r2 = P(n3), e2 = r2.resolve, o2 = r2.reject, i2 = T(function() {
          var r3 = [], i3 = 0, c2 = 1;
          h(t3, false, function(t4) {
            var u3 = i3++, s2 = false;
            r3.push(void 0), c2++, n3.resolve(t4).then(function(t5) {
              s2 || (s2 = true, r3[u3] = t5, --c2 || e2(r3));
            }, o2);
          }), --c2 || e2(r3);
        });
        return i2 && o2(i2.error), r2.promise;
      }, race: function(t3) {
        var n3 = this, r2 = P(n3), e2 = r2.reject, o2 = T(function() {
          h(t3, false, function(t4) {
            n3.resolve(t4).then(r2.resolve, e2);
          });
        });
        return o2 && e2(o2.error), r2.promise;
      } });
    }, function(t2, n2, r) {
      var e = r(61)(true);
      r(27)(String, "String", function(t3) {
        this._t = String(t3), this._i = 0;
      }, function() {
        var t3, n3 = this._t, r2 = this._i;
        return r2 >= n3.length ? { value: void 0, done: true } : (t3 = e(n3, r2), this._i += t3.length, { value: t3, done: false });
      });
    }, function(t2, n2, r) {
      r(65);
      for (var e = r(2), o = r(5), i = r(10), c = r(1)("toStringTag"), u2 = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], s = 0; s < 5; s++) {
        var f = u2[s], a = e[f], p = a && a.prototype;
        p && !p[c] && o(p, c, f), i[f] = i.Array;
      }
    }, function(t2, n2) {
      t2.exports = require$$0$2;
    }, function(t2, n2) {
      t2.exports = require$$1$1;
    }]);
  });
})(dist);
var map$1;
try {
  map$1 = Map;
} catch (_2) {
}
var set$1;
try {
  set$1 = Set;
} catch (_2) {
}
function baseClone$1(src, circulars, clones) {
  if (!src || typeof src !== "object" || typeof src === "function") {
    return src;
  }
  if (src.nodeType && "cloneNode" in src) {
    return src.cloneNode(true);
  }
  if (src instanceof Date) {
    return new Date(src.getTime());
  }
  if (src instanceof RegExp) {
    return new RegExp(src);
  }
  if (Array.isArray(src)) {
    return src.map(clone$3);
  }
  if (map$1 && src instanceof map$1) {
    return new Map(Array.from(src.entries()));
  }
  if (set$1 && src instanceof set$1) {
    return new Set(Array.from(src.values()));
  }
  if (src instanceof Object) {
    circulars.push(src);
    var obj = Object.create(src);
    clones.push(obj);
    for (var key in src) {
      var idx = circulars.findIndex(function(i) {
        return i === src[key];
      });
      obj[key] = idx > -1 ? clones[idx] : baseClone$1(src[key], circulars, clones);
    }
    return obj;
  }
  return src;
}
function clone$3(src) {
  return baseClone$1(src, [], []);
}
const toString$9 = Object.prototype.toString;
const errorToString$1 = Error.prototype.toString;
const regExpToString$1 = RegExp.prototype.toString;
const symbolToString$3 = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
const SYMBOL_REGEXP$1 = /^Symbol\((.*)\)(.*)$/;
function printNumber$1(val) {
  if (val != +val)
    return "NaN";
  const isNegativeZero2 = val === 0 && 1 / val < 0;
  return isNegativeZero2 ? "-0" : "" + val;
}
function printSimpleValue$1(val, quoteStrings = false) {
  if (val == null || val === true || val === false)
    return "" + val;
  const typeOf = typeof val;
  if (typeOf === "number")
    return printNumber$1(val);
  if (typeOf === "string")
    return quoteStrings ? `"${val}"` : val;
  if (typeOf === "function")
    return "[Function " + (val.name || "anonymous") + "]";
  if (typeOf === "symbol")
    return symbolToString$3.call(val).replace(SYMBOL_REGEXP$1, "Symbol($1)");
  const tag = toString$9.call(val).slice(8, -1);
  if (tag === "Date")
    return isNaN(val.getTime()) ? "" + val : val.toISOString(val);
  if (tag === "Error" || val instanceof Error)
    return "[" + errorToString$1.call(val) + "]";
  if (tag === "RegExp")
    return regExpToString$1.call(val);
  return null;
}
function printValue$1(value, quoteStrings) {
  let result = printSimpleValue$1(value, quoteStrings);
  if (result !== null)
    return result;
  return JSON.stringify(value, function(key, value2) {
    let result2 = printSimpleValue$1(this[key], quoteStrings);
    if (result2 !== null)
      return result2;
    return value2;
  }, 2);
}
let mixed = {
  default: "${path} is invalid",
  required: "${path} is a required field",
  oneOf: "${path} must be one of the following values: ${values}",
  notOneOf: "${path} must not be one of the following values: ${values}",
  notType: ({
    path: path2,
    type: type2,
    value,
    originalValue
  }) => {
    let isCast = originalValue != null && originalValue !== value;
    let msg = `${path2} must be a \`${type2}\` type, but the final value was: \`${printValue$1(value, true)}\`` + (isCast ? ` (cast from the value \`${printValue$1(originalValue, true)}\`).` : ".");
    if (value === null) {
      msg += `
 If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
    }
    return msg;
  },
  defined: "${path} must be defined"
};
let string = {
  length: "${path} must be exactly ${length} characters",
  min: "${path} must be at least ${min} characters",
  max: "${path} must be at most ${max} characters",
  matches: '${path} must match the following: "${regex}"',
  email: "${path} must be a valid email",
  url: "${path} must be a valid URL",
  uuid: "${path} must be a valid UUID",
  trim: "${path} must be a trimmed string",
  lowercase: "${path} must be a lowercase string",
  uppercase: "${path} must be a upper case string"
};
let number = {
  min: "${path} must be greater than or equal to ${min}",
  max: "${path} must be less than or equal to ${max}",
  lessThan: "${path} must be less than ${less}",
  moreThan: "${path} must be greater than ${more}",
  positive: "${path} must be a positive number",
  negative: "${path} must be a negative number",
  integer: "${path} must be an integer"
};
let date = {
  min: "${path} field must be later than ${min}",
  max: "${path} field must be at earlier than ${max}"
};
let boolean = {
  isValue: "${path} field must be ${value}"
};
let object = {
  noUnknown: "${path} field has unspecified keys: ${unknown}"
};
let array = {
  min: "${path} field must have at least ${min} items",
  max: "${path} field must have less than or equal to ${max} items",
  length: "${path} must be have ${length} items"
};
const locale = Object.assign(/* @__PURE__ */ Object.create(null), {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
});
var objectProto$5 = Object.prototype;
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
function baseHas$1(object2, key) {
  return object2 != null && hasOwnProperty$4.call(object2, key);
}
var _baseHas = baseHas$1;
var baseGetTag$1 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
var symbolTag$2 = "[object Symbol]";
function isSymbol$4(value) {
  return typeof value == "symbol" || isObjectLike$3(value) && baseGetTag$1(value) == symbolTag$2;
}
var isSymbol_1 = isSymbol$4;
var isArray$8 = isArray_1, isSymbol$3 = isSymbol_1;
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey$3(value, object2) {
  if (isArray$8(value)) {
    return false;
  }
  var type2 = typeof value;
  if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol$3(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
}
var _isKey = isKey$3;
var MapCache$1 = _MapCache;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize$1(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache$1)();
  return memoized;
}
memoize$1.Cache = MapCache$1;
var memoize_1 = memoize$1;
var memoize = memoize_1;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var _memoizeCapped = memoizeCapped$1;
var memoizeCapped = _memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath$1 = memoizeCapped(function(string2) {
  var result = [];
  if (string2.charCodeAt(0) === 46) {
    result.push("");
  }
  string2.replace(rePropName, function(match, number2, quote2, subString) {
    result.push(quote2 ? subString.replace(reEscapeChar, "$1") : number2 || match);
  });
  return result;
});
var _stringToPath = stringToPath$1;
function arrayMap$2(array2, iteratee) {
  var index2 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
  while (++index2 < length) {
    result[index2] = iteratee(array2[index2], index2, array2);
  }
  return result;
}
var _arrayMap = arrayMap$2;
var Symbol$4 = _Symbol, arrayMap$1 = _arrayMap, isArray$7 = isArray_1, isSymbol$2 = isSymbol_1;
var INFINITY$2 = 1 / 0;
var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolToString$2 = symbolProto$2 ? symbolProto$2.toString : void 0;
function baseToString$3(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray$7(value)) {
    return arrayMap$1(value, baseToString$3) + "";
  }
  if (isSymbol$2(value)) {
    return symbolToString$2 ? symbolToString$2.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
}
var _baseToString = baseToString$3;
var baseToString$2 = _baseToString;
function toString$8(value) {
  return value == null ? "" : baseToString$2(value);
}
var toString_1 = toString$8;
var isArray$6 = isArray_1, isKey$2 = _isKey, stringToPath2 = _stringToPath, toString$7 = toString_1;
function castPath$6(value, object2) {
  if (isArray$6(value)) {
    return value;
  }
  return isKey$2(value, object2) ? [value] : stringToPath2(toString$7(value));
}
var _castPath = castPath$6;
var isSymbol$1 = isSymbol_1;
var INFINITY$1 = 1 / 0;
function toKey$6(value) {
  if (typeof value == "string" || isSymbol$1(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
var _toKey = toKey$6;
var castPath$5 = _castPath, isArguments$2 = isArguments_1, isArray$5 = isArray_1, isIndex$1 = _isIndex, isLength = isLength_1, toKey$5 = _toKey;
function hasPath$2(object2, path2, hasFunc) {
  path2 = castPath$5(path2, object2);
  var index2 = -1, length = path2.length, result = false;
  while (++index2 < length) {
    var key = toKey$5(path2[index2]);
    if (!(result = object2 != null && hasFunc(object2, key))) {
      break;
    }
    object2 = object2[key];
  }
  if (result || ++index2 != length) {
    return result;
  }
  length = object2 == null ? 0 : object2.length;
  return !!length && isLength(length) && isIndex$1(key, length) && (isArray$5(object2) || isArguments$2(object2));
}
var _hasPath = hasPath$2;
var baseHas = _baseHas, hasPath$1 = _hasPath;
function has(object2, path2) {
  return object2 != null && hasPath$1(object2, path2, baseHas);
}
var has_1 = has;
const has$1 = /* @__PURE__ */ getDefaultExportFromCjs(has_1);
const isSchema = (obj) => obj && obj.__isYupSchema__;
class Condition {
  constructor(refs, options) {
    this.refs = refs;
    this.refs = refs;
    if (typeof options === "function") {
      this.fn = options;
      return;
    }
    if (!has$1(options, "is"))
      throw new TypeError("`is:` is required for `when()` conditions");
    if (!options.then && !options.otherwise)
      throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
    let {
      is,
      then,
      otherwise
    } = options;
    let check = typeof is === "function" ? is : (...values) => values.every((value) => value === is);
    this.fn = function(...args) {
      let options2 = args.pop();
      let schema2 = args.pop();
      let branch = check(...args) ? then : otherwise;
      if (!branch)
        return void 0;
      if (typeof branch === "function")
        return branch(schema2);
      return schema2.concat(branch.resolve(options2));
    };
  }
  resolve(base, options) {
    let values = this.refs.map((ref2) => ref2.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));
    let schema2 = this.fn.apply(base, values.concat(base, options));
    if (schema2 === void 0 || schema2 === base)
      return base;
    if (!isSchema(schema2))
      throw new TypeError("conditions must return a schema object");
    return schema2.resolve(options);
  }
}
function toArray$1(value) {
  return value == null ? [] : [].concat(value);
}
function _extends$4() {
  _extends$4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
let strReg = /\$\{\s*(\w+)\s*\}/g;
class ValidationError extends Error {
  static formatError(message, params) {
    const path2 = params.label || params.path || "this";
    if (path2 !== params.path)
      params = _extends$4({}, params, {
        path: path2
      });
    if (typeof message === "string")
      return message.replace(strReg, (_2, key) => printValue$1(params[key]));
    if (typeof message === "function")
      return message(params);
    return message;
  }
  static isError(err) {
    return err && err.name === "ValidationError";
  }
  constructor(errorOrErrors, value, field, type2) {
    super();
    this.name = "ValidationError";
    this.value = value;
    this.path = field;
    this.type = type2;
    this.errors = [];
    this.inner = [];
    toArray$1(errorOrErrors).forEach((err) => {
      if (ValidationError.isError(err)) {
        this.errors.push(...err.errors);
        this.inner = this.inner.concat(err.inner.length ? err.inner : err);
      } else {
        this.errors.push(err);
      }
    });
    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ValidationError);
  }
}
const once = (cb) => {
  let fired = false;
  return (...args) => {
    if (fired)
      return;
    fired = true;
    cb(...args);
  };
};
function runTests(options, cb) {
  let {
    endEarly,
    tests,
    args,
    value,
    errors,
    sort: sort2,
    path: path2
  } = options;
  let callback = once(cb);
  let count = tests.length;
  const nestedErrors = [];
  errors = errors ? errors : [];
  if (!count)
    return errors.length ? callback(new ValidationError(errors, value, path2)) : callback(null, value);
  for (let i = 0; i < tests.length; i++) {
    const test2 = tests[i];
    test2(args, function finishTestRun(err) {
      if (err) {
        if (!ValidationError.isError(err)) {
          return callback(err, value);
        }
        if (endEarly) {
          err.value = value;
          return callback(err, value);
        }
        nestedErrors.push(err);
      }
      if (--count <= 0) {
        if (nestedErrors.length) {
          if (sort2)
            nestedErrors.sort(sort2);
          if (errors.length)
            nestedErrors.push(...errors);
          errors = nestedErrors;
        }
        if (errors.length) {
          callback(new ValidationError(errors, value, path2), value);
          return;
        }
        callback(null, value);
      }
    });
  }
}
function createBaseFor$1(fromRight) {
  return function(object2, iteratee, keysFunc) {
    var index2 = -1, iterable = Object(object2), props = keysFunc(object2), length = props.length;
    while (length--) {
      var key = props[fromRight ? length : ++index2];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object2;
  };
}
var _createBaseFor = createBaseFor$1;
var createBaseFor = _createBaseFor;
var baseFor$1 = createBaseFor();
var _baseFor = baseFor$1;
var baseFor = _baseFor, keys$1 = keys_1;
function baseForOwn$2(object2, iteratee) {
  return object2 && baseFor(object2, iteratee, keys$1);
}
var _baseForOwn = baseForOwn$2;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd$1(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}
var _setCacheAdd = setCacheAdd$1;
function setCacheHas$1(value) {
  return this.__data__.has(value);
}
var _setCacheHas = setCacheHas$1;
var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
function SetCache$1(values) {
  var index2 = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();
  while (++index2 < length) {
    this.add(values[index2]);
  }
}
SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
SetCache$1.prototype.has = setCacheHas;
var _SetCache = SetCache$1;
function arraySome$1(array2, predicate) {
  var index2 = -1, length = array2 == null ? 0 : array2.length;
  while (++index2 < length) {
    if (predicate(array2[index2], index2, array2)) {
      return true;
    }
  }
  return false;
}
var _arraySome = arraySome$1;
function cacheHas$1(cache, key) {
  return cache.has(key);
}
var _cacheHas = cacheHas$1;
var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays$2(array2, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array2.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array2);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array2;
  }
  var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
  stack.set(array2, other);
  stack.set(other, array2);
  while (++index2 < arrLength) {
    var arrValue = array2[index2], othValue = other[index2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome(other, function(othValue2, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array2);
  stack["delete"](other);
  return result;
}
var _equalArrays = equalArrays$2;
function mapToArray$1(map2) {
  var index2 = -1, result = Array(map2.size);
  map2.forEach(function(value, key) {
    result[++index2] = [key, value];
  });
  return result;
}
var _mapToArray = mapToArray$1;
function setToArray$1(set2) {
  var index2 = -1, result = Array(set2.size);
  set2.forEach(function(value) {
    result[++index2] = value;
  });
  return result;
}
var _setToArray = setToArray$1;
var Symbol$3 = _Symbol, Uint8Array$1 = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag$1 = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag$1 = "[object Set]", stringTag = "[object String]", symbolTag$1 = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : void 0, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
function equalByTag$1(object2, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
        return false;
      }
      object2 = object2.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object2), new Uint8Array$1(other))) {
        return false;
      }
      return true;
    case boolTag:
    case dateTag:
    case numberTag:
      return eq(+object2, +other);
    case errorTag:
      return object2.name == other.name && object2.message == other.message;
    case regexpTag:
    case stringTag:
      return object2 == other + "";
    case mapTag$1:
      var convert2 = mapToArray;
    case setTag$1:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert2 || (convert2 = setToArray);
      if (object2.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object2);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object2, other);
      var result = equalArrays$1(convert2(object2), convert2(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object2);
      return result;
    case symbolTag$1:
      if (symbolValueOf) {
        return symbolValueOf.call(object2) == symbolValueOf.call(other);
      }
  }
  return false;
}
var _equalByTag = equalByTag$1;
var getAllKeys = _getAllKeys;
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$4 = Object.prototype;
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
function equalObjects$1(object2, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index2 = objLength;
  while (index2--) {
    var key = objProps[index2];
    if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object2);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object2;
  }
  var result = true;
  stack.set(object2, other);
  stack.set(other, object2);
  var skipCtor = isPartial;
  while (++index2 < objLength) {
    key = objProps[index2];
    var objValue = object2[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object2.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object2);
  stack["delete"](other);
  return result;
}
var _equalObjects = equalObjects$1;
var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag$1 = _getTag, isArray$4 = isArray_1, isBuffer$1 = isBufferExports, isTypedArray$1 = isTypedArray_1;
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag$1 = "[object Object]";
var objectProto$3 = Object.prototype;
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
function baseIsEqualDeep$1(object2, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$4(object2), othIsArr = isArray$4(other), objTag = objIsArr ? arrayTag : getTag$1(object2), othTag = othIsArr ? arrayTag : getTag$1(other);
  objTag = objTag == argsTag ? objectTag$1 : objTag;
  othTag = othTag == argsTag ? objectTag$1 : othTag;
  var objIsObj = objTag == objectTag$1, othIsObj = othTag == objectTag$1, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer$1(object2)) {
    if (!isBuffer$1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$1());
    return objIsArr || isTypedArray$1(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$2.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack$1());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$1());
  return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
}
var _baseIsEqualDeep = baseIsEqualDeep$1;
var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike$2 = isObjectLike_1;
function baseIsEqual$2(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike$2(value) && !isObjectLike$2(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
}
var _baseIsEqual = baseIsEqual$2;
var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch$1(object2, source, matchData, customizer) {
  var index2 = matchData.length, length = index2, noCustomizer = !customizer;
  if (object2 == null) {
    return !length;
  }
  object2 = Object(object2);
  while (index2--) {
    var data = matchData[index2];
    if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
      return false;
    }
  }
  while (++index2 < length) {
    data = matchData[index2];
    var key = data[0], objValue = object2[key], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key in object2)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object2, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
var _baseIsMatch = baseIsMatch$1;
var isObject$5 = isObject_1;
function isStrictComparable$2(value) {
  return value === value && !isObject$5(value);
}
var _isStrictComparable = isStrictComparable$2;
var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
function getMatchData$1(object2) {
  var result = keys(object2), length = result.length;
  while (length--) {
    var key = result[length], value = object2[key];
    result[length] = [key, value, isStrictComparable$1(value)];
  }
  return result;
}
var _getMatchData = getMatchData$1;
function matchesStrictComparable$2(key, srcValue) {
  return function(object2) {
    if (object2 == null) {
      return false;
    }
    return object2[key] === srcValue && (srcValue !== void 0 || key in Object(object2));
  };
}
var _matchesStrictComparable = matchesStrictComparable$2;
var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object2) {
    return object2 === source || baseIsMatch(object2, source, matchData);
  };
}
var _baseMatches = baseMatches$1;
var castPath$4 = _castPath, toKey$4 = _toKey;
function baseGet$4(object2, path2) {
  path2 = castPath$4(path2, object2);
  var index2 = 0, length = path2.length;
  while (object2 != null && index2 < length) {
    object2 = object2[toKey$4(path2[index2++])];
  }
  return index2 && index2 == length ? object2 : void 0;
}
var _baseGet = baseGet$4;
var baseGet$3 = _baseGet;
function get$1(object2, path2, defaultValue) {
  var result = object2 == null ? void 0 : baseGet$3(object2, path2);
  return result === void 0 ? defaultValue : result;
}
var get_1 = get$1;
function baseHasIn$1(object2, key) {
  return object2 != null && key in Object(object2);
}
var _baseHasIn = baseHasIn$1;
var baseHasIn = _baseHasIn, hasPath = _hasPath;
function hasIn$2(object2, path2) {
  return object2 != null && hasPath(object2, path2, baseHasIn);
}
var hasIn_1 = hasIn$2;
var baseIsEqual = _baseIsEqual, get = get_1, hasIn$1 = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$3 = _toKey;
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty$1(path2, srcValue) {
  if (isKey$1(path2) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$3(path2), srcValue);
  }
  return function(object2) {
    var objValue = get(object2, path2);
    return objValue === void 0 && objValue === srcValue ? hasIn$1(object2, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
var _baseMatchesProperty = baseMatchesProperty$1;
function identity$2(value) {
  return value;
}
var identity_1 = identity$2;
function baseProperty$1(key) {
  return function(object2) {
    return object2 == null ? void 0 : object2[key];
  };
}
var _baseProperty = baseProperty$1;
var baseGet$2 = _baseGet;
function basePropertyDeep$1(path2) {
  return function(object2) {
    return baseGet$2(object2, path2);
  };
}
var _basePropertyDeep = basePropertyDeep$1;
var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey$2 = _toKey;
function property$1(path2) {
  return isKey(path2) ? baseProperty(toKey$2(path2)) : basePropertyDeep(path2);
}
var property_1 = property$1;
var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity$1 = identity_1, isArray$3 = isArray_1, property = property_1;
function baseIteratee$2(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity$1;
  }
  if (typeof value == "object") {
    return isArray$3(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}
var _baseIteratee = baseIteratee$2;
var baseAssignValue$1 = _baseAssignValue, baseForOwn$1 = _baseForOwn, baseIteratee$1 = _baseIteratee;
function mapValues(object2, iteratee) {
  var result = {};
  iteratee = baseIteratee$1(iteratee);
  baseForOwn$1(object2, function(value, key, object3) {
    baseAssignValue$1(result, key, iteratee(value, key, object3));
  });
  return result;
}
var mapValues_1 = mapValues;
const mapValues$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapValues_1);
function Cache(maxSize) {
  this._maxSize = maxSize;
  this.clear();
}
Cache.prototype.clear = function() {
  this._size = 0;
  this._values = /* @__PURE__ */ Object.create(null);
};
Cache.prototype.get = function(key) {
  return this._values[key];
};
Cache.prototype.set = function(key, value) {
  this._size >= this._maxSize && this.clear();
  if (!(key in this._values))
    this._size++;
  return this._values[key] = value;
};
var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g, DIGIT_REGEX = /^\d+$/, LEAD_DIGIT_REGEX = /^\d/, SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g, CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/, MAX_CACHE_SIZE = 512;
var pathCache = new Cache(MAX_CACHE_SIZE), setCache = new Cache(MAX_CACHE_SIZE), getCache = new Cache(MAX_CACHE_SIZE);
var propertyExpr = {
  Cache,
  split,
  normalizePath,
  setter: function(path2) {
    var parts = normalizePath(path2);
    return setCache.get(path2) || setCache.set(path2, function setter(obj, value) {
      var index2 = 0;
      var len = parts.length;
      var data = obj;
      while (index2 < len - 1) {
        var part = parts[index2];
        if (part === "__proto__" || part === "constructor" || part === "prototype") {
          return obj;
        }
        data = data[parts[index2++]];
      }
      data[parts[index2]] = value;
    });
  },
  getter: function(path2, safe) {
    var parts = normalizePath(path2);
    return getCache.get(path2) || getCache.set(path2, function getter(data) {
      var index2 = 0, len = parts.length;
      while (index2 < len) {
        if (data != null || !safe)
          data = data[parts[index2++]];
        else
          return;
      }
      return data;
    });
  },
  join: function(segments) {
    return segments.reduce(function(path2, part) {
      return path2 + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path2 ? "." : "") + part);
    }, "");
  },
  forEach: function(path2, cb, thisArg) {
    forEach(Array.isArray(path2) ? path2 : split(path2), cb, thisArg);
  }
};
function normalizePath(path2) {
  return pathCache.get(path2) || pathCache.set(
    path2,
    split(path2).map(function(part) {
      return part.replace(CLEAN_QUOTES_REGEX, "$2");
    })
  );
}
function split(path2) {
  return path2.match(SPLIT_REGEX) || [""];
}
function forEach(parts, iter, thisArg) {
  var len = parts.length, part, idx, isArray2, isBracket;
  for (idx = 0; idx < len; idx++) {
    part = parts[idx];
    if (part) {
      if (shouldBeQuoted(part)) {
        part = '"' + part + '"';
      }
      isBracket = isQuoted(part);
      isArray2 = !isBracket && /^\d+$/.test(part);
      iter.call(thisArg, part, isBracket, isArray2, idx, parts);
    }
  }
}
function isQuoted(str2) {
  return typeof str2 === "string" && str2 && ["'", '"'].indexOf(str2.charAt(0)) !== -1;
}
function hasLeadingNumber(part) {
  return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
}
function hasSpecialChars(part) {
  return SPEC_CHAR_REGEX.test(part);
}
function shouldBeQuoted(part) {
  return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
}
const prefixes = {
  context: "$",
  value: "."
};
class Reference {
  constructor(key, options = {}) {
    if (typeof key !== "string")
      throw new TypeError("ref must be a string, got: " + key);
    this.key = key.trim();
    if (key === "")
      throw new TypeError("ref must be a non-empty string");
    this.isContext = this.key[0] === prefixes.context;
    this.isValue = this.key[0] === prefixes.value;
    this.isSibling = !this.isContext && !this.isValue;
    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
    this.path = this.key.slice(prefix.length);
    this.getter = this.path && propertyExpr.getter(this.path, true);
    this.map = options.map;
  }
  getValue(value, parent2, context) {
    let result = this.isContext ? context : this.isValue ? value : parent2;
    if (this.getter)
      result = this.getter(result || {});
    if (this.map)
      result = this.map(result);
    return result;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */
  cast(value, options) {
    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return {
      type: "ref",
      key: this.key
    };
  }
  toString() {
    return `Ref(${this.key})`;
  }
  static isRef(value) {
    return value && value.__isYupRef;
  }
}
Reference.prototype.__isYupRef = true;
function _extends$3() {
  _extends$3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function createValidation(config2) {
  function validate(_ref, cb) {
    let {
      value,
      path: path2 = "",
      label,
      options,
      originalValue,
      sync: sync2
    } = _ref, rest = _objectWithoutPropertiesLoose(_ref, ["value", "path", "label", "options", "originalValue", "sync"]);
    const {
      name,
      test: test2,
      params,
      message
    } = config2;
    let {
      parent: parent2,
      context
    } = options;
    function resolve(item) {
      return Reference.isRef(item) ? item.getValue(value, parent2, context) : item;
    }
    function createError(overrides = {}) {
      const nextParams = mapValues$1(_extends$3({
        value,
        originalValue,
        label,
        path: overrides.path || path2
      }, params, overrides.params), resolve);
      const error2 = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
      error2.params = nextParams;
      return error2;
    }
    let ctx = _extends$3({
      path: path2,
      parent: parent2,
      type: name,
      createError,
      resolve,
      options,
      originalValue
    }, rest);
    if (!sync2) {
      try {
        Promise.resolve(test2.call(ctx, value, ctx)).then((validOrError) => {
          if (ValidationError.isError(validOrError))
            cb(validOrError);
          else if (!validOrError)
            cb(createError());
          else
            cb(null, validOrError);
        });
      } catch (err) {
        cb(err);
      }
      return;
    }
    let result;
    try {
      var _ref2;
      result = test2.call(ctx, value, ctx);
      if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === "function") {
        throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
      }
    } catch (err) {
      cb(err);
      return;
    }
    if (ValidationError.isError(result))
      cb(result);
    else if (!result)
      cb(createError());
    else
      cb(null, result);
  }
  validate.OPTIONS = config2;
  return validate;
}
let trim$2 = (part) => part.substr(0, part.length - 1).substr(1);
function getIn(schema2, path2, value, context = value) {
  let parent2, lastPart, lastPartDebug;
  if (!path2)
    return {
      parent: parent2,
      parentPath: path2,
      schema: schema2
    };
  propertyExpr.forEach(path2, (_part, isBracket, isArray2) => {
    let part = isBracket ? trim$2(_part) : _part;
    schema2 = schema2.resolve({
      context,
      parent: parent2,
      value
    });
    if (schema2.innerType) {
      let idx = isArray2 ? parseInt(part, 10) : 0;
      if (value && idx >= value.length) {
        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path2}. because there is no value at that index. `);
      }
      parent2 = value;
      value = value && value[idx];
      schema2 = schema2.innerType;
    }
    if (!isArray2) {
      if (!schema2.fields || !schema2.fields[part])
        throw new Error(`The schema does not contain the path: ${path2}. (failed at: ${lastPartDebug} which is a type: "${schema2._type}")`);
      parent2 = value;
      value = value && value[part];
      schema2 = schema2.fields[part];
    }
    lastPart = part;
    lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
  });
  return {
    schema: schema2,
    parent: parent2,
    parentPath: lastPart
  };
}
class ReferenceSet {
  constructor() {
    this.list = /* @__PURE__ */ new Set();
    this.refs = /* @__PURE__ */ new Map();
  }
  get size() {
    return this.list.size + this.refs.size;
  }
  describe() {
    const description = [];
    for (const item of this.list)
      description.push(item);
    for (const [, ref2] of this.refs)
      description.push(ref2.describe());
    return description;
  }
  toArray() {
    return Array.from(this.list).concat(Array.from(this.refs.values()));
  }
  add(value) {
    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
  }
  delete(value) {
    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
  }
  has(value, resolve) {
    if (this.list.has(value))
      return true;
    let item, values = this.refs.values();
    while (item = values.next(), !item.done)
      if (resolve(item.value) === value)
        return true;
    return false;
  }
  clone() {
    const next = new ReferenceSet();
    next.list = new Set(this.list);
    next.refs = new Map(this.refs);
    return next;
  }
  merge(newItems, removeItems) {
    const next = this.clone();
    newItems.list.forEach((value) => next.add(value));
    newItems.refs.forEach((value) => next.add(value));
    removeItems.list.forEach((value) => next.delete(value));
    removeItems.refs.forEach((value) => next.delete(value));
    return next;
  }
}
function _extends$2() {
  _extends$2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
class BaseSchema {
  constructor(options) {
    this.deps = [];
    this.conditions = [];
    this._whitelist = new ReferenceSet();
    this._blacklist = new ReferenceSet();
    this.exclusiveTests = /* @__PURE__ */ Object.create(null);
    this.tests = [];
    this.transforms = [];
    this.withMutation(() => {
      this.typeError(mixed.notType);
    });
    this.type = (options == null ? void 0 : options.type) || "mixed";
    this.spec = _extends$2({
      strip: false,
      strict: false,
      abortEarly: true,
      recursive: true,
      nullable: false,
      presence: "optional"
    }, options == null ? void 0 : options.spec);
  }
  // TODO: remove
  get _type() {
    return this.type;
  }
  _typeCheck(_value) {
    return true;
  }
  clone(spec) {
    if (this._mutate) {
      if (spec)
        Object.assign(this.spec, spec);
      return this;
    }
    const next = Object.create(Object.getPrototypeOf(this));
    next.type = this.type;
    next._typeError = this._typeError;
    next._whitelistError = this._whitelistError;
    next._blacklistError = this._blacklistError;
    next._whitelist = this._whitelist.clone();
    next._blacklist = this._blacklist.clone();
    next.exclusiveTests = _extends$2({}, this.exclusiveTests);
    next.deps = [...this.deps];
    next.conditions = [...this.conditions];
    next.tests = [...this.tests];
    next.transforms = [...this.transforms];
    next.spec = clone$3(_extends$2({}, this.spec, spec));
    return next;
  }
  label(label) {
    var next = this.clone();
    next.spec.label = label;
    return next;
  }
  meta(...args) {
    if (args.length === 0)
      return this.spec.meta;
    let next = this.clone();
    next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
    return next;
  }
  // withContext<TContext extends AnyObject>(): BaseSchema<
  //   TCast,
  //   TContext,
  //   TOutput
  // > {
  //   return this as any;
  // }
  withMutation(fn) {
    let before = this._mutate;
    this._mutate = true;
    let result = fn(this);
    this._mutate = before;
    return result;
  }
  concat(schema2) {
    if (!schema2 || schema2 === this)
      return this;
    if (schema2.type !== this.type && this.type !== "mixed")
      throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema2.type}`);
    let base = this;
    let combined = schema2.clone();
    const mergedSpec = _extends$2({}, base.spec, combined.spec);
    combined.spec = mergedSpec;
    combined._typeError || (combined._typeError = base._typeError);
    combined._whitelistError || (combined._whitelistError = base._whitelistError);
    combined._blacklistError || (combined._blacklistError = base._blacklistError);
    combined._whitelist = base._whitelist.merge(schema2._whitelist, schema2._blacklist);
    combined._blacklist = base._blacklist.merge(schema2._blacklist, schema2._whitelist);
    combined.tests = base.tests;
    combined.exclusiveTests = base.exclusiveTests;
    combined.withMutation((next) => {
      schema2.tests.forEach((fn) => {
        next.test(fn.OPTIONS);
      });
    });
    return combined;
  }
  isType(v) {
    if (this.spec.nullable && v === null)
      return true;
    return this._typeCheck(v);
  }
  resolve(options) {
    let schema2 = this;
    if (schema2.conditions.length) {
      let conditions = schema2.conditions;
      schema2 = schema2.clone();
      schema2.conditions = [];
      schema2 = conditions.reduce((schema3, condition) => condition.resolve(schema3, options), schema2);
      schema2 = schema2.resolve(options);
    }
    return schema2;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */
  cast(value, options = {}) {
    let resolvedSchema = this.resolve(_extends$2({
      value
    }, options));
    let result = resolvedSchema._cast(value, options);
    if (value !== void 0 && options.assert !== false && resolvedSchema.isType(result) !== true) {
      let formattedValue = printValue$1(value);
      let formattedResult = printValue$1(result);
      throw new TypeError(`The value of ${options.path || "field"} could not be cast to a value that satisfies the schema type: "${resolvedSchema._type}". 

attempted value: ${formattedValue} 
` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ""));
    }
    return result;
  }
  _cast(rawValue, _options) {
    let value = rawValue === void 0 ? rawValue : this.transforms.reduce((value2, fn) => fn.call(this, value2, rawValue, this), rawValue);
    if (value === void 0) {
      value = this.getDefault();
    }
    return value;
  }
  _validate(_value, options = {}, cb) {
    let {
      sync: sync2,
      path: path2,
      from = [],
      originalValue = _value,
      strict = this.spec.strict,
      abortEarly = this.spec.abortEarly
    } = options;
    let value = _value;
    if (!strict) {
      value = this._cast(value, _extends$2({
        assert: false
      }, options));
    }
    let args = {
      value,
      path: path2,
      options,
      originalValue,
      schema: this,
      label: this.spec.label,
      sync: sync2,
      from
    };
    let initialTests = [];
    if (this._typeError)
      initialTests.push(this._typeError);
    if (this._whitelistError)
      initialTests.push(this._whitelistError);
    if (this._blacklistError)
      initialTests.push(this._blacklistError);
    runTests({
      args,
      value,
      path: path2,
      sync: sync2,
      tests: initialTests,
      endEarly: abortEarly
    }, (err) => {
      if (err)
        return void cb(err, value);
      runTests({
        tests: this.tests,
        args,
        path: path2,
        sync: sync2,
        value,
        endEarly: abortEarly
      }, cb);
    });
  }
  validate(value, options, maybeCb) {
    let schema2 = this.resolve(_extends$2({}, options, {
      value
    }));
    return typeof maybeCb === "function" ? schema2._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema2._validate(value, options, (err, value2) => {
      if (err)
        reject(err);
      else
        resolve(value2);
    }));
  }
  validateSync(value, options) {
    let schema2 = this.resolve(_extends$2({}, options, {
      value
    }));
    let result;
    schema2._validate(value, _extends$2({}, options, {
      sync: true
    }), (err, value2) => {
      if (err)
        throw err;
      result = value2;
    });
    return result;
  }
  isValid(value, options) {
    return this.validate(value, options).then(() => true, (err) => {
      if (ValidationError.isError(err))
        return false;
      throw err;
    });
  }
  isValidSync(value, options) {
    try {
      this.validateSync(value, options);
      return true;
    } catch (err) {
      if (ValidationError.isError(err))
        return false;
      throw err;
    }
  }
  _getDefault() {
    let defaultValue = this.spec.default;
    if (defaultValue == null) {
      return defaultValue;
    }
    return typeof defaultValue === "function" ? defaultValue.call(this) : clone$3(defaultValue);
  }
  getDefault(options) {
    let schema2 = this.resolve(options || {});
    return schema2._getDefault();
  }
  default(def) {
    if (arguments.length === 0) {
      return this._getDefault();
    }
    let next = this.clone({
      default: def
    });
    return next;
  }
  strict(isStrict = true) {
    var next = this.clone();
    next.spec.strict = isStrict;
    return next;
  }
  _isPresent(value) {
    return value != null;
  }
  defined(message = mixed.defined) {
    return this.test({
      message,
      name: "defined",
      exclusive: true,
      test(value) {
        return value !== void 0;
      }
    });
  }
  required(message = mixed.required) {
    return this.clone({
      presence: "required"
    }).withMutation((s) => s.test({
      message,
      name: "required",
      exclusive: true,
      test(value) {
        return this.schema._isPresent(value);
      }
    }));
  }
  notRequired() {
    var next = this.clone({
      presence: "optional"
    });
    next.tests = next.tests.filter((test2) => test2.OPTIONS.name !== "required");
    return next;
  }
  nullable(isNullable = true) {
    var next = this.clone({
      nullable: isNullable !== false
    });
    return next;
  }
  transform(fn) {
    var next = this.clone();
    next.transforms.push(fn);
    return next;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */
  test(...args) {
    let opts;
    if (args.length === 1) {
      if (typeof args[0] === "function") {
        opts = {
          test: args[0]
        };
      } else {
        opts = args[0];
      }
    } else if (args.length === 2) {
      opts = {
        name: args[0],
        test: args[1]
      };
    } else {
      opts = {
        name: args[0],
        message: args[1],
        test: args[2]
      };
    }
    if (opts.message === void 0)
      opts.message = mixed.default;
    if (typeof opts.test !== "function")
      throw new TypeError("`test` is a required parameters");
    let next = this.clone();
    let validate = createValidation(opts);
    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
    if (opts.exclusive) {
      if (!opts.name)
        throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
    }
    if (opts.name)
      next.exclusiveTests[opts.name] = !!opts.exclusive;
    next.tests = next.tests.filter((fn) => {
      if (fn.OPTIONS.name === opts.name) {
        if (isExclusive)
          return false;
        if (fn.OPTIONS.test === validate.OPTIONS.test)
          return false;
      }
      return true;
    });
    next.tests.push(validate);
    return next;
  }
  when(keys2, options) {
    if (!Array.isArray(keys2) && typeof keys2 !== "string") {
      options = keys2;
      keys2 = ".";
    }
    let next = this.clone();
    let deps = toArray$1(keys2).map((key) => new Reference(key));
    deps.forEach((dep) => {
      if (dep.isSibling)
        next.deps.push(dep.key);
    });
    next.conditions.push(new Condition(deps, options));
    return next;
  }
  typeError(message) {
    var next = this.clone();
    next._typeError = createValidation({
      message,
      name: "typeError",
      test(value) {
        if (value !== void 0 && !this.schema.isType(value))
          return this.createError({
            params: {
              type: this.schema._type
            }
          });
        return true;
      }
    });
    return next;
  }
  oneOf(enums, message = mixed.oneOf) {
    var next = this.clone();
    enums.forEach((val) => {
      next._whitelist.add(val);
      next._blacklist.delete(val);
    });
    next._whitelistError = createValidation({
      message,
      name: "oneOf",
      test(value) {
        if (value === void 0)
          return true;
        let valids = this.schema._whitelist;
        return valids.has(value, this.resolve) ? true : this.createError({
          params: {
            values: valids.toArray().join(", ")
          }
        });
      }
    });
    return next;
  }
  notOneOf(enums, message = mixed.notOneOf) {
    var next = this.clone();
    enums.forEach((val) => {
      next._blacklist.add(val);
      next._whitelist.delete(val);
    });
    next._blacklistError = createValidation({
      message,
      name: "notOneOf",
      test(value) {
        let invalids = this.schema._blacklist;
        if (invalids.has(value, this.resolve))
          return this.createError({
            params: {
              values: invalids.toArray().join(", ")
            }
          });
        return true;
      }
    });
    return next;
  }
  strip(strip = true) {
    let next = this.clone();
    next.spec.strip = strip;
    return next;
  }
  describe() {
    const next = this.clone();
    const {
      label,
      meta
    } = next.spec;
    const description = {
      meta,
      label,
      type: next.type,
      oneOf: next._whitelist.describe(),
      notOneOf: next._blacklist.describe(),
      tests: next.tests.map((fn) => ({
        name: fn.OPTIONS.name,
        params: fn.OPTIONS.params
      })).filter((n, idx, list) => list.findIndex((c) => c.name === n.name) === idx)
    };
    return description;
  }
}
BaseSchema.prototype.__isYupSchema__ = true;
for (const method of ["validate", "validateSync"])
  BaseSchema.prototype[`${method}At`] = function(path2, value, options = {}) {
    const {
      parent: parent2,
      parentPath,
      schema: schema2
    } = getIn(this, path2, value, options.context);
    return schema2[method](parent2 && parent2[parentPath], _extends$2({}, options, {
      parent: parent2,
      path: path2
    }));
  };
for (const alias of ["equals", "is"])
  BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
for (const alias of ["not", "nope"])
  BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;
BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;
const Mixed = BaseSchema;
function create$3() {
  return new Mixed();
}
create$3.prototype = Mixed.prototype;
const isAbsent = (value) => value == null;
let rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
let rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
let rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
let isTrimmed = (value) => isAbsent(value) || value === value.trim();
let objStringTag = {}.toString();
function create$2() {
  return new StringSchema();
}
class StringSchema extends BaseSchema {
  constructor() {
    super({
      type: "string"
    });
    this.withMutation(() => {
      this.transform(function(value) {
        if (this.isType(value))
          return value;
        if (Array.isArray(value))
          return value;
        const strValue = value != null && value.toString ? value.toString() : value;
        if (strValue === objStringTag)
          return value;
        return strValue;
      });
    });
  }
  _typeCheck(value) {
    if (value instanceof String)
      value = value.valueOf();
    return typeof value === "string";
  }
  _isPresent(value) {
    return super._isPresent(value) && !!value.length;
  }
  length(length, message = string.length) {
    return this.test({
      message,
      name: "length",
      exclusive: true,
      params: {
        length
      },
      test(value) {
        return isAbsent(value) || value.length === this.resolve(length);
      }
    });
  }
  min(min, message = string.min) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      test(value) {
        return isAbsent(value) || value.length >= this.resolve(min);
      }
    });
  }
  max(max2, message = string.max) {
    return this.test({
      name: "max",
      exclusive: true,
      message,
      params: {
        max: max2
      },
      test(value) {
        return isAbsent(value) || value.length <= this.resolve(max2);
      }
    });
  }
  matches(regex, options) {
    let excludeEmptyString = false;
    let message;
    let name;
    if (options) {
      if (typeof options === "object") {
        ({
          excludeEmptyString = false,
          message,
          name
        } = options);
      } else {
        message = options;
      }
    }
    return this.test({
      name: name || "matches",
      message: message || string.matches,
      params: {
        regex
      },
      test: (value) => isAbsent(value) || value === "" && excludeEmptyString || value.search(regex) !== -1
    });
  }
  email(message = string.email) {
    return this.matches(rEmail, {
      name: "email",
      message,
      excludeEmptyString: true
    });
  }
  url(message = string.url) {
    return this.matches(rUrl, {
      name: "url",
      message,
      excludeEmptyString: true
    });
  }
  uuid(message = string.uuid) {
    return this.matches(rUUID, {
      name: "uuid",
      message,
      excludeEmptyString: false
    });
  }
  //-- transforms --
  ensure() {
    return this.default("").transform((val) => val === null ? "" : val);
  }
  trim(message = string.trim) {
    return this.transform((val) => val != null ? val.trim() : val).test({
      message,
      name: "trim",
      test: isTrimmed
    });
  }
  lowercase(message = string.lowercase) {
    return this.transform((value) => !isAbsent(value) ? value.toLowerCase() : value).test({
      message,
      name: "string_case",
      exclusive: true,
      test: (value) => isAbsent(value) || value === value.toLowerCase()
    });
  }
  uppercase(message = string.uppercase) {
    return this.transform((value) => !isAbsent(value) ? value.toUpperCase() : value).test({
      message,
      name: "string_case",
      exclusive: true,
      test: (value) => isAbsent(value) || value === value.toUpperCase()
    });
  }
}
create$2.prototype = StringSchema.prototype;
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date2) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11], minutesOffset = 0, timestamp2, struct;
  if (struct = isoReg.exec(date2)) {
    for (var i = 0, k; k = numericKeys[i]; ++i)
      struct[k] = +struct[k] || 0;
    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1;
    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;
    if ((struct[8] === void 0 || struct[8] === "") && (struct[9] === void 0 || struct[9] === ""))
      timestamp2 = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
    else {
      if (struct[8] !== "Z" && struct[9] !== void 0) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === "+")
          minutesOffset = 0 - minutesOffset;
      }
      timestamp2 = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else
    timestamp2 = Date.parse ? Date.parse(date2) : NaN;
  return timestamp2;
}
let invalidDate = /* @__PURE__ */ new Date("");
let isDate = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
class DateSchema extends BaseSchema {
  constructor() {
    super({
      type: "date"
    });
    this.withMutation(() => {
      this.transform(function(value) {
        if (this.isType(value))
          return value;
        value = parseIsoDate(value);
        return !isNaN(value) ? new Date(value) : invalidDate;
      });
    });
  }
  _typeCheck(v) {
    return isDate(v) && !isNaN(v.getTime());
  }
  prepareParam(ref2, name) {
    let param;
    if (!Reference.isRef(ref2)) {
      let cast = this.cast(ref2);
      if (!this._typeCheck(cast))
        throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
      param = cast;
    } else {
      param = ref2;
    }
    return param;
  }
  min(min, message = date.min) {
    let limit = this.prepareParam(min, "min");
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      test(value) {
        return isAbsent(value) || value >= this.resolve(limit);
      }
    });
  }
  max(max2, message = date.max) {
    var limit = this.prepareParam(max2, "max");
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max: max2
      },
      test(value) {
        return isAbsent(value) || value <= this.resolve(limit);
      }
    });
  }
}
DateSchema.INVALID_DATE = invalidDate;
DateSchema.prototype;
function arrayReduce$1(array2, iteratee, accumulator, initAccum) {
  var index2 = -1, length = array2 == null ? 0 : array2.length;
  if (initAccum && length) {
    accumulator = array2[++index2];
  }
  while (++index2 < length) {
    accumulator = iteratee(accumulator, array2[index2], index2, array2);
  }
  return accumulator;
}
var _arrayReduce = arrayReduce$1;
function basePropertyOf$2(object2) {
  return function(key) {
    return object2 == null ? void 0 : object2[key];
  };
}
var _basePropertyOf = basePropertyOf$2;
var basePropertyOf$1 = _basePropertyOf;
var deburredLetters$1 = {
  // Latin-1 Supplement block.
  "À": "A",
  "Á": "A",
  "Â": "A",
  "Ã": "A",
  "Ä": "A",
  "Å": "A",
  "à": "a",
  "á": "a",
  "â": "a",
  "ã": "a",
  "ä": "a",
  "å": "a",
  "Ç": "C",
  "ç": "c",
  "Ð": "D",
  "ð": "d",
  "È": "E",
  "É": "E",
  "Ê": "E",
  "Ë": "E",
  "è": "e",
  "é": "e",
  "ê": "e",
  "ë": "e",
  "Ì": "I",
  "Í": "I",
  "Î": "I",
  "Ï": "I",
  "ì": "i",
  "í": "i",
  "î": "i",
  "ï": "i",
  "Ñ": "N",
  "ñ": "n",
  "Ò": "O",
  "Ó": "O",
  "Ô": "O",
  "Õ": "O",
  "Ö": "O",
  "Ø": "O",
  "ò": "o",
  "ó": "o",
  "ô": "o",
  "õ": "o",
  "ö": "o",
  "ø": "o",
  "Ù": "U",
  "Ú": "U",
  "Û": "U",
  "Ü": "U",
  "ù": "u",
  "ú": "u",
  "û": "u",
  "ü": "u",
  "Ý": "Y",
  "ý": "y",
  "ÿ": "y",
  "Æ": "Ae",
  "æ": "ae",
  "Þ": "Th",
  "þ": "th",
  "ß": "ss",
  // Latin Extended-A block.
  "Ā": "A",
  "Ă": "A",
  "Ą": "A",
  "ā": "a",
  "ă": "a",
  "ą": "a",
  "Ć": "C",
  "Ĉ": "C",
  "Ċ": "C",
  "Č": "C",
  "ć": "c",
  "ĉ": "c",
  "ċ": "c",
  "č": "c",
  "Ď": "D",
  "Đ": "D",
  "ď": "d",
  "đ": "d",
  "Ē": "E",
  "Ĕ": "E",
  "Ė": "E",
  "Ę": "E",
  "Ě": "E",
  "ē": "e",
  "ĕ": "e",
  "ė": "e",
  "ę": "e",
  "ě": "e",
  "Ĝ": "G",
  "Ğ": "G",
  "Ġ": "G",
  "Ģ": "G",
  "ĝ": "g",
  "ğ": "g",
  "ġ": "g",
  "ģ": "g",
  "Ĥ": "H",
  "Ħ": "H",
  "ĥ": "h",
  "ħ": "h",
  "Ĩ": "I",
  "Ī": "I",
  "Ĭ": "I",
  "Į": "I",
  "İ": "I",
  "ĩ": "i",
  "ī": "i",
  "ĭ": "i",
  "į": "i",
  "ı": "i",
  "Ĵ": "J",
  "ĵ": "j",
  "Ķ": "K",
  "ķ": "k",
  "ĸ": "k",
  "Ĺ": "L",
  "Ļ": "L",
  "Ľ": "L",
  "Ŀ": "L",
  "Ł": "L",
  "ĺ": "l",
  "ļ": "l",
  "ľ": "l",
  "ŀ": "l",
  "ł": "l",
  "Ń": "N",
  "Ņ": "N",
  "Ň": "N",
  "Ŋ": "N",
  "ń": "n",
  "ņ": "n",
  "ň": "n",
  "ŋ": "n",
  "Ō": "O",
  "Ŏ": "O",
  "Ő": "O",
  "ō": "o",
  "ŏ": "o",
  "ő": "o",
  "Ŕ": "R",
  "Ŗ": "R",
  "Ř": "R",
  "ŕ": "r",
  "ŗ": "r",
  "ř": "r",
  "Ś": "S",
  "Ŝ": "S",
  "Ş": "S",
  "Š": "S",
  "ś": "s",
  "ŝ": "s",
  "ş": "s",
  "š": "s",
  "Ţ": "T",
  "Ť": "T",
  "Ŧ": "T",
  "ţ": "t",
  "ť": "t",
  "ŧ": "t",
  "Ũ": "U",
  "Ū": "U",
  "Ŭ": "U",
  "Ů": "U",
  "Ű": "U",
  "Ų": "U",
  "ũ": "u",
  "ū": "u",
  "ŭ": "u",
  "ů": "u",
  "ű": "u",
  "ų": "u",
  "Ŵ": "W",
  "ŵ": "w",
  "Ŷ": "Y",
  "ŷ": "y",
  "Ÿ": "Y",
  "Ź": "Z",
  "Ż": "Z",
  "Ž": "Z",
  "ź": "z",
  "ż": "z",
  "ž": "z",
  "Ĳ": "IJ",
  "ĳ": "ij",
  "Œ": "Oe",
  "œ": "oe",
  "ŉ": "'n",
  "ſ": "s"
};
var deburrLetter$2 = basePropertyOf$1(deburredLetters$1);
var _deburrLetter = deburrLetter$2;
var deburrLetter$1 = _deburrLetter, toString$6 = toString_1;
var reLatin$1 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsComboMarksRange$4 = "\\u0300-\\u036f", reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$4 = "\\u20d0-\\u20ff", rsComboRange$3 = rsComboMarksRange$4 + reComboHalfMarksRange$3 + rsComboSymbolsRange$4;
var rsCombo$3 = "[" + rsComboRange$3 + "]";
var reComboMark$1 = RegExp(rsCombo$3, "g");
function deburr$3(string2) {
  string2 = toString$6(string2);
  return string2 && string2.replace(reLatin$1, deburrLetter$1).replace(reComboMark$1, "");
}
var deburr_1 = deburr$3;
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords$1(string2) {
  return string2.match(reAsciiWord) || [];
}
var _asciiWords = asciiWords$1;
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord$1(string2) {
  return reHasUnicodeWord.test(string2);
}
var _hasUnicodeWord = hasUnicodeWord$1;
var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$3 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$3 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$3 + reComboHalfMarksRange$2 + rsComboSymbolsRange$3, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange$2 = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
var rsApos$1 = "['’]", rsBreak = "[" + rsBreakRange + "]", rsCombo$2 = "[" + rsComboRange$2 + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$2 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$2 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ$2 = "\\u200d";
var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$2 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$2 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsEmoji = "(?:" + [rsDingbat, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsSeq$1;
var reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
  rsUpper + "+" + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join("|"), "g");
function unicodeWords$1(string2) {
  return string2.match(reUnicodeWord) || [];
}
var _unicodeWords = unicodeWords$1;
var asciiWords = _asciiWords, hasUnicodeWord = _hasUnicodeWord, toString$5 = toString_1, unicodeWords = _unicodeWords;
function words$1(string2, pattern, guard) {
  string2 = toString$5(string2);
  pattern = guard ? void 0 : pattern;
  if (pattern === void 0) {
    return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
  }
  return string2.match(pattern) || [];
}
var words_1 = words$1;
var arrayReduce = _arrayReduce, deburr$2 = deburr_1, words = words_1;
var rsApos = "['’]";
var reApos = RegExp(rsApos, "g");
function createCompounder$2(callback) {
  return function(string2) {
    return arrayReduce(words(deburr$2(string2).replace(reApos, "")), callback, "");
  };
}
var _createCompounder = createCompounder$2;
var createCompounder$1 = _createCompounder;
var snakeCase = createCompounder$1(function(result, word, index2) {
  return result + (index2 ? "_" : "") + word.toLowerCase();
});
var snakeCase_1 = snakeCase;
const snakeCase$1 = /* @__PURE__ */ getDefaultExportFromCjs(snakeCase_1);
function baseSlice$2(array2, start, end) {
  var index2 = -1, length = array2.length;
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);
  while (++index2 < length) {
    result[index2] = array2[index2 + start];
  }
  return result;
}
var _baseSlice = baseSlice$2;
var baseSlice$1 = _baseSlice;
function castSlice$2(array2, start, end) {
  var length = array2.length;
  end = end === void 0 ? length : end;
  return !start && end >= length ? array2 : baseSlice$1(array2, start, end);
}
var _castSlice = castSlice$2;
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$2 + reComboHalfMarksRange$1 + rsComboSymbolsRange$2, rsVarRange$1 = "\\ufe0e\\ufe0f";
var rsZWJ$1 = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + "]");
function hasUnicode$2(string2) {
  return reHasUnicode.test(string2);
}
var _hasUnicode = hasUnicode$2;
function asciiToArray$1(string2) {
  return string2.split("");
}
var _asciiToArray = asciiToArray$1;
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange$1 + reComboHalfMarksRange + rsComboSymbolsRange$1, rsVarRange = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange + "]", rsCombo$1 = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo$1 + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo$1 + "?", rsCombo$1, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray$1(string2) {
  return string2.match(reUnicode) || [];
}
var _unicodeToArray = unicodeToArray$1;
var asciiToArray = _asciiToArray, hasUnicode$1 = _hasUnicode, unicodeToArray = _unicodeToArray;
function stringToArray$2(string2) {
  return hasUnicode$1(string2) ? unicodeToArray(string2) : asciiToArray(string2);
}
var _stringToArray = stringToArray$2;
var castSlice$1 = _castSlice, hasUnicode = _hasUnicode, stringToArray$1 = _stringToArray, toString$4 = toString_1;
function createCaseFirst$1(methodName) {
  return function(string2) {
    string2 = toString$4(string2);
    var strSymbols = hasUnicode(string2) ? stringToArray$1(string2) : void 0;
    var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
    var trailing = strSymbols ? castSlice$1(strSymbols, 1).join("") : string2.slice(1);
    return chr[methodName]() + trailing;
  };
}
var _createCaseFirst = createCaseFirst$1;
var createCaseFirst = _createCaseFirst;
var upperFirst$1 = createCaseFirst("toUpperCase");
var upperFirst_1 = upperFirst$1;
var toString$3 = toString_1, upperFirst = upperFirst_1;
function capitalize$1(string2) {
  return upperFirst(toString$3(string2).toLowerCase());
}
var capitalize_1 = capitalize$1;
var capitalize = capitalize_1, createCompounder = _createCompounder;
var camelCase = createCompounder(function(result, word, index2) {
  word = word.toLowerCase();
  return result + (index2 ? capitalize(word) : word);
});
var camelCase_1 = camelCase;
const camelCase$1 = /* @__PURE__ */ getDefaultExportFromCjs(camelCase_1);
var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee = _baseIteratee;
function mapKeys(object2, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee);
  baseForOwn(object2, function(value, key, object3) {
    baseAssignValue(result, iteratee(value, key, object3), value);
  });
  return result;
}
var mapKeys_1 = mapKeys;
const mapKeys$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapKeys_1);
var toposort$2 = { exports: {} };
toposort$2.exports = function(edges) {
  return toposort(uniqueNodes(edges), edges);
};
toposort$2.exports.array = toposort;
function toposort(nodes, edges) {
  var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
  edges.forEach(function(edge) {
    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
      throw new Error("Unknown node. There is an unknown node in the supplied edges.");
    }
  });
  while (i--) {
    if (!visited[i])
      visit(nodes[i], i, /* @__PURE__ */ new Set());
  }
  return sorted;
  function visit(node, i2, predecessors) {
    if (predecessors.has(node)) {
      var nodeRep;
      try {
        nodeRep = ", node was:" + JSON.stringify(node);
      } catch (e) {
        nodeRep = "";
      }
      throw new Error("Cyclic dependency" + nodeRep);
    }
    if (!nodesHash.has(node)) {
      throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
    }
    if (visited[i2])
      return;
    visited[i2] = true;
    var outgoing = outgoingEdges.get(node) || /* @__PURE__ */ new Set();
    outgoing = Array.from(outgoing);
    if (i2 = outgoing.length) {
      predecessors.add(node);
      do {
        var child = outgoing[--i2];
        visit(child, nodesHash.get(child), predecessors);
      } while (i2);
      predecessors.delete(node);
    }
    sorted[--cursor] = node;
  }
}
function uniqueNodes(arr) {
  var res = /* @__PURE__ */ new Set();
  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i];
    res.add(edge[0]);
    res.add(edge[1]);
  }
  return Array.from(res);
}
function makeOutgoingEdges(arr) {
  var edges = /* @__PURE__ */ new Map();
  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i];
    if (!edges.has(edge[0]))
      edges.set(edge[0], /* @__PURE__ */ new Set());
    if (!edges.has(edge[1]))
      edges.set(edge[1], /* @__PURE__ */ new Set());
    edges.get(edge[0]).add(edge[1]);
  }
  return edges;
}
function makeNodesHash(arr) {
  var res = /* @__PURE__ */ new Map();
  for (var i = 0, len = arr.length; i < len; i++) {
    res.set(arr[i], i);
  }
  return res;
}
var toposortExports = toposort$2.exports;
const toposort$1 = /* @__PURE__ */ getDefaultExportFromCjs(toposortExports);
function sortFields(fields2, excludes = []) {
  let edges = [];
  let nodes = [];
  function addNode(depPath, key) {
    var node = propertyExpr.split(depPath)[0];
    if (!~nodes.indexOf(node))
      nodes.push(node);
    if (!~excludes.indexOf(`${key}-${node}`))
      edges.push([key, node]);
  }
  for (const key in fields2)
    if (has$1(fields2, key)) {
      let value = fields2[key];
      if (!~nodes.indexOf(key))
        nodes.push(key);
      if (Reference.isRef(value) && value.isSibling)
        addNode(value.path, key);
      else if (isSchema(value) && "deps" in value)
        value.deps.forEach((path2) => addNode(path2, key));
    }
  return toposort$1.array(nodes, edges).reverse();
}
function findIndex(arr, err) {
  let idx = Infinity;
  arr.some((key, ii) => {
    var _err$path;
    if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key)) !== -1) {
      idx = ii;
      return true;
    }
  });
  return idx;
}
function sortByKeyOrder(keys2) {
  return (a, b) => {
    return findIndex(keys2, a) - findIndex(keys2, b);
  };
}
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
let isObject$4 = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
function unknown(ctx, value) {
  let known = Object.keys(ctx.fields);
  return Object.keys(value).filter((key) => known.indexOf(key) === -1);
}
const defaultSort = sortByKeyOrder([]);
class ObjectSchema extends BaseSchema {
  constructor(spec) {
    super({
      type: "object"
    });
    this.fields = /* @__PURE__ */ Object.create(null);
    this._sortErrors = defaultSort;
    this._nodes = [];
    this._excludedEdges = [];
    this.withMutation(() => {
      this.transform(function coerce(value) {
        if (typeof value === "string") {
          try {
            value = JSON.parse(value);
          } catch (err) {
            value = null;
          }
        }
        if (this.isType(value))
          return value;
        return null;
      });
      if (spec) {
        this.shape(spec);
      }
    });
  }
  _typeCheck(value) {
    return isObject$4(value) || typeof value === "function";
  }
  _cast(_value, options = {}) {
    var _options$stripUnknown;
    let value = super._cast(_value, options);
    if (value === void 0)
      return this.getDefault();
    if (!this._typeCheck(value))
      return value;
    let fields2 = this.fields;
    let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
    let props = this._nodes.concat(Object.keys(value).filter((v) => this._nodes.indexOf(v) === -1));
    let intermediateValue = {};
    let innerOptions = _extends$1({}, options, {
      parent: intermediateValue,
      __validating: options.__validating || false
    });
    let isChanged = false;
    for (const prop of props) {
      let field = fields2[prop];
      let exists = has$1(value, prop);
      if (field) {
        let fieldValue;
        let inputValue = value[prop];
        innerOptions.path = (options.path ? `${options.path}.` : "") + prop;
        field = field.resolve({
          value: inputValue,
          context: options.context,
          parent: intermediateValue
        });
        let fieldSpec = "spec" in field ? field.spec : void 0;
        let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
        if (fieldSpec == null ? void 0 : fieldSpec.strip) {
          isChanged = isChanged || prop in value;
          continue;
        }
        fieldValue = !options.__validating || !strict ? (
          // TODO: use _cast, this is double resolving
          field.cast(value[prop], innerOptions)
        ) : value[prop];
        if (fieldValue !== void 0) {
          intermediateValue[prop] = fieldValue;
        }
      } else if (exists && !strip) {
        intermediateValue[prop] = value[prop];
      }
      if (intermediateValue[prop] !== value[prop]) {
        isChanged = true;
      }
    }
    return isChanged ? intermediateValue : value;
  }
  _validate(_value, opts = {}, callback) {
    let errors = [];
    let {
      sync: sync2,
      from = [],
      originalValue = _value,
      abortEarly = this.spec.abortEarly,
      recursive = this.spec.recursive
    } = opts;
    from = [{
      schema: this,
      value: originalValue
    }, ...from];
    opts.__validating = true;
    opts.originalValue = originalValue;
    opts.from = from;
    super._validate(_value, opts, (err, value) => {
      if (err) {
        if (!ValidationError.isError(err) || abortEarly) {
          return void callback(err, value);
        }
        errors.push(err);
      }
      if (!recursive || !isObject$4(value)) {
        callback(errors[0] || null, value);
        return;
      }
      originalValue = originalValue || value;
      let tests = this._nodes.map((key) => (_2, cb) => {
        let path2 = key.indexOf(".") === -1 ? (opts.path ? `${opts.path}.` : "") + key : `${opts.path || ""}["${key}"]`;
        let field = this.fields[key];
        if (field && "validate" in field) {
          field.validate(value[key], _extends$1({}, opts, {
            // @ts-ignore
            path: path2,
            from,
            // inner fields are always strict:
            // 1. this isn't strict so the casting will also have cast inner values
            // 2. this is strict in which case the nested values weren't cast either
            strict: true,
            parent: value,
            originalValue: originalValue[key]
          }), cb);
          return;
        }
        cb(null);
      });
      runTests({
        sync: sync2,
        tests,
        value,
        errors,
        endEarly: abortEarly,
        sort: this._sortErrors,
        path: opts.path
      }, callback);
    });
  }
  clone(spec) {
    const next = super.clone(spec);
    next.fields = _extends$1({}, this.fields);
    next._nodes = this._nodes;
    next._excludedEdges = this._excludedEdges;
    next._sortErrors = this._sortErrors;
    return next;
  }
  concat(schema2) {
    let next = super.concat(schema2);
    let nextFields = next.fields;
    for (let [field, schemaOrRef] of Object.entries(this.fields)) {
      const target = nextFields[field];
      if (target === void 0) {
        nextFields[field] = schemaOrRef;
      } else if (target instanceof BaseSchema && schemaOrRef instanceof BaseSchema) {
        nextFields[field] = schemaOrRef.concat(target);
      }
    }
    return next.withMutation(() => next.shape(nextFields));
  }
  getDefaultFromShape() {
    let dft = {};
    this._nodes.forEach((key) => {
      const field = this.fields[key];
      dft[key] = "default" in field ? field.getDefault() : void 0;
    });
    return dft;
  }
  _getDefault() {
    if ("default" in this.spec) {
      return super._getDefault();
    }
    if (!this._nodes.length) {
      return void 0;
    }
    return this.getDefaultFromShape();
  }
  shape(additions, excludes = []) {
    let next = this.clone();
    let fields2 = Object.assign(next.fields, additions);
    next.fields = fields2;
    next._sortErrors = sortByKeyOrder(Object.keys(fields2));
    if (excludes.length) {
      if (!Array.isArray(excludes[0]))
        excludes = [excludes];
      let keys2 = excludes.map(([first, second]) => `${first}-${second}`);
      next._excludedEdges = next._excludedEdges.concat(keys2);
    }
    next._nodes = sortFields(fields2, next._excludedEdges);
    return next;
  }
  pick(keys2) {
    const picked = {};
    for (const key of keys2) {
      if (this.fields[key])
        picked[key] = this.fields[key];
    }
    return this.clone().withMutation((next) => {
      next.fields = {};
      return next.shape(picked);
    });
  }
  omit(keys2) {
    const next = this.clone();
    const fields2 = next.fields;
    next.fields = {};
    for (const key of keys2) {
      delete fields2[key];
    }
    return next.withMutation(() => next.shape(fields2));
  }
  from(from, to, alias) {
    let fromGetter = propertyExpr.getter(from, true);
    return this.transform((obj) => {
      if (obj == null)
        return obj;
      let newObj = obj;
      if (has$1(obj, from)) {
        newObj = _extends$1({}, obj);
        if (!alias)
          delete newObj[from];
        newObj[to] = fromGetter(obj);
      }
      return newObj;
    });
  }
  noUnknown(noAllow = true, message = object.noUnknown) {
    if (typeof noAllow === "string") {
      message = noAllow;
      noAllow = true;
    }
    let next = this.test({
      name: "noUnknown",
      exclusive: true,
      message,
      test(value) {
        if (value == null)
          return true;
        const unknownKeys = unknown(this.schema, value);
        return !noAllow || unknownKeys.length === 0 || this.createError({
          params: {
            unknown: unknownKeys.join(", ")
          }
        });
      }
    });
    next.spec.noUnknown = noAllow;
    return next;
  }
  unknown(allow = true, message = object.noUnknown) {
    return this.noUnknown(!allow, message);
  }
  transformKeys(fn) {
    return this.transform((obj) => obj && mapKeys$1(obj, (_2, key) => fn(key)));
  }
  camelCase() {
    return this.transformKeys(camelCase$1);
  }
  snakeCase() {
    return this.transformKeys(snakeCase$1);
  }
  constantCase() {
    return this.transformKeys((key) => snakeCase$1(key).toUpperCase());
  }
  describe() {
    let base = super.describe();
    base.fields = mapValues$1(this.fields, (value) => value.describe());
    return base;
  }
}
function create$1(spec) {
  return new ObjectSchema(spec);
}
create$1.prototype = ObjectSchema.prototype;
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function create(type2) {
  return new ArraySchema(type2);
}
class ArraySchema extends BaseSchema {
  constructor(type2) {
    super({
      type: "array"
    });
    this.innerType = type2;
    this.withMutation(() => {
      this.transform(function(values) {
        if (typeof values === "string")
          try {
            values = JSON.parse(values);
          } catch (err) {
            values = null;
          }
        return this.isType(values) ? values : null;
      });
    });
  }
  _typeCheck(v) {
    return Array.isArray(v);
  }
  get _subType() {
    return this.innerType;
  }
  _cast(_value, _opts) {
    const value = super._cast(_value, _opts);
    if (!this._typeCheck(value) || !this.innerType)
      return value;
    let isChanged = false;
    const castArray2 = value.map((v, idx) => {
      const castElement = this.innerType.cast(v, _extends({}, _opts, {
        path: `${_opts.path || ""}[${idx}]`
      }));
      if (castElement !== v) {
        isChanged = true;
      }
      return castElement;
    });
    return isChanged ? castArray2 : value;
  }
  _validate(_value, options = {}, callback) {
    var _options$abortEarly, _options$recursive;
    let errors = [];
    let sync2 = options.sync;
    let path2 = options.path;
    let innerType = this.innerType;
    let endEarly = (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly;
    let recursive = (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive;
    let originalValue = options.originalValue != null ? options.originalValue : _value;
    super._validate(_value, options, (err, value) => {
      if (err) {
        if (!ValidationError.isError(err) || endEarly) {
          return void callback(err, value);
        }
        errors.push(err);
      }
      if (!recursive || !innerType || !this._typeCheck(value)) {
        callback(errors[0] || null, value);
        return;
      }
      originalValue = originalValue || value;
      let tests = new Array(value.length);
      for (let idx = 0; idx < value.length; idx++) {
        let item = value[idx];
        let path3 = `${options.path || ""}[${idx}]`;
        let innerOptions = _extends({}, options, {
          path: path3,
          strict: true,
          parent: value,
          index: idx,
          originalValue: originalValue[idx]
        });
        tests[idx] = (_2, cb) => innerType.validate(item, innerOptions, cb);
      }
      runTests({
        sync: sync2,
        path: path2,
        value,
        errors,
        endEarly,
        tests
      }, callback);
    });
  }
  clone(spec) {
    const next = super.clone(spec);
    next.innerType = this.innerType;
    return next;
  }
  concat(schema2) {
    let next = super.concat(schema2);
    next.innerType = this.innerType;
    if (schema2.innerType)
      next.innerType = next.innerType ? (
        // @ts-expect-error Lazy doesn't have concat()
        next.innerType.concat(schema2.innerType)
      ) : schema2.innerType;
    return next;
  }
  of(schema2) {
    let next = this.clone();
    if (!isSchema(schema2))
      throw new TypeError("`array.of()` sub-schema must be a valid yup schema not: " + printValue$1(schema2));
    next.innerType = schema2;
    return next;
  }
  length(length, message = array.length) {
    return this.test({
      message,
      name: "length",
      exclusive: true,
      params: {
        length
      },
      test(value) {
        return isAbsent(value) || value.length === this.resolve(length);
      }
    });
  }
  min(min, message) {
    message = message || array.min;
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      // FIXME(ts): Array<typeof T>
      test(value) {
        return isAbsent(value) || value.length >= this.resolve(min);
      }
    });
  }
  max(max2, message) {
    message = message || array.max;
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max: max2
      },
      test(value) {
        return isAbsent(value) || value.length <= this.resolve(max2);
      }
    });
  }
  ensure() {
    return this.default(() => []).transform((val, original) => {
      if (this._typeCheck(val))
        return val;
      return original == null ? [] : [].concat(original);
    });
  }
  compact(rejector) {
    let reject = !rejector ? (v) => !!v : (v, i, a) => !rejector(v, i, a);
    return this.transform((values) => values != null ? values.filter(reject) : values);
  }
  describe() {
    let base = super.describe();
    if (this.innerType)
      base.innerType = this.innerType.describe();
    return base;
  }
  nullable(isNullable = true) {
    return super.nullable(isNullable);
  }
  defined() {
    return super.defined();
  }
  required(msg) {
    return super.required(msg);
  }
}
create.prototype = ArraySchema.prototype;
function setLocale(custom) {
  Object.keys(custom).forEach((type2) => {
    Object.keys(custom[type2]).forEach((method) => {
      locale[type2][method] = custom[type2][method];
    });
  });
}
function addMethod(schemaType, name, fn) {
  if (!schemaType || !isSchema(schemaType.prototype))
    throw new TypeError("You must provide a yup schema constructor function");
  if (typeof name !== "string")
    throw new TypeError("A Method name must be provided");
  if (typeof fn !== "function")
    throw new TypeError("Method function must be provided");
  schemaType.prototype[name] = fn;
}
var httpErrors = { exports: {} };
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var browser = depd;
function depd(namespace) {
  if (!namespace) {
    throw new TypeError("argument namespace is required");
  }
  function deprecate(message) {
  }
  deprecate._file = void 0;
  deprecate._ignored = true;
  deprecate._namespace = namespace;
  deprecate._traced = false;
  deprecate._warned = /* @__PURE__ */ Object.create(null);
  deprecate.function = wrapfunction;
  deprecate.property = wrapproperty;
  return deprecate;
}
function wrapfunction(fn, message) {
  if (typeof fn !== "function") {
    throw new TypeError("argument fn must be a function");
  }
  return fn;
}
function wrapproperty(obj, prop, message) {
  if (!obj || typeof obj !== "object" && typeof obj !== "function") {
    throw new TypeError("argument obj must be object");
  }
  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
  if (!descriptor) {
    throw new TypeError("must call property on owner object");
  }
  if (!descriptor.configurable) {
    throw new TypeError("property must be configurable");
  }
}
var setprototypeof = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
function setProtoOf(obj, proto) {
  obj.__proto__ = proto;
  return obj;
}
function mixinProperties(obj, proto) {
  for (var prop in proto) {
    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
      obj[prop] = proto[prop];
    }
  }
  return obj;
}
const require$$0 = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "103": "Early Hints",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a Teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Too Early",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */
var codes = require$$0;
var statuses = status;
status.message = codes;
status.code = createMessageToStatusCodeMap(codes);
status.codes = createStatusCodeList(codes);
status.redirect = {
  300: true,
  301: true,
  302: true,
  303: true,
  305: true,
  307: true,
  308: true
};
status.empty = {
  204: true,
  205: true,
  304: true
};
status.retry = {
  502: true,
  503: true,
  504: true
};
function createMessageToStatusCodeMap(codes2) {
  var map2 = {};
  Object.keys(codes2).forEach(function forEachCode(code) {
    var message = codes2[code];
    var status2 = Number(code);
    map2[message.toLowerCase()] = status2;
  });
  return map2;
}
function createStatusCodeList(codes2) {
  return Object.keys(codes2).map(function mapCode(code) {
    return Number(code);
  });
}
function getStatusCode(message) {
  var msg = message.toLowerCase();
  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
    throw new Error('invalid status message: "' + message + '"');
  }
  return status.code[msg];
}
function getStatusMessage(code) {
  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
    throw new Error("invalid status code: " + code);
  }
  return status.message[code];
}
function status(code) {
  if (typeof code === "number") {
    return getStatusMessage(code);
  }
  if (typeof code !== "string") {
    throw new TypeError("code must be a number or string");
  }
  var n = parseInt(code, 10);
  if (!isNaN(n)) {
    return getStatusMessage(n);
  }
  return getStatusCode(code);
}
var inherits_browser = { exports: {} };
if (typeof Object.create === "function") {
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}
var inherits_browserExports = inherits_browser.exports;
/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */
var toidentifier = toIdentifier;
function toIdentifier(str2) {
  return str2.split(" ").map(function(token) {
    return token.slice(0, 1).toUpperCase() + token.slice(1);
  }).join("").replace(/[^ _0-9a-z]/gi, "");
}
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */
(function(module) {
  browser("http-errors");
  var setPrototypeOf = setprototypeof;
  var statuses$1 = statuses;
  var inherits = inherits_browserExports;
  var toIdentifier2 = toidentifier;
  module.exports = createError;
  module.exports.HttpError = createHttpErrorConstructor();
  module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);
  populateConstructorExports(module.exports, statuses$1.codes, module.exports.HttpError);
  function codeClass(status2) {
    return Number(String(status2).charAt(0) + "00");
  }
  function createError() {
    var err;
    var msg;
    var status2 = 500;
    var props = {};
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      var type2 = typeof arg;
      if (type2 === "object" && arg instanceof Error) {
        err = arg;
        status2 = err.status || err.statusCode || status2;
      } else if (type2 === "number" && i === 0) {
        status2 = arg;
      } else if (type2 === "string") {
        msg = arg;
      } else if (type2 === "object") {
        props = arg;
      } else {
        throw new TypeError("argument #" + (i + 1) + " unsupported type " + type2);
      }
    }
    if (typeof status2 !== "number" || !statuses$1.message[status2] && (status2 < 400 || status2 >= 600)) {
      status2 = 500;
    }
    var HttpError = createError[status2] || createError[codeClass(status2)];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses$1.message[status2]);
      Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status2) {
      err.expose = status2 < 500;
      err.status = err.statusCode = status2;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err[key] = props[key];
      }
    }
    return err;
  }
  function createHttpErrorConstructor() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  }
  function createClientErrorConstructor(HttpError, name, code) {
    var className = toClassName(name);
    function ClientError(message) {
      var msg = message != null ? message : statuses$1.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ClientError);
      setPrototypeOf(err, ClientError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
  }
  function createIsHttpErrorFunction(HttpError) {
    return function isHttpError(val) {
      if (!val || typeof val !== "object") {
        return false;
      }
      if (val instanceof HttpError) {
        return true;
      }
      return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
    };
  }
  function createServerErrorConstructor(HttpError, name, code) {
    var className = toClassName(name);
    function ServerError(message) {
      var msg = message != null ? message : statuses$1.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ServerError);
      setPrototypeOf(err, ServerError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
  }
  function nameFunc(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  }
  function populateConstructorExports(exports, codes2, HttpError) {
    codes2.forEach(function forEachCode(code) {
      var CodeError;
      var name = toIdentifier2(statuses$1.message[code]);
      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break;
      }
      if (CodeError) {
        exports[code] = CodeError;
        exports[name] = CodeError;
      }
    });
  }
  function toClassName(name) {
    return name.substr(-5) !== "Error" ? name + "Error" : name;
  }
})(httpErrors);
var indentString$2 = (string2, count = 1, options) => {
  options = {
    indent: " ",
    includeEmptyLines: false,
    ...options
  };
  if (typeof string2 !== "string") {
    throw new TypeError(
      `Expected \`input\` to be a \`string\`, got \`${typeof string2}\``
    );
  }
  if (typeof count !== "number") {
    throw new TypeError(
      `Expected \`count\` to be a \`number\`, got \`${typeof count}\``
    );
  }
  if (typeof options.indent !== "string") {
    throw new TypeError(
      `Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``
    );
  }
  if (count === 0) {
    return string2;
  }
  const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
  return string2.replace(regex, options.indent.repeat(count));
};
const os$1 = require$$0$3;
const extractPathRegex = /\s+at.*(?:\(|\s)(.*)\)?/;
const pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
const homeDir = typeof os$1.homedir === "undefined" ? "" : os$1.homedir();
var cleanStack$1 = (stack, options) => {
  options = Object.assign({ pretty: false }, options);
  return stack.replace(/\\/g, "/").split("\n").filter((line) => {
    const pathMatches = line.match(extractPathRegex);
    if (pathMatches === null || !pathMatches[1]) {
      return true;
    }
    const match = pathMatches[1];
    if (match.includes(".app/Contents/Resources/electron.asar") || match.includes(".app/Contents/Resources/default_app.asar")) {
      return false;
    }
    return !pathRegex.test(match);
  }).filter((line) => line.trim() !== "").map((line) => {
    if (options.pretty) {
      return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, "~")));
    }
    return line;
  }).join("\n");
};
const indentString$1 = indentString$2;
const cleanStack = cleanStack$1;
const cleanInternalStack = (stack) => stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, "");
let AggregateError$2 = class AggregateError2 extends Error {
  constructor(errors) {
    if (!Array.isArray(errors)) {
      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
    }
    errors = [...errors].map((error2) => {
      if (error2 instanceof Error) {
        return error2;
      }
      if (error2 !== null && typeof error2 === "object") {
        return Object.assign(new Error(error2.message), error2);
      }
      return new Error(error2);
    });
    let message = errors.map((error2) => {
      return typeof error2.stack === "string" ? cleanInternalStack(cleanStack(error2.stack)) : String(error2);
    }).join("\n");
    message = "\n" + indentString$1(message, 4);
    super(message);
    this.name = "AggregateError";
    Object.defineProperty(this, "_errors", { value: errors });
  }
  *[Symbol.iterator]() {
    for (const error2 of this._errors) {
      yield error2;
    }
  }
};
var aggregateError = AggregateError$2;
const AggregateError$1 = aggregateError;
var pMap = async (iterable, mapper, {
  concurrency = Infinity,
  stopOnError = true
} = {}) => {
  return new Promise((resolve, reject) => {
    if (typeof mapper !== "function") {
      throw new TypeError("Mapper function is required");
    }
    if (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`);
    }
    const result = [];
    const errors = [];
    const iterator = iterable[Symbol.iterator]();
    let isRejected = false;
    let isIterableDone = false;
    let resolvingCount = 0;
    let currentIndex = 0;
    const next = () => {
      if (isRejected) {
        return;
      }
      const nextItem = iterator.next();
      const index2 = currentIndex;
      currentIndex++;
      if (nextItem.done) {
        isIterableDone = true;
        if (resolvingCount === 0) {
          if (!stopOnError && errors.length !== 0) {
            reject(new AggregateError$1(errors));
          } else {
            resolve(result);
          }
        }
        return;
      }
      resolvingCount++;
      (async () => {
        try {
          const element = await nextItem.value;
          result[index2] = await mapper(element, index2);
          resolvingCount--;
          next();
        } catch (error2) {
          if (stopOnError) {
            isRejected = true;
            reject(error2);
          } else {
            errors.push(error2);
            resolvingCount--;
            next();
          }
        }
      })();
    };
    for (let i = 0; i < concurrency; i++) {
      next();
      if (isIterableDone) {
        break;
      }
    }
  });
};
const pMap$1 = /* @__PURE__ */ getDefaultExportFromCjs(pMap);
var execa$1 = { exports: {} };
var crossSpawn$1 = { exports: {} };
var windows;
var hasRequiredWindows;
function requireWindows() {
  if (hasRequiredWindows)
    return windows;
  hasRequiredWindows = 1;
  windows = isexe2;
  isexe2.sync = sync2;
  var fs2 = require$$0$4;
  function checkPathExt(path2, options) {
    var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p = pathext[i].toLowerCase();
      if (p && path2.substr(-p.length).toLowerCase() === p) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat2, path2, options) {
    if (!stat2.isSymbolicLink() && !stat2.isFile()) {
      return false;
    }
    return checkPathExt(path2, options);
  }
  function isexe2(path2, options, cb) {
    fs2.stat(path2, function(er, stat2) {
      cb(er, er ? false : checkStat(stat2, path2, options));
    });
  }
  function sync2(path2, options) {
    return checkStat(fs2.statSync(path2), path2, options);
  }
  return windows;
}
var mode;
var hasRequiredMode;
function requireMode() {
  if (hasRequiredMode)
    return mode;
  hasRequiredMode = 1;
  mode = isexe2;
  isexe2.sync = sync2;
  var fs2 = require$$0$4;
  function isexe2(path2, options, cb) {
    fs2.stat(path2, function(er, stat2) {
      cb(er, er ? false : checkStat(stat2, options));
    });
  }
  function sync2(path2, options) {
    return checkStat(fs2.statSync(path2), options);
  }
  function checkStat(stat2, options) {
    return stat2.isFile() && checkMode(stat2, options);
  }
  function checkMode(stat2, options) {
    var mod = stat2.mode;
    var uid = stat2.uid;
    var gid = stat2.gid;
    var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
    var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
    var u2 = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o = parseInt("001", 8);
    var ug = u2 | g;
    var ret = mod & o || mod & g && gid === myGid || mod & u2 && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
  return mode;
}
var core$3;
if (process.platform === "win32" || commonjsGlobal.TESTING_WINDOWS) {
  core$3 = requireWindows();
} else {
  core$3 = requireMode();
}
var isexe_1 = isexe$1;
isexe$1.sync = sync;
function isexe$1(path2, options, cb) {
  if (typeof options === "function") {
    cb = options;
    options = {};
  }
  if (!cb) {
    if (typeof Promise !== "function") {
      throw new TypeError("callback not provided");
    }
    return new Promise(function(resolve, reject) {
      isexe$1(path2, options || {}, function(er, is) {
        if (er) {
          reject(er);
        } else {
          resolve(is);
        }
      });
    });
  }
  core$3(path2, options || {}, function(er, is) {
    if (er) {
      if (er.code === "EACCES" || options && options.ignoreErrors) {
        er = null;
        is = false;
      }
    }
    cb(er, is);
  });
}
function sync(path2, options) {
  try {
    return core$3.sync(path2, options || {});
  } catch (er) {
    if (options && options.ignoreErrors || er.code === "EACCES") {
      return false;
    } else {
      throw er;
    }
  }
}
const isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
const path$k = require$$0$5;
const COLON = isWindows ? ";" : ":";
const isexe = isexe_1;
const getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
const getPathInfo = (cmd, opt) => {
  const colon = opt.colon || COLON;
  const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
    // windows always checks the cwd first
    ...isWindows ? [process.cwd()] : [],
    ...(opt.path || process.env.PATH || /* istanbul ignore next: very unusual */
    "").split(colon)
  ];
  const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
  const pathExt = isWindows ? pathExtExe.split(colon) : [""];
  if (isWindows) {
    if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
      pathExt.unshift("");
  }
  return {
    pathEnv,
    pathExt,
    pathExtExe
  };
};
const which$1 = (cmd, opt, cb) => {
  if (typeof opt === "function") {
    cb = opt;
    opt = {};
  }
  if (!opt)
    opt = {};
  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
  const found = [];
  const step = (i) => new Promise((resolve, reject) => {
    if (i === pathEnv.length)
      return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
    const ppRaw = pathEnv[i];
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
    const pCmd = path$k.join(pathPart, cmd);
    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
    resolve(subStep(p, i, 0));
  });
  const subStep = (p, i, ii) => new Promise((resolve, reject) => {
    if (ii === pathExt.length)
      return resolve(step(i + 1));
    const ext = pathExt[ii];
    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
      if (!er && is) {
        if (opt.all)
          found.push(p + ext);
        else
          return resolve(p + ext);
      }
      return resolve(subStep(p, i, ii + 1));
    });
  });
  return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
};
const whichSync = (cmd, opt) => {
  opt = opt || {};
  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
  const found = [];
  for (let i = 0; i < pathEnv.length; i++) {
    const ppRaw = pathEnv[i];
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
    const pCmd = path$k.join(pathPart, cmd);
    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
    for (let j = 0; j < pathExt.length; j++) {
      const cur = p + pathExt[j];
      try {
        const is = isexe.sync(cur, { pathExt: pathExtExe });
        if (is) {
          if (opt.all)
            found.push(cur);
          else
            return cur;
        }
      } catch (ex) {
      }
    }
  }
  if (opt.all && found.length)
    return found;
  if (opt.nothrow)
    return null;
  throw getNotFoundError(cmd);
};
var which_1 = which$1;
which$1.sync = whichSync;
var pathKey$1 = { exports: {} };
const pathKey = (options = {}) => {
  const environment = options.env || process.env;
  const platform2 = options.platform || process.platform;
  if (platform2 !== "win32") {
    return "PATH";
  }
  return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
};
pathKey$1.exports = pathKey;
pathKey$1.exports.default = pathKey;
var pathKeyExports = pathKey$1.exports;
const path$j = require$$0$5;
const which = which_1;
const getPathKey = pathKeyExports;
function resolveCommandAttempt(parsed, withoutPathExt) {
  const env2 = parsed.options.env || process.env;
  const cwd2 = process.cwd();
  const hasCustomCwd = parsed.options.cwd != null;
  const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
  if (shouldSwitchCwd) {
    try {
      process.chdir(parsed.options.cwd);
    } catch (err) {
    }
  }
  let resolved;
  try {
    resolved = which.sync(parsed.command, {
      path: env2[getPathKey({ env: env2 })],
      pathExt: withoutPathExt ? path$j.delimiter : void 0
    });
  } catch (e) {
  } finally {
    if (shouldSwitchCwd) {
      process.chdir(cwd2);
    }
  }
  if (resolved) {
    resolved = path$j.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
  }
  return resolved;
}
function resolveCommand$1(parsed) {
  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
}
var resolveCommand_1 = resolveCommand$1;
var _escape = {};
const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
function escapeCommand(arg) {
  arg = arg.replace(metaCharsRegExp, "^$1");
  return arg;
}
function escapeArgument(arg, doubleEscapeMetaChars) {
  arg = `${arg}`;
  arg = arg.replace(/(\\*)"/g, '$1$1\\"');
  arg = arg.replace(/(\\*)$/, "$1$1");
  arg = `"${arg}"`;
  arg = arg.replace(metaCharsRegExp, "^$1");
  if (doubleEscapeMetaChars) {
    arg = arg.replace(metaCharsRegExp, "^$1");
  }
  return arg;
}
_escape.command = escapeCommand;
_escape.argument = escapeArgument;
var shebangRegex$1 = /^#!(.*)/;
const shebangRegex = shebangRegex$1;
var shebangCommand$1 = (string2 = "") => {
  const match = string2.match(shebangRegex);
  if (!match) {
    return null;
  }
  const [path2, argument] = match[0].replace(/#! ?/, "").split(" ");
  const binary2 = path2.split("/").pop();
  if (binary2 === "env") {
    return argument;
  }
  return argument ? `${binary2} ${argument}` : binary2;
};
const fs$o = require$$0$4;
const shebangCommand = shebangCommand$1;
function readShebang$1(command2) {
  const size = 150;
  const buffer = Buffer.alloc(size);
  let fd;
  try {
    fd = fs$o.openSync(command2, "r");
    fs$o.readSync(fd, buffer, 0, size, 0);
    fs$o.closeSync(fd);
  } catch (e) {
  }
  return shebangCommand(buffer.toString());
}
var readShebang_1 = readShebang$1;
const path$i = require$$0$5;
const resolveCommand = resolveCommand_1;
const escape$1 = _escape;
const readShebang = readShebang_1;
const isWin$2 = process.platform === "win32";
const isExecutableRegExp = /\.(?:com|exe)$/i;
const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
function detectShebang(parsed) {
  parsed.file = resolveCommand(parsed);
  const shebang = parsed.file && readShebang(parsed.file);
  if (shebang) {
    parsed.args.unshift(parsed.file);
    parsed.command = shebang;
    return resolveCommand(parsed);
  }
  return parsed.file;
}
function parseNonShell(parsed) {
  if (!isWin$2) {
    return parsed;
  }
  const commandFile = detectShebang(parsed);
  const needsShell = !isExecutableRegExp.test(commandFile);
  if (parsed.options.forceShell || needsShell) {
    const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
    parsed.command = path$i.normalize(parsed.command);
    parsed.command = escape$1.command(parsed.command);
    parsed.args = parsed.args.map((arg) => escape$1.argument(arg, needsDoubleEscapeMetaChars));
    const shellCommand = [parsed.command].concat(parsed.args).join(" ");
    parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
    parsed.command = process.env.comspec || "cmd.exe";
    parsed.options.windowsVerbatimArguments = true;
  }
  return parsed;
}
function parse$6(command2, args, options) {
  if (args && !Array.isArray(args)) {
    options = args;
    args = null;
  }
  args = args ? args.slice(0) : [];
  options = Object.assign({}, options);
  const parsed = {
    command: command2,
    args,
    options,
    file: void 0,
    original: {
      command: command2,
      args
    }
  };
  return options.shell ? parsed : parseNonShell(parsed);
}
var parse_1$2 = parse$6;
const isWin$1 = process.platform === "win32";
function notFoundError(original, syscall) {
  return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
    code: "ENOENT",
    errno: "ENOENT",
    syscall: `${syscall} ${original.command}`,
    path: original.command,
    spawnargs: original.args
  });
}
function hookChildProcess(cp2, parsed) {
  if (!isWin$1) {
    return;
  }
  const originalEmit = cp2.emit;
  cp2.emit = function(name, arg1) {
    if (name === "exit") {
      const err = verifyENOENT(arg1, parsed);
      if (err) {
        return originalEmit.call(cp2, "error", err);
      }
    }
    return originalEmit.apply(cp2, arguments);
  };
}
function verifyENOENT(status2, parsed) {
  if (isWin$1 && status2 === 1 && !parsed.file) {
    return notFoundError(parsed.original, "spawn");
  }
  return null;
}
function verifyENOENTSync(status2, parsed) {
  if (isWin$1 && status2 === 1 && !parsed.file) {
    return notFoundError(parsed.original, "spawnSync");
  }
  return null;
}
var enoent$1 = {
  hookChildProcess,
  verifyENOENT,
  verifyENOENTSync,
  notFoundError
};
const cp = require$$0$2;
const parse$5 = parse_1$2;
const enoent = enoent$1;
function spawn(command2, args, options) {
  const parsed = parse$5(command2, args, options);
  const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
  enoent.hookChildProcess(spawned, parsed);
  return spawned;
}
function spawnSync(command2, args, options) {
  const parsed = parse$5(command2, args, options);
  const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
  result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
  return result;
}
crossSpawn$1.exports = spawn;
crossSpawn$1.exports.spawn = spawn;
crossSpawn$1.exports.sync = spawnSync;
crossSpawn$1.exports._parse = parse$5;
crossSpawn$1.exports._enoent = enoent;
var crossSpawnExports = crossSpawn$1.exports;
var stripFinalNewline$1 = (input) => {
  const LF = typeof input === "string" ? "\n" : "\n".charCodeAt();
  const CR = typeof input === "string" ? "\r" : "\r".charCodeAt();
  if (input[input.length - 1] === LF) {
    input = input.slice(0, input.length - 1);
  }
  if (input[input.length - 1] === CR) {
    input = input.slice(0, input.length - 1);
  }
  return input;
};
var npmRunPath$1 = { exports: {} };
npmRunPath$1.exports;
(function(module) {
  const path2 = require$$0$5;
  const pathKey2 = pathKeyExports;
  const npmRunPath2 = (options) => {
    options = {
      cwd: process.cwd(),
      path: process.env[pathKey2()],
      execPath: process.execPath,
      ...options
    };
    let previous;
    let cwdPath = path2.resolve(options.cwd);
    const result = [];
    while (previous !== cwdPath) {
      result.push(path2.join(cwdPath, "node_modules/.bin"));
      previous = cwdPath;
      cwdPath = path2.resolve(cwdPath, "..");
    }
    const execPathDir = path2.resolve(options.cwd, options.execPath, "..");
    result.push(execPathDir);
    return result.concat(options.path).join(path2.delimiter);
  };
  module.exports = npmRunPath2;
  module.exports.default = npmRunPath2;
  module.exports.env = (options) => {
    options = {
      env: process.env,
      ...options
    };
    const env2 = { ...options.env };
    const path3 = pathKey2({ env: env2 });
    options.path = env2[path3];
    env2[path3] = module.exports(options);
    return env2;
  };
})(npmRunPath$1);
var npmRunPathExports = npmRunPath$1.exports;
var onetime$2 = { exports: {} };
var mimicFn$2 = { exports: {} };
const mimicFn$1 = (to, from) => {
  for (const prop of Reflect.ownKeys(from)) {
    Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
  }
  return to;
};
mimicFn$2.exports = mimicFn$1;
mimicFn$2.exports.default = mimicFn$1;
var mimicFnExports = mimicFn$2.exports;
const mimicFn = mimicFnExports;
const calledFunctions = /* @__PURE__ */ new WeakMap();
const onetime$1 = (function_, options = {}) => {
  if (typeof function_ !== "function") {
    throw new TypeError("Expected a function");
  }
  let returnValue;
  let callCount = 0;
  const functionName = function_.displayName || function_.name || "<anonymous>";
  const onetime2 = function(...arguments_) {
    calledFunctions.set(onetime2, ++callCount);
    if (callCount === 1) {
      returnValue = function_.apply(this, arguments_);
      function_ = null;
    } else if (options.throw === true) {
      throw new Error(`Function \`${functionName}\` can only be called once`);
    }
    return returnValue;
  };
  mimicFn(onetime2, function_);
  calledFunctions.set(onetime2, callCount);
  return onetime2;
};
onetime$2.exports = onetime$1;
onetime$2.exports.default = onetime$1;
onetime$2.exports.callCount = (function_) => {
  if (!calledFunctions.has(function_)) {
    throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
  }
  return calledFunctions.get(function_);
};
var onetimeExports = onetime$2.exports;
var main = {};
var signals$2 = {};
var core$2 = {};
Object.defineProperty(core$2, "__esModule", { value: true });
core$2.SIGNALS = void 0;
const SIGNALS = [
  {
    name: "SIGHUP",
    number: 1,
    action: "terminate",
    description: "Terminal closed",
    standard: "posix"
  },
  {
    name: "SIGINT",
    number: 2,
    action: "terminate",
    description: "User interruption with CTRL-C",
    standard: "ansi"
  },
  {
    name: "SIGQUIT",
    number: 3,
    action: "core",
    description: "User interruption with CTRL-\\",
    standard: "posix"
  },
  {
    name: "SIGILL",
    number: 4,
    action: "core",
    description: "Invalid machine instruction",
    standard: "ansi"
  },
  {
    name: "SIGTRAP",
    number: 5,
    action: "core",
    description: "Debugger breakpoint",
    standard: "posix"
  },
  {
    name: "SIGABRT",
    number: 6,
    action: "core",
    description: "Aborted",
    standard: "ansi"
  },
  {
    name: "SIGIOT",
    number: 6,
    action: "core",
    description: "Aborted",
    standard: "bsd"
  },
  {
    name: "SIGBUS",
    number: 7,
    action: "core",
    description: "Bus error due to misaligned, non-existing address or paging error",
    standard: "bsd"
  },
  {
    name: "SIGEMT",
    number: 7,
    action: "terminate",
    description: "Command should be emulated but is not implemented",
    standard: "other"
  },
  {
    name: "SIGFPE",
    number: 8,
    action: "core",
    description: "Floating point arithmetic error",
    standard: "ansi"
  },
  {
    name: "SIGKILL",
    number: 9,
    action: "terminate",
    description: "Forced termination",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGUSR1",
    number: 10,
    action: "terminate",
    description: "Application-specific signal",
    standard: "posix"
  },
  {
    name: "SIGSEGV",
    number: 11,
    action: "core",
    description: "Segmentation fault",
    standard: "ansi"
  },
  {
    name: "SIGUSR2",
    number: 12,
    action: "terminate",
    description: "Application-specific signal",
    standard: "posix"
  },
  {
    name: "SIGPIPE",
    number: 13,
    action: "terminate",
    description: "Broken pipe or socket",
    standard: "posix"
  },
  {
    name: "SIGALRM",
    number: 14,
    action: "terminate",
    description: "Timeout or timer",
    standard: "posix"
  },
  {
    name: "SIGTERM",
    number: 15,
    action: "terminate",
    description: "Termination",
    standard: "ansi"
  },
  {
    name: "SIGSTKFLT",
    number: 16,
    action: "terminate",
    description: "Stack is empty or overflowed",
    standard: "other"
  },
  {
    name: "SIGCHLD",
    number: 17,
    action: "ignore",
    description: "Child process terminated, paused or unpaused",
    standard: "posix"
  },
  {
    name: "SIGCLD",
    number: 17,
    action: "ignore",
    description: "Child process terminated, paused or unpaused",
    standard: "other"
  },
  {
    name: "SIGCONT",
    number: 18,
    action: "unpause",
    description: "Unpaused",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGSTOP",
    number: 19,
    action: "pause",
    description: "Paused",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGTSTP",
    number: 20,
    action: "pause",
    description: 'Paused using CTRL-Z or "suspend"',
    standard: "posix"
  },
  {
    name: "SIGTTIN",
    number: 21,
    action: "pause",
    description: "Background process cannot read terminal input",
    standard: "posix"
  },
  {
    name: "SIGBREAK",
    number: 21,
    action: "terminate",
    description: "User interruption with CTRL-BREAK",
    standard: "other"
  },
  {
    name: "SIGTTOU",
    number: 22,
    action: "pause",
    description: "Background process cannot write to terminal output",
    standard: "posix"
  },
  {
    name: "SIGURG",
    number: 23,
    action: "ignore",
    description: "Socket received out-of-band data",
    standard: "bsd"
  },
  {
    name: "SIGXCPU",
    number: 24,
    action: "core",
    description: "Process timed out",
    standard: "bsd"
  },
  {
    name: "SIGXFSZ",
    number: 25,
    action: "core",
    description: "File too big",
    standard: "bsd"
  },
  {
    name: "SIGVTALRM",
    number: 26,
    action: "terminate",
    description: "Timeout or timer",
    standard: "bsd"
  },
  {
    name: "SIGPROF",
    number: 27,
    action: "terminate",
    description: "Timeout or timer",
    standard: "bsd"
  },
  {
    name: "SIGWINCH",
    number: 28,
    action: "ignore",
    description: "Terminal window size changed",
    standard: "bsd"
  },
  {
    name: "SIGIO",
    number: 29,
    action: "terminate",
    description: "I/O is available",
    standard: "other"
  },
  {
    name: "SIGPOLL",
    number: 29,
    action: "terminate",
    description: "Watched event",
    standard: "other"
  },
  {
    name: "SIGINFO",
    number: 29,
    action: "ignore",
    description: "Request for process information",
    standard: "other"
  },
  {
    name: "SIGPWR",
    number: 30,
    action: "terminate",
    description: "Device running out of power",
    standard: "systemv"
  },
  {
    name: "SIGSYS",
    number: 31,
    action: "core",
    description: "Invalid system call",
    standard: "other"
  },
  {
    name: "SIGUNUSED",
    number: 31,
    action: "terminate",
    description: "Invalid system call",
    standard: "other"
  }
];
core$2.SIGNALS = SIGNALS;
var realtime = {};
Object.defineProperty(realtime, "__esModule", { value: true });
realtime.SIGRTMAX = realtime.getRealtimeSignals = void 0;
const getRealtimeSignals = function() {
  const length = SIGRTMAX - SIGRTMIN + 1;
  return Array.from({ length }, getRealtimeSignal);
};
realtime.getRealtimeSignals = getRealtimeSignals;
const getRealtimeSignal = function(value, index2) {
  return {
    name: `SIGRT${index2 + 1}`,
    number: SIGRTMIN + index2,
    action: "terminate",
    description: "Application-specific signal (realtime)",
    standard: "posix"
  };
};
const SIGRTMIN = 34;
const SIGRTMAX = 64;
realtime.SIGRTMAX = SIGRTMAX;
Object.defineProperty(signals$2, "__esModule", { value: true });
signals$2.getSignals = void 0;
var _os$1 = require$$0$3;
var _core = core$2;
var _realtime$1 = realtime;
const getSignals = function() {
  const realtimeSignals = (0, _realtime$1.getRealtimeSignals)();
  const signals = [..._core.SIGNALS, ...realtimeSignals].map(normalizeSignal);
  return signals;
};
signals$2.getSignals = getSignals;
const normalizeSignal = function({
  name,
  number: defaultNumber,
  description,
  action,
  forced = false,
  standard
}) {
  const {
    signals: { [name]: constantSignal }
  } = _os$1.constants;
  const supported = constantSignal !== void 0;
  const number2 = supported ? constantSignal : defaultNumber;
  return { name, number: number2, description, supported, action, forced, standard };
};
Object.defineProperty(main, "__esModule", { value: true });
main.signalsByNumber = main.signalsByName = void 0;
var _os = require$$0$3;
var _signals = signals$2;
var _realtime = realtime;
const getSignalsByName = function() {
  const signals = (0, _signals.getSignals)();
  return signals.reduce(getSignalByName, {});
};
const getSignalByName = function(signalByNameMemo, { name, number: number2, description, supported, action, forced, standard }) {
  return {
    ...signalByNameMemo,
    [name]: { name, number: number2, description, supported, action, forced, standard }
  };
};
const signalsByName$1 = getSignalsByName();
main.signalsByName = signalsByName$1;
const getSignalsByNumber = function() {
  const signals = (0, _signals.getSignals)();
  const length = _realtime.SIGRTMAX + 1;
  const signalsA = Array.from({ length }, (value, number2) => getSignalByNumber(number2, signals));
  return Object.assign({}, ...signalsA);
};
const getSignalByNumber = function(number2, signals) {
  const signal = findSignalByNumber(number2, signals);
  if (signal === void 0) {
    return {};
  }
  const { name, description, supported, action, forced, standard } = signal;
  return {
    [number2]: {
      name,
      number: number2,
      description,
      supported,
      action,
      forced,
      standard
    }
  };
};
const findSignalByNumber = function(number2, signals) {
  const signal = signals.find(({ name }) => _os.constants.signals[name] === number2);
  if (signal !== void 0) {
    return signal;
  }
  return signals.find((signalA) => signalA.number === number2);
};
const signalsByNumber = getSignalsByNumber();
main.signalsByNumber = signalsByNumber;
const { signalsByName } = main;
const getErrorPrefix = ({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled }) => {
  if (timedOut) {
    return `timed out after ${timeout} milliseconds`;
  }
  if (isCanceled) {
    return "was canceled";
  }
  if (errorCode !== void 0) {
    return `failed with ${errorCode}`;
  }
  if (signal !== void 0) {
    return `was killed with ${signal} (${signalDescription})`;
  }
  if (exitCode !== void 0) {
    return `failed with exit code ${exitCode}`;
  }
  return "failed";
};
const makeError$1 = ({
  stdout,
  stderr,
  all,
  error: error2,
  signal,
  exitCode,
  command: command2,
  escapedCommand,
  timedOut,
  isCanceled,
  killed,
  parsed: { options: { timeout } }
}) => {
  exitCode = exitCode === null ? void 0 : exitCode;
  signal = signal === null ? void 0 : signal;
  const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
  const errorCode = error2 && error2.code;
  const prefix = getErrorPrefix({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled });
  const execaMessage = `Command ${prefix}: ${command2}`;
  const isError2 = Object.prototype.toString.call(error2) === "[object Error]";
  const shortMessage = isError2 ? `${execaMessage}
${error2.message}` : execaMessage;
  const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n");
  if (isError2) {
    error2.originalMessage = error2.message;
    error2.message = message;
  } else {
    error2 = new Error(message);
  }
  error2.shortMessage = shortMessage;
  error2.command = command2;
  error2.escapedCommand = escapedCommand;
  error2.exitCode = exitCode;
  error2.signal = signal;
  error2.signalDescription = signalDescription;
  error2.stdout = stdout;
  error2.stderr = stderr;
  if (all !== void 0) {
    error2.all = all;
  }
  if ("bufferedData" in error2) {
    delete error2.bufferedData;
  }
  error2.failed = true;
  error2.timedOut = Boolean(timedOut);
  error2.isCanceled = isCanceled;
  error2.killed = killed && !timedOut;
  return error2;
};
var error = makeError$1;
var stdio = { exports: {} };
const aliases = ["stdin", "stdout", "stderr"];
const hasAlias = (options) => aliases.some((alias) => options[alias] !== void 0);
const normalizeStdio$1 = (options) => {
  if (!options) {
    return;
  }
  const { stdio: stdio2 } = options;
  if (stdio2 === void 0) {
    return aliases.map((alias) => options[alias]);
  }
  if (hasAlias(options)) {
    throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases.map((alias) => `\`${alias}\``).join(", ")}`);
  }
  if (typeof stdio2 === "string") {
    return stdio2;
  }
  if (!Array.isArray(stdio2)) {
    throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio2}\``);
  }
  const length = Math.max(stdio2.length, aliases.length);
  return Array.from({ length }, (value, index2) => stdio2[index2]);
};
stdio.exports = normalizeStdio$1;
stdio.exports.node = (options) => {
  const stdio2 = normalizeStdio$1(options);
  if (stdio2 === "ipc") {
    return "ipc";
  }
  if (stdio2 === void 0 || typeof stdio2 === "string") {
    return [stdio2, stdio2, stdio2, "ipc"];
  }
  if (stdio2.includes("ipc")) {
    return stdio2;
  }
  return [...stdio2, "ipc"];
};
var stdioExports = stdio.exports;
var signalExit = { exports: {} };
var signals$1 = { exports: {} };
var hasRequiredSignals;
function requireSignals() {
  if (hasRequiredSignals)
    return signals$1.exports;
  hasRequiredSignals = 1;
  (function(module) {
    module.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
      );
    }
    if (process.platform === "linux") {
      module.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  })(signals$1);
  return signals$1.exports;
}
var process$1 = commonjsGlobal.process;
const processOk = function(process2) {
  return process2 && typeof process2 === "object" && typeof process2.removeListener === "function" && typeof process2.emit === "function" && typeof process2.reallyExit === "function" && typeof process2.listeners === "function" && typeof process2.kill === "function" && typeof process2.pid === "number" && typeof process2.on === "function";
};
if (!processOk(process$1)) {
  signalExit.exports = function() {
    return function() {
    };
  };
} else {
  var assert = require$$0$6;
  var signals = requireSignals();
  var isWin = /^win/i.test(process$1.platform);
  var EE = require$$2;
  if (typeof EE !== "function") {
    EE = EE.EventEmitter;
  }
  var emitter;
  if (process$1.__signal_exit_emitter__) {
    emitter = process$1.__signal_exit_emitter__;
  } else {
    emitter = process$1.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }
  signalExit.exports = function(cb, opts) {
    if (!processOk(commonjsGlobal.process)) {
      return function() {
      };
    }
    assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
    if (loaded === false) {
      load$1();
    }
    var ev = "exit";
    if (opts && opts.alwaysLast) {
      ev = "afterexit";
    }
    var remove2 = function() {
      emitter.removeListener(ev, cb);
      if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);
    return remove2;
  };
  var unload = function unload2() {
    if (!loaded || !processOk(commonjsGlobal.process)) {
      return;
    }
    loaded = false;
    signals.forEach(function(sig) {
      try {
        process$1.removeListener(sig, sigListeners[sig]);
      } catch (er) {
      }
    });
    process$1.emit = originalProcessEmit;
    process$1.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  };
  signalExit.exports.unload = unload;
  var emit = function emit2(event, code, signal) {
    if (emitter.emitted[event]) {
      return;
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code, signal);
  };
  var sigListeners = {};
  signals.forEach(function(sig) {
    sigListeners[sig] = function listener() {
      if (!processOk(commonjsGlobal.process)) {
        return;
      }
      var listeners = process$1.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit("exit", null, sig);
        emit("afterexit", null, sig);
        if (isWin && sig === "SIGHUP") {
          sig = "SIGINT";
        }
        process$1.kill(process$1.pid, sig);
      }
    };
  });
  signalExit.exports.signals = function() {
    return signals;
  };
  var loaded = false;
  var load$1 = function load2() {
    if (loaded || !processOk(commonjsGlobal.process)) {
      return;
    }
    loaded = true;
    emitter.count += 1;
    signals = signals.filter(function(sig) {
      try {
        process$1.on(sig, sigListeners[sig]);
        return true;
      } catch (er) {
        return false;
      }
    });
    process$1.emit = processEmit;
    process$1.reallyExit = processReallyExit;
  };
  signalExit.exports.load = load$1;
  var originalProcessReallyExit = process$1.reallyExit;
  var processReallyExit = function processReallyExit2(code) {
    if (!processOk(commonjsGlobal.process)) {
      return;
    }
    process$1.exitCode = code || /* istanbul ignore next */
    0;
    emit("exit", process$1.exitCode, null);
    emit("afterexit", process$1.exitCode, null);
    originalProcessReallyExit.call(process$1, process$1.exitCode);
  };
  var originalProcessEmit = process$1.emit;
  var processEmit = function processEmit2(ev, arg) {
    if (ev === "exit" && processOk(commonjsGlobal.process)) {
      if (arg !== void 0) {
        process$1.exitCode = arg;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      emit("exit", process$1.exitCode, null);
      emit("afterexit", process$1.exitCode, null);
      return ret;
    } else {
      return originalProcessEmit.apply(this, arguments);
    }
  };
}
var signalExitExports = signalExit.exports;
const os = require$$0$3;
const onExit = signalExitExports;
const DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
const spawnedKill$1 = (kill2, signal = "SIGTERM", options = {}) => {
  const killResult = kill2(signal);
  setKillTimeout(kill2, signal, options, killResult);
  return killResult;
};
const setKillTimeout = (kill2, signal, options, killResult) => {
  if (!shouldForceKill(signal, options, killResult)) {
    return;
  }
  const timeout = getForceKillAfterTimeout(options);
  const t = setTimeout(() => {
    kill2("SIGKILL");
  }, timeout);
  if (t.unref) {
    t.unref();
  }
};
const shouldForceKill = (signal, { forceKillAfterTimeout }, killResult) => {
  return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
};
const isSigterm = (signal) => {
  return signal === os.constants.signals.SIGTERM || typeof signal === "string" && signal.toUpperCase() === "SIGTERM";
};
const getForceKillAfterTimeout = ({ forceKillAfterTimeout = true }) => {
  if (forceKillAfterTimeout === true) {
    return DEFAULT_FORCE_KILL_TIMEOUT;
  }
  if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
    throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
  }
  return forceKillAfterTimeout;
};
const spawnedCancel$1 = (spawned, context) => {
  const killResult = spawned.kill();
  if (killResult) {
    context.isCanceled = true;
  }
};
const timeoutKill = (spawned, signal, reject) => {
  spawned.kill(signal);
  reject(Object.assign(new Error("Timed out"), { timedOut: true, signal }));
};
const setupTimeout$1 = (spawned, { timeout, killSignal = "SIGTERM" }, spawnedPromise) => {
  if (timeout === 0 || timeout === void 0) {
    return spawnedPromise;
  }
  let timeoutId;
  const timeoutPromise = new Promise((resolve, reject) => {
    timeoutId = setTimeout(() => {
      timeoutKill(spawned, killSignal, reject);
    }, timeout);
  });
  const safeSpawnedPromise = spawnedPromise.finally(() => {
    clearTimeout(timeoutId);
  });
  return Promise.race([timeoutPromise, safeSpawnedPromise]);
};
const validateTimeout$1 = ({ timeout }) => {
  if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) {
    throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
  }
};
const setExitHandler$1 = async (spawned, { cleanup, detached }, timedPromise) => {
  if (!cleanup || detached) {
    return timedPromise;
  }
  const removeExitHandler = onExit(() => {
    spawned.kill();
  });
  return timedPromise.finally(() => {
    removeExitHandler();
  });
};
var kill = {
  spawnedKill: spawnedKill$1,
  spawnedCancel: spawnedCancel$1,
  setupTimeout: setupTimeout$1,
  validateTimeout: validateTimeout$1,
  setExitHandler: setExitHandler$1
};
const isStream$1 = (stream2) => stream2 !== null && typeof stream2 === "object" && typeof stream2.pipe === "function";
isStream$1.writable = (stream2) => isStream$1(stream2) && stream2.writable !== false && typeof stream2._write === "function" && typeof stream2._writableState === "object";
isStream$1.readable = (stream2) => isStream$1(stream2) && stream2.readable !== false && typeof stream2._read === "function" && typeof stream2._readableState === "object";
isStream$1.duplex = (stream2) => isStream$1.writable(stream2) && isStream$1.readable(stream2);
isStream$1.transform = (stream2) => isStream$1.duplex(stream2) && typeof stream2._transform === "function";
var isStream_1 = isStream$1;
var getStream$2 = { exports: {} };
const { PassThrough: PassThroughStream } = Stream$1;
var bufferStream$1 = (options) => {
  options = { ...options };
  const { array: array2 } = options;
  let { encoding } = options;
  const isBuffer3 = encoding === "buffer";
  let objectMode = false;
  if (array2) {
    objectMode = !(encoding || isBuffer3);
  } else {
    encoding = encoding || "utf8";
  }
  if (isBuffer3) {
    encoding = null;
  }
  const stream2 = new PassThroughStream({ objectMode });
  if (encoding) {
    stream2.setEncoding(encoding);
  }
  let length = 0;
  const chunks = [];
  stream2.on("data", (chunk) => {
    chunks.push(chunk);
    if (objectMode) {
      length = chunks.length;
    } else {
      length += chunk.length;
    }
  });
  stream2.getBufferedValue = () => {
    if (array2) {
      return chunks;
    }
    return isBuffer3 ? Buffer.concat(chunks, length) : chunks.join("");
  };
  stream2.getBufferedLength = () => length;
  return stream2;
};
const { constants: BufferConstants } = require$$0$7;
const stream$1 = Stream$1;
const { promisify: promisify$5 } = require$$2$1;
const bufferStream = bufferStream$1;
const streamPipelinePromisified = promisify$5(stream$1.pipeline);
class MaxBufferError extends Error {
  constructor() {
    super("maxBuffer exceeded");
    this.name = "MaxBufferError";
  }
}
async function getStream$1(inputStream, options) {
  if (!inputStream) {
    throw new Error("Expected a stream");
  }
  options = {
    maxBuffer: Infinity,
    ...options
  };
  const { maxBuffer } = options;
  const stream2 = bufferStream(options);
  await new Promise((resolve, reject) => {
    const rejectPromise = (error2) => {
      if (error2 && stream2.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
        error2.bufferedData = stream2.getBufferedValue();
      }
      reject(error2);
    };
    (async () => {
      try {
        await streamPipelinePromisified(inputStream, stream2);
        resolve();
      } catch (error2) {
        rejectPromise(error2);
      }
    })();
    stream2.on("data", () => {
      if (stream2.getBufferedLength() > maxBuffer) {
        rejectPromise(new MaxBufferError());
      }
    });
  });
  return stream2.getBufferedValue();
}
getStream$2.exports = getStream$1;
getStream$2.exports.buffer = (stream2, options) => getStream$1(stream2, { ...options, encoding: "buffer" });
getStream$2.exports.array = (stream2, options) => getStream$1(stream2, { ...options, array: true });
getStream$2.exports.MaxBufferError = MaxBufferError;
var getStreamExports = getStream$2.exports;
const { PassThrough: PassThrough$2 } = Stream$1;
var mergeStream$1 = function() {
  var sources = [];
  var output = new PassThrough$2({ objectMode: true });
  output.setMaxListeners(0);
  output.add = add;
  output.isEmpty = isEmpty2;
  output.on("unpipe", remove2);
  Array.prototype.slice.call(arguments).forEach(add);
  return output;
  function add(source) {
    if (Array.isArray(source)) {
      source.forEach(add);
      return this;
    }
    sources.push(source);
    source.once("end", remove2.bind(null, source));
    source.once("error", output.emit.bind(output, "error"));
    source.pipe(output, { end: false });
    return this;
  }
  function isEmpty2() {
    return sources.length == 0;
  }
  function remove2(source) {
    sources = sources.filter(function(it) {
      return it !== source;
    });
    if (!sources.length && output.readable) {
      output.end();
    }
  }
};
const isStream = isStream_1;
const getStream = getStreamExports;
const mergeStream = mergeStream$1;
const handleInput$1 = (spawned, input) => {
  if (input === void 0 || spawned.stdin === void 0) {
    return;
  }
  if (isStream(input)) {
    input.pipe(spawned.stdin);
  } else {
    spawned.stdin.end(input);
  }
};
const makeAllStream$1 = (spawned, { all }) => {
  if (!all || !spawned.stdout && !spawned.stderr) {
    return;
  }
  const mixed2 = mergeStream();
  if (spawned.stdout) {
    mixed2.add(spawned.stdout);
  }
  if (spawned.stderr) {
    mixed2.add(spawned.stderr);
  }
  return mixed2;
};
const getBufferedData = async (stream2, streamPromise) => {
  if (!stream2) {
    return;
  }
  stream2.destroy();
  try {
    return await streamPromise;
  } catch (error2) {
    return error2.bufferedData;
  }
};
const getStreamPromise = (stream2, { encoding, buffer, maxBuffer }) => {
  if (!stream2 || !buffer) {
    return;
  }
  if (encoding) {
    return getStream(stream2, { encoding, maxBuffer });
  }
  return getStream.buffer(stream2, { maxBuffer });
};
const getSpawnedResult$1 = async ({ stdout, stderr, all }, { encoding, buffer, maxBuffer }, processDone) => {
  const stdoutPromise = getStreamPromise(stdout, { encoding, buffer, maxBuffer });
  const stderrPromise = getStreamPromise(stderr, { encoding, buffer, maxBuffer });
  const allPromise = getStreamPromise(all, { encoding, buffer, maxBuffer: maxBuffer * 2 });
  try {
    return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
  } catch (error2) {
    return Promise.all([
      { error: error2, signal: error2.signal, timedOut: error2.timedOut },
      getBufferedData(stdout, stdoutPromise),
      getBufferedData(stderr, stderrPromise),
      getBufferedData(all, allPromise)
    ]);
  }
};
const validateInputSync$1 = ({ input }) => {
  if (isStream(input)) {
    throw new TypeError("The `input` option cannot be a stream in sync mode");
  }
};
var stream = {
  handleInput: handleInput$1,
  makeAllStream: makeAllStream$1,
  getSpawnedResult: getSpawnedResult$1,
  validateInputSync: validateInputSync$1
};
const nativePromisePrototype = (async () => {
})().constructor.prototype;
const descriptors = ["then", "catch", "finally"].map((property2) => [
  property2,
  Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property2)
]);
const mergePromise$1 = (spawned, promise2) => {
  for (const [property2, descriptor] of descriptors) {
    const value = typeof promise2 === "function" ? (...args) => Reflect.apply(descriptor.value, promise2(), args) : descriptor.value.bind(promise2);
    Reflect.defineProperty(spawned, property2, { ...descriptor, value });
  }
  return spawned;
};
const getSpawnedPromise$1 = (spawned) => {
  return new Promise((resolve, reject) => {
    spawned.on("exit", (exitCode, signal) => {
      resolve({ exitCode, signal });
    });
    spawned.on("error", (error2) => {
      reject(error2);
    });
    if (spawned.stdin) {
      spawned.stdin.on("error", (error2) => {
        reject(error2);
      });
    }
  });
};
var promise = {
  mergePromise: mergePromise$1,
  getSpawnedPromise: getSpawnedPromise$1
};
const normalizeArgs = (file2, args = []) => {
  if (!Array.isArray(args)) {
    return [file2];
  }
  return [file2, ...args];
};
const NO_ESCAPE_REGEXP = /^[\w.-]+$/;
const DOUBLE_QUOTES_REGEXP = /"/g;
const escapeArg = (arg) => {
  if (typeof arg !== "string" || NO_ESCAPE_REGEXP.test(arg)) {
    return arg;
  }
  return `"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\"')}"`;
};
const joinCommand$1 = (file2, args) => {
  return normalizeArgs(file2, args).join(" ");
};
const getEscapedCommand$1 = (file2, args) => {
  return normalizeArgs(file2, args).map((arg) => escapeArg(arg)).join(" ");
};
const SPACES_REGEXP = / +/g;
const parseCommand$1 = (command2) => {
  const tokens = [];
  for (const token of command2.trim().split(SPACES_REGEXP)) {
    const previousToken = tokens[tokens.length - 1];
    if (previousToken && previousToken.endsWith("\\")) {
      tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
    } else {
      tokens.push(token);
    }
  }
  return tokens;
};
var command = {
  joinCommand: joinCommand$1,
  getEscapedCommand: getEscapedCommand$1,
  parseCommand: parseCommand$1
};
const path$h = require$$0$5;
const childProcess = require$$0$2;
const crossSpawn = crossSpawnExports;
const stripFinalNewline = stripFinalNewline$1;
const npmRunPath = npmRunPathExports;
const onetime = onetimeExports;
const makeError = error;
const normalizeStdio = stdioExports;
const { spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler } = kill;
const { handleInput, getSpawnedResult, makeAllStream, validateInputSync } = stream;
const { mergePromise, getSpawnedPromise } = promise;
const { joinCommand, parseCommand, getEscapedCommand } = command;
const DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
const getEnv = ({ env: envOption, extendEnv, preferLocal, localDir, execPath }) => {
  const env2 = extendEnv ? { ...process.env, ...envOption } : envOption;
  if (preferLocal) {
    return npmRunPath.env({ env: env2, cwd: localDir, execPath });
  }
  return env2;
};
const handleArguments = (file2, args, options = {}) => {
  const parsed = crossSpawn._parse(file2, args, options);
  file2 = parsed.command;
  args = parsed.args;
  options = parsed.options;
  options = {
    maxBuffer: DEFAULT_MAX_BUFFER,
    buffer: true,
    stripFinalNewline: true,
    extendEnv: true,
    preferLocal: false,
    localDir: options.cwd || process.cwd(),
    execPath: process.execPath,
    encoding: "utf8",
    reject: true,
    cleanup: true,
    all: false,
    windowsHide: true,
    ...options
  };
  options.env = getEnv(options);
  options.stdio = normalizeStdio(options);
  if (process.platform === "win32" && path$h.basename(file2, ".exe") === "cmd") {
    args.unshift("/q");
  }
  return { file: file2, args, options, parsed };
};
const handleOutput = (options, value, error2) => {
  if (typeof value !== "string" && !Buffer.isBuffer(value)) {
    return error2 === void 0 ? void 0 : "";
  }
  if (options.stripFinalNewline) {
    return stripFinalNewline(value);
  }
  return value;
};
const execa = (file2, args, options) => {
  const parsed = handleArguments(file2, args, options);
  const command2 = joinCommand(file2, args);
  const escapedCommand = getEscapedCommand(file2, args);
  validateTimeout(parsed.options);
  let spawned;
  try {
    spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
  } catch (error2) {
    const dummySpawned = new childProcess.ChildProcess();
    const errorPromise = Promise.reject(makeError({
      error: error2,
      stdout: "",
      stderr: "",
      all: "",
      command: command2,
      escapedCommand,
      parsed,
      timedOut: false,
      isCanceled: false,
      killed: false
    }));
    return mergePromise(dummySpawned, errorPromise);
  }
  const spawnedPromise = getSpawnedPromise(spawned);
  const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
  const processDone = setExitHandler(spawned, parsed.options, timedPromise);
  const context = { isCanceled: false };
  spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
  spawned.cancel = spawnedCancel.bind(null, spawned, context);
  const handlePromise = async () => {
    const [{ error: error2, exitCode, signal, timedOut }, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
    const stdout = handleOutput(parsed.options, stdoutResult);
    const stderr = handleOutput(parsed.options, stderrResult);
    const all = handleOutput(parsed.options, allResult);
    if (error2 || exitCode !== 0 || signal !== null) {
      const returnedError = makeError({
        error: error2,
        exitCode,
        signal,
        stdout,
        stderr,
        all,
        command: command2,
        escapedCommand,
        parsed,
        timedOut,
        isCanceled: context.isCanceled,
        killed: spawned.killed
      });
      if (!parsed.options.reject) {
        return returnedError;
      }
      throw returnedError;
    }
    return {
      command: command2,
      escapedCommand,
      exitCode: 0,
      stdout,
      stderr,
      all,
      failed: false,
      timedOut: false,
      isCanceled: false,
      killed: false
    };
  };
  const handlePromiseOnce = onetime(handlePromise);
  handleInput(spawned, parsed.options.input);
  spawned.all = makeAllStream(spawned, parsed.options);
  return mergePromise(spawned, handlePromiseOnce);
};
execa$1.exports = execa;
execa$1.exports.sync = (file2, args, options) => {
  const parsed = handleArguments(file2, args, options);
  const command2 = joinCommand(file2, args);
  const escapedCommand = getEscapedCommand(file2, args);
  validateInputSync(parsed.options);
  let result;
  try {
    result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
  } catch (error2) {
    throw makeError({
      error: error2,
      stdout: "",
      stderr: "",
      all: "",
      command: command2,
      escapedCommand,
      parsed,
      timedOut: false,
      isCanceled: false,
      killed: false
    });
  }
  const stdout = handleOutput(parsed.options, result.stdout, result.error);
  const stderr = handleOutput(parsed.options, result.stderr, result.error);
  if (result.error || result.status !== 0 || result.signal !== null) {
    const error2 = makeError({
      stdout,
      stderr,
      error: result.error,
      signal: result.signal,
      exitCode: result.status,
      command: command2,
      escapedCommand,
      parsed,
      timedOut: result.error && result.error.code === "ETIMEDOUT",
      isCanceled: false,
      killed: result.signal !== null
    });
    if (!parsed.options.reject) {
      return error2;
    }
    throw error2;
  }
  return {
    command: command2,
    escapedCommand,
    exitCode: 0,
    stdout,
    stderr,
    failed: false,
    timedOut: false,
    isCanceled: false,
    killed: false
  };
};
execa$1.exports.command = (command2, options) => {
  const [file2, ...args] = parseCommand(command2);
  return execa(file2, args, options);
};
execa$1.exports.commandSync = (command2, options) => {
  const [file2, ...args] = parseCommand(command2);
  return execa.sync(file2, args, options);
};
execa$1.exports.node = (scriptPath, args, options = {}) => {
  if (args && !Array.isArray(args) && typeof args === "object") {
    options = args;
    args = [];
  }
  const stdio2 = normalizeStdio.node(options);
  const defaultExecArgv = process.execArgv.filter((arg) => !arg.startsWith("--inspect"));
  const {
    nodePath = process.execPath,
    nodeOptions = defaultExecArgv
  } = options;
  return execa(
    nodePath,
    [
      ...nodeOptions,
      scriptPath,
      ...Array.isArray(args) ? args : []
    ],
    {
      ...options,
      stdin: void 0,
      stdout: void 0,
      stderr: void 0,
      stdio: stdio2,
      shell: false
    }
  );
};
var core$1 = {};
var pkgDir$1 = { exports: {} };
var findUp$2 = { exports: {} };
var locatePath$1 = { exports: {} };
var pLocate$4 = { exports: {} };
var pLimit$4 = { exports: {} };
var pTry$2 = { exports: {} };
const pTry$1 = (fn, ...arguments_) => new Promise((resolve) => {
  resolve(fn(...arguments_));
});
pTry$2.exports = pTry$1;
pTry$2.exports.default = pTry$1;
var pTryExports = pTry$2.exports;
const pTry = pTryExports;
const pLimit$3 = (concurrency) => {
  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
    return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
  }
  const queue = [];
  let activeCount = 0;
  const next = () => {
    activeCount--;
    if (queue.length > 0) {
      queue.shift()();
    }
  };
  const run = (fn, resolve, ...args) => {
    activeCount++;
    const result = pTry(fn, ...args);
    resolve(result);
    result.then(next, next);
  };
  const enqueue2 = (fn, resolve, ...args) => {
    if (activeCount < concurrency) {
      run(fn, resolve, ...args);
    } else {
      queue.push(run.bind(null, fn, resolve, ...args));
    }
  };
  const generator = (fn, ...args) => new Promise((resolve) => enqueue2(fn, resolve, ...args));
  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount
    },
    pendingCount: {
      get: () => queue.length
    },
    clearQueue: {
      value: () => {
        queue.length = 0;
      }
    }
  });
  return generator;
};
pLimit$4.exports = pLimit$3;
pLimit$4.exports.default = pLimit$3;
var pLimitExports = pLimit$4.exports;
const pLimit$2 = pLimitExports;
let EndError$1 = class EndError extends Error {
  constructor(value) {
    super();
    this.value = value;
  }
};
const testElement$1 = async (element, tester) => tester(await element);
const finder$1 = async (element) => {
  const values = await Promise.all(element);
  if (values[1] === true) {
    throw new EndError$1(values[0]);
  }
  return false;
};
const pLocate$3 = async (iterable, tester, options) => {
  options = {
    concurrency: Infinity,
    preserveOrder: true,
    ...options
  };
  const limit = pLimit$2(options.concurrency);
  const items = [...iterable].map((element) => [element, limit(testElement$1, element, tester)]);
  const checkLimit = pLimit$2(options.preserveOrder ? 1 : Infinity);
  try {
    await Promise.all(items.map((element) => checkLimit(finder$1, element)));
  } catch (error2) {
    if (error2 instanceof EndError$1) {
      return error2.value;
    }
    throw error2;
  }
};
pLocate$4.exports = pLocate$3;
pLocate$4.exports.default = pLocate$3;
var pLocateExports = pLocate$4.exports;
const path$g = require$$0$5;
const fs$n = require$$0$4;
const { promisify: promisify$4 } = require$$2$1;
const pLocate$2 = pLocateExports;
const fsStat$1 = promisify$4(fs$n.stat);
const fsLStat$1 = promisify$4(fs$n.lstat);
const typeMappings$1 = {
  directory: "isDirectory",
  file: "isFile"
};
function checkType$1({ type: type2 }) {
  if (type2 in typeMappings$1) {
    return;
  }
  throw new Error(`Invalid type specified: ${type2}`);
}
const matchType$1 = (type2, stat2) => type2 === void 0 || stat2[typeMappings$1[type2]]();
locatePath$1.exports = async (paths, options) => {
  options = {
    cwd: process.cwd(),
    type: "file",
    allowSymlinks: true,
    ...options
  };
  checkType$1(options);
  const statFn = options.allowSymlinks ? fsStat$1 : fsLStat$1;
  return pLocate$2(paths, async (path_) => {
    try {
      const stat2 = await statFn(path$g.resolve(options.cwd, path_));
      return matchType$1(options.type, stat2);
    } catch (_2) {
      return false;
    }
  }, options);
};
locatePath$1.exports.sync = (paths, options) => {
  options = {
    cwd: process.cwd(),
    allowSymlinks: true,
    type: "file",
    ...options
  };
  checkType$1(options);
  const statFn = options.allowSymlinks ? fs$n.statSync : fs$n.lstatSync;
  for (const path_ of paths) {
    try {
      const stat2 = statFn(path$g.resolve(options.cwd, path_));
      if (matchType$1(options.type, stat2)) {
        return path_;
      }
    } catch (_2) {
    }
  }
};
var locatePathExports$1 = locatePath$1.exports;
var pathExists$9 = { exports: {} };
const fs$m = require$$0$4;
const { promisify: promisify$3 } = require$$2$1;
const pAccess$2 = promisify$3(fs$m.access);
pathExists$9.exports = async (path2) => {
  try {
    await pAccess$2(path2);
    return true;
  } catch (_2) {
    return false;
  }
};
pathExists$9.exports.sync = (path2) => {
  try {
    fs$m.accessSync(path2);
    return true;
  } catch (_2) {
    return false;
  }
};
var pathExistsExports$1 = pathExists$9.exports;
(function(module) {
  const path2 = require$$0$5;
  const locatePath2 = locatePathExports$1;
  const pathExists2 = pathExistsExports$1;
  const stop = Symbol("findUp.stop");
  module.exports = async (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const { root: root2 } = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = async (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath2(paths, locateOptions);
      }
      const foundPath = await name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath2([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({ ...options, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root2) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module.exports.sync = (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const { root: root2 } = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath2.sync(paths, locateOptions);
      }
      const foundPath = name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath2.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({ ...options, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root2) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module.exports.exists = pathExists2;
  module.exports.sync.exists = pathExists2.sync;
  module.exports.stop = stop;
})(findUp$2);
var findUpExports = findUp$2.exports;
const path$f = require$$0$5;
const findUp$1 = findUpExports;
const pkgDir = async (cwd2) => {
  const filePath = await findUp$1("package.json", { cwd: cwd2 });
  return filePath && path$f.dirname(filePath);
};
pkgDir$1.exports = pkgDir;
pkgDir$1.exports.default = pkgDir;
pkgDir$1.exports.sync = (cwd2) => {
  const filePath = findUp$1.sync("package.json", { cwd: cwd2 });
  return filePath && path$f.dirname(filePath);
};
var pkgDirExports = pkgDir$1.exports;
var utils$c = {};
(function(exports) {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node, type2) => node.nodes.find((node2) => node2.type === type2);
  exports.exceedsLimit = (min, max2, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max2))
      return false;
    return (Number(max2) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type2) => {
    const node = block.nodes[n];
    if (!node)
      return;
    if (type2 && node.type === type2 || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        const ele = arr[i];
        if (Array.isArray(ele)) {
          flat(ele);
          continue;
        }
        if (ele !== void 0) {
          result.push(ele);
        }
      }
      return result;
    };
    flat(args);
    return result;
  };
})(utils$c);
const utils$b = utils$c;
var stringify$8 = (ast, options = {}) => {
  const stringify3 = (node, parent2 = {}) => {
    const invalidBlock = options.escapeInvalid && utils$b.isInvalidBrace(parent2);
    const invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = "";
    if (node.value) {
      if ((invalidBlock || invalidNode) && utils$b.isOpenOrClose(node)) {
        return "\\" + node.value;
      }
      return node.value;
    }
    if (node.value) {
      return node.value;
    }
    if (node.nodes) {
      for (const child of node.nodes) {
        output += stringify3(child);
      }
    }
    return output;
  };
  return stringify3(ast);
};
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
var isNumber$2 = function(num) {
  if (typeof num === "number") {
    return num - num === 0;
  }
  if (typeof num === "string" && num.trim() !== "") {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
const isNumber$1 = isNumber$2;
const toRegexRange$1 = (min, max2, options) => {
  if (isNumber$1(min) === false) {
    throw new TypeError("toRegexRange: expected the first argument to be a number");
  }
  if (max2 === void 0 || min === max2) {
    return String(min);
  }
  if (isNumber$1(max2) === false) {
    throw new TypeError("toRegexRange: expected the second argument to be a number.");
  }
  let opts = { relaxZeros: true, ...options };
  if (typeof opts.strictZeros === "boolean") {
    opts.relaxZeros = opts.strictZeros === false;
  }
  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap = String(opts.wrap);
  let cacheKey = min + ":" + max2 + "=" + relax + shorthand + capture + wrap;
  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange$1.cache[cacheKey].result;
  }
  let a = Math.min(min, max2);
  let b = Math.max(min, max2);
  if (Math.abs(a - b) === 1) {
    let result = min + "|" + max2;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }
  let isPadded = hasPadding(min) || hasPadding(max2);
  let state = { min, max: max2, a, b };
  let positives = [];
  let negatives = [];
  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }
  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }
  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }
  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives);
  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state.result = `(?:${state.result})`;
  }
  toRegexRange$1.cache[cacheKey] = state;
  return state.result;
};
function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, "-", false) || [];
  let onlyPositive = filterPatterns(pos, neg, "", false) || [];
  let intersected = filterPatterns(neg, pos, "-?", true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join("|");
}
function splitToRanges(min, max2) {
  let nines = 1;
  let zeros2 = 1;
  let stop = countNines(min, nines);
  let stops = /* @__PURE__ */ new Set([max2]);
  while (min <= stop && stop <= max2) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }
  stop = countZeros(max2 + 1, zeros2) - 1;
  while (min < stop && stop <= max2) {
    stops.add(stop);
    zeros2 += 1;
    stop = countZeros(max2 + 1, zeros2) - 1;
  }
  stops = [...stops];
  stops.sort(compare);
  return stops;
}
function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }
  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = "";
  let count = 0;
  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];
    if (startDigit === stopDigit) {
      pattern += startDigit;
    } else if (startDigit !== "0" || stopDigit !== "9") {
      pattern += toCharacterClass(startDigit, stopDigit);
    } else {
      count++;
    }
  }
  if (count) {
    pattern += options.shorthand === true ? "\\d" : "[0-9]";
  }
  return { pattern, count: [count], digits };
}
function splitToPatterns(min, max2, tok, options) {
  let ranges = splitToRanges(min, max2);
  let tokens = [];
  let start = min;
  let prev;
  for (let i = 0; i < ranges.length; i++) {
    let max3 = ranges[i];
    let obj = rangeToPattern(String(start), String(max3), options);
    let zeros2 = "";
    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }
      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max3 + 1;
      continue;
    }
    if (tok.isPadded) {
      zeros2 = padZeros(max3, tok, options);
    }
    obj.string = zeros2 + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max3 + 1;
    prev = obj;
  }
  return tokens;
}
function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];
  for (let ele of arr) {
    let { string: string2 } = ele;
    if (!intersection && !contains(comparison, "string", string2)) {
      result.push(prefix + string2);
    }
    if (intersection && contains(comparison, "string", string2)) {
      result.push(prefix + string2);
    }
  }
  return result;
}
function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++)
    arr.push([a[i], b[i]]);
  return arr;
}
function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}
function contains(arr, key, val) {
  return arr.some((ele) => ele[key] === val);
}
function countNines(min, len) {
  return Number(String(min).slice(0, -len) + "9".repeat(len));
}
function countZeros(integer, zeros2) {
  return integer - integer % Math.pow(10, zeros2);
}
function toQuantifier(digits) {
  let [start = 0, stop = ""] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? "," + stop : "")}}`;
  }
  return "";
}
function toCharacterClass(a, b, options) {
  return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
}
function hasPadding(str2) {
  return /^-?(0+)\d/.test(str2);
}
function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }
  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;
  switch (diff) {
    case 0:
      return "";
    case 1:
      return relax ? "0?" : "0";
    case 2:
      return relax ? "0{0,2}" : "00";
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}
toRegexRange$1.cache = {};
toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
var toRegexRange_1 = toRegexRange$1;
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
const util$2 = require$$2$1;
const toRegexRange = toRegexRange_1;
const isObject$3 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
const transform = (toNumber) => {
  return (value) => toNumber === true ? Number(value) : String(value);
};
const isValidValue = (value) => {
  return typeof value === "number" || typeof value === "string" && value !== "";
};
const isNumber = (num) => Number.isInteger(+num);
const zeros = (input) => {
  let value = `${input}`;
  let index2 = -1;
  if (value[0] === "-")
    value = value.slice(1);
  if (value === "0")
    return false;
  while (value[++index2] === "0")
    ;
  return index2 > 0;
};
const stringify$7 = (start, end, options) => {
  if (typeof start === "string" || typeof end === "string") {
    return true;
  }
  return options.stringify === true;
};
const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === "-" ? "-" : "";
    if (dash)
      input = input.slice(1);
    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};
const toMaxLen = (input, maxLength) => {
  let negative = input[0] === "-" ? "-" : "";
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength)
    input = "0" + input;
  return negative ? "-" + input : input;
};
const toSequence = (parts, options, maxLen) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  let prefix = options.capture ? "" : "?:";
  let positives = "";
  let negatives = "";
  let result;
  if (parts.positives.length) {
    positives = parts.positives.map((v) => toMaxLen(String(v), maxLen)).join("|");
  }
  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
  }
  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }
  if (options.wrap) {
    return `(${prefix}${result})`;
  }
  return result;
};
const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options });
  }
  let start = String.fromCharCode(a);
  if (a === b)
    return start;
  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};
const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap = options.wrap === true;
    let prefix = options.capture ? "" : "?:";
    return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
  }
  return toRegexRange(start, end, options);
};
const rangeError = (...args) => {
  return new RangeError("Invalid range arguments: " + util$2.inspect(...args));
};
const invalidRange = (start, end, options) => {
  if (options.strictRanges === true)
    throw rangeError([start, end]);
  return [];
};
const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};
const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);
  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  }
  if (a === 0)
    a = 0;
  if (b === 0)
    b = 0;
  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);
  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify$7(start, end, options) === false;
  let format = options.transform || transform(toNumber);
  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }
  let parts = { negatives: [], positives: [] };
  let push2 = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
  let range2 = [];
  let index2 = 0;
  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push2(a);
    } else {
      range2.push(pad(format(a, index2), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index2++;
  }
  if (options.toRegex === true) {
    return step > 1 ? toSequence(parts, options, maxLen) : toRegex(range2, null, { wrap: false, ...options });
  }
  return range2;
};
const fillLetters = (start, end, step = 1, options = {}) => {
  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
    return invalidRange(start, end, options);
  }
  let format = options.transform || ((val) => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);
  let descending = a > b;
  let min = Math.min(a, b);
  let max2 = Math.max(a, b);
  if (options.toRegex && step === 1) {
    return toRange(min, max2, false, options);
  }
  let range2 = [];
  let index2 = 0;
  while (descending ? a >= b : a <= b) {
    range2.push(format(a, index2));
    a = descending ? a - step : a + step;
    index2++;
  }
  if (options.toRegex === true) {
    return toRegex(range2, null, { wrap: false, options });
  }
  return range2;
};
const fill$2 = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }
  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }
  if (typeof step === "function") {
    return fill$2(start, end, 1, { transform: step });
  }
  if (isObject$3(step)) {
    return fill$2(start, end, 0, step);
  }
  let opts = { ...options };
  if (opts.capture === true)
    opts.wrap = true;
  step = step || opts.step || 1;
  if (!isNumber(step)) {
    if (step != null && !isObject$3(step))
      return invalidStep(step, opts);
    return fill$2(start, end, 1, step);
  }
  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }
  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};
var fillRange = fill$2;
const fill$1 = fillRange;
const utils$a = utils$c;
const compile$1 = (ast, options = {}) => {
  const walk = (node, parent2 = {}) => {
    const invalidBlock = utils$a.isInvalidBrace(parent2);
    const invalidNode = node.invalid === true && options.escapeInvalid === true;
    const invalid = invalidBlock === true || invalidNode === true;
    const prefix = options.escapeInvalid === true ? "\\" : "";
    let output = "";
    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      console.log("node.isClose", prefix, node.value);
      return prefix + node.value;
    }
    if (node.type === "open") {
      return invalid ? prefix + node.value : "(";
    }
    if (node.type === "close") {
      return invalid ? prefix + node.value : ")";
    }
    if (node.type === "comma") {
      return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
    }
    if (node.value) {
      return node.value;
    }
    if (node.nodes && node.ranges > 0) {
      const args = utils$a.reduce(node.nodes);
      const range2 = fill$1(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });
      if (range2.length !== 0) {
        return args.length > 1 && range2.length > 1 ? `(${range2})` : range2;
      }
    }
    if (node.nodes) {
      for (const child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };
  return walk(ast);
};
var compile_1 = compile$1;
const fill = fillRange;
const stringify$6 = stringify$8;
const utils$9 = utils$c;
const append = (queue = "", stash = "", enclose = false) => {
  const result = [];
  queue = [].concat(queue);
  stash = [].concat(stash);
  if (!stash.length)
    return queue;
  if (!queue.length) {
    return enclose ? utils$9.flatten(stash).map((ele) => `{${ele}}`) : stash;
  }
  for (const item of queue) {
    if (Array.isArray(item)) {
      for (const value of item) {
        result.push(append(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === "string")
          ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
      }
    }
  }
  return utils$9.flatten(result);
};
const expand$1 = (ast, options = {}) => {
  const rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
  const walk = (node, parent2 = {}) => {
    node.queue = [];
    let p = parent2;
    let q = parent2.queue;
    while (p.type !== "brace" && p.type !== "root" && p.parent) {
      p = p.parent;
      q = p.queue;
    }
    if (node.invalid || node.dollar) {
      q.push(append(q.pop(), stringify$6(node, options)));
      return;
    }
    if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
      q.push(append(q.pop(), ["{}"]));
      return;
    }
    if (node.nodes && node.ranges > 0) {
      const args = utils$9.reduce(node.nodes);
      if (utils$9.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
      }
      let range2 = fill(...args, options);
      if (range2.length === 0) {
        range2 = stringify$6(node, options);
      }
      q.push(append(q.pop(), range2));
      node.nodes = [];
      return;
    }
    const enclose = utils$9.encloseBrace(node);
    let queue = node.queue;
    let block = node;
    while (block.type !== "brace" && block.type !== "root" && block.parent) {
      block = block.parent;
      queue = block.queue;
    }
    for (let i = 0; i < node.nodes.length; i++) {
      const child = node.nodes[i];
      if (child.type === "comma" && node.type === "brace") {
        if (i === 1)
          queue.push("");
        queue.push("");
        continue;
      }
      if (child.type === "close") {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }
      if (child.value && child.type !== "open") {
        queue.push(append(queue.pop(), child.value));
        continue;
      }
      if (child.nodes) {
        walk(child, node);
      }
    }
    return queue;
  };
  return utils$9.flatten(walk(ast));
};
var expand_1 = expand$1;
var constants$5 = {
  MAX_LENGTH: 1e4,
  // Digits
  CHAR_0: "0",
  /* 0 */
  CHAR_9: "9",
  /* 9 */
  // Alphabet chars.
  CHAR_UPPERCASE_A: "A",
  /* A */
  CHAR_LOWERCASE_A: "a",
  /* a */
  CHAR_UPPERCASE_Z: "Z",
  /* Z */
  CHAR_LOWERCASE_Z: "z",
  /* z */
  CHAR_LEFT_PARENTHESES: "(",
  /* ( */
  CHAR_RIGHT_PARENTHESES: ")",
  /* ) */
  CHAR_ASTERISK: "*",
  /* * */
  // Non-alphabetic chars.
  CHAR_AMPERSAND: "&",
  /* & */
  CHAR_AT: "@",
  /* @ */
  CHAR_BACKSLASH: "\\",
  /* \ */
  CHAR_BACKTICK: "`",
  /* ` */
  CHAR_CARRIAGE_RETURN: "\r",
  /* \r */
  CHAR_CIRCUMFLEX_ACCENT: "^",
  /* ^ */
  CHAR_COLON: ":",
  /* : */
  CHAR_COMMA: ",",
  /* , */
  CHAR_DOLLAR: "$",
  /* . */
  CHAR_DOT: ".",
  /* . */
  CHAR_DOUBLE_QUOTE: '"',
  /* " */
  CHAR_EQUAL: "=",
  /* = */
  CHAR_EXCLAMATION_MARK: "!",
  /* ! */
  CHAR_FORM_FEED: "\f",
  /* \f */
  CHAR_FORWARD_SLASH: "/",
  /* / */
  CHAR_HASH: "#",
  /* # */
  CHAR_HYPHEN_MINUS: "-",
  /* - */
  CHAR_LEFT_ANGLE_BRACKET: "<",
  /* < */
  CHAR_LEFT_CURLY_BRACE: "{",
  /* { */
  CHAR_LEFT_SQUARE_BRACKET: "[",
  /* [ */
  CHAR_LINE_FEED: "\n",
  /* \n */
  CHAR_NO_BREAK_SPACE: " ",
  /* \u00A0 */
  CHAR_PERCENT: "%",
  /* % */
  CHAR_PLUS: "+",
  /* + */
  CHAR_QUESTION_MARK: "?",
  /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: ">",
  /* > */
  CHAR_RIGHT_CURLY_BRACE: "}",
  /* } */
  CHAR_RIGHT_SQUARE_BRACKET: "]",
  /* ] */
  CHAR_SEMICOLON: ";",
  /* ; */
  CHAR_SINGLE_QUOTE: "'",
  /* ' */
  CHAR_SPACE: " ",
  /*   */
  CHAR_TAB: "	",
  /* \t */
  CHAR_UNDERSCORE: "_",
  /* _ */
  CHAR_VERTICAL_LINE: "|",
  /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  /* \uFEFF */
};
const stringify$5 = stringify$8;
const {
  MAX_LENGTH: MAX_LENGTH$1,
  CHAR_BACKSLASH,
  /* \ */
  CHAR_BACKTICK,
  /* ` */
  CHAR_COMMA: CHAR_COMMA$2,
  /* , */
  CHAR_DOT: CHAR_DOT$1,
  /* . */
  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1,
  /* ( */
  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1,
  /* ) */
  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1,
  /* { */
  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1,
  /* } */
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$2,
  /* [ */
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$2,
  /* ] */
  CHAR_DOUBLE_QUOTE: CHAR_DOUBLE_QUOTE$1,
  /* " */
  CHAR_SINGLE_QUOTE: CHAR_SINGLE_QUOTE$1,
  /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants$5;
const parse$4 = (input, options = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  const opts = options || {};
  const max2 = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;
  if (input.length > max2) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max2})`);
  }
  const ast = { type: "root", input, nodes: [] };
  const stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets2 = 0;
  const length = input.length;
  let index2 = 0;
  let depth2 = 0;
  let value;
  const advance = () => input[index2++];
  const push2 = (node) => {
    if (node.type === "text" && prev.type === "dot") {
      prev.type = "text";
    }
    if (prev && prev.type === "text" && node.type === "text") {
      prev.value += node.value;
      return;
    }
    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };
  push2({ type: "bos" });
  while (index2 < length) {
    block = stack[stack.length - 1];
    value = advance();
    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }
    if (value === CHAR_BACKSLASH) {
      push2({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
      continue;
    }
    if (value === CHAR_RIGHT_SQUARE_BRACKET$2) {
      push2({ type: "text", value: "\\" + value });
      continue;
    }
    if (value === CHAR_LEFT_SQUARE_BRACKET$2) {
      brackets2++;
      let next;
      while (index2 < length && (next = advance())) {
        value += next;
        if (next === CHAR_LEFT_SQUARE_BRACKET$2) {
          brackets2++;
          continue;
        }
        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET$2) {
          brackets2--;
          if (brackets2 === 0) {
            break;
          }
        }
      }
      push2({ type: "text", value });
      continue;
    }
    if (value === CHAR_LEFT_PARENTHESES$1) {
      block = push2({ type: "paren", nodes: [] });
      stack.push(block);
      push2({ type: "text", value });
      continue;
    }
    if (value === CHAR_RIGHT_PARENTHESES$1) {
      if (block.type !== "paren") {
        push2({ type: "text", value });
        continue;
      }
      block = stack.pop();
      push2({ type: "text", value });
      block = stack[stack.length - 1];
      continue;
    }
    if (value === CHAR_DOUBLE_QUOTE$1 || value === CHAR_SINGLE_QUOTE$1 || value === CHAR_BACKTICK) {
      const open = value;
      let next;
      if (options.keepQuotes !== true) {
        value = "";
      }
      while (index2 < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }
        if (next === open) {
          if (options.keepQuotes === true)
            value += next;
          break;
        }
        value += next;
      }
      push2({ type: "text", value });
      continue;
    }
    if (value === CHAR_LEFT_CURLY_BRACE$1) {
      depth2++;
      const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
      const brace = {
        type: "brace",
        open: true,
        close: false,
        dollar,
        depth: depth2,
        commas: 0,
        ranges: 0,
        nodes: []
      };
      block = push2(brace);
      stack.push(block);
      push2({ type: "open", value });
      continue;
    }
    if (value === CHAR_RIGHT_CURLY_BRACE$1) {
      if (block.type !== "brace") {
        push2({ type: "text", value });
        continue;
      }
      const type2 = "close";
      block = stack.pop();
      block.close = true;
      push2({ type: type2, value });
      depth2--;
      block = stack[stack.length - 1];
      continue;
    }
    if (value === CHAR_COMMA$2 && depth2 > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        const open = block.nodes.shift();
        block.nodes = [open, { type: "text", value: stringify$5(block) }];
      }
      push2({ type: "comma", value });
      block.commas++;
      continue;
    }
    if (value === CHAR_DOT$1 && depth2 > 0 && block.commas === 0) {
      const siblings = block.nodes;
      if (depth2 === 0 || siblings.length === 0) {
        push2({ type: "text", value });
        continue;
      }
      if (prev.type === "dot") {
        block.range = [];
        prev.value += value;
        prev.type = "range";
        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = "text";
          continue;
        }
        block.ranges++;
        block.args = [];
        continue;
      }
      if (prev.type === "range") {
        siblings.pop();
        const before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }
      push2({ type: "dot", value });
      continue;
    }
    push2({ type: "text", value });
  }
  do {
    block = stack.pop();
    if (block.type !== "root") {
      block.nodes.forEach((node) => {
        if (!node.nodes) {
          if (node.type === "open")
            node.isOpen = true;
          if (node.type === "close")
            node.isClose = true;
          if (!node.nodes)
            node.type = "text";
          node.invalid = true;
        }
      });
      const parent2 = stack[stack.length - 1];
      const index3 = parent2.nodes.indexOf(block);
      parent2.nodes.splice(index3, 1, ...block.nodes);
    }
  } while (stack.length > 0);
  push2({ type: "eos" });
  return ast;
};
var parse_1$1 = parse$4;
const stringify$4 = stringify$8;
const compile = compile_1;
const expand = expand_1;
const parse$3 = parse_1$1;
const braces$1 = (input, options = {}) => {
  let output = [];
  if (Array.isArray(input)) {
    for (const pattern of input) {
      const result = braces$1.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces$1.create(input, options));
  }
  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};
braces$1.parse = (input, options = {}) => parse$3(input, options);
braces$1.stringify = (input, options = {}) => {
  if (typeof input === "string") {
    return stringify$4(braces$1.parse(input, options), options);
  }
  return stringify$4(input, options);
};
braces$1.compile = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  return compile(input, options);
};
braces$1.expand = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  let result = expand(input, options);
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }
  return result;
};
braces$1.create = (input, options = {}) => {
  if (input === "" || input.length < 3) {
    return [input];
  }
  return options.expand !== true ? braces$1.compile(input, options) : braces$1.expand(input, options);
};
var braces_1 = braces$1;
var utils$8 = {};
const path$e = require$$0$5;
const WIN_SLASH = "\\\\/";
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
const DOT_LITERAL = "\\.";
const PLUS_LITERAL = "\\+";
const QMARK_LITERAL = "\\?";
const SLASH_LITERAL = "\\/";
const ONE_CHAR = "(?=.)";
const QMARK = "[^/]";
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;
const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};
const WINDOWS_CHARS = {
  ...POSIX_CHARS,
  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
};
const POSIX_REGEX_SOURCE$1 = {
  alnum: "a-zA-Z0-9",
  alpha: "a-zA-Z",
  ascii: "\\x00-\\x7F",
  blank: " \\t",
  cntrl: "\\x00-\\x1F\\x7F",
  digit: "0-9",
  graph: "\\x21-\\x7E",
  lower: "a-z",
  print: "\\x20-\\x7E ",
  punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
  space: " \\t\\r\\n\\v\\f",
  upper: "A-Z",
  word: "A-Za-z0-9_",
  xdigit: "A-Fa-f0-9"
};
var constants$4 = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    "***": "*",
    "**/**": "**",
    "**/**/**": "**"
  },
  // Digits
  CHAR_0: 48,
  /* 0 */
  CHAR_9: 57,
  /* 9 */
  // Alphabet chars.
  CHAR_UPPERCASE_A: 65,
  /* A */
  CHAR_LOWERCASE_A: 97,
  /* a */
  CHAR_UPPERCASE_Z: 90,
  /* Z */
  CHAR_LOWERCASE_Z: 122,
  /* z */
  CHAR_LEFT_PARENTHESES: 40,
  /* ( */
  CHAR_RIGHT_PARENTHESES: 41,
  /* ) */
  CHAR_ASTERISK: 42,
  /* * */
  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38,
  /* & */
  CHAR_AT: 64,
  /* @ */
  CHAR_BACKWARD_SLASH: 92,
  /* \ */
  CHAR_CARRIAGE_RETURN: 13,
  /* \r */
  CHAR_CIRCUMFLEX_ACCENT: 94,
  /* ^ */
  CHAR_COLON: 58,
  /* : */
  CHAR_COMMA: 44,
  /* , */
  CHAR_DOT: 46,
  /* . */
  CHAR_DOUBLE_QUOTE: 34,
  /* " */
  CHAR_EQUAL: 61,
  /* = */
  CHAR_EXCLAMATION_MARK: 33,
  /* ! */
  CHAR_FORM_FEED: 12,
  /* \f */
  CHAR_FORWARD_SLASH: 47,
  /* / */
  CHAR_GRAVE_ACCENT: 96,
  /* ` */
  CHAR_HASH: 35,
  /* # */
  CHAR_HYPHEN_MINUS: 45,
  /* - */
  CHAR_LEFT_ANGLE_BRACKET: 60,
  /* < */
  CHAR_LEFT_CURLY_BRACE: 123,
  /* { */
  CHAR_LEFT_SQUARE_BRACKET: 91,
  /* [ */
  CHAR_LINE_FEED: 10,
  /* \n */
  CHAR_NO_BREAK_SPACE: 160,
  /* \u00A0 */
  CHAR_PERCENT: 37,
  /* % */
  CHAR_PLUS: 43,
  /* + */
  CHAR_QUESTION_MARK: 63,
  /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: 62,
  /* > */
  CHAR_RIGHT_CURLY_BRACE: 125,
  /* } */
  CHAR_RIGHT_SQUARE_BRACKET: 93,
  /* ] */
  CHAR_SEMICOLON: 59,
  /* ; */
  CHAR_SINGLE_QUOTE: 39,
  /* ' */
  CHAR_SPACE: 32,
  /*   */
  CHAR_TAB: 9,
  /* \t */
  CHAR_UNDERSCORE: 95,
  /* _ */
  CHAR_VERTICAL_LINE: 124,
  /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
  /* \uFEFF */
  SEP: path$e.sep,
  /**
   * Create EXTGLOB_CHARS
   */
  extglobChars(chars) {
    return {
      "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
      "?": { type: "qmark", open: "(?:", close: ")?" },
      "+": { type: "plus", open: "(?:", close: ")+" },
      "*": { type: "star", open: "(?:", close: ")*" },
      "@": { type: "at", open: "(?:", close: ")" }
    };
  },
  /**
   * Create GLOB_CHARS
   */
  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};
(function(exports) {
  const path2 = require$$0$5;
  const win32 = process.platform === "win32";
  const {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = constants$4;
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str2) => REGEX_SPECIAL_CHARS.test(str2);
  exports.isRegexChar = (str2) => str2.length === 1 && exports.hasRegexChars(str2);
  exports.escapeRegex = (str2) => str2.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str2) => str2.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str2) => {
    return str2.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win32 === true || path2.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append2 = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append2}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
})(utils$8);
const utils$7 = utils$8;
const {
  CHAR_ASTERISK: CHAR_ASTERISK$1,
  /* * */
  CHAR_AT,
  /* @ */
  CHAR_BACKWARD_SLASH,
  /* \ */
  CHAR_COMMA: CHAR_COMMA$1,
  /* , */
  CHAR_DOT,
  /* . */
  CHAR_EXCLAMATION_MARK,
  /* ! */
  CHAR_FORWARD_SLASH,
  /* / */
  CHAR_LEFT_CURLY_BRACE,
  /* { */
  CHAR_LEFT_PARENTHESES,
  /* ( */
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1,
  /* [ */
  CHAR_PLUS,
  /* + */
  CHAR_QUESTION_MARK,
  /* ? */
  CHAR_RIGHT_CURLY_BRACE,
  /* } */
  CHAR_RIGHT_PARENTHESES,
  /* ) */
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1
  /* ] */
} = constants$4;
const isPathSeparator = (code) => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};
const depth = (token) => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};
const scan$1 = (input, options) => {
  const opts = options || {};
  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];
  let str2 = input;
  let index2 = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob = false;
  let isExtglob = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let negatedExtglob = false;
  let finished = false;
  let braces2 = 0;
  let prev;
  let code;
  let token = { value: "", depth: 0, isGlob: false };
  const eos = () => index2 >= length;
  const peek = () => str2.charCodeAt(index2 + 1);
  const advance = () => {
    prev = code;
    return str2.charCodeAt(++index2);
  };
  while (index2 < length) {
    code = advance();
    let next;
    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code = advance();
      if (code === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }
    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
      braces2++;
      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braces2++;
          continue;
        }
        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (braceEscaped !== true && code === CHAR_COMMA$1) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_RIGHT_CURLY_BRACE) {
          braces2--;
          if (braces2 === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index2);
      tokens.push(token);
      token = { value: "", depth: 0, isGlob: false };
      if (finished === true)
        continue;
      if (prev === CHAR_DOT && index2 === start + 1) {
        start += 2;
        continue;
      }
      lastIndex = index2 + 1;
      continue;
    }
    if (opts.noext !== true) {
      const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK$1 || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        isExtglob = token.isExtglob = true;
        finished = true;
        if (code === CHAR_EXCLAMATION_MARK && index2 === start) {
          negatedExtglob = true;
        }
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }
    if (code === CHAR_ASTERISK$1) {
      if (prev === CHAR_ASTERISK$1)
        isGlobstar = token.isGlobstar = true;
      isGlob = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_QUESTION_MARK) {
      isGlob = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_LEFT_SQUARE_BRACKET$1) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
          isBracket = token.isBracket = true;
          isGlob = token.isGlob = true;
          finished = true;
          break;
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index2 === start) {
      negated = token.negated = true;
      start++;
      continue;
    }
    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
      isGlob = token.isGlob = true;
      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES) {
            backslashes = token.backslashes = true;
            code = advance();
            continue;
          }
          if (code === CHAR_RIGHT_PARENTHESES) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }
    if (isGlob === true) {
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
  }
  if (opts.noext === true) {
    isExtglob = false;
    isGlob = false;
  }
  let base = str2;
  let prefix = "";
  let glob = "";
  if (start > 0) {
    prefix = str2.slice(0, start);
    str2 = str2.slice(start);
    lastIndex -= start;
  }
  if (base && isGlob === true && lastIndex > 0) {
    base = str2.slice(0, lastIndex);
    glob = str2.slice(lastIndex);
  } else if (isGlob === true) {
    base = "";
    glob = str2;
  } else {
    base = str2;
  }
  if (base && base !== "" && base !== "/" && base !== str2) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }
  if (opts.unescape === true) {
    if (glob)
      glob = utils$7.removeBackslashes(glob);
    if (base && backslashes === true) {
      base = utils$7.removeBackslashes(base);
    }
  }
  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob,
    isExtglob,
    isGlobstar,
    negated,
    negatedExtglob
  };
  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }
  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;
    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value !== "") {
        parts.push(value);
      }
      prevIndex = i;
    }
    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1);
      parts.push(value);
      if (opts.tokens) {
        tokens[tokens.length - 1].value = value;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }
    state.slashes = slashes;
    state.parts = parts;
  }
  return state;
};
var scan_1 = scan$1;
const constants$3 = constants$4;
const utils$6 = utils$8;
const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants$3;
const expandRange = (args, options) => {
  if (typeof options.expandRange === "function") {
    return options.expandRange(...args, options);
  }
  args.sort();
  const value = `[${args.join("-")}]`;
  try {
    new RegExp(value);
  } catch (ex) {
    return args.map((v) => utils$6.escapeRegex(v)).join("..");
  }
  return value;
};
const syntaxError = (type2, char) => {
  return `Missing ${type2}: "${char}" - use "\\\\${char}" to match literal characters`;
};
const parse$2 = (input, options) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  input = REPLACEMENTS[input] || input;
  const opts = { ...options };
  const max2 = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  let len = input.length;
  if (len > max2) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max2}`);
  }
  const bos = { type: "bos", value: "", output: opts.prepend || "" };
  const tokens = [bos];
  const capture = opts.capture ? "" : "?:";
  const win32 = utils$6.isWindows(options);
  const PLATFORM_CHARS = constants$3.globChars(win32);
  const EXTGLOB_CHARS = constants$3.extglobChars(PLATFORM_CHARS);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    PLUS_LITERAL: PLUS_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOT_SLASH: NO_DOT_SLASH2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    QMARK: QMARK2,
    QMARK_NO_DOT: QMARK_NO_DOT2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = PLATFORM_CHARS;
  const globstar = (opts2) => {
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const nodot = opts.dot ? "" : NO_DOT2;
  const qmarkNoDot = opts.dot ? QMARK2 : QMARK_NO_DOT2;
  let star = opts.bash === true ? globstar(opts) : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  if (typeof opts.noext === "boolean") {
    opts.noextglob = opts.noext;
  }
  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: "",
    output: "",
    prefix: "",
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };
  input = utils$6.removePrefix(input, state);
  len = input.length;
  const extglobs = [];
  const braces2 = [];
  const stack = [];
  let prev = bos;
  let value;
  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index] || "";
  const remaining = () => input.slice(state.index + 1);
  const consume = (value2 = "", num = 0) => {
    state.consumed += value2;
    state.index += num;
  };
  const append2 = (token) => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };
  const negate = () => {
    let count = 1;
    while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
      advance();
      state.start++;
      count++;
    }
    if (count % 2 === 0) {
      return false;
    }
    state.negated = true;
    state.start++;
    return true;
  };
  const increment = (type2) => {
    state[type2]++;
    stack.push(type2);
  };
  const decrement = (type2) => {
    state[type2]--;
    stack.pop();
  };
  const push2 = (tok) => {
    if (prev.type === "globstar") {
      const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
      const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
      if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "star";
        prev.value = "*";
        prev.output = star;
        state.output += prev.output;
      }
    }
    if (extglobs.length && tok.type !== "paren") {
      extglobs[extglobs.length - 1].inner += tok.value;
    }
    if (tok.value || tok.output)
      append2(tok);
    if (prev && prev.type === "text" && tok.type === "text") {
      prev.value += tok.value;
      prev.output = (prev.output || "") + tok.value;
      return;
    }
    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };
  const extglobOpen = (type2, value2) => {
    const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output = (opts.capture ? "(" : "") + token.open;
    increment("parens");
    push2({ type: type2, value: value2, output: state.output ? "" : ONE_CHAR2 });
    push2({ type: "paren", extglob: true, value: advance(), output });
    extglobs.push(token);
  };
  const extglobClose = (token) => {
    let output = token.close + (opts.capture ? ")" : "");
    let rest;
    if (token.type === "negate") {
      let extglobStar = star;
      if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
        extglobStar = globstar(opts);
      }
      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`;
      }
      if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
        const expression = parse$2(rest, { ...options, fastpaths: false }).output;
        output = token.close = `)${expression})${extglobStar})`;
      }
      if (token.prev.type === "bos") {
        state.negatedExtglob = true;
      }
    }
    push2({ type: "paren", extglob: true, value, output });
    decrement("parens");
  };
  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;
    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index2) => {
      if (first === "\\") {
        backslashes = true;
        return m;
      }
      if (first === "?") {
        if (esc) {
          return esc + first + (rest ? QMARK2.repeat(rest.length) : "");
        }
        if (index2 === 0) {
          return qmarkNoDot + (rest ? QMARK2.repeat(rest.length) : "");
        }
        return QMARK2.repeat(chars.length);
      }
      if (first === ".") {
        return DOT_LITERAL2.repeat(chars.length);
      }
      if (first === "*") {
        if (esc) {
          return esc + first + (rest ? star : "");
        }
        return star;
      }
      return esc ? m : `\\${m}`;
    });
    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, "");
      } else {
        output = output.replace(/\\+/g, (m) => {
          return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
        });
      }
    }
    if (output === input && opts.contains === true) {
      state.output = input;
      return state;
    }
    state.output = utils$6.wrapOutput(output, state, options);
    return state;
  }
  while (!eos()) {
    value = advance();
    if (value === "\0") {
      continue;
    }
    if (value === "\\") {
      const next = peek();
      if (next === "/" && opts.bash !== true) {
        continue;
      }
      if (next === "." || next === ";") {
        continue;
      }
      if (!next) {
        value += "\\";
        push2({ type: "text", value });
        continue;
      }
      const match = /^\\+/.exec(remaining());
      let slashes = 0;
      if (match && match[0].length > 2) {
        slashes = match[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += "\\";
        }
      }
      if (opts.unescape === true) {
        value = advance();
      } else {
        value += advance();
      }
      if (state.brackets === 0) {
        push2({ type: "text", value });
        continue;
      }
    }
    if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
      if (opts.posix !== false && value === ":") {
        const inner = prev.value.slice(1);
        if (inner.includes("[")) {
          prev.posix = true;
          if (inner.includes(":")) {
            const idx = prev.value.lastIndexOf("[");
            const pre = prev.value.slice(0, idx);
            const rest2 = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE[rest2];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();
              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR2;
              }
              continue;
            }
          }
        }
      }
      if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
        value = `\\${value}`;
      }
      if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
        value = `\\${value}`;
      }
      if (opts.posix === true && value === "!" && prev.value === "[") {
        value = "^";
      }
      prev.value += value;
      append2({ value });
      continue;
    }
    if (state.quotes === 1 && value !== '"') {
      value = utils$6.escapeRegex(value);
      prev.value += value;
      append2({ value });
      continue;
    }
    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push2({ type: "text", value });
      }
      continue;
    }
    if (value === "(") {
      increment("parens");
      push2({ type: "paren", value });
      continue;
    }
    if (value === ")") {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError("opening", "("));
      }
      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }
      push2({ type: "paren", value, output: state.parens ? ")" : "\\)" });
      decrement("parens");
      continue;
    }
    if (value === "[") {
      if (opts.nobracket === true || !remaining().includes("]")) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("closing", "]"));
        }
        value = `\\${value}`;
      } else {
        increment("brackets");
      }
      push2({ type: "bracket", value });
      continue;
    }
    if (value === "]") {
      if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
        push2({ type: "text", value, output: `\\${value}` });
        continue;
      }
      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "["));
        }
        push2({ type: "text", value, output: `\\${value}` });
        continue;
      }
      decrement("brackets");
      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
        value = `/${value}`;
      }
      prev.value += value;
      append2({ value });
      if (opts.literalBrackets === false || utils$6.hasRegexChars(prevValue)) {
        continue;
      }
      const escaped = utils$6.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }
    if (value === "{" && opts.nobrace !== true) {
      increment("braces");
      const open = {
        type: "brace",
        value,
        output: "(",
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };
      braces2.push(open);
      push2(open);
      continue;
    }
    if (value === "}") {
      const brace = braces2[braces2.length - 1];
      if (opts.nobrace === true || !brace) {
        push2({ type: "text", value, output: value });
        continue;
      }
      let output = ")";
      if (brace.dots === true) {
        const arr = tokens.slice();
        const range2 = [];
        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === "brace") {
            break;
          }
          if (arr[i].type !== "dots") {
            range2.unshift(arr[i].value);
          }
        }
        output = expandRange(range2, opts);
        state.backtrack = true;
      }
      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = "\\{";
        value = output = "\\}";
        state.output = out;
        for (const t of toks) {
          state.output += t.output || t.value;
        }
      }
      push2({ type: "brace", value, output });
      decrement("braces");
      braces2.pop();
      continue;
    }
    if (value === "|") {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push2({ type: "text", value });
      continue;
    }
    if (value === ",") {
      let output = value;
      const brace = braces2[braces2.length - 1];
      if (brace && stack[stack.length - 1] === "braces") {
        brace.comma = true;
        output = "|";
      }
      push2({ type: "comma", value, output });
      continue;
    }
    if (value === "/") {
      if (prev.type === "dot" && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = "";
        state.output = "";
        tokens.pop();
        prev = bos;
        continue;
      }
      push2({ type: "slash", value, output: SLASH_LITERAL2 });
      continue;
    }
    if (value === ".") {
      if (state.braces > 0 && prev.type === "dot") {
        if (prev.value === ".")
          prev.output = DOT_LITERAL2;
        const brace = braces2[braces2.length - 1];
        prev.type = "dots";
        prev.output += value;
        prev.value += value;
        brace.dots = true;
        continue;
      }
      if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
        push2({ type: "text", value, output: DOT_LITERAL2 });
        continue;
      }
      push2({ type: "dot", value, output: DOT_LITERAL2 });
      continue;
    }
    if (value === "?") {
      const isGroup = prev && prev.value === "(";
      if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("qmark", value);
        continue;
      }
      if (prev && prev.type === "paren") {
        const next = peek();
        let output = value;
        if (next === "<" && !utils$6.supportsLookbehinds()) {
          throw new Error("Node.js v10 or higher is required for regex lookbehinds");
        }
        if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
          output = `\\${value}`;
        }
        push2({ type: "text", value, output });
        continue;
      }
      if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
        push2({ type: "qmark", value, output: QMARK_NO_DOT2 });
        continue;
      }
      push2({ type: "qmark", value, output: QMARK2 });
      continue;
    }
    if (value === "!") {
      if (opts.noextglob !== true && peek() === "(") {
        if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
          extglobOpen("negate", value);
          continue;
        }
      }
      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }
    if (value === "+") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("plus", value);
        continue;
      }
      if (prev && prev.value === "(" || opts.regex === false) {
        push2({ type: "plus", value, output: PLUS_LITERAL2 });
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
        push2({ type: "plus", value });
        continue;
      }
      push2({ type: "plus", value: PLUS_LITERAL2 });
      continue;
    }
    if (value === "@") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        push2({ type: "at", extglob: true, value, output: "" });
        continue;
      }
      push2({ type: "text", value });
      continue;
    }
    if (value !== "*") {
      if (value === "$" || value === "^") {
        value = `\\${value}`;
      }
      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match) {
        value += match[0];
        state.index += match[0].length;
      }
      push2({ type: "text", value });
      continue;
    }
    if (prev && (prev.type === "globstar" || prev.star === true)) {
      prev.type = "star";
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value);
      continue;
    }
    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen("star", value);
      continue;
    }
    if (prev.type === "star") {
      if (opts.noglobstar === true) {
        consume(value);
        continue;
      }
      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === "slash" || prior.type === "bos";
      const afterStar = before && (before.type === "star" || before.type === "globstar");
      if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
        push2({ type: "star", value, output: "" });
        continue;
      }
      const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
      const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
      if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
        push2({ type: "star", value, output: "" });
        continue;
      }
      while (rest.slice(0, 3) === "/**") {
        const after = input[state.index + 4];
        if (after && after !== "/") {
          break;
        }
        rest = rest.slice(3);
        consume("/**", 3);
      }
      if (prior.type === "bos" && eos()) {
        prev.type = "globstar";
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
        prev.value += value;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
        const end = rest[1] !== void 0 ? "|$" : "";
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = `${globstar(opts)}${SLASH_LITERAL2}|${SLASH_LITERAL2}${end})`;
        prev.value += value;
        state.output += prior.output + prev.output;
        state.globstar = true;
        consume(value + advance());
        push2({ type: "slash", value: "/", output: "" });
        continue;
      }
      if (prior.type === "bos" && rest[0] === "/") {
        prev.type = "globstar";
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL2}|${globstar(opts)}${SLASH_LITERAL2})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value + advance());
        push2({ type: "slash", value: "/", output: "" });
        continue;
      }
      state.output = state.output.slice(0, -prev.output.length);
      prev.type = "globstar";
      prev.output = globstar(opts);
      prev.value += value;
      state.output += prev.output;
      state.globstar = true;
      consume(value);
      continue;
    }
    const token = { type: "star", value, output: star };
    if (opts.bash === true) {
      token.output = ".*?";
      if (prev.type === "bos" || prev.type === "slash") {
        token.output = nodot + token.output;
      }
      push2(token);
      continue;
    }
    if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
      token.output = value;
      push2(token);
      continue;
    }
    if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
      if (prev.type === "dot") {
        state.output += NO_DOT_SLASH2;
        prev.output += NO_DOT_SLASH2;
      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH2;
        prev.output += NO_DOTS_SLASH2;
      } else {
        state.output += nodot;
        prev.output += nodot;
      }
      if (peek() !== "*") {
        state.output += ONE_CHAR2;
        prev.output += ONE_CHAR2;
      }
    }
    push2(token);
  }
  while (state.brackets > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "]"));
    state.output = utils$6.escapeLast(state.output, "[");
    decrement("brackets");
  }
  while (state.parens > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", ")"));
    state.output = utils$6.escapeLast(state.output, "(");
    decrement("parens");
  }
  while (state.braces > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "}"));
    state.output = utils$6.escapeLast(state.output, "{");
    decrement("braces");
  }
  if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
    push2({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL2}?` });
  }
  if (state.backtrack === true) {
    state.output = "";
    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;
      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }
  return state;
};
parse$2.fastpaths = (input, options) => {
  const opts = { ...options };
  const max2 = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  const len = input.length;
  if (len > max2) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max2}`);
  }
  input = REPLACEMENTS[input] || input;
  const win32 = utils$6.isWindows(options);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOTS: NO_DOTS2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = constants$3.globChars(win32);
  const nodot = opts.dot ? NO_DOTS2 : NO_DOT2;
  const slashDot = opts.dot ? NO_DOTS_SLASH2 : NO_DOT2;
  const capture = opts.capture ? "" : "?:";
  const state = { negated: false, prefix: "" };
  let star = opts.bash === true ? ".*?" : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  const globstar = (opts2) => {
    if (opts2.noglobstar === true)
      return star;
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const create2 = (str2) => {
    switch (str2) {
      case "*":
        return `${nodot}${ONE_CHAR2}${star}`;
      case ".*":
        return `${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*.*":
        return `${nodot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*/*":
        return `${nodot}${star}${SLASH_LITERAL2}${ONE_CHAR2}${slashDot}${star}`;
      case "**":
        return nodot + globstar(opts);
      case "**/*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${ONE_CHAR2}${star}`;
      case "**/*.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "**/.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      default: {
        const match = /^(.*?)\.(\w+)$/.exec(str2);
        if (!match)
          return;
        const source2 = create2(match[1]);
        if (!source2)
          return;
        return source2 + DOT_LITERAL2 + match[2];
      }
    }
  };
  const output = utils$6.removePrefix(input, state);
  let source = create2(output);
  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL2}?`;
  }
  return source;
};
var parse_1 = parse$2;
const path$d = require$$0$5;
const scan = scan_1;
const parse$1 = parse_1;
const utils$5 = utils$8;
const constants$2 = constants$4;
const isObject$2 = (val) => val && typeof val === "object" && !Array.isArray(val);
const picomatch$2 = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map((input) => picomatch$2(input, options, returnState));
    const arrayMatcher = (str2) => {
      for (const isMatch of fns) {
        const state2 = isMatch(str2);
        if (state2)
          return state2;
      }
      return false;
    };
    return arrayMatcher;
  }
  const isState = isObject$2(glob) && glob.tokens && glob.input;
  if (glob === "" || typeof glob !== "string" && !isState) {
    throw new TypeError("Expected pattern to be a non-empty string");
  }
  const opts = options || {};
  const posix = utils$5.isWindows(options);
  const regex = isState ? picomatch$2.compileRe(glob, options) : picomatch$2.makeRe(glob, options, false, true);
  const state = regex.state;
  delete regex.state;
  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
    isIgnored = picomatch$2(opts.ignore, ignoreOpts, returnState);
  }
  const matcher = (input, returnObject = false) => {
    const { isMatch, match, output } = picomatch$2.test(input, regex, options, { glob, posix });
    const result = { glob, state, regex, posix, input, output, match, isMatch };
    if (typeof opts.onResult === "function") {
      opts.onResult(result);
    }
    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (isIgnored(input)) {
      if (typeof opts.onIgnore === "function") {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (typeof opts.onMatch === "function") {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };
  if (returnState) {
    matcher.state = state;
  }
  return matcher;
};
picomatch$2.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected input to be a string");
  }
  if (input === "") {
    return { isMatch: false, output: "" };
  }
  const opts = options || {};
  const format = opts.format || (posix ? utils$5.toPosixSlashes : null);
  let match = input === glob;
  let output = match && format ? format(input) : input;
  if (match === false) {
    output = format ? format(input) : input;
    match = output === glob;
  }
  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch$2.matchBase(input, regex, options, posix);
    } else {
      match = regex.exec(output);
    }
  }
  return { isMatch: Boolean(match), match, output };
};
picomatch$2.matchBase = (input, glob, options, posix = utils$5.isWindows(options)) => {
  const regex = glob instanceof RegExp ? glob : picomatch$2.makeRe(glob, options);
  return regex.test(path$d.basename(input));
};
picomatch$2.isMatch = (str2, patterns, options) => picomatch$2(patterns, options)(str2);
picomatch$2.parse = (pattern, options) => {
  if (Array.isArray(pattern))
    return pattern.map((p) => picomatch$2.parse(p, options));
  return parse$1(pattern, { ...options, fastpaths: false });
};
picomatch$2.scan = (input, options) => scan(input, options);
picomatch$2.compileRe = (state, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return state.output;
  }
  const opts = options || {};
  const prepend = opts.contains ? "" : "^";
  const append2 = opts.contains ? "" : "$";
  let source = `${prepend}(?:${state.output})${append2}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }
  const regex = picomatch$2.toRegex(source, options);
  if (returnState === true) {
    regex.state = state;
  }
  return regex;
};
picomatch$2.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== "string") {
    throw new TypeError("Expected a non-empty string");
  }
  let parsed = { negated: false, fastpaths: true };
  if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
    parsed.output = parse$1.fastpaths(input, options);
  }
  if (!parsed.output) {
    parsed = parse$1(input, options);
  }
  return picomatch$2.compileRe(parsed, options, returnOutput, returnState);
};
picomatch$2.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
  } catch (err) {
    if (options && options.debug === true)
      throw err;
    return /$^/;
  }
};
picomatch$2.constants = constants$2;
var picomatch_1 = picomatch$2;
var picomatch$1 = picomatch_1;
const util$1 = require$$2$1;
const braces = braces_1;
const picomatch = picomatch$1;
const utils$4 = utils$8;
const isEmptyString = (v) => v === "" || v === "./";
const hasBraces = (v) => {
  const index2 = v.indexOf("{");
  return index2 > -1 && v.indexOf("}", index2) > -1;
};
const micromatch = (list, patterns, options) => {
  patterns = [].concat(patterns);
  list = [].concat(list);
  let omit2 = /* @__PURE__ */ new Set();
  let keep = /* @__PURE__ */ new Set();
  let items = /* @__PURE__ */ new Set();
  let negatives = 0;
  let onResult = (state) => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };
  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated)
      negatives++;
    for (let item of list) {
      let matched = isMatch(item, true);
      let match = negated ? !matched.isMatch : matched.isMatch;
      if (!match)
        continue;
      if (negated) {
        omit2.add(matched.output);
      } else {
        omit2.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }
  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter((item) => !omit2.has(item));
  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(", ")}"`);
    }
    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
    }
  }
  return matches;
};
micromatch.match = micromatch;
micromatch.matcher = (pattern, options) => picomatch(pattern, options);
micromatch.isMatch = (str2, patterns, options) => picomatch(patterns, options)(str2);
micromatch.any = micromatch.isMatch;
micromatch.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = /* @__PURE__ */ new Set();
  let items = [];
  let onResult = (state) => {
    if (options.onResult)
      options.onResult(state);
    items.push(state.output);
  };
  let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
  for (let item of items) {
    if (!matches.has(item)) {
      result.add(item);
    }
  }
  return [...result];
};
micromatch.contains = (str2, pattern, options) => {
  if (typeof str2 !== "string") {
    throw new TypeError(`Expected a string: "${util$1.inspect(str2)}"`);
  }
  if (Array.isArray(pattern)) {
    return pattern.some((p) => micromatch.contains(str2, p, options));
  }
  if (typeof pattern === "string") {
    if (isEmptyString(str2) || isEmptyString(pattern)) {
      return false;
    }
    if (str2.includes(pattern) || str2.startsWith("./") && str2.slice(2).includes(pattern)) {
      return true;
    }
  }
  return micromatch.isMatch(str2, pattern, { ...options, contains: true });
};
micromatch.matchKeys = (obj, patterns, options) => {
  if (!utils$4.isObject(obj)) {
    throw new TypeError("Expected the first argument to be an object");
  }
  let keys2 = micromatch(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys2)
    res[key] = obj[key];
  return res;
};
micromatch.some = (list, patterns, options) => {
  let items = [].concat(list);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (items.some((item) => isMatch(item))) {
      return true;
    }
  }
  return false;
};
micromatch.every = (list, patterns, options) => {
  let items = [].concat(list);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (!items.every((item) => isMatch(item))) {
      return false;
    }
  }
  return true;
};
micromatch.all = (str2, patterns, options) => {
  if (typeof str2 !== "string") {
    throw new TypeError(`Expected a string: "${util$1.inspect(str2)}"`);
  }
  return [].concat(patterns).every((p) => picomatch(p, options)(str2));
};
micromatch.capture = (glob, input, options) => {
  let posix = utils$4.isWindows(options);
  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
  let match = regex.exec(posix ? utils$4.toPosixSlashes(input) : input);
  if (match) {
    return match.slice(1).map((v) => v === void 0 ? "" : v);
  }
};
micromatch.makeRe = (...args) => picomatch.makeRe(...args);
micromatch.scan = (...args) => picomatch.scan(...args);
micromatch.parse = (patterns, options) => {
  let res = [];
  for (let pattern of [].concat(patterns || [])) {
    for (let str2 of braces(String(pattern), options)) {
      res.push(picomatch.parse(str2, options));
    }
  }
  return res;
};
micromatch.braces = (pattern, options) => {
  if (typeof pattern !== "string")
    throw new TypeError("Expected a string");
  if (options && options.nobrace === true || !hasBraces(pattern)) {
    return [pattern];
  }
  return braces(pattern, options);
};
micromatch.braceExpand = (pattern, options) => {
  if (typeof pattern !== "string")
    throw new TypeError("Expected a string");
  return micromatch.braces(pattern, { ...options, expand: true });
};
micromatch.hasBraces = hasBraces;
var micromatch_1$1 = micromatch;
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(core$1, "__esModule", { value: true });
core$1.readPackageJSON = core$1.extractWorkspaces = core$1.isMatchWorkspaces = core$1.checkWorkspaces = core$1.findWorkspaceRoot = void 0;
const path_1 = __importDefault(require$$0$5);
const pkg_dir_1 = __importDefault(pkgDirExports);
const fs_1 = require$$0$4;
const micromatch_1 = __importDefault(micromatch_1$1);
function findWorkspaceRoot(initial) {
  if (!initial) {
    initial = process.cwd();
  }
  let _pkg = pkg_dir_1.default.sync(initial);
  if (!_pkg) {
    return null;
  }
  initial = path_1.default.normalize(_pkg);
  let previous = null;
  let current = initial;
  do {
    const manifest = readPackageJSON(current);
    extractWorkspaces(manifest);
    let { done, found } = checkWorkspaces(current, initial);
    if (done) {
      return found;
    }
    previous = current;
    current = path_1.default.dirname(current);
  } while (current !== previous);
  return null;
}
core$1.findWorkspaceRoot = findWorkspaceRoot;
function checkWorkspaces(current, initial) {
  const manifest = readPackageJSON(current);
  const workspaces = extractWorkspaces(manifest);
  let done = false;
  let found;
  let relativePath;
  if (workspaces) {
    done = true;
    relativePath = path_1.default.relative(current, initial);
    if (relativePath === "" || isMatchWorkspaces(relativePath, workspaces)) {
      found = current;
    } else {
      found = null;
    }
  }
  return {
    done,
    found,
    relativePath
  };
}
core$1.checkWorkspaces = checkWorkspaces;
function isMatchWorkspaces(relativePath, workspaces) {
  let ls = micromatch_1.default([relativePath], workspaces);
  return ls.length > 0;
}
core$1.isMatchWorkspaces = isMatchWorkspaces;
function extractWorkspaces(manifest) {
  const workspaces = (manifest || {}).workspaces;
  return workspaces && workspaces.packages || (Array.isArray(workspaces) ? workspaces : null);
}
core$1.extractWorkspaces = extractWorkspaces;
function readPackageJSON(dir) {
  const file2 = path_1.default.join(dir, "package.json");
  if (fs_1.existsSync(file2)) {
    return JSON.parse(fs_1.readFileSync(file2, "utf8"));
  }
  return null;
}
core$1.readPackageJSON = readPackageJSON;
findWorkspaceRoot.findWorkspaceRoot = findWorkspaceRoot;
findWorkspaceRoot.readPackageJSON = readPackageJSON;
findWorkspaceRoot.extractWorkspaces = extractWorkspaces;
findWorkspaceRoot.isMatchWorkspaces = isMatchWorkspaces;
findWorkspaceRoot.default = findWorkspaceRoot;
core$1.default = findWorkspaceRoot;
const core_1 = core$1;
core_1.findWorkspaceRoot;
var findUp = { exports: {} };
var locatePath = { exports: {} };
class Node {
  /// value;
  /// next;
  constructor(value) {
    this.value = value;
    this.next = void 0;
  }
}
let Queue$1 = class Queue {
  // TODO: Use private class fields when targeting Node.js 12.
  // #_head;
  // #_tail;
  // #_size;
  constructor() {
    this.clear();
  }
  enqueue(value) {
    const node = new Node(value);
    if (this._head) {
      this._tail.next = node;
      this._tail = node;
    } else {
      this._head = node;
      this._tail = node;
    }
    this._size++;
  }
  dequeue() {
    const current = this._head;
    if (!current) {
      return;
    }
    this._head = this._head.next;
    this._size--;
    return current.value;
  }
  clear() {
    this._head = void 0;
    this._tail = void 0;
    this._size = 0;
  }
  get size() {
    return this._size;
  }
  *[Symbol.iterator]() {
    let current = this._head;
    while (current) {
      yield current.value;
      current = current.next;
    }
  }
};
var yoctoQueue = Queue$1;
const Queue2 = yoctoQueue;
const pLimit$1 = (concurrency) => {
  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
    throw new TypeError("Expected `concurrency` to be a number from 1 and up");
  }
  const queue = new Queue2();
  let activeCount = 0;
  const next = () => {
    activeCount--;
    if (queue.size > 0) {
      queue.dequeue()();
    }
  };
  const run = async (fn, resolve, ...args) => {
    activeCount++;
    const result = (async () => fn(...args))();
    resolve(result);
    try {
      await result;
    } catch {
    }
    next();
  };
  const enqueue2 = (fn, resolve, ...args) => {
    queue.enqueue(run.bind(null, fn, resolve, ...args));
    (async () => {
      await Promise.resolve();
      if (activeCount < concurrency && queue.size > 0) {
        queue.dequeue()();
      }
    })();
  };
  const generator = (fn, ...args) => new Promise((resolve) => {
    enqueue2(fn, resolve, ...args);
  });
  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount
    },
    pendingCount: {
      get: () => queue.size
    },
    clearQueue: {
      value: () => {
        queue.clear();
      }
    }
  });
  return generator;
};
var pLimit_1 = pLimit$1;
const pLimit = pLimit_1;
class EndError2 extends Error {
  constructor(value) {
    super();
    this.value = value;
  }
}
const testElement = async (element, tester) => tester(await element);
const finder = async (element) => {
  const values = await Promise.all(element);
  if (values[1] === true) {
    throw new EndError2(values[0]);
  }
  return false;
};
const pLocate$1 = async (iterable, tester, options) => {
  options = {
    concurrency: Infinity,
    preserveOrder: true,
    ...options
  };
  const limit = pLimit(options.concurrency);
  const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
  const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
  try {
    await Promise.all(items.map((element) => checkLimit(finder, element)));
  } catch (error2) {
    if (error2 instanceof EndError2) {
      return error2.value;
    }
    throw error2;
  }
};
var pLocate_1 = pLocate$1;
const path$c = require$$0$5;
const fs$l = require$$0$4;
const { promisify: promisify$2 } = require$$2$1;
const pLocate = pLocate_1;
const fsStat = promisify$2(fs$l.stat);
const fsLStat = promisify$2(fs$l.lstat);
const typeMappings = {
  directory: "isDirectory",
  file: "isFile"
};
function checkType({ type: type2 }) {
  if (type2 in typeMappings) {
    return;
  }
  throw new Error(`Invalid type specified: ${type2}`);
}
const matchType = (type2, stat2) => type2 === void 0 || stat2[typeMappings[type2]]();
locatePath.exports = async (paths, options) => {
  options = {
    cwd: process.cwd(),
    type: "file",
    allowSymlinks: true,
    ...options
  };
  checkType(options);
  const statFn = options.allowSymlinks ? fsStat : fsLStat;
  return pLocate(paths, async (path_) => {
    try {
      const stat2 = await statFn(path$c.resolve(options.cwd, path_));
      return matchType(options.type, stat2);
    } catch {
      return false;
    }
  }, options);
};
locatePath.exports.sync = (paths, options) => {
  options = {
    cwd: process.cwd(),
    allowSymlinks: true,
    type: "file",
    ...options
  };
  checkType(options);
  const statFn = options.allowSymlinks ? fs$l.statSync : fs$l.lstatSync;
  for (const path_ of paths) {
    try {
      const stat2 = statFn(path$c.resolve(options.cwd, path_));
      if (matchType(options.type, stat2)) {
        return path_;
      }
    } catch {
    }
  }
};
var locatePathExports = locatePath.exports;
var pathExists$8 = { exports: {} };
const fs$k = require$$0$4;
const { promisify: promisify$1 } = require$$2$1;
const pAccess$1 = promisify$1(fs$k.access);
pathExists$8.exports = async (path2) => {
  try {
    await pAccess$1(path2);
    return true;
  } catch (_2) {
    return false;
  }
};
pathExists$8.exports.sync = (path2) => {
  try {
    fs$k.accessSync(path2);
    return true;
  } catch (_2) {
    return false;
  }
};
var pathExistsExports = pathExists$8.exports;
(function(module) {
  const path2 = require$$0$5;
  const locatePath2 = locatePathExports;
  const pathExists2 = pathExistsExports;
  const stop = Symbol("findUp.stop");
  module.exports = async (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const { root: root2 } = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = async (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath2(paths, locateOptions);
      }
      const foundPath = await name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath2([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({ ...options, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root2) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module.exports.sync = (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const { root: root2 } = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath2.sync(paths, locateOptions);
      }
      const foundPath = name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath2.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({ ...options, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root2) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module.exports.exists = pathExists2;
  module.exports.sync.exists = pathExists2.sync;
  module.exports.stop = stop;
})(findUp);
var pathExists$7 = { exports: {} };
const fs$j = require$$0$4;
const { promisify } = require$$2$1;
const pAccess = promisify(fs$j.access);
pathExists$7.exports = async (path2) => {
  try {
    await pAccess(path2);
    return true;
  } catch (_2) {
    return false;
  }
};
pathExists$7.exports.sync = (path2) => {
  try {
    fs$j.accessSync(path2);
    return true;
  } catch (_2) {
    return false;
  }
};
var loadYamlFile = { exports: {} };
var constants = require$$0$8;
var origCwd = process.cwd;
var cwd = null;
var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process);
  return cwd;
};
try {
  process.cwd();
} catch (er) {
}
if (typeof process.chdir === "function") {
  var chdir = process.chdir;
  process.chdir = function(d) {
    cwd = null;
    chdir.call(process, d);
  };
  if (Object.setPrototypeOf)
    Object.setPrototypeOf(process.chdir, chdir);
}
var polyfills$1 = patch$1;
function patch$1(fs2) {
  if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs2);
  }
  if (!fs2.lutimes) {
    patchLutimes(fs2);
  }
  fs2.chown = chownFix(fs2.chown);
  fs2.fchown = chownFix(fs2.fchown);
  fs2.lchown = chownFix(fs2.lchown);
  fs2.chmod = chmodFix(fs2.chmod);
  fs2.fchmod = chmodFix(fs2.fchmod);
  fs2.lchmod = chmodFix(fs2.lchmod);
  fs2.chownSync = chownFixSync(fs2.chownSync);
  fs2.fchownSync = chownFixSync(fs2.fchownSync);
  fs2.lchownSync = chownFixSync(fs2.lchownSync);
  fs2.chmodSync = chmodFixSync(fs2.chmodSync);
  fs2.fchmodSync = chmodFixSync(fs2.fchmodSync);
  fs2.lchmodSync = chmodFixSync(fs2.lchmodSync);
  fs2.stat = statFix(fs2.stat);
  fs2.fstat = statFix(fs2.fstat);
  fs2.lstat = statFix(fs2.lstat);
  fs2.statSync = statFixSync(fs2.statSync);
  fs2.fstatSync = statFixSync(fs2.fstatSync);
  fs2.lstatSync = statFixSync(fs2.lstatSync);
  if (fs2.chmod && !fs2.lchmod) {
    fs2.lchmod = function(path2, mode2, cb) {
      if (cb)
        process.nextTick(cb);
    };
    fs2.lchmodSync = function() {
    };
  }
  if (fs2.chown && !fs2.lchown) {
    fs2.lchown = function(path2, uid, gid, cb) {
      if (cb)
        process.nextTick(cb);
    };
    fs2.lchownSync = function() {
    };
  }
  if (platform === "win32") {
    fs2.rename = typeof fs2.rename !== "function" ? fs2.rename : function(fs$rename) {
      function rename2(from, to, cb) {
        var start = Date.now();
        var backoff = 0;
        fs$rename(from, to, function CB(er) {
          if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
            setTimeout(function() {
              fs2.stat(to, function(stater, st) {
                if (stater && stater.code === "ENOENT")
                  fs$rename(from, to, CB);
                else
                  cb(er);
              });
            }, backoff);
            if (backoff < 100)
              backoff += 10;
            return;
          }
          if (cb)
            cb(er);
        });
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(rename2, fs$rename);
      return rename2;
    }(fs2.rename);
  }
  fs2.read = typeof fs2.read !== "function" ? fs2.read : function(fs$read) {
    function read(fd, buffer, offset, length, position, callback_) {
      var callback;
      if (callback_ && typeof callback_ === "function") {
        var eagCounter = 0;
        callback = function(er, _2, __) {
          if (er && er.code === "EAGAIN" && eagCounter < 10) {
            eagCounter++;
            return fs$read.call(fs2, fd, buffer, offset, length, position, callback);
          }
          callback_.apply(this, arguments);
        };
      }
      return fs$read.call(fs2, fd, buffer, offset, length, position, callback);
    }
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(read, fs$read);
    return read;
  }(fs2.read);
  fs2.readSync = typeof fs2.readSync !== "function" ? fs2.readSync : /* @__PURE__ */ function(fs$readSync) {
    return function(fd, buffer, offset, length, position) {
      var eagCounter = 0;
      while (true) {
        try {
          return fs$readSync.call(fs2, fd, buffer, offset, length, position);
        } catch (er) {
          if (er.code === "EAGAIN" && eagCounter < 10) {
            eagCounter++;
            continue;
          }
          throw er;
        }
      }
    };
  }(fs2.readSync);
  function patchLchmod(fs3) {
    fs3.lchmod = function(path2, mode2, callback) {
      fs3.open(
        path2,
        constants.O_WRONLY | constants.O_SYMLINK,
        mode2,
        function(err, fd) {
          if (err) {
            if (callback)
              callback(err);
            return;
          }
          fs3.fchmod(fd, mode2, function(err2) {
            fs3.close(fd, function(err22) {
              if (callback)
                callback(err2 || err22);
            });
          });
        }
      );
    };
    fs3.lchmodSync = function(path2, mode2) {
      var fd = fs3.openSync(path2, constants.O_WRONLY | constants.O_SYMLINK, mode2);
      var threw = true;
      var ret;
      try {
        ret = fs3.fchmodSync(fd, mode2);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs3.closeSync(fd);
          } catch (er) {
          }
        } else {
          fs3.closeSync(fd);
        }
      }
      return ret;
    };
  }
  function patchLutimes(fs3) {
    if (constants.hasOwnProperty("O_SYMLINK") && fs3.futimes) {
      fs3.lutimes = function(path2, at, mt, cb) {
        fs3.open(path2, constants.O_SYMLINK, function(er, fd) {
          if (er) {
            if (cb)
              cb(er);
            return;
          }
          fs3.futimes(fd, at, mt, function(er2) {
            fs3.close(fd, function(er22) {
              if (cb)
                cb(er2 || er22);
            });
          });
        });
      };
      fs3.lutimesSync = function(path2, at, mt) {
        var fd = fs3.openSync(path2, constants.O_SYMLINK);
        var ret;
        var threw = true;
        try {
          ret = fs3.futimesSync(fd, at, mt);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs3.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs3.closeSync(fd);
          }
        }
        return ret;
      };
    } else if (fs3.futimes) {
      fs3.lutimes = function(_a, _b, _c, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs3.lutimesSync = function() {
      };
    }
  }
  function chmodFix(orig) {
    if (!orig)
      return orig;
    return function(target, mode2, cb) {
      return orig.call(fs2, target, mode2, function(er) {
        if (chownErOk(er))
          er = null;
        if (cb)
          cb.apply(this, arguments);
      });
    };
  }
  function chmodFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, mode2) {
      try {
        return orig.call(fs2, target, mode2);
      } catch (er) {
        if (!chownErOk(er))
          throw er;
      }
    };
  }
  function chownFix(orig) {
    if (!orig)
      return orig;
    return function(target, uid, gid, cb) {
      return orig.call(fs2, target, uid, gid, function(er) {
        if (chownErOk(er))
          er = null;
        if (cb)
          cb.apply(this, arguments);
      });
    };
  }
  function chownFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, uid, gid) {
      try {
        return orig.call(fs2, target, uid, gid);
      } catch (er) {
        if (!chownErOk(er))
          throw er;
      }
    };
  }
  function statFix(orig) {
    if (!orig)
      return orig;
    return function(target, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = null;
      }
      function callback(er, stats) {
        if (stats) {
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
        }
        if (cb)
          cb.apply(this, arguments);
      }
      return options ? orig.call(fs2, target, options, callback) : orig.call(fs2, target, callback);
    };
  }
  function statFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, options) {
      var stats = options ? orig.call(fs2, target, options) : orig.call(fs2, target);
      if (stats) {
        if (stats.uid < 0)
          stats.uid += 4294967296;
        if (stats.gid < 0)
          stats.gid += 4294967296;
      }
      return stats;
    };
  }
  function chownErOk(er) {
    if (!er)
      return true;
    if (er.code === "ENOSYS")
      return true;
    var nonroot = !process.getuid || process.getuid() !== 0;
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true;
    }
    return false;
  }
}
var Stream = Stream$1.Stream;
var legacyStreams = legacy$1;
function legacy$1(fs2) {
  return {
    ReadStream,
    WriteStream
  };
  function ReadStream(path2, options) {
    if (!(this instanceof ReadStream))
      return new ReadStream(path2, options);
    Stream.call(this);
    var self2 = this;
    this.path = path2;
    this.fd = null;
    this.readable = true;
    this.paused = false;
    this.flags = "r";
    this.mode = 438;
    this.bufferSize = 64 * 1024;
    options = options || {};
    var keys2 = Object.keys(options);
    for (var index2 = 0, length = keys2.length; index2 < length; index2++) {
      var key = keys2[index2];
      this[key] = options[key];
    }
    if (this.encoding)
      this.setEncoding(this.encoding);
    if (this.start !== void 0) {
      if ("number" !== typeof this.start) {
        throw TypeError("start must be a Number");
      }
      if (this.end === void 0) {
        this.end = Infinity;
      } else if ("number" !== typeof this.end) {
        throw TypeError("end must be a Number");
      }
      if (this.start > this.end) {
        throw new Error("start must be <= end");
      }
      this.pos = this.start;
    }
    if (this.fd !== null) {
      process.nextTick(function() {
        self2._read();
      });
      return;
    }
    fs2.open(this.path, this.flags, this.mode, function(err, fd) {
      if (err) {
        self2.emit("error", err);
        self2.readable = false;
        return;
      }
      self2.fd = fd;
      self2.emit("open", fd);
      self2._read();
    });
  }
  function WriteStream(path2, options) {
    if (!(this instanceof WriteStream))
      return new WriteStream(path2, options);
    Stream.call(this);
    this.path = path2;
    this.fd = null;
    this.writable = true;
    this.flags = "w";
    this.encoding = "binary";
    this.mode = 438;
    this.bytesWritten = 0;
    options = options || {};
    var keys2 = Object.keys(options);
    for (var index2 = 0, length = keys2.length; index2 < length; index2++) {
      var key = keys2[index2];
      this[key] = options[key];
    }
    if (this.start !== void 0) {
      if ("number" !== typeof this.start) {
        throw TypeError("start must be a Number");
      }
      if (this.start < 0) {
        throw new Error("start must be >= zero");
      }
      this.pos = this.start;
    }
    this.busy = false;
    this._queue = [];
    if (this.fd === null) {
      this._open = fs2.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
      this.flush();
    }
  }
}
var clone_1 = clone$2;
var getPrototypeOf = Object.getPrototypeOf || function(obj) {
  return obj.__proto__;
};
function clone$2(obj) {
  if (obj === null || typeof obj !== "object")
    return obj;
  if (obj instanceof Object)
    var copy2 = { __proto__: getPrototypeOf(obj) };
  else
    var copy2 = /* @__PURE__ */ Object.create(null);
  Object.getOwnPropertyNames(obj).forEach(function(key) {
    Object.defineProperty(copy2, key, Object.getOwnPropertyDescriptor(obj, key));
  });
  return copy2;
}
var fs$i = require$$0$4;
var polyfills = polyfills$1;
var legacy = legacyStreams;
var clone$1 = clone_1;
var util = require$$2$1;
var gracefulQueue;
var previousSymbol;
if (typeof Symbol === "function" && typeof Symbol.for === "function") {
  gracefulQueue = Symbol.for("graceful-fs.queue");
  previousSymbol = Symbol.for("graceful-fs.previous");
} else {
  gracefulQueue = "___graceful-fs.queue";
  previousSymbol = "___graceful-fs.previous";
}
function noop() {
}
function publishQueue(context, queue) {
  Object.defineProperty(context, gracefulQueue, {
    get: function() {
      return queue;
    }
  });
}
var debug = noop;
if (util.debuglog)
  debug = util.debuglog("gfs4");
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
  debug = function() {
    var m = util.format.apply(util, arguments);
    m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
    console.error(m);
  };
if (!fs$i[gracefulQueue]) {
  var queue = commonjsGlobal[gracefulQueue] || [];
  publishQueue(fs$i, queue);
  fs$i.close = function(fs$close) {
    function close(fd, cb) {
      return fs$close.call(fs$i, fd, function(err) {
        if (!err) {
          resetQueue();
        }
        if (typeof cb === "function")
          cb.apply(this, arguments);
      });
    }
    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    });
    return close;
  }(fs$i.close);
  fs$i.closeSync = function(fs$closeSync) {
    function closeSync(fd) {
      fs$closeSync.apply(fs$i, arguments);
      resetQueue();
    }
    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    });
    return closeSync;
  }(fs$i.closeSync);
  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
    process.on("exit", function() {
      debug(fs$i[gracefulQueue]);
      require$$0$6.equal(fs$i[gracefulQueue].length, 0);
    });
  }
}
if (!commonjsGlobal[gracefulQueue]) {
  publishQueue(commonjsGlobal, fs$i[gracefulQueue]);
}
var gracefulFs = patch(clone$1(fs$i));
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs$i.__patched) {
  gracefulFs = patch(fs$i);
  fs$i.__patched = true;
}
function patch(fs2) {
  polyfills(fs2);
  fs2.gracefulify = patch;
  fs2.createReadStream = createReadStream;
  fs2.createWriteStream = createWriteStream;
  var fs$readFile = fs2.readFile;
  fs2.readFile = readFile2;
  function readFile2(path2, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    return go$readFile(path2, options, cb);
    function go$readFile(path3, options2, cb2, startTime) {
      return fs$readFile(path3, options2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$readFile, [path3, options2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$writeFile = fs2.writeFile;
  fs2.writeFile = writeFile2;
  function writeFile2(path2, data, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    return go$writeFile(path2, data, options, cb);
    function go$writeFile(path3, data2, options2, cb2, startTime) {
      return fs$writeFile(path3, data2, options2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$writeFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$appendFile = fs2.appendFile;
  if (fs$appendFile)
    fs2.appendFile = appendFile;
  function appendFile(path2, data, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    return go$appendFile(path2, data, options, cb);
    function go$appendFile(path3, data2, options2, cb2, startTime) {
      return fs$appendFile(path3, data2, options2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$appendFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$copyFile = fs2.copyFile;
  if (fs$copyFile)
    fs2.copyFile = copyFile2;
  function copyFile2(src, dest, flags, cb) {
    if (typeof flags === "function") {
      cb = flags;
      flags = 0;
    }
    return go$copyFile(src, dest, flags, cb);
    function go$copyFile(src2, dest2, flags2, cb2, startTime) {
      return fs$copyFile(src2, dest2, flags2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$readdir = fs2.readdir;
  fs2.readdir = readdir;
  var noReaddirOptionVersions = /^v[0-5]\./;
  function readdir(path2, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path3, options2, cb2, startTime) {
      return fs$readdir(path3, fs$readdirCallback(
        path3,
        options2,
        cb2,
        startTime
      ));
    } : function go$readdir2(path3, options2, cb2, startTime) {
      return fs$readdir(path3, options2, fs$readdirCallback(
        path3,
        options2,
        cb2,
        startTime
      ));
    };
    return go$readdir(path2, options, cb);
    function fs$readdirCallback(path3, options2, cb2, startTime) {
      return function(err, files) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([
            go$readdir,
            [path3, options2, cb2],
            err,
            startTime || Date.now(),
            Date.now()
          ]);
        else {
          if (files && files.sort)
            files.sort();
          if (typeof cb2 === "function")
            cb2.call(this, err, files);
        }
      };
    }
  }
  if (process.version.substr(0, 4) === "v0.8") {
    var legStreams = legacy(fs2);
    ReadStream = legStreams.ReadStream;
    WriteStream = legStreams.WriteStream;
  }
  var fs$ReadStream = fs2.ReadStream;
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
    ReadStream.prototype.open = ReadStream$open;
  }
  var fs$WriteStream = fs2.WriteStream;
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
    WriteStream.prototype.open = WriteStream$open;
  }
  Object.defineProperty(fs2, "ReadStream", {
    get: function() {
      return ReadStream;
    },
    set: function(val) {
      ReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(fs2, "WriteStream", {
    get: function() {
      return WriteStream;
    },
    set: function(val) {
      WriteStream = val;
    },
    enumerable: true,
    configurable: true
  });
  var FileReadStream = ReadStream;
  Object.defineProperty(fs2, "FileReadStream", {
    get: function() {
      return FileReadStream;
    },
    set: function(val) {
      FileReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  var FileWriteStream = WriteStream;
  Object.defineProperty(fs2, "FileWriteStream", {
    get: function() {
      return FileWriteStream;
    },
    set: function(val) {
      FileWriteStream = val;
    },
    enumerable: true,
    configurable: true
  });
  function ReadStream(path2, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this;
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
  }
  function ReadStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function(err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy();
        that.emit("error", err);
      } else {
        that.fd = fd;
        that.emit("open", fd);
        that.read();
      }
    });
  }
  function WriteStream(path2, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this;
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
  }
  function WriteStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function(err, fd) {
      if (err) {
        that.destroy();
        that.emit("error", err);
      } else {
        that.fd = fd;
        that.emit("open", fd);
      }
    });
  }
  function createReadStream(path2, options) {
    return new fs2.ReadStream(path2, options);
  }
  function createWriteStream(path2, options) {
    return new fs2.WriteStream(path2, options);
  }
  var fs$open = fs2.open;
  fs2.open = open;
  function open(path2, flags, mode2, cb) {
    if (typeof mode2 === "function")
      cb = mode2, mode2 = null;
    return go$open(path2, flags, mode2, cb);
    function go$open(path3, flags2, mode3, cb2, startTime) {
      return fs$open(path3, flags2, mode3, function(err, fd) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$open, [path3, flags2, mode3, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  return fs2;
}
function enqueue(elem) {
  debug("ENQUEUE", elem[0].name, elem[1]);
  fs$i[gracefulQueue].push(elem);
  retry();
}
var retryTimer;
function resetQueue() {
  var now = Date.now();
  for (var i = 0; i < fs$i[gracefulQueue].length; ++i) {
    if (fs$i[gracefulQueue][i].length > 2) {
      fs$i[gracefulQueue][i][3] = now;
      fs$i[gracefulQueue][i][4] = now;
    }
  }
  retry();
}
function retry() {
  clearTimeout(retryTimer);
  retryTimer = void 0;
  if (fs$i[gracefulQueue].length === 0)
    return;
  var elem = fs$i[gracefulQueue].shift();
  var fn = elem[0];
  var args = elem[1];
  var err = elem[2];
  var startTime = elem[3];
  var lastTime = elem[4];
  if (startTime === void 0) {
    debug("RETRY", fn.name, args);
    fn.apply(null, args);
  } else if (Date.now() - startTime >= 6e4) {
    debug("TIMEOUT", fn.name, args);
    var cb = args.pop();
    if (typeof cb === "function")
      cb.call(null, err);
  } else {
    var sinceAttempt = Date.now() - lastTime;
    var sinceStart = Math.max(lastTime - startTime, 1);
    var desiredDelay = Math.min(sinceStart * 1.2, 100);
    if (sinceAttempt >= desiredDelay) {
      debug("RETRY", fn.name, args);
      fn.apply(null, args.concat([startTime]));
    } else {
      fs$i[gracefulQueue].push(elem);
    }
  }
  if (retryTimer === void 0) {
    retryTimer = setTimeout(retry, 0);
  }
}
const processFn = (fn, options) => function(...args) {
  const P = options.promiseModule;
  return new P((resolve, reject) => {
    if (options.multiArgs) {
      args.push((...result) => {
        if (options.errorFirst) {
          if (result[0]) {
            reject(result);
          } else {
            result.shift();
            resolve(result);
          }
        } else {
          resolve(result);
        }
      });
    } else if (options.errorFirst) {
      args.push((error2, result) => {
        if (error2) {
          reject(error2);
        } else {
          resolve(result);
        }
      });
    } else {
      args.push(resolve);
    }
    fn.apply(this, args);
  });
};
var pify$1 = (input, options) => {
  options = Object.assign({
    exclude: [/.+(Sync|Stream)$/],
    errorFirst: true,
    promiseModule: Promise
  }, options);
  const objType = typeof input;
  if (!(input !== null && (objType === "object" || objType === "function"))) {
    throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``);
  }
  const filter = (key) => {
    const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
    return options.include ? options.include.some(match) : !options.exclude.some(match);
  };
  let ret;
  if (objType === "function") {
    ret = function(...args) {
      return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
    };
  } else {
    ret = Object.create(Object.getPrototypeOf(input));
  }
  for (const key in input) {
    const property2 = input[key];
    ret[key] = typeof property2 === "function" && filter(key) ? processFn(property2, options) : property2;
  }
  return ret;
};
var stripBom$3 = (x) => {
  if (typeof x !== "string") {
    throw new TypeError("Expected a string, got " + typeof x);
  }
  if (x.charCodeAt(0) === 65279) {
    return x.slice(1);
  }
  return x;
};
var jsYaml$1 = {};
var loader$1 = {};
var common$6 = {};
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject$1(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence))
    return sequence;
  else if (isNothing(sequence))
    return [];
  return [sequence];
}
function extend(target, source) {
  var index2, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index2 = 0, length = sourceKeys.length; index2 < length; index2 += 1) {
      key = sourceKeys[index2];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat2(string2, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string2;
  }
  return result;
}
function isNegativeZero(number2) {
  return number2 === 0 && Number.NEGATIVE_INFINITY === 1 / number2;
}
common$6.isNothing = isNothing;
common$6.isObject = isObject$1;
common$6.toArray = toArray;
common$6.repeat = repeat2;
common$6.isNegativeZero = isNegativeZero;
common$6.extend = extend;
function YAMLException$4(reason, mark2) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark2;
  this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
YAMLException$4.prototype = Object.create(Error.prototype);
YAMLException$4.prototype.constructor = YAMLException$4;
YAMLException$4.prototype.toString = function toString(compact3) {
  var result = this.name + ": ";
  result += this.reason || "(unknown reason)";
  if (!compact3 && this.mark) {
    result += " " + this.mark.toString();
  }
  return result;
};
var exception = YAMLException$4;
var common$5 = common$6;
function Mark$1(name, buffer, position, line, column) {
  this.name = name;
  this.buffer = buffer;
  this.position = position;
  this.line = line;
  this.column = column;
}
Mark$1.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;
  if (!this.buffer)
    return null;
  indent = indent || 4;
  maxLength = maxLength || 75;
  head = "";
  start = this.position;
  while (start > 0 && "\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;
    if (this.position - start > maxLength / 2 - 1) {
      head = " ... ";
      start += 5;
      break;
    }
  }
  tail = "";
  end = this.position;
  while (end < this.buffer.length && "\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;
    if (end - this.position > maxLength / 2 - 1) {
      tail = " ... ";
      end -= 5;
      break;
    }
  }
  snippet = this.buffer.slice(start, end);
  return common$5.repeat(" ", indent) + head + snippet + tail + "\n" + common$5.repeat(" ", indent + this.position - start + head.length) + "^";
};
Mark$1.prototype.toString = function toString2(compact3) {
  var snippet, where = "";
  if (this.name) {
    where += 'in "' + this.name + '" ';
  }
  where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
  if (!compact3) {
    snippet = this.getSnippet();
    if (snippet) {
      where += ":\n" + snippet;
    }
  }
  return where;
};
var mark = Mark$1;
var YAMLException$3 = exception;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$h(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException$3('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException$3('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$h;
var common$4 = common$6;
var YAMLException$2 = exception;
var Type$g = type;
function compileList(schema2, name, result) {
  var exclude = [];
  schema2.include.forEach(function(includedSchema) {
    result = compileList(includedSchema, name, result);
  });
  schema2[name].forEach(function(currentType) {
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });
    result.push(currentType);
  });
  return result.filter(function(type2, index2) {
    return exclude.indexOf(index2) === -1;
  });
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {}
  }, index2, length;
  function collectType(type2) {
    result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
  }
  for (index2 = 0, length = arguments.length; index2 < length; index2 += 1) {
    arguments[index2].forEach(collectType);
  }
  return result;
}
function Schema$5(definition) {
  this.include = definition.include || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];
  this.implicit.forEach(function(type2) {
    if (type2.loadKind && type2.loadKind !== "scalar") {
      throw new YAMLException$2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
  });
  this.compiledImplicit = compileList(this, "implicit", []);
  this.compiledExplicit = compileList(this, "explicit", []);
  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
}
Schema$5.DEFAULT = null;
Schema$5.create = function createSchema() {
  var schemas, types;
  switch (arguments.length) {
    case 1:
      schemas = Schema$5.DEFAULT;
      types = arguments[0];
      break;
    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;
    default:
      throw new YAMLException$2("Wrong number of arguments for Schema.create function");
  }
  schemas = common$4.toArray(schemas);
  types = common$4.toArray(types);
  if (!schemas.every(function(schema2) {
    return schema2 instanceof Schema$5;
  })) {
    throw new YAMLException$2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
  }
  if (!types.every(function(type2) {
    return type2 instanceof Type$g;
  })) {
    throw new YAMLException$2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
  }
  return new Schema$5({
    include: schemas,
    explicit: types
  });
};
var schema = Schema$5;
var Type$f = type;
var str = new Type$f("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(data) {
    return data !== null ? data : "";
  }
});
var Type$e = type;
var seq = new Type$e("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(data) {
    return data !== null ? data : [];
  }
});
var Type$d = type;
var map = new Type$d("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(data) {
    return data !== null ? data : {};
  }
});
var Schema$4 = schema;
var failsafe = new Schema$4({
  explicit: [
    str,
    seq,
    map
  ]
});
var Type$c = type;
function resolveYamlNull(data) {
  if (data === null)
    return true;
  var max2 = data.length;
  return max2 === 1 && data === "~" || max2 === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object2) {
  return object2 === null;
}
var _null = new Type$c("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    }
  },
  defaultStyle: "lowercase"
});
var Type$b = type;
function resolveYamlBoolean(data) {
  if (data === null)
    return false;
  var max2 = data.length;
  return max2 === 4 && (data === "true" || data === "True" || data === "TRUE") || max2 === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object2) {
  return Object.prototype.toString.call(object2) === "[object Boolean]";
}
var bool = new Type$b("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function(object2) {
      return object2 ? "true" : "false";
    },
    uppercase: function(object2) {
      return object2 ? "TRUE" : "FALSE";
    },
    camelcase: function(object2) {
      return object2 ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
var common$3 = common$6;
var Type$a = type;
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null)
    return false;
  var max2 = data.length, index2 = 0, hasDigits = false, ch;
  if (!max2)
    return false;
  ch = data[index2];
  if (ch === "-" || ch === "+") {
    ch = data[++index2];
  }
  if (ch === "0") {
    if (index2 + 1 === max2)
      return true;
    ch = data[++index2];
    if (ch === "b") {
      index2++;
      for (; index2 < max2; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index2++;
      for (; index2 < max2; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index2)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    for (; index2 < max2; index2++) {
      ch = data[index2];
      if (ch === "_")
        continue;
      if (!isOctCode(data.charCodeAt(index2)))
        return false;
      hasDigits = true;
    }
    return hasDigits && ch !== "_";
  }
  if (ch === "_")
    return false;
  for (; index2 < max2; index2++) {
    ch = data[index2];
    if (ch === "_")
      continue;
    if (ch === ":")
      break;
    if (!isDecCode(data.charCodeAt(index2))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  if (ch !== ":")
    return true;
  return /^(:[0-5]?[0-9])+$/.test(data.slice(index2));
}
function constructYamlInteger(data) {
  var value = data, sign2 = 1, ch, base, digits = [];
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign2 = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0")
    return 0;
  if (ch === "0") {
    if (value[1] === "b")
      return sign2 * parseInt(value.slice(2), 2);
    if (value[1] === "x")
      return sign2 * parseInt(value, 16);
    return sign2 * parseInt(value, 8);
  }
  if (value.indexOf(":") !== -1) {
    value.split(":").forEach(function(v) {
      digits.unshift(parseInt(v, 10));
    });
    value = 0;
    base = 1;
    digits.forEach(function(d) {
      value += d * base;
      base *= 60;
    });
    return sign2 * value;
  }
  return sign2 * parseInt(value, 10);
}
function isInteger(object2) {
  return Object.prototype.toString.call(object2) === "[object Number]" && (object2 % 1 === 0 && !common$3.isNegativeZero(object2));
}
var int = new Type$a("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    },
    octal: function(obj) {
      return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
    },
    decimal: function(obj) {
      return obj.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var common$2 = common$6;
var Type$9 = type;
var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function resolveYamlFloat(data) {
  if (data === null)
    return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign2, base, digits;
  value = data.replace(/_/g, "").toLowerCase();
  sign2 = value[0] === "-" ? -1 : 1;
  digits = [];
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  } else if (value.indexOf(":") >= 0) {
    value.split(":").forEach(function(v) {
      digits.unshift(parseFloat(v, 10));
    });
    value = 0;
    base = 1;
    digits.forEach(function(d) {
      value += d * base;
      base *= 60;
    });
    return sign2 * value;
  }
  return sign2 * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object2, style) {
  var res;
  if (isNaN(object2)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object2) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object2) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common$2.isNegativeZero(object2)) {
    return "-0.0";
  }
  res = object2.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object2) {
  return Object.prototype.toString.call(object2) === "[object Number]" && (object2 % 1 !== 0 || common$2.isNegativeZero(object2));
}
var float = new Type$9("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var Schema$3 = schema;
var json$1 = new Schema$3({
  include: [
    failsafe
  ],
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var Schema$2 = schema;
var core = new Schema$2({
  include: [
    json$1
  ]
});
var Type$8 = type;
var YAML_DATE_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
);
var YAML_TIMESTAMP_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
);
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date2;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-")
      delta = -delta;
  }
  date2 = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta)
    date2.setTime(date2.getTime() - delta);
  return date2;
}
function representYamlTimestamp(object2) {
  return object2.toISOString();
}
var timestamp = new Type$8("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
var Type$7 = type;
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge2 = new Type$7("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
function commonjsRequire(path2) {
  throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var NodeBuffer;
try {
  var _require$1 = commonjsRequire;
  NodeBuffer = _require$1("buffer").Buffer;
} catch (__) {
}
var Type$6 = type;
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  var code, idx, bitlen = 0, max2 = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max2; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64)
      continue;
    if (code < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max2 = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max2; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max2 % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  if (NodeBuffer) {
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }
  return result;
}
function representYamlBinary(object2) {
  var result = "", bits = 0, idx, tail, max2 = object2.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max2; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object2[idx];
  }
  tail = max2 % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(object2) {
  return NodeBuffer && NodeBuffer.isBuffer(object2);
}
var binary = new Type$6("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var Type$5 = type;
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null)
    return true;
  var objectKeys = [], index2, length, pair, pairKey, pairHasKey, object2 = data;
  for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
    pair = object2[index2];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new Type$5("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var Type$4 = type;
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null)
    return true;
  var index2, length, pair, keys2, result, object2 = data;
  result = new Array(object2.length);
  for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
    pair = object2[index2];
    if (_toString$1.call(pair) !== "[object Object]")
      return false;
    keys2 = Object.keys(pair);
    if (keys2.length !== 1)
      return false;
    result[index2] = [keys2[0], pair[keys2[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  var index2, length, pair, keys2, result, object2 = data;
  result = new Array(object2.length);
  for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
    pair = object2[index2];
    keys2 = Object.keys(pair);
    result[index2] = [keys2[0], pair[keys2[0]]];
  }
  return result;
}
var pairs = new Type$4("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var Type$3 = type;
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  var key, object2 = data;
  for (key in object2) {
    if (_hasOwnProperty$2.call(object2, key)) {
      if (object2[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new Type$3("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var Schema$1 = schema;
var default_safe = new Schema$1({
  include: [
    core
  ],
  implicit: [
    timestamp,
    merge2
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var Type$2 = type;
function resolveJavascriptUndefined() {
  return true;
}
function constructJavascriptUndefined() {
  return void 0;
}
function representJavascriptUndefined() {
  return "";
}
function isUndefined(object2) {
  return typeof object2 === "undefined";
}
var _undefined = new Type$2("tag:yaml.org,2002:js/undefined", {
  kind: "scalar",
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});
var Type$1 = type;
function resolveJavascriptRegExp(data) {
  if (data === null)
    return false;
  if (data.length === 0)
    return false;
  var regexp2 = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
  if (regexp2[0] === "/") {
    if (tail)
      modifiers = tail[1];
    if (modifiers.length > 3)
      return false;
    if (regexp2[regexp2.length - modifiers.length - 1] !== "/")
      return false;
  }
  return true;
}
function constructJavascriptRegExp(data) {
  var regexp2 = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
  if (regexp2[0] === "/") {
    if (tail)
      modifiers = tail[1];
    regexp2 = regexp2.slice(1, regexp2.length - modifiers.length - 1);
  }
  return new RegExp(regexp2, modifiers);
}
function representJavascriptRegExp(object2) {
  var result = "/" + object2.source + "/";
  if (object2.global)
    result += "g";
  if (object2.multiline)
    result += "m";
  if (object2.ignoreCase)
    result += "i";
  return result;
}
function isRegExp2(object2) {
  return Object.prototype.toString.call(object2) === "[object RegExp]";
}
var regexp = new Type$1("tag:yaml.org,2002:js/regexp", {
  kind: "scalar",
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp2,
  represent: representJavascriptRegExp
});
var esprima;
try {
  var _require = commonjsRequire;
  esprima = _require("esprima");
} catch (_2) {
  if (typeof window !== "undefined")
    esprima = window.esprima;
}
var Type = type;
function resolveJavascriptFunction(data) {
  if (data === null)
    return false;
  try {
    var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
    if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
function constructJavascriptFunction(data) {
  var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
  if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
    throw new Error("Failed to resolve function");
  }
  ast.body[0].expression.params.forEach(function(param) {
    params.push(param.name);
  });
  body = ast.body[0].expression.body.range;
  if (ast.body[0].expression.body.type === "BlockStatement") {
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  }
  return new Function(params, "return " + source.slice(body[0], body[1]));
}
function representJavascriptFunction(object2) {
  return object2.toString();
}
function isFunction(object2) {
  return Object.prototype.toString.call(object2) === "[object Function]";
}
var _function = new Type("tag:yaml.org,2002:js/function", {
  kind: "scalar",
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});
var Schema = schema;
var default_full = Schema.DEFAULT = new Schema({
  include: [
    default_safe
  ],
  explicit: [
    _undefined,
    regexp,
    _function
  ]
});
var common$1 = common$6;
var YAMLException$1 = exception;
var Mark = mark;
var DEFAULT_SAFE_SCHEMA$1 = default_safe;
var DEFAULT_FULL_SCHEMA$1 = default_full;
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "" : c === 95 ? " " : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || DEFAULT_FULL_SCHEMA$1;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.documents = [];
}
function generateError(state, message) {
  return new YAMLException$1(
    message,
    new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart)
  );
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index2, quantity;
  if (!common$1.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index2 = 0, quantity = sourceKeys.length; index2 < quantity; index2 += 1) {
    key = sourceKeys[index2];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index2, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index2 = 0, quantity = keyNode.length; index2 < quantity; index2 += 1) {
      if (Array.isArray(keyNode[index2])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index2]) === "[object Object]") {
        keyNode[index2] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index2 = 0, quantity = valueNode.length; index2 < quantity; index2 += 1) {
        mergeMappings(state, _result, valueNode[index2], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common$1.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common$1.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common$1.repeat("\n", emptyLines);
      }
    } else {
      state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    _pos = state.position;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    } else {
      break;
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if (state.lineIndent > nodeIndent && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag !== null && state.tag !== "!") {
    if (state.tag === "?") {
      if (state.result !== null && state.kind !== "scalar") {
        throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
      }
      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type2 = state.implicitTypes[typeIndex];
        if (type2.resolve(state.result)) {
          state.result = type2.construct(state.result);
          state.tag = type2.tag;
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
      if (state.result !== null && type2.kind !== state.kind) {
        throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
      }
      if (!type2.resolve(state.result)) {
        throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
      } else {
        state.result = type2.construct(state.result);
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch))
        break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index2 = 0, length = documents.length; index2 < length; index2 += 1) {
    iterator(documents[index2]);
  }
}
function load(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException$1("expected a single document in the stream, but found more");
}
function safeLoadAll(input, iterator, options) {
  if (typeof iterator === "object" && iterator !== null && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  return loadAll(input, iterator, common$1.extend({ schema: DEFAULT_SAFE_SCHEMA$1 }, options));
}
function safeLoad(input, options) {
  return load(input, common$1.extend({ schema: DEFAULT_SAFE_SCHEMA$1 }, options));
}
loader$1.loadAll = loadAll;
loader$1.load = load;
loader$1.safeLoadAll = safeLoadAll;
loader$1.safeLoad = safeLoad;
var dumper$1 = {};
var common = common$6;
var YAMLException = exception;
var DEFAULT_FULL_SCHEMA = default_full;
var DEFAULT_SAFE_SCHEMA = default_safe;
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
function compileStyleMap(schema2, map2) {
  var result, keys2, index2, length, tag, style, type2;
  if (map2 === null)
    return {};
  result = {};
  keys2 = Object.keys(map2);
  for (index2 = 0, length = keys2.length; index2 < length; index2 += 1) {
    tag = keys2[index2];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string2, handle, length;
  string2 = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string2.length) + string2;
}
function State(options) {
  this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string2, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string2.length;
  while (position < length) {
    next = string2.indexOf("\n", position);
    if (next === -1) {
      line = string2.slice(position);
      position = length;
    } else {
      line = string2.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n")
      result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index2, length, type2;
  for (index2 = 0, length = state.implicitTypes.length; index2 < length; index2 += 1) {
    type2 = state.implicitTypes[index2];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
}
function isNsChar(c) {
  return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev) {
  return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function needIndentIndicator(string2) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string2);
}
var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
function chooseScalarStyle(string2, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char, prev_char;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(string2.charCodeAt(0)) && !isWhitespace(string2.charCodeAt(string2.length - 1));
  if (singleLineOnly) {
    for (i = 0; i < string2.length; i++) {
      char = string2.charCodeAt(i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      prev_char = i > 0 ? string2.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
  } else {
    for (i = 0; i < string2.length; i++) {
      char = string2.charCodeAt(i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      prev_char = i > 0 ? string2.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    return plain && !testAmbiguousType(string2) ? STYLE_PLAIN : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string2)) {
    return STYLE_DOUBLE;
  }
  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
}
function writeScalar(state, string2, level, iskey) {
  state.dump = function() {
    if (string2.length === 0) {
      return "''";
    }
    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string2) !== -1) {
      return "'" + string2 + "'";
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string3) {
      return testImplicitResolving(state, string3);
    }
    switch (chooseScalarStyle(string2, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string2;
      case STYLE_SINGLE:
        return "'" + string2.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string2, state.indent) + dropEndingNewline(indentString(string2, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string2, state.indent) + dropEndingNewline(indentString(foldString(string2, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string2) + '"';
      default:
        throw new YAMLException("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string2, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string2) ? String(indentPerLevel) : "";
  var clip = string2[string2.length - 1] === "\n";
  var keep = clip && (string2[string2.length - 2] === "\n" || string2 === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string2) {
  return string2[string2.length - 1] === "\n" ? string2.slice(0, -1) : string2;
}
function foldString(string2, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string2.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string2.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string2.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string2[0] === "\n" || string2[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string2)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ")
    return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string2) {
  var result = "";
  var char, nextChar;
  var escapeSeq;
  for (var i = 0; i < string2.length; i++) {
    char = string2.charCodeAt(i);
    if (char >= 55296 && char <= 56319) {
      nextChar = string2.charCodeAt(i + 1);
      if (nextChar >= 56320 && nextChar <= 57343) {
        result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
        i++;
        continue;
      }
    }
    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char) ? string2[i] : escapeSeq || encodeHex(char);
  }
  return result;
}
function writeFlowSequence(state, level, object2) {
  var _result = "", _tag = state.tag, index2, length;
  for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
    if (writeNode(state, level, object2[index2], false, false)) {
      if (index2 !== 0)
        _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object2, compact3) {
  var _result = "", _tag = state.tag, index2, length;
  for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
    if (writeNode(state, level + 1, object2[index2], true, true)) {
      if (!compact3 || index2 !== 0) {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object2) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object2), index2, length, objectKey, objectValue, pairBuffer;
  for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
    pairBuffer = "";
    if (index2 !== 0)
      pairBuffer += ", ";
    if (state.condenseFlow)
      pairBuffer += '"';
    objectKey = objectKeyList[index2];
    objectValue = object2[objectKey];
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024)
      pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object2, compact3) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object2), index2, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new YAMLException("sortKeys must be a boolean or a function");
  }
  for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
    pairBuffer = "";
    if (!compact3 || index2 !== 0) {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index2];
    objectValue = object2[objectKey];
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object2, explicit) {
  var _result, typeList, index2, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index2 = 0, length = typeList.length; index2 < length; index2 += 1) {
    type2 = typeList[index2];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object2 === "object" && object2 instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object2))) {
      state.tag = explicit ? type2.tag : "?";
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object2, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object2, style);
        } else {
          throw new YAMLException("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object2, block, compact3, iskey) {
  state.tag = null;
  state.dump = object2;
  if (!detectType(state, object2, false)) {
    detectType(state, object2, true);
  }
  var type2 = _toString.call(state.dump);
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object2);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact3 = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact3);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
      if (block && state.dump.length !== 0) {
        writeBlockSequence(state, arrayLevel, state.dump, compact3);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid)
        return false;
      throw new YAMLException("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      state.dump = "!<" + state.tag + "> " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object2, state) {
  var objects = [], duplicatesIndexes = [], index2, length;
  inspectNode(object2, objects, duplicatesIndexes);
  for (index2 = 0, length = duplicatesIndexes.length; index2 < length; index2 += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index2]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object2, objects, duplicatesIndexes) {
  var objectKeyList, index2, length;
  if (object2 !== null && typeof object2 === "object") {
    index2 = objects.indexOf(object2);
    if (index2 !== -1) {
      if (duplicatesIndexes.indexOf(index2) === -1) {
        duplicatesIndexes.push(index2);
      }
    } else {
      objects.push(object2);
      if (Array.isArray(object2)) {
        for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
          inspectNode(object2[index2], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object2);
        for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
          inspectNode(object2[objectKeyList[index2]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs)
    getDuplicateReferences(input, state);
  if (writeNode(state, 0, input, true, true))
    return state.dump + "\n";
  return "";
}
function safeDump(input, options) {
  return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}
dumper$1.dump = dump;
dumper$1.safeDump = safeDump;
var loader = loader$1;
var dumper = dumper$1;
function deprecated(name) {
  return function() {
    throw new Error("Function " + name + " is deprecated and cannot be used.");
  };
}
jsYaml$1.Type = type;
jsYaml$1.Schema = schema;
jsYaml$1.FAILSAFE_SCHEMA = failsafe;
jsYaml$1.JSON_SCHEMA = json$1;
jsYaml$1.CORE_SCHEMA = core;
jsYaml$1.DEFAULT_SAFE_SCHEMA = default_safe;
jsYaml$1.DEFAULT_FULL_SCHEMA = default_full;
jsYaml$1.load = loader.load;
jsYaml$1.loadAll = loader.loadAll;
jsYaml$1.safeLoad = loader.safeLoad;
jsYaml$1.safeLoadAll = loader.safeLoadAll;
jsYaml$1.dump = dumper.dump;
jsYaml$1.safeDump = dumper.safeDump;
jsYaml$1.YAMLException = exception;
jsYaml$1.MINIMAL_SCHEMA = failsafe;
jsYaml$1.SAFE_SCHEMA = default_safe;
jsYaml$1.DEFAULT_SCHEMA = default_full;
jsYaml$1.scan = deprecated("scan");
jsYaml$1.parse = deprecated("parse");
jsYaml$1.compose = deprecated("compose");
jsYaml$1.addConstructor = deprecated("addConstructor");
var yaml$1 = jsYaml$1;
var jsYaml = yaml$1;
const fs$h = gracefulFs;
const pify = pify$1;
const stripBom$2 = stripBom$3;
const yaml = jsYaml;
const parse = (data) => yaml.safeLoad(stripBom$2(data));
loadYamlFile.exports = (fp2) => pify(fs$h.readFile)(fp2, "utf8").then((data) => parse(data));
loadYamlFile.exports.sync = (fp2) => parse(fs$h.readFileSync(fp2, "utf8"));
var slugify$2 = { exports: {} };
var escapeStringRegexp$3 = (string2) => {
  if (typeof string2 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
};
var INFINITY = 1 / 0;
var symbolTag = "[object Symbol]";
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23", rsComboSymbolsRange = "\\u20d0-\\u20f0";
var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
var reComboMark = RegExp(rsCombo, "g");
var deburredLetters = {
  // Latin-1 Supplement block.
  "À": "A",
  "Á": "A",
  "Â": "A",
  "Ã": "A",
  "Ä": "A",
  "Å": "A",
  "à": "a",
  "á": "a",
  "â": "a",
  "ã": "a",
  "ä": "a",
  "å": "a",
  "Ç": "C",
  "ç": "c",
  "Ð": "D",
  "ð": "d",
  "È": "E",
  "É": "E",
  "Ê": "E",
  "Ë": "E",
  "è": "e",
  "é": "e",
  "ê": "e",
  "ë": "e",
  "Ì": "I",
  "Í": "I",
  "Î": "I",
  "Ï": "I",
  "ì": "i",
  "í": "i",
  "î": "i",
  "ï": "i",
  "Ñ": "N",
  "ñ": "n",
  "Ò": "O",
  "Ó": "O",
  "Ô": "O",
  "Õ": "O",
  "Ö": "O",
  "Ø": "O",
  "ò": "o",
  "ó": "o",
  "ô": "o",
  "õ": "o",
  "ö": "o",
  "ø": "o",
  "Ù": "U",
  "Ú": "U",
  "Û": "U",
  "Ü": "U",
  "ù": "u",
  "ú": "u",
  "û": "u",
  "ü": "u",
  "Ý": "Y",
  "ý": "y",
  "ÿ": "y",
  "Æ": "Ae",
  "æ": "ae",
  "Þ": "Th",
  "þ": "th",
  "ß": "ss",
  // Latin Extended-A block.
  "Ā": "A",
  "Ă": "A",
  "Ą": "A",
  "ā": "a",
  "ă": "a",
  "ą": "a",
  "Ć": "C",
  "Ĉ": "C",
  "Ċ": "C",
  "Č": "C",
  "ć": "c",
  "ĉ": "c",
  "ċ": "c",
  "č": "c",
  "Ď": "D",
  "Đ": "D",
  "ď": "d",
  "đ": "d",
  "Ē": "E",
  "Ĕ": "E",
  "Ė": "E",
  "Ę": "E",
  "Ě": "E",
  "ē": "e",
  "ĕ": "e",
  "ė": "e",
  "ę": "e",
  "ě": "e",
  "Ĝ": "G",
  "Ğ": "G",
  "Ġ": "G",
  "Ģ": "G",
  "ĝ": "g",
  "ğ": "g",
  "ġ": "g",
  "ģ": "g",
  "Ĥ": "H",
  "Ħ": "H",
  "ĥ": "h",
  "ħ": "h",
  "Ĩ": "I",
  "Ī": "I",
  "Ĭ": "I",
  "Į": "I",
  "İ": "I",
  "ĩ": "i",
  "ī": "i",
  "ĭ": "i",
  "į": "i",
  "ı": "i",
  "Ĵ": "J",
  "ĵ": "j",
  "Ķ": "K",
  "ķ": "k",
  "ĸ": "k",
  "Ĺ": "L",
  "Ļ": "L",
  "Ľ": "L",
  "Ŀ": "L",
  "Ł": "L",
  "ĺ": "l",
  "ļ": "l",
  "ľ": "l",
  "ŀ": "l",
  "ł": "l",
  "Ń": "N",
  "Ņ": "N",
  "Ň": "N",
  "Ŋ": "N",
  "ń": "n",
  "ņ": "n",
  "ň": "n",
  "ŋ": "n",
  "Ō": "O",
  "Ŏ": "O",
  "Ő": "O",
  "ō": "o",
  "ŏ": "o",
  "ő": "o",
  "Ŕ": "R",
  "Ŗ": "R",
  "Ř": "R",
  "ŕ": "r",
  "ŗ": "r",
  "ř": "r",
  "Ś": "S",
  "Ŝ": "S",
  "Ş": "S",
  "Š": "S",
  "ś": "s",
  "ŝ": "s",
  "ş": "s",
  "š": "s",
  "Ţ": "T",
  "Ť": "T",
  "Ŧ": "T",
  "ţ": "t",
  "ť": "t",
  "ŧ": "t",
  "Ũ": "U",
  "Ū": "U",
  "Ŭ": "U",
  "Ů": "U",
  "Ű": "U",
  "Ų": "U",
  "ũ": "u",
  "ū": "u",
  "ŭ": "u",
  "ů": "u",
  "ű": "u",
  "ų": "u",
  "Ŵ": "W",
  "ŵ": "w",
  "Ŷ": "Y",
  "ŷ": "y",
  "Ÿ": "Y",
  "Ź": "Z",
  "Ż": "Z",
  "Ž": "Z",
  "ź": "z",
  "ż": "z",
  "ž": "z",
  "Ĳ": "IJ",
  "ĳ": "ij",
  "Œ": "Oe",
  "œ": "oe",
  "ŉ": "'n",
  "ſ": "ss"
};
var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
function basePropertyOf(object2) {
  return function(key) {
    return object2 == null ? void 0 : object2[key];
  };
}
var deburrLetter = basePropertyOf(deburredLetters);
var objectProto$2 = Object.prototype;
var objectToString = objectProto$2.toString;
var Symbol$2 = root.Symbol;
var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString$1 = symbolProto ? symbolProto.toString : void 0;
function baseToString$1(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString$1 ? symbolToString$1.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function isObjectLike$1(value) {
  return !!value && typeof value == "object";
}
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike$1(value) && objectToString.call(value) == symbolTag;
}
function toString$2(value) {
  return value == null ? "" : baseToString$1(value);
}
function deburr$1(string2) {
  string2 = toString$2(string2);
  return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
}
var lodash_deburr = deburr$1;
const matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
var escapeStringRegexp$2 = (string2) => {
  if (typeof string2 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string2.replace(matchOperatorsRegex, "\\$&");
};
var replacements = [
  // German umlauts
  ["ß", "ss"],
  ["ä", "ae"],
  ["Ä", "Ae"],
  ["ö", "oe"],
  ["Ö", "Oe"],
  ["ü", "ue"],
  ["Ü", "Ue"],
  // Latin
  ["À", "A"],
  ["Á", "A"],
  ["Â", "A"],
  ["Ã", "A"],
  ["Ä", "Ae"],
  ["Å", "A"],
  ["Æ", "AE"],
  ["Ç", "C"],
  ["È", "E"],
  ["É", "E"],
  ["Ê", "E"],
  ["Ë", "E"],
  ["Ì", "I"],
  ["Í", "I"],
  ["Î", "I"],
  ["Ï", "I"],
  ["Ð", "D"],
  ["Ñ", "N"],
  ["Ò", "O"],
  ["Ó", "O"],
  ["Ô", "O"],
  ["Õ", "O"],
  ["Ö", "Oe"],
  ["Ő", "O"],
  ["Ø", "O"],
  ["Ù", "U"],
  ["Ú", "U"],
  ["Û", "U"],
  ["Ü", "Ue"],
  ["Ű", "U"],
  ["Ý", "Y"],
  ["Þ", "TH"],
  ["ß", "ss"],
  ["à", "a"],
  ["á", "a"],
  ["â", "a"],
  ["ã", "a"],
  ["ä", "ae"],
  ["å", "a"],
  ["æ", "ae"],
  ["ç", "c"],
  ["è", "e"],
  ["é", "e"],
  ["ê", "e"],
  ["ë", "e"],
  ["ì", "i"],
  ["í", "i"],
  ["î", "i"],
  ["ï", "i"],
  ["ð", "d"],
  ["ñ", "n"],
  ["ò", "o"],
  ["ó", "o"],
  ["ô", "o"],
  ["õ", "o"],
  ["ö", "oe"],
  ["ő", "o"],
  ["ø", "o"],
  ["ù", "u"],
  ["ú", "u"],
  ["û", "u"],
  ["ü", "ue"],
  ["ű", "u"],
  ["ý", "y"],
  ["þ", "th"],
  ["ÿ", "y"],
  ["ẞ", "SS"],
  // Vietnamese
  ["à", "a"],
  ["À", "A"],
  ["á", "a"],
  ["Á", "A"],
  ["â", "a"],
  ["Â", "A"],
  ["ã", "a"],
  ["Ã", "A"],
  ["è", "e"],
  ["È", "E"],
  ["é", "e"],
  ["É", "E"],
  ["ê", "e"],
  ["Ê", "E"],
  ["ì", "i"],
  ["Ì", "I"],
  ["í", "i"],
  ["Í", "I"],
  ["ò", "o"],
  ["Ò", "O"],
  ["ó", "o"],
  ["Ó", "O"],
  ["ô", "o"],
  ["Ô", "O"],
  ["õ", "o"],
  ["Õ", "O"],
  ["ù", "u"],
  ["Ù", "U"],
  ["ú", "u"],
  ["Ú", "U"],
  ["ý", "y"],
  ["Ý", "Y"],
  ["ă", "a"],
  ["Ă", "A"],
  ["Đ", "D"],
  ["đ", "d"],
  ["ĩ", "i"],
  ["Ĩ", "I"],
  ["ũ", "u"],
  ["Ũ", "U"],
  ["ơ", "o"],
  ["Ơ", "O"],
  ["ư", "u"],
  ["Ư", "U"],
  ["ạ", "a"],
  ["Ạ", "A"],
  ["ả", "a"],
  ["Ả", "A"],
  ["ấ", "a"],
  ["Ấ", "A"],
  ["ầ", "a"],
  ["Ầ", "A"],
  ["ẩ", "a"],
  ["Ẩ", "A"],
  ["ẫ", "a"],
  ["Ẫ", "A"],
  ["ậ", "a"],
  ["Ậ", "A"],
  ["ắ", "a"],
  ["Ắ", "A"],
  ["ằ", "a"],
  ["Ằ", "A"],
  ["ẳ", "a"],
  ["Ẳ", "A"],
  ["ẵ", "a"],
  ["Ẵ", "A"],
  ["ặ", "a"],
  ["Ặ", "A"],
  ["ẹ", "e"],
  ["Ẹ", "E"],
  ["ẻ", "e"],
  ["Ẻ", "E"],
  ["ẽ", "e"],
  ["Ẽ", "E"],
  ["ế", "e"],
  ["Ế", "E"],
  ["ề", "e"],
  ["Ề", "E"],
  ["ể", "e"],
  ["Ể", "E"],
  ["ễ", "e"],
  ["Ễ", "E"],
  ["ệ", "e"],
  ["Ệ", "E"],
  ["ỉ", "i"],
  ["Ỉ", "I"],
  ["ị", "i"],
  ["Ị", "I"],
  ["ọ", "o"],
  ["Ọ", "O"],
  ["ỏ", "o"],
  ["Ỏ", "O"],
  ["ố", "o"],
  ["Ố", "O"],
  ["ồ", "o"],
  ["Ồ", "O"],
  ["ổ", "o"],
  ["Ổ", "O"],
  ["ỗ", "o"],
  ["Ỗ", "O"],
  ["ộ", "o"],
  ["Ộ", "O"],
  ["ớ", "o"],
  ["Ớ", "O"],
  ["ờ", "o"],
  ["Ờ", "O"],
  ["ở", "o"],
  ["Ở", "O"],
  ["ỡ", "o"],
  ["Ỡ", "O"],
  ["ợ", "o"],
  ["Ợ", "O"],
  ["ụ", "u"],
  ["Ụ", "U"],
  ["ủ", "u"],
  ["Ủ", "U"],
  ["ứ", "u"],
  ["Ứ", "U"],
  ["ừ", "u"],
  ["Ừ", "U"],
  ["ử", "u"],
  ["Ử", "U"],
  ["ữ", "u"],
  ["Ữ", "U"],
  ["ự", "u"],
  ["Ự", "U"],
  ["ỳ", "y"],
  ["Ỳ", "Y"],
  ["ỵ", "y"],
  ["Ỵ", "Y"],
  ["ỷ", "y"],
  ["Ỷ", "Y"],
  ["ỹ", "y"],
  ["Ỹ", "Y"],
  // Arabic
  ["ء", "e"],
  ["آ", "a"],
  ["أ", "a"],
  ["ؤ", "w"],
  ["إ", "i"],
  ["ئ", "y"],
  ["ا", "a"],
  ["ب", "b"],
  ["ة", "t"],
  ["ت", "t"],
  ["ث", "th"],
  ["ج", "j"],
  ["ح", "h"],
  ["خ", "kh"],
  ["د", "d"],
  ["ذ", "dh"],
  ["ر", "r"],
  ["ز", "z"],
  ["س", "s"],
  ["ش", "sh"],
  ["ص", "s"],
  ["ض", "d"],
  ["ط", "t"],
  ["ظ", "z"],
  ["ع", "e"],
  ["غ", "gh"],
  ["ـ", "_"],
  ["ف", "f"],
  ["ق", "q"],
  ["ك", "k"],
  ["ل", "l"],
  ["م", "m"],
  ["ن", "n"],
  ["ه", "h"],
  ["و", "w"],
  ["ى", "a"],
  ["ي", "y"],
  ["َ‎", "a"],
  ["ُ", "u"],
  ["ِ‎", "i"],
  ["٠", "0"],
  ["١", "1"],
  ["٢", "2"],
  ["٣", "3"],
  ["٤", "4"],
  ["٥", "5"],
  ["٦", "6"],
  ["٧", "7"],
  ["٨", "8"],
  ["٩", "9"],
  // Persian / Farsi
  ["چ", "ch"],
  ["ک", "k"],
  ["گ", "g"],
  ["پ", "p"],
  ["ژ", "zh"],
  ["ی", "y"],
  ["۰", "0"],
  ["۱", "1"],
  ["۲", "2"],
  ["۳", "3"],
  ["۴", "4"],
  ["۵", "5"],
  ["۶", "6"],
  ["۷", "7"],
  ["۸", "8"],
  ["۹", "9"],
  // Pashto
  ["ټ", "p"],
  ["ځ", "z"],
  ["څ", "c"],
  ["ډ", "d"],
  ["ﺫ", "d"],
  ["ﺭ", "r"],
  ["ړ", "r"],
  ["ﺯ", "z"],
  ["ږ", "g"],
  ["ښ", "x"],
  ["ګ", "g"],
  ["ڼ", "n"],
  ["ۀ", "e"],
  ["ې", "e"],
  ["ۍ", "ai"],
  // Urdu
  ["ٹ", "t"],
  ["ڈ", "d"],
  ["ڑ", "r"],
  ["ں", "n"],
  ["ہ", "h"],
  ["ھ", "h"],
  ["ے", "e"],
  // Russian
  ["А", "A"],
  ["а", "a"],
  ["Б", "B"],
  ["б", "b"],
  ["В", "V"],
  ["в", "v"],
  ["Г", "G"],
  ["г", "g"],
  ["Д", "D"],
  ["д", "d"],
  ["Е", "E"],
  ["е", "e"],
  ["Ж", "Zh"],
  ["ж", "zh"],
  ["З", "Z"],
  ["з", "z"],
  ["И", "I"],
  ["и", "i"],
  ["Й", "J"],
  ["й", "j"],
  ["К", "K"],
  ["к", "k"],
  ["Л", "L"],
  ["л", "l"],
  ["М", "M"],
  ["м", "m"],
  ["Н", "N"],
  ["н", "n"],
  ["О", "O"],
  ["о", "o"],
  ["П", "P"],
  ["п", "p"],
  ["Р", "R"],
  ["р", "r"],
  ["С", "S"],
  ["с", "s"],
  ["Т", "T"],
  ["т", "t"],
  ["У", "U"],
  ["у", "u"],
  ["Ф", "F"],
  ["ф", "f"],
  ["Х", "H"],
  ["х", "h"],
  ["Ц", "Cz"],
  ["ц", "cz"],
  ["Ч", "Ch"],
  ["ч", "ch"],
  ["Ш", "Sh"],
  ["ш", "sh"],
  ["Щ", "Shh"],
  ["щ", "shh"],
  ["Ъ", ""],
  ["ъ", ""],
  ["Ы", "Y"],
  ["ы", "y"],
  ["Ь", ""],
  ["ь", ""],
  ["Э", "E"],
  ["э", "e"],
  ["Ю", "Yu"],
  ["ю", "yu"],
  ["Я", "Ya"],
  ["я", "ya"],
  ["Ё", "Yo"],
  ["ё", "yo"],
  // Romanian
  ["ă", "a"],
  ["Ă", "A"],
  ["ș", "s"],
  ["Ș", "S"],
  ["ț", "t"],
  ["Ț", "T"],
  ["ţ", "t"],
  ["Ţ", "T"],
  // Turkish
  ["ş", "s"],
  ["Ş", "S"],
  ["ç", "c"],
  ["Ç", "C"],
  ["ğ", "g"],
  ["Ğ", "G"],
  ["ı", "i"],
  ["İ", "I"],
  // Armenian
  ["ա", "a"],
  ["Ա", "A"],
  ["բ", "b"],
  ["Բ", "B"],
  ["գ", "g"],
  ["Գ", "G"],
  ["դ", "d"],
  ["Դ", "D"],
  ["ե", "ye"],
  ["Ե", "Ye"],
  ["զ", "z"],
  ["Զ", "Z"],
  ["է", "e"],
  ["Է", "E"],
  ["ը", "y"],
  ["Ը", "Y"],
  ["թ", "t"],
  ["Թ", "T"],
  ["ժ", "zh"],
  ["Ժ", "Zh"],
  ["ի", "i"],
  ["Ի", "I"],
  ["լ", "l"],
  ["Լ", "L"],
  ["խ", "kh"],
  ["Խ", "Kh"],
  ["ծ", "ts"],
  ["Ծ", "Ts"],
  ["կ", "k"],
  ["Կ", "K"],
  ["հ", "h"],
  ["Հ", "H"],
  ["ձ", "dz"],
  ["Ձ", "Dz"],
  ["ղ", "gh"],
  ["Ղ", "Gh"],
  ["ճ", "tch"],
  ["Ճ", "Tch"],
  ["մ", "m"],
  ["Մ", "M"],
  ["յ", "y"],
  ["Յ", "Y"],
  ["ն", "n"],
  ["Ն", "N"],
  ["շ", "sh"],
  ["Շ", "Sh"],
  ["ո", "vo"],
  ["Ո", "Vo"],
  ["չ", "ch"],
  ["Չ", "Ch"],
  ["պ", "p"],
  ["Պ", "P"],
  ["ջ", "j"],
  ["Ջ", "J"],
  ["ռ", "r"],
  ["Ռ", "R"],
  ["ս", "s"],
  ["Ս", "S"],
  ["վ", "v"],
  ["Վ", "V"],
  ["տ", "t"],
  ["Տ", "T"],
  ["ր", "r"],
  ["Ր", "R"],
  ["ց", "c"],
  ["Ց", "C"],
  ["ու", "u"],
  ["ՈՒ", "U"],
  ["Ու", "U"],
  ["փ", "p"],
  ["Փ", "P"],
  ["ք", "q"],
  ["Ք", "Q"],
  ["օ", "o"],
  ["Օ", "O"],
  ["ֆ", "f"],
  ["Ֆ", "F"],
  ["և", "yev"],
  // Georgian
  ["ა", "a"],
  ["ბ", "b"],
  ["გ", "g"],
  ["დ", "d"],
  ["ე", "e"],
  ["ვ", "v"],
  ["ზ", "z"],
  ["თ", "t"],
  ["ი", "i"],
  ["კ", "k"],
  ["ლ", "l"],
  ["მ", "m"],
  ["ნ", "n"],
  ["ო", "o"],
  ["პ", "p"],
  ["ჟ", "zh"],
  ["რ", "r"],
  ["ს", "s"],
  ["ტ", "t"],
  ["უ", "u"],
  ["ფ", "ph"],
  ["ქ", "q"],
  ["ღ", "gh"],
  ["ყ", "k"],
  ["შ", "sh"],
  ["ჩ", "ch"],
  ["ც", "ts"],
  ["ძ", "dz"],
  ["წ", "ts"],
  ["ჭ", "tch"],
  ["ხ", "kh"],
  ["ჯ", "j"],
  ["ჰ", "h"],
  // Czech
  ["č", "c"],
  ["ď", "d"],
  ["ě", "e"],
  ["ň", "n"],
  ["ř", "r"],
  ["š", "s"],
  ["ť", "t"],
  ["ů", "u"],
  ["ž", "z"],
  ["Č", "C"],
  ["Ď", "D"],
  ["Ě", "E"],
  ["Ň", "N"],
  ["Ř", "R"],
  ["Š", "S"],
  ["Ť", "T"],
  ["Ů", "U"],
  ["Ž", "Z"],
  // Dhivehi
  ["ހ", "h"],
  ["ށ", "sh"],
  ["ނ", "n"],
  ["ރ", "r"],
  ["ބ", "b"],
  ["ޅ", "lh"],
  ["ކ", "k"],
  ["އ", "a"],
  ["ވ", "v"],
  ["މ", "m"],
  ["ފ", "f"],
  ["ދ", "dh"],
  ["ތ", "th"],
  ["ލ", "l"],
  ["ގ", "g"],
  ["ޏ", "gn"],
  ["ސ", "s"],
  ["ޑ", "d"],
  ["ޒ", "z"],
  ["ޓ", "t"],
  ["ޔ", "y"],
  ["ޕ", "p"],
  ["ޖ", "j"],
  ["ޗ", "ch"],
  ["ޘ", "tt"],
  ["ޙ", "hh"],
  ["ޚ", "kh"],
  ["ޛ", "th"],
  ["ޜ", "z"],
  ["ޝ", "sh"],
  ["ޞ", "s"],
  ["ޟ", "d"],
  ["ޠ", "t"],
  ["ޡ", "z"],
  ["ޢ", "a"],
  ["ޣ", "gh"],
  ["ޤ", "q"],
  ["ޥ", "w"],
  ["ަ", "a"],
  ["ާ", "aa"],
  ["ި", "i"],
  ["ީ", "ee"],
  ["ު", "u"],
  ["ޫ", "oo"],
  ["ެ", "e"],
  ["ޭ", "ey"],
  ["ޮ", "o"],
  ["ޯ", "oa"],
  ["ް", ""],
  // Greek
  ["α", "a"],
  ["β", "v"],
  ["γ", "g"],
  ["δ", "d"],
  ["ε", "e"],
  ["ζ", "z"],
  ["η", "i"],
  ["θ", "th"],
  ["ι", "i"],
  ["κ", "k"],
  ["λ", "l"],
  ["μ", "m"],
  ["ν", "n"],
  ["ξ", "ks"],
  ["ο", "o"],
  ["π", "p"],
  ["ρ", "r"],
  ["σ", "s"],
  ["τ", "t"],
  ["υ", "y"],
  ["φ", "f"],
  ["χ", "x"],
  ["ψ", "ps"],
  ["ω", "o"],
  ["ά", "a"],
  ["έ", "e"],
  ["ί", "i"],
  ["ό", "o"],
  ["ύ", "y"],
  ["ή", "i"],
  ["ώ", "o"],
  ["ς", "s"],
  ["ϊ", "i"],
  ["ΰ", "y"],
  ["ϋ", "y"],
  ["ΐ", "i"],
  ["Α", "A"],
  ["Β", "B"],
  ["Γ", "G"],
  ["Δ", "D"],
  ["Ε", "E"],
  ["Ζ", "Z"],
  ["Η", "I"],
  ["Θ", "TH"],
  ["Ι", "I"],
  ["Κ", "K"],
  ["Λ", "L"],
  ["Μ", "M"],
  ["Ν", "N"],
  ["Ξ", "KS"],
  ["Ο", "O"],
  ["Π", "P"],
  ["Ρ", "R"],
  ["Σ", "S"],
  ["Τ", "T"],
  ["Υ", "Y"],
  ["Φ", "F"],
  ["Χ", "X"],
  ["Ψ", "PS"],
  ["Ω", "O"],
  ["Ά", "A"],
  ["Έ", "E"],
  ["Ί", "I"],
  ["Ό", "O"],
  ["Ύ", "Y"],
  ["Ή", "I"],
  ["Ώ", "O"],
  ["Ϊ", "I"],
  ["Ϋ", "Y"],
  // Disabled as it conflicts with German and Latin.
  // Hungarian
  // ['ä', 'a'],
  // ['Ä', 'A'],
  // ['ö', 'o'],
  // ['Ö', 'O'],
  // ['ü', 'u'],
  // ['Ü', 'U'],
  // ['ű', 'u'],
  // ['Ű', 'U'],
  // Latvian
  ["ā", "a"],
  ["ē", "e"],
  ["ģ", "g"],
  ["ī", "i"],
  ["ķ", "k"],
  ["ļ", "l"],
  ["ņ", "n"],
  ["ū", "u"],
  ["Ā", "A"],
  ["Ē", "E"],
  ["Ģ", "G"],
  ["Ī", "I"],
  ["Ķ", "K"],
  ["Ļ", "L"],
  ["Ņ", "N"],
  ["Ū", "U"],
  ["č", "c"],
  ["š", "s"],
  ["ž", "z"],
  ["Č", "C"],
  ["Š", "S"],
  ["Ž", "Z"],
  // Lithuanian
  ["ą", "a"],
  ["č", "c"],
  ["ę", "e"],
  ["ė", "e"],
  ["į", "i"],
  ["š", "s"],
  ["ų", "u"],
  ["ū", "u"],
  ["ž", "z"],
  ["Ą", "A"],
  ["Č", "C"],
  ["Ę", "E"],
  ["Ė", "E"],
  ["Į", "I"],
  ["Š", "S"],
  ["Ų", "U"],
  ["Ū", "U"],
  // Macedonian
  ["Ќ", "Kj"],
  ["ќ", "kj"],
  ["Љ", "Lj"],
  ["љ", "lj"],
  ["Њ", "Nj"],
  ["њ", "nj"],
  ["Тс", "Ts"],
  ["тс", "ts"],
  // Polish
  ["ą", "a"],
  ["ć", "c"],
  ["ę", "e"],
  ["ł", "l"],
  ["ń", "n"],
  ["ś", "s"],
  ["ź", "z"],
  ["ż", "z"],
  ["Ą", "A"],
  ["Ć", "C"],
  ["Ę", "E"],
  ["Ł", "L"],
  ["Ń", "N"],
  ["Ś", "S"],
  ["Ź", "Z"],
  ["Ż", "Z"],
  // Disabled as it conflicts with Vietnamese.
  // Serbian
  // ['љ', 'lj'],
  // ['њ', 'nj'],
  // ['Љ', 'Lj'],
  // ['Њ', 'Nj'],
  // ['đ', 'dj'],
  // ['Đ', 'Dj'],
  // ['ђ', 'dj'],
  // ['ј', 'j'],
  // ['ћ', 'c'],
  // ['џ', 'dz'],
  // ['Ђ', 'Dj'],
  // ['Ј', 'j'],
  // ['Ћ', 'C'],
  // ['Џ', 'Dz'],
  // Disabled as it conflicts with German and Latin.
  // Slovak
  // ['ä', 'a'],
  // ['Ä', 'A'],
  // ['ľ', 'l'],
  // ['ĺ', 'l'],
  // ['ŕ', 'r'],
  // ['Ľ', 'L'],
  // ['Ĺ', 'L'],
  // ['Ŕ', 'R'],
  // Disabled as it conflicts with German and Latin.
  // Swedish
  // ['å', 'o'],
  // ['Å', 'o'],
  // ['ä', 'a'],
  // ['Ä', 'A'],
  // ['ë', 'e'],
  // ['Ë', 'E'],
  // ['ö', 'o'],
  // ['Ö', 'O'],
  // Ukrainian
  ["Є", "Ye"],
  ["І", "I"],
  ["Ї", "Yi"],
  ["Ґ", "G"],
  ["є", "ye"],
  ["і", "i"],
  ["ї", "yi"],
  ["ґ", "g"]
  // Danish
  // ['Æ', 'Ae'],
  // ['Ø', 'Oe'],
  // ['Å', 'Aa'],
  // ['æ', 'ae'],
  // ['ø', 'oe'],
  // ['å', 'aa']
];
const deburr = lodash_deburr;
const escapeStringRegexp$1 = escapeStringRegexp$2;
const builtinReplacements = replacements;
const doCustomReplacements = (string2, replacements2) => {
  for (const [key, value] of replacements2) {
    string2 = string2.replace(new RegExp(escapeStringRegexp$1(key), "g"), value);
  }
  return string2;
};
var transliterate$1 = (string2, options) => {
  if (typeof string2 !== "string") {
    throw new TypeError(`Expected a string, got \`${typeof string2}\``);
  }
  options = {
    customReplacements: [],
    ...options
  };
  const customReplacements = new Map([
    ...builtinReplacements,
    ...options.customReplacements
  ]);
  string2 = string2.normalize();
  string2 = doCustomReplacements(string2, customReplacements);
  string2 = deburr(string2);
  return string2;
};
var overridableReplacements = [
  ["&", " and "],
  ["🦄", " unicorn "],
  ["♥", " love "]
];
const escapeStringRegexp = escapeStringRegexp$3;
const transliterate = transliterate$1;
const builtinOverridableReplacements = overridableReplacements;
const decamelize = (string2) => {
  return string2.replace(/([A-Z]{2,})(\d+)/g, "$1 $2").replace(/([a-z\d]+)([A-Z]{2,})/g, "$1 $2").replace(/([a-z\d])([A-Z])/g, "$1 $2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1 $2");
};
const removeMootSeparators = (string2, separator) => {
  const escapedSeparator = escapeStringRegexp(separator);
  return string2.replace(new RegExp(`${escapedSeparator}{2,}`, "g"), separator).replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, "g"), "");
};
const slugify = (string2, options) => {
  if (typeof string2 !== "string") {
    throw new TypeError(`Expected a string, got \`${typeof string2}\``);
  }
  options = {
    separator: "-",
    lowercase: true,
    decamelize: true,
    customReplacements: [],
    preserveLeadingUnderscore: false,
    ...options
  };
  const shouldPrependUnderscore = options.preserveLeadingUnderscore && string2.startsWith("_");
  const customReplacements = new Map([
    ...builtinOverridableReplacements,
    ...options.customReplacements
  ]);
  string2 = transliterate(string2, { customReplacements });
  if (options.decamelize) {
    string2 = decamelize(string2);
  }
  let patternSlug = /[^a-zA-Z\d]+/g;
  if (options.lowercase) {
    string2 = string2.toLowerCase();
    patternSlug = /[^a-z\d]+/g;
  }
  string2 = string2.replace(patternSlug, options.separator);
  string2 = string2.replace(/\\/g, "");
  if (options.separator) {
    string2 = removeMootSeparators(string2, options.separator);
  }
  if (shouldPrependUnderscore) {
    string2 = `_${string2}`;
  }
  return string2;
};
const counter = () => {
  const occurrences = /* @__PURE__ */ new Map();
  const countable = (string2, options) => {
    string2 = slugify(string2, options);
    if (!string2) {
      return "";
    }
    const stringLower = string2.toLowerCase();
    const numberless = occurrences.get(stringLower.replace(/(?:-\d+?)+?$/, "")) || 0;
    const counter2 = occurrences.get(stringLower);
    occurrences.set(stringLower, typeof counter2 === "number" ? counter2 + 1 : 1);
    const newCounter = occurrences.get(stringLower) || 2;
    if (newCounter >= 2 || numberless > 2) {
      string2 = `${string2}-${newCounter}`;
    }
    return string2;
  };
  countable.reset = () => {
    occurrences.clear();
  };
  return countable;
};
slugify$2.exports = slugify;
slugify$2.exports.counter = counter;
var slugifyExports = slugify$2.exports;
const slugify$1 = /* @__PURE__ */ getDefaultExportFromCjs(slugifyExports);
function envFn(key, defaultValue) {
  return ___default.has(process.env, key) ? process.env[key] : defaultValue;
}
function getKey(key) {
  return process.env[key] ?? "";
}
const utils$3 = {
  int(key, defaultValue) {
    if (!___default.has(process.env, key)) {
      return defaultValue;
    }
    return parseInt(getKey(key), 10);
  },
  float(key, defaultValue) {
    if (!___default.has(process.env, key)) {
      return defaultValue;
    }
    return parseFloat(getKey(key));
  },
  bool(key, defaultValue) {
    if (!___default.has(process.env, key)) {
      return defaultValue;
    }
    return getKey(key) === "true";
  },
  json(key, defaultValue) {
    if (!___default.has(process.env, key)) {
      return defaultValue;
    }
    try {
      return JSON.parse(getKey(key));
    } catch (error2) {
      if (error2 instanceof Error) {
        throw new Error(`Invalid json environment variable ${key}: ${error2.message}`);
      }
      throw error2;
    }
  },
  array(key, defaultValue) {
    if (!___default.has(process.env, key)) {
      return defaultValue;
    }
    let value = getKey(key);
    if (value.startsWith("[") && value.endsWith("]")) {
      value = value.substring(1, value.length - 1);
    }
    return value.split(",").map((v) => {
      return ___default.trim(___default.trim(v, " "), '"');
    });
  },
  date(key, defaultValue) {
    if (!___default.has(process.env, key)) {
      return defaultValue;
    }
    return new Date(getKey(key));
  },
  /**
   * Gets a value from env that matches oneOf provided values
   * @param {string} key
   * @param {string[]} expectedValues
   * @param {string|undefined} defaultValue
   * @returns {string|undefined}
   */
  oneOf(key, expectedValues, defaultValue) {
    if (!expectedValues) {
      throw new Error(`env.oneOf requires expectedValues`);
    }
    if (defaultValue && !expectedValues.includes(defaultValue)) {
      throw new Error(`env.oneOf requires defaultValue to be included in expectedValues`);
    }
    const rawValue = env(key, defaultValue);
    return expectedValues.includes(rawValue) ? rawValue : defaultValue;
  }
};
const env = Object.assign(envFn, utils$3);
const SINGLE_TYPE = "singleType";
const COLLECTION_TYPE = "collectionType";
const ID_ATTRIBUTE$4 = "id";
const DOC_ID_ATTRIBUTE$4 = "documentId";
const PUBLISHED_AT_ATTRIBUTE$1 = "publishedAt";
const CREATED_BY_ATTRIBUTE$3 = "createdBy";
const UPDATED_BY_ATTRIBUTE$3 = "updatedBy";
const CREATED_AT_ATTRIBUTE = "createdAt";
const UPDATED_AT_ATTRIBUTE = "updatedAt";
const constants$1 = {
  ID_ATTRIBUTE: ID_ATTRIBUTE$4,
  DOC_ID_ATTRIBUTE: DOC_ID_ATTRIBUTE$4,
  PUBLISHED_AT_ATTRIBUTE: PUBLISHED_AT_ATTRIBUTE$1,
  CREATED_BY_ATTRIBUTE: CREATED_BY_ATTRIBUTE$3,
  UPDATED_BY_ATTRIBUTE: UPDATED_BY_ATTRIBUTE$3,
  CREATED_AT_ATTRIBUTE,
  UPDATED_AT_ATTRIBUTE,
  SINGLE_TYPE,
  COLLECTION_TYPE
};
const getStoredPrivateAttributes = (model) => fp.union(
  strapi?.config?.get("api.responses.privateAttributes", []) ?? [],
  fp.getOr([], "options.privateAttributes", model)
);
const isPrivateAttribute = (model, attributeName) => {
  if (model?.attributes?.[attributeName]?.private === true) {
    return true;
  }
  return getStoredPrivateAttributes(model).includes(attributeName);
};
const isScalarAttribute = (attribute) => {
  return attribute && !["media", "component", "relation", "dynamiczone"].includes(attribute.type);
};
const isMediaAttribute = (attribute) => attribute?.type === "media";
const isRelationalAttribute = (attribute) => attribute?.type === "relation";
const isDynamicZoneAttribute = (attribute) => !!attribute && attribute.type === "dynamiczone";
const isMorphToRelationalAttribute = (attribute) => {
  return !!attribute && isRelationalAttribute(attribute) && attribute.relation?.startsWith?.("morphTo");
};
const traverseEntity = async (visitor2, options, entity) => {
  const { path: path2 = { raw: null, attribute: null }, schema: schema2, getModel: getModel2 } = options;
  let parent2 = options.parent;
  const traverseMorphRelationTarget = async (visitor22, path22, entry) => {
    const targetSchema = getModel2(entry.__type);
    const traverseOptions = { schema: targetSchema, path: path22, getModel: getModel2, parent: parent2 };
    return traverseEntity(visitor22, traverseOptions, entry);
  };
  const traverseRelationTarget = (schema22) => async (visitor22, path22, entry) => {
    const traverseOptions = { schema: schema22, path: path22, getModel: getModel2, parent: parent2 };
    return traverseEntity(visitor22, traverseOptions, entry);
  };
  const traverseMediaTarget = async (visitor22, path22, entry) => {
    const targetSchemaUID = "plugin::upload.file";
    const targetSchema = getModel2(targetSchemaUID);
    const traverseOptions = { schema: targetSchema, path: path22, getModel: getModel2, parent: parent2 };
    return traverseEntity(visitor22, traverseOptions, entry);
  };
  const traverseComponent = async (visitor22, path22, schema22, entry) => {
    const traverseOptions = { schema: schema22, path: path22, getModel: getModel2, parent: parent2 };
    return traverseEntity(visitor22, traverseOptions, entry);
  };
  const visitDynamicZoneEntry = async (visitor22, path22, entry) => {
    const targetSchema = getModel2(entry.__component);
    const traverseOptions = { schema: targetSchema, path: path22, getModel: getModel2, parent: parent2 };
    return traverseEntity(visitor22, traverseOptions, entry);
  };
  if (!fp.isObject(entity) || fp.isNil(schema2)) {
    return entity;
  }
  const copy2 = fp.clone(entity);
  const visitorUtils = createVisitorUtils({ data: copy2 });
  const keys2 = Object.keys(copy2);
  for (let i = 0; i < keys2.length; i += 1) {
    const key = keys2[i];
    const attribute = schema2.attributes[key];
    const newPath = { ...path2 };
    newPath.raw = fp.isNil(path2.raw) ? key : `${path2.raw}.${key}`;
    if (!fp.isNil(attribute)) {
      newPath.attribute = fp.isNil(path2.attribute) ? key : `${path2.attribute}.${key}`;
    }
    const visitorOptions = {
      data: copy2,
      schema: schema2,
      key,
      value: copy2[key],
      attribute,
      path: newPath,
      getModel: getModel2,
      parent: parent2
    };
    await visitor2(visitorOptions, visitorUtils);
    const value = copy2[key];
    if (fp.isNil(value) || fp.isNil(attribute)) {
      continue;
    }
    parent2 = { schema: schema2, key, attribute, path: newPath };
    if (isRelationalAttribute(attribute)) {
      const isMorphRelation = attribute.relation.toLowerCase().startsWith("morph");
      const method = isMorphRelation ? traverseMorphRelationTarget : traverseRelationTarget(getModel2(attribute.target));
      if (fp.isArray(value)) {
        const res = new Array(value.length);
        for (let i2 = 0; i2 < value.length; i2 += 1) {
          res[i2] = await method(visitor2, newPath, value[i2]);
        }
        copy2[key] = res;
      } else {
        copy2[key] = await method(visitor2, newPath, value);
      }
      continue;
    }
    if (isMediaAttribute(attribute)) {
      if (fp.isArray(value)) {
        const res = new Array(value.length);
        for (let i2 = 0; i2 < value.length; i2 += 1) {
          res[i2] = await traverseMediaTarget(visitor2, newPath, value[i2]);
        }
        copy2[key] = res;
      } else {
        copy2[key] = await traverseMediaTarget(visitor2, newPath, value);
      }
      continue;
    }
    if (attribute.type === "component") {
      const targetSchema = getModel2(attribute.component);
      if (fp.isArray(value)) {
        const res = new Array(value.length);
        for (let i2 = 0; i2 < value.length; i2 += 1) {
          res[i2] = await traverseComponent(visitor2, newPath, targetSchema, value[i2]);
        }
        copy2[key] = res;
      } else {
        copy2[key] = await traverseComponent(visitor2, newPath, targetSchema, value);
      }
      continue;
    }
    if (attribute.type === "dynamiczone" && fp.isArray(value)) {
      const res = new Array(value.length);
      for (let i2 = 0; i2 < value.length; i2 += 1) {
        res[i2] = await visitDynamicZoneEntry(visitor2, newPath, value[i2]);
      }
      copy2[key] = res;
      continue;
    }
  }
  return copy2;
};
const createVisitorUtils = ({ data }) => ({
  remove(key) {
    delete data[key];
  },
  set(key, value) {
    data[key] = value;
  }
});
fp.curry(traverseEntity);
const GROUP_OPERATORS = ["$and", "$or"];
const WHERE_OPERATORS = [
  "$not",
  "$in",
  "$notIn",
  "$eq",
  "$eqi",
  "$ne",
  "$nei",
  "$gt",
  "$gte",
  "$lt",
  "$lte",
  "$null",
  "$notNull",
  "$between",
  "$startsWith",
  "$endsWith",
  "$startsWithi",
  "$endsWithi",
  "$contains",
  "$notContains",
  "$containsi",
  "$notContainsi",
  // Experimental, only for internal use
  "$jsonSupersetOf"
];
const CAST_OPERATORS = [
  "$not",
  "$in",
  "$notIn",
  "$eq",
  "$ne",
  "$gt",
  "$gte",
  "$lt",
  "$lte",
  "$between"
];
const ARRAY_OPERATORS = ["$in", "$notIn", "$between"];
const OPERATORS = {
  where: WHERE_OPERATORS,
  cast: CAST_OPERATORS,
  group: GROUP_OPERATORS,
  array: ARRAY_OPERATORS
};
const OPERATORS_LOWERCASE = Object.fromEntries(
  Object.entries(OPERATORS).map(([key, values]) => [
    key,
    values.map((value) => value.toLowerCase())
  ])
);
const isObjKey = (key, obj) => {
  return key in obj;
};
const isOperatorOfType = (type2, key, ignoreCase = false) => {
  if (ignoreCase) {
    return OPERATORS_LOWERCASE[type2]?.includes(key.toLowerCase()) ?? false;
  }
  if (isObjKey(type2, OPERATORS)) {
    return OPERATORS[type2]?.includes(key) ?? false;
  }
  return false;
};
const isOperator = (key, ignoreCase = false) => {
  return Object.keys(OPERATORS).some((type2) => isOperatorOfType(type2, key, ignoreCase));
};
function pipe(...fns) {
  const [firstFn, ...fnRest] = fns;
  return async (...args) => {
    let res = await firstFn.apply(firstFn, args);
    for (let i = 0; i < fnRest.length; i += 1) {
      res = await fnRest[i](res);
    }
    return res;
  };
}
fp.curry(pMap$1);
const visitor$8 = ({ key, attribute }, { remove: remove2 }) => {
  if (attribute?.type === "password") {
    remove2(key);
  }
};
const visitor$7 = ({ schema: schema2, key, attribute }, { remove: remove2 }) => {
  if (!attribute) {
    return;
  }
  const isPrivate = attribute.private === true || isPrivateAttribute(schema2, key);
  if (isPrivate) {
    remove2(key);
  }
};
const visitor$6 = ({ key, attribute }, { remove: remove2 }) => {
  if (isMorphToRelationalAttribute(attribute)) {
    remove2(key);
  }
};
const visitor$5 = ({ key, attribute }, { remove: remove2 }) => {
  if (isDynamicZoneAttribute(attribute)) {
    remove2(key);
  }
};
const visitor$4 = ({ schema: schema2, key, value }, { set: set2 }) => {
  if (key === "" && value === "*") {
    const { attributes } = schema2;
    const newPopulateQuery = Object.entries(attributes).filter(
      ([, attribute]) => ["relation", "component", "media", "dynamiczone"].includes(attribute.type)
    ).reduce((acc, [key2]) => ({ ...acc, [key2]: true }), {});
    set2("", newPopulateQuery);
  }
};
const DEFAULT_PATH = { raw: null, attribute: null };
const traverseFactory = () => {
  const state = {
    parsers: [],
    interceptors: [],
    ignore: [],
    handlers: {
      attributes: [],
      common: []
    }
  };
  const traverse = async (visitor2, options, data) => {
    const { path: path2 = DEFAULT_PATH, schema: schema2, getModel: getModel2 } = options ?? {};
    for (const { predicate, handler } of state.interceptors) {
      if (predicate(data)) {
        return handler(visitor2, options, data, { recurse: traverse });
      }
    }
    const parser = state.parsers.find((parser2) => parser2.predicate(data))?.parser;
    const utils2 = parser?.(data);
    if (!utils2) {
      return data;
    }
    let out = utils2.transform(data);
    const keys2 = utils2.keys(out);
    for (const key of keys2) {
      const attribute = schema2?.attributes?.[key];
      const newPath = { ...path2 };
      newPath.raw = fp.isNil(path2.raw) ? key : `${path2.raw}.${key}`;
      if (!fp.isNil(attribute)) {
        newPath.attribute = fp.isNil(path2.attribute) ? key : `${path2.attribute}.${key}`;
      }
      const visitorOptions = {
        key,
        value: utils2.get(key, out),
        attribute,
        schema: schema2,
        path: newPath,
        data: out,
        getModel: getModel2
      };
      const transformUtils = {
        remove(key2) {
          out = utils2.remove(key2, out);
        },
        set(key2, value2) {
          out = utils2.set(key2, value2, out);
        },
        recurse: traverse
      };
      await visitor2(visitorOptions, fp.pick(["remove", "set"], transformUtils));
      const value = utils2.get(key, out);
      const createContext = () => ({
        key,
        value,
        attribute,
        schema: schema2,
        path: newPath,
        data: out,
        visitor: visitor2,
        getModel: getModel2
      });
      const ignoreCtx = createContext();
      const shouldIgnore = state.ignore.some((predicate) => predicate(ignoreCtx));
      if (shouldIgnore) {
        continue;
      }
      const handlers = [...state.handlers.common, ...state.handlers.attributes];
      for await (const handler of handlers) {
        const ctx = createContext();
        const pass = await handler.predicate(ctx);
        if (pass) {
          await handler.handler(ctx, fp.pick(["recurse", "set"], transformUtils));
        }
      }
    }
    return out;
  };
  return {
    traverse,
    intercept(predicate, handler) {
      state.interceptors.push({ predicate, handler });
      return this;
    },
    parse(predicate, parser) {
      state.parsers.push({ predicate, parser });
      return this;
    },
    ignore(predicate) {
      state.ignore.push(predicate);
      return this;
    },
    on(predicate, handler) {
      state.handlers.common.push({ predicate, handler });
      return this;
    },
    onAttribute(predicate, handler) {
      state.handlers.attributes.push({ predicate, handler });
      return this;
    },
    onRelation(handler) {
      return this.onAttribute(({ attribute }) => attribute?.type === "relation", handler);
    },
    onMedia(handler) {
      return this.onAttribute(({ attribute }) => attribute?.type === "media", handler);
    },
    onComponent(handler) {
      return this.onAttribute(({ attribute }) => attribute?.type === "component", handler);
    },
    onDynamicZone(handler) {
      return this.onAttribute(({ attribute }) => attribute?.type === "dynamiczone", handler);
    }
  };
};
const isObj$2 = (value) => fp.isObject(value);
const filters = traverseFactory().intercept(
  // Intercept filters arrays and apply the traversal to each one individually
  fp.isArray,
  async (visitor2, options, filters2, { recurse }) => {
    return Promise.all(
      filters2.map((filter, i) => {
        const newPath = options.path ? { ...options.path, raw: `${options.path.raw}[${i}]` } : options.path;
        return recurse(visitor2, { ...options, path: newPath }, filter);
      })
      // todo: move that to the visitors
    ).then((res) => res.filter((val) => !(fp.isObject(val) && fp.isEmpty(val))));
  }
).intercept(
  // Ignore non object filters and return the value as-is
  (filters2) => !fp.isObject(filters2),
  (_2, __, filters2) => {
    return filters2;
  }
).parse(isObj$2, () => ({
  transform: fp.cloneDeep,
  remove(key, data) {
    return fp.omit(key, data);
  },
  set(key, value, data) {
    return { ...data, [key]: value };
  },
  keys(data) {
    return Object.keys(data);
  },
  get(key, data) {
    return data[key];
  }
})).ignore(({ value }) => fp.isNil(value)).on(
  ({ attribute }) => fp.isNil(attribute),
  async ({ key, visitor: visitor2, path: path2, value, schema: schema2, getModel: getModel2 }, { set: set2, recurse }) => {
    set2(key, await recurse(visitor2, { schema: schema2, path: path2, getModel: getModel2 }, value));
  }
).onRelation(async ({ key, attribute, visitor: visitor2, path: path2, value, getModel: getModel2 }, { set: set2, recurse }) => {
  const isMorphRelation = attribute.relation.toLowerCase().startsWith("morph");
  if (isMorphRelation) {
    return;
  }
  const targetSchemaUID = attribute.target;
  const targetSchema = getModel2(targetSchemaUID);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
}).onComponent(async ({ key, attribute, visitor: visitor2, path: path2, value, getModel: getModel2 }, { set: set2, recurse }) => {
  const targetSchema = getModel2(attribute.component);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
}).onMedia(async ({ key, visitor: visitor2, path: path2, value, getModel: getModel2 }, { set: set2, recurse }) => {
  const targetSchemaUID = "plugin::upload.file";
  const targetSchema = getModel2(targetSchemaUID);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
});
const traverseQueryFilters = fp.curry(filters.traverse);
const ORDERS = { asc: "asc", desc: "desc" };
const ORDER_VALUES = Object.values(ORDERS);
const isSortOrder = (value) => ORDER_VALUES.includes(value.toLowerCase());
const isStringArray$2 = (value) => Array.isArray(value) && value.every(fp.isString);
const isObjectArray = (value) => Array.isArray(value) && value.every(fp.isObject);
const isNestedSorts = (value) => fp.isString(value) && value.split(",").length > 1;
const isObj$1 = (value) => fp.isObject(value);
const sort = traverseFactory().intercept(
  // String with chained sorts (foo,bar,foobar) => split, map(recurse), then recompose
  isNestedSorts,
  async (visitor2, options, sort2, { recurse }) => {
    return Promise.all(
      sort2.split(",").map(fp.trim).map((nestedSort) => recurse(visitor2, options, nestedSort))
    ).then((res) => res.filter((part) => !fp.isEmpty(part)).join(","));
  }
).intercept(
  // Array of strings ['foo', 'foo,bar'] => map(recurse), then filter out empty items
  isStringArray$2,
  async (visitor2, options, sort2, { recurse }) => {
    return Promise.all(sort2.map((nestedSort) => recurse(visitor2, options, nestedSort))).then(
      (res) => res.filter((nestedSort) => !fp.isEmpty(nestedSort))
    );
  }
).intercept(
  // Array of objects [{ foo: 'asc' }, { bar: 'desc', baz: 'asc' }] => map(recurse), then filter out empty items
  isObjectArray,
  async (visitor2, options, sort2, { recurse }) => {
    return Promise.all(sort2.map((nestedSort) => recurse(visitor2, options, nestedSort))).then(
      (res) => res.filter((nestedSort) => !fp.isEmpty(nestedSort))
    );
  }
).parse(fp.isString, () => {
  const tokenize = fp.pipe(fp.split("."), fp.map(fp.split(":")), fp.flatten);
  const recompose = (parts) => {
    if (parts.length === 0) {
      return void 0;
    }
    return parts.reduce((acc, part) => {
      if (fp.isEmpty(part)) {
        return acc;
      }
      if (acc === "") {
        return part;
      }
      return isSortOrder(part) ? `${acc}:${part}` : `${acc}.${part}`;
    }, "");
  };
  return {
    transform: fp.trim,
    remove(key, data) {
      const [root2] = tokenize(data);
      return root2 === key ? void 0 : data;
    },
    set(key, value, data) {
      const [root2] = tokenize(data);
      if (root2 !== key) {
        return data;
      }
      return fp.isNil(value) ? root2 : `${root2}.${value}`;
    },
    keys(data) {
      const v = fp.first(tokenize(data));
      return v ? [v] : [];
    },
    get(key, data) {
      const [root2, ...rest] = tokenize(data);
      return key === root2 ? recompose(rest) : void 0;
    }
  };
}).parse(isObj$1, () => ({
  transform: fp.cloneDeep,
  remove(key, data) {
    const { [key]: ignored, ...rest } = data;
    return rest;
  },
  set(key, value, data) {
    return { ...data, [key]: value };
  },
  keys(data) {
    return Object.keys(data);
  },
  get(key, data) {
    return data[key];
  }
})).onRelation(async ({ key, value, attribute, visitor: visitor2, path: path2, getModel: getModel2 }, { set: set2, recurse }) => {
  const isMorphRelation = attribute.relation.toLowerCase().startsWith("morph");
  if (isMorphRelation) {
    return;
  }
  const targetSchemaUID = attribute.target;
  const targetSchema = getModel2(targetSchemaUID);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
}).onMedia(async ({ key, path: path2, visitor: visitor2, value, getModel: getModel2 }, { recurse, set: set2 }) => {
  const targetSchemaUID = "plugin::upload.file";
  const targetSchema = getModel2(targetSchemaUID);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
}).onComponent(async ({ key, value, visitor: visitor2, path: path2, attribute, getModel: getModel2 }, { recurse, set: set2 }) => {
  const targetSchema = getModel2(attribute.component);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
});
const traverseQuerySort = fp.curry(sort.traverse);
const isKeyword = (keyword) => {
  return ({ key, attribute }) => {
    return !attribute && keyword === key;
  };
};
const isStringArray$1 = (value) => fp.isArray(value) && value.every(fp.isString);
const isObj = (value) => fp.isObject(value);
const populate = traverseFactory().intercept(isStringArray$1, async (visitor2, options, populate2, { recurse }) => {
  const visitedPopulate = await Promise.all(
    populate2.map((nestedPopulate) => recurse(visitor2, options, nestedPopulate))
  );
  return visitedPopulate.filter((item) => !fp.isNil(item));
}).parse(
  (value) => value === "*",
  () => ({
    /**
     * Since value is '*', we don't need to transform it
     */
    transform: fp.identity,
    /**
     * '*' isn't a key/value structure, so regardless
     *  of the given key, it returns the data ('*')
     */
    get: (_key, data) => data,
    /**
     * '*' isn't a key/value structure, so regardless
     * of the given `key`, use `value` as the new `data`
     */
    set: (_key, value) => value,
    /**
     * '*' isn't a key/value structure, but we need to simulate at least one to enable
     * the data traversal. We're using '' since it represents a falsy string value
     */
    keys: fp.constant([""]),
    /**
     * Removing '*' means setting it to undefined, regardless of the given key
     */
    remove: fp.constant(void 0)
  })
).parse(fp.isString, () => {
  const tokenize = fp.split(".");
  const recompose = fp.join(".");
  return {
    transform: fp.trim,
    remove(key, data) {
      const [root2] = tokenize(data);
      return root2 === key ? void 0 : data;
    },
    set(key, value, data) {
      const [root2] = tokenize(data);
      if (root2 !== key) {
        return data;
      }
      return fp.isNil(value) || fp.isEmpty(value) ? root2 : `${root2}.${value}`;
    },
    keys(data) {
      const v = fp.first(tokenize(data));
      return v ? [v] : [];
    },
    get(key, data) {
      const [root2, ...rest] = tokenize(data);
      return key === root2 ? recompose(rest) : void 0;
    }
  };
}).parse(isObj, () => ({
  transform: fp.cloneDeep,
  remove(key, data) {
    const { [key]: ignored, ...rest } = data;
    return rest;
  },
  set(key, value, data) {
    return { ...data, [key]: value };
  },
  keys(data) {
    return Object.keys(data);
  },
  get(key, data) {
    return data[key];
  }
})).ignore(({ key, attribute }) => {
  return ["sort", "filters", "fields"].includes(key) && !attribute;
}).on(
  // Handle recursion on populate."populate"
  isKeyword("populate"),
  async ({ key, visitor: visitor2, path: path2, value, schema: schema2, getModel: getModel2 }, { set: set2, recurse }) => {
    const newValue = await recurse(visitor2, { schema: schema2, path: path2, getModel: getModel2 }, value);
    set2(key, newValue);
  }
).on(isKeyword("on"), async ({ key, visitor: visitor2, path: path2, value, getModel: getModel2 }, { set: set2, recurse }) => {
  const newOn = {};
  if (!isObj(value)) {
    return;
  }
  for (const [uid, subPopulate] of Object.entries(value)) {
    const model = getModel2(uid);
    const newPath = { ...path2, raw: `${path2.raw}[${uid}]` };
    newOn[uid] = await recurse(visitor2, { schema: model, path: newPath, getModel: getModel2 }, subPopulate);
  }
  set2(key, newOn);
}).onRelation(
  async ({ key, value, attribute, visitor: visitor2, path: path2, schema: schema2, getModel: getModel2 }, { set: set2, recurse }) => {
    if (fp.isNil(value)) {
      return;
    }
    if (isMorphToRelationalAttribute(attribute)) {
      if (!fp.isObject(value) || !("on" in value && fp.isObject(value?.on))) {
        return;
      }
      const newValue2 = await recurse(visitor2, { schema: schema2, path: path2, getModel: getModel2 }, { on: value?.on });
      set2(key, newValue2);
      return;
    }
    const targetSchemaUID = attribute.target;
    const targetSchema = getModel2(targetSchemaUID);
    const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
    set2(key, newValue);
  }
).onMedia(async ({ key, path: path2, visitor: visitor2, value, getModel: getModel2 }, { recurse, set: set2 }) => {
  if (fp.isNil(value)) {
    return;
  }
  const targetSchemaUID = "plugin::upload.file";
  const targetSchema = getModel2(targetSchemaUID);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
}).onComponent(async ({ key, value, visitor: visitor2, path: path2, attribute, getModel: getModel2 }, { recurse, set: set2 }) => {
  if (fp.isNil(value)) {
    return;
  }
  const targetSchema = getModel2(attribute.component);
  const newValue = await recurse(visitor2, { schema: targetSchema, path: path2, getModel: getModel2 }, value);
  set2(key, newValue);
}).onDynamicZone(async ({ key, value, schema: schema2, visitor: visitor2, path: path2, getModel: getModel2 }, { set: set2, recurse }) => {
  if (fp.isNil(value) || !fp.isObject(value)) {
    return;
  }
  if ("on" in value && value.on) {
    const newOn = await recurse(visitor2, { schema: schema2, path: path2, getModel: getModel2 }, { on: value.on });
    set2(key, newOn);
  }
});
const traverseQueryPopulate = fp.curry(populate.traverse);
const isStringArray = (value) => {
  return fp.isArray(value) && value.every(fp.isString);
};
const fields = traverseFactory().intercept(isStringArray, async (visitor2, options, fields2, { recurse }) => {
  return Promise.all(fields2.map((field) => recurse(visitor2, options, field)));
}).intercept(
  (value) => fp.isString(value) && value.includes(","),
  (visitor2, options, fields2, { recurse }) => {
    return Promise.all(fields2.split(",").map((field) => recurse(visitor2, options, field)));
  }
).intercept((value) => fp.eq("*", value), fp.constant("*")).parse(fp.isString, () => ({
  transform: fp.trim,
  remove(key, data) {
    return data === key ? void 0 : data;
  },
  set(_key, _value, data) {
    return data;
  },
  keys(data) {
    return [data];
  },
  get(key, data) {
    return key === data ? data : void 0;
  }
}));
const traverseQueryFields = fp.curry(fields.traverse);
const { ID_ATTRIBUTE: ID_ATTRIBUTE$2, DOC_ID_ATTRIBUTE: DOC_ID_ATTRIBUTE$2 } = constants$1;
const defaultSanitizeFilters = fp.curry((ctx, filters2) => {
  if (!ctx.schema) {
    throw new Error("Missing schema in defaultSanitizeFilters");
  }
  return pipe(
    // Remove keys that are not attributes or valid operators
    traverseQueryFilters(({ key, attribute }, { remove: remove2 }) => {
      const isAttribute = !!attribute;
      if ([ID_ATTRIBUTE$2, DOC_ID_ATTRIBUTE$2].includes(key)) {
        return;
      }
      if (!isAttribute && !isOperator(key)) {
        remove2(key);
      }
    }, ctx),
    // Remove dynamic zones from filters
    traverseQueryFilters(visitor$5, ctx),
    // Remove morpTo relations from filters
    traverseQueryFilters(visitor$6, ctx),
    // Remove passwords from filters
    traverseQueryFilters(visitor$8, ctx),
    // Remove private from filters
    traverseQueryFilters(visitor$7, ctx),
    // Remove empty objects
    traverseQueryFilters(({ key, value }, { remove: remove2 }) => {
      if (fp.isObject(value) && fp.isEmpty(value)) {
        remove2(key);
      }
    }, ctx)
  )(filters2);
});
const defaultSanitizeSort = fp.curry((ctx, sort2) => {
  if (!ctx.schema) {
    throw new Error("Missing schema in defaultSanitizeSort");
  }
  return pipe(
    // Remove non attribute keys
    traverseQuerySort(({ key, attribute }, { remove: remove2 }) => {
      if ([ID_ATTRIBUTE$2, DOC_ID_ATTRIBUTE$2].includes(key)) {
        return;
      }
      if (!attribute) {
        remove2(key);
      }
    }, ctx),
    // Remove dynamic zones from sort
    traverseQuerySort(visitor$5, ctx),
    // Remove morpTo relations from sort
    traverseQuerySort(visitor$6, ctx),
    // Remove private from sort
    traverseQuerySort(visitor$7, ctx),
    // Remove passwords from filters
    traverseQuerySort(visitor$8, ctx),
    // Remove keys for empty non-scalar values
    traverseQuerySort(({ key, attribute, value }, { remove: remove2 }) => {
      if ([ID_ATTRIBUTE$2, DOC_ID_ATTRIBUTE$2].includes(key)) {
        return;
      }
      if (!isScalarAttribute(attribute) && fp.isEmpty(value)) {
        remove2(key);
      }
    }, ctx)
  )(sort2);
});
const defaultSanitizeFields = fp.curry((ctx, fields2) => {
  if (!ctx.schema) {
    throw new Error("Missing schema in defaultSanitizeFields");
  }
  return pipe(
    // Only keep scalar attributes
    traverseQueryFields(({ key, attribute }, { remove: remove2 }) => {
      if ([ID_ATTRIBUTE$2, DOC_ID_ATTRIBUTE$2].includes(key)) {
        return;
      }
      if (fp.isNil(attribute) || !isScalarAttribute(attribute)) {
        remove2(key);
      }
    }, ctx),
    // Remove private fields
    traverseQueryFields(visitor$7, ctx),
    // Remove password fields
    traverseQueryFields(visitor$8, ctx),
    // Remove nil values from fields array
    (value) => fp.isArray(value) ? value.filter((field) => !fp.isNil(field)) : value
  )(fields2);
});
const defaultSanitizePopulate = fp.curry((ctx, populate2) => {
  if (!ctx.schema) {
    throw new Error("Missing schema in defaultSanitizePopulate");
  }
  return pipe(
    traverseQueryPopulate(visitor$4, ctx),
    traverseQueryPopulate(async ({ key, value, schema: schema2, attribute, getModel: getModel2 }, { set: set2 }) => {
      if (attribute) {
        return;
      }
      if (key === "sort") {
        set2(key, await defaultSanitizeSort({ schema: schema2, getModel: getModel2 }, value));
      }
      if (key === "filters") {
        set2(key, await defaultSanitizeFilters({ schema: schema2, getModel: getModel2 }, value));
      }
      if (key === "fields") {
        set2(key, await defaultSanitizeFields({ schema: schema2, getModel: getModel2 }, value));
      }
      if (key === "populate") {
        set2(key, await defaultSanitizePopulate({ schema: schema2, getModel: getModel2 }, value));
      }
    }, ctx),
    // Remove private fields
    traverseQueryPopulate(visitor$7, ctx)
  )(populate2);
});
[constants$1.DOC_ID_ATTRIBUTE, constants$1.DOC_ID_ATTRIBUTE];
const nameToSlug = (name, options = { separator: "-" }) => slugify$1(name, options);
const nameToCollectionName = (name) => slugify$1(name, { separator: "_" });
const toRegressedEnumValue = (value) => slugify$1(value, {
  decamelize: false,
  lowercase: false,
  separator: "_"
});
const getCommonPath = (...paths) => {
  const [segments, ...otherSegments] = paths.map((it) => ___default.split(it, "/"));
  return ___default.join(
    ___default.takeWhile(segments, (str2, index2) => otherSegments.every((it) => it[index2] === str2)),
    "/"
  );
};
const isEqual = (a, b) => String(a) === String(b);
const isCamelCase = (value) => /^[a-z][a-zA-Z0-9]+$/.test(value);
const isKebabCase = (value) => /^([a-z][a-z0-9]*)(-[a-z0-9]+)*$/.test(value);
const startsWithANumber = (value) => /^[0-9]/.test(value);
const joinBy = (joint, ...args) => {
  const trim2 = fp.trimChars(joint);
  const trimEnd = fp.trimCharsEnd(joint);
  const trimStart = fp.trimCharsStart(joint);
  return args.reduce((url, path2, index2) => {
    if (args.length === 1)
      return path2;
    if (index2 === 0)
      return trimEnd(path2);
    if (index2 === args.length - 1)
      return url + joint + trimStart(path2);
    return url + joint + trim2(path2);
  }, "");
};
const toKebabCase = (value) => lodashExports.kebabCase(value);
const strings = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getCommonPath,
  isCamelCase,
  isEqual,
  isKebabCase,
  joinBy,
  nameToCollectionName,
  nameToSlug,
  startsWithANumber,
  toKebabCase,
  toRegressedEnumValue
}, Symbol.toStringTag, { value: "Module" }));
const { toString: toString$1 } = Object.prototype;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val) {
  if (val != +val)
    return "NaN";
  const isNegativeZero2 = val === 0 && 1 / val < 0;
  return isNegativeZero2 ? "-0" : `${val}`;
}
function printSimpleValue(val, quoteStrings = false) {
  if (val == null || val === true || val === false)
    return `${val}`;
  if (typeof val === "number")
    return printNumber(val);
  if (typeof val === "string")
    return quoteStrings ? `"${val}"` : val;
  if (typeof val === "function")
    return `[Function ${val.name || "anonymous"}]`;
  if (typeof val === "symbol")
    return symbolToString.call(val).replace(SYMBOL_REGEXP, "Symbol($1)");
  const tag = toString$1.call(val).slice(8, -1);
  if (tag === "Date") {
    const v = val;
    return Number.isNaN(v.getTime()) ? `${v}` : v.toISOString();
  }
  if (tag === "Error" || val instanceof Error)
    return `[${errorToString.call(val)}]`;
  if (tag === "RegExp")
    return regExpToString.call(val);
  return null;
}
function printValue(value, quoteStrings) {
  const result = printSimpleValue(value, quoteStrings);
  if (result !== null)
    return result;
  return JSON.stringify(
    value,
    function replacer(key, value2) {
      const result2 = printSimpleValue(this[key], quoteStrings);
      if (result2 !== null)
        return result2;
      return value2;
    },
    2
  );
}
const isNotNilTest = (value) => !___default.isNil(value);
const isNotNullTest = (value) => !___default.isNull(value);
addMethod(create$3, "notNil", function isNotNill(msg = "${path} must be defined.") {
  return this.test("defined", msg, isNotNilTest);
});
addMethod(create$3, "notNull", function isNotNull(msg = "${path} cannot be null.") {
  return this.test("defined", msg, isNotNullTest);
});
addMethod(create$3, "isFunction", function isFunction2(message = "${path} is not a function") {
  return this.test(
    "is a function",
    message,
    (value) => ___default.isUndefined(value) || ___default.isFunction(value)
  );
});
addMethod(
  create$2,
  "isCamelCase",
  function isCamelCase$1(message = "${path} is not in camel case (anExampleOfCamelCase)") {
    return this.test(
      "is in camelCase",
      message,
      (value) => value ? isCamelCase(value) : true
    );
  }
);
addMethod(
  create$2,
  "isKebabCase",
  function isKebabCase$1(message = "${path} is not in kebab case (an-example-of-kebab-case)") {
    return this.test(
      "is in kebab-case",
      message,
      (value) => value ? isKebabCase(value) : true
    );
  }
);
addMethod(
  create$1,
  "onlyContainsFunctions",
  function onlyContainsFunctions(message = "${path} contains values that are not functions") {
    return this.test(
      "only contains functions",
      message,
      (value) => ___default.isUndefined(value) || value && Object.values(value).every(___default.isFunction)
    );
  }
);
addMethod(
  create,
  "uniqueProperty",
  function uniqueProperty(propertyName, message) {
    return this.test("unique", message, function unique(list) {
      const errors2 = [];
      list?.forEach((element, index2) => {
        const sameElements = list.filter(
          (e) => fp.get(propertyName, e) === fp.get(propertyName, element)
        );
        if (sameElements.length > 1) {
          errors2.push(
            this.createError({
              path: `${this.path}[${index2}].${propertyName}`,
              message
            })
          );
        }
      });
      if (errors2.length) {
        throw new ValidationError(errors2);
      }
      return true;
    });
  }
);
setLocale({
  mixed: {
    notType(options) {
      const { path: path2, type: type2, value, originalValue } = options;
      const isCast = originalValue != null && originalValue !== value;
      const msg = `${path2} must be a \`${type2}\` type, but the final value was: \`${printValue(value, true)}\`${isCast ? ` (cast from the value \`${printValue(originalValue, true)}\`).` : "."}`;
      return msg;
    }
  }
});
var fs$g = {};
var universalify$1 = {};
universalify$1.fromCallback = function(fn) {
  return Object.defineProperty(function(...args) {
    if (typeof args[args.length - 1] === "function")
      fn.apply(this, args);
    else {
      return new Promise((resolve, reject) => {
        args.push((err, res) => err != null ? reject(err) : resolve(res));
        fn.apply(this, args);
      });
    }
  }, "name", { value: fn.name });
};
universalify$1.fromPromise = function(fn) {
  return Object.defineProperty(function(...args) {
    const cb = args[args.length - 1];
    if (typeof cb !== "function")
      return fn.apply(this, args);
    else {
      args.pop();
      fn.apply(this, args).then((r) => cb(null, r), cb);
    }
  }, "name", { value: fn.name });
};
(function(exports) {
  const u2 = universalify$1.fromCallback;
  const fs2 = gracefulFs;
  const api = [
    "access",
    "appendFile",
    "chmod",
    "chown",
    "close",
    "copyFile",
    "fchmod",
    "fchown",
    "fdatasync",
    "fstat",
    "fsync",
    "ftruncate",
    "futimes",
    "lchmod",
    "lchown",
    "link",
    "lstat",
    "mkdir",
    "mkdtemp",
    "open",
    "opendir",
    "readdir",
    "readFile",
    "readlink",
    "realpath",
    "rename",
    "rm",
    "rmdir",
    "stat",
    "symlink",
    "truncate",
    "unlink",
    "utimes",
    "writeFile"
  ].filter((key) => {
    return typeof fs2[key] === "function";
  });
  Object.assign(exports, fs2);
  api.forEach((method) => {
    exports[method] = u2(fs2[method]);
  });
  exports.exists = function(filename, callback) {
    if (typeof callback === "function") {
      return fs2.exists(filename, callback);
    }
    return new Promise((resolve) => {
      return fs2.exists(filename, resolve);
    });
  };
  exports.read = function(fd, buffer, offset, length, position, callback) {
    if (typeof callback === "function") {
      return fs2.read(fd, buffer, offset, length, position, callback);
    }
    return new Promise((resolve, reject) => {
      fs2.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
        if (err)
          return reject(err);
        resolve({ bytesRead, buffer: buffer2 });
      });
    });
  };
  exports.write = function(fd, buffer, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs2.write(fd, buffer, ...args);
    }
    return new Promise((resolve, reject) => {
      fs2.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
        if (err)
          return reject(err);
        resolve({ bytesWritten, buffer: buffer2 });
      });
    });
  };
  exports.readv = function(fd, buffers, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs2.readv(fd, buffers, ...args);
    }
    return new Promise((resolve, reject) => {
      fs2.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
        if (err)
          return reject(err);
        resolve({ bytesRead, buffers: buffers2 });
      });
    });
  };
  exports.writev = function(fd, buffers, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs2.writev(fd, buffers, ...args);
    }
    return new Promise((resolve, reject) => {
      fs2.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
        if (err)
          return reject(err);
        resolve({ bytesWritten, buffers: buffers2 });
      });
    });
  };
  if (typeof fs2.realpath.native === "function") {
    exports.realpath.native = u2(fs2.realpath.native);
  } else {
    process.emitWarning(
      "fs.realpath.native is not a function. Is fs being monkey-patched?",
      "Warning",
      "fs-extra-WARN0003"
    );
  }
})(fs$g);
var makeDir$1 = {};
var utils$2 = {};
const path$b = require$$0$5;
utils$2.checkPath = function checkPath(pth) {
  if (process.platform === "win32") {
    const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path$b.parse(pth).root, ""));
    if (pathHasInvalidWinCharacters) {
      const error2 = new Error(`Path contains invalid characters: ${pth}`);
      error2.code = "EINVAL";
      throw error2;
    }
  }
};
const fs$f = fs$g;
const { checkPath: checkPath2 } = utils$2;
const getMode = (options) => {
  const defaults2 = { mode: 511 };
  if (typeof options === "number")
    return options;
  return { ...defaults2, ...options }.mode;
};
makeDir$1.makeDir = async (dir, options) => {
  checkPath2(dir);
  return fs$f.mkdir(dir, {
    mode: getMode(options),
    recursive: true
  });
};
makeDir$1.makeDirSync = (dir, options) => {
  checkPath2(dir);
  return fs$f.mkdirSync(dir, {
    mode: getMode(options),
    recursive: true
  });
};
const u$e = universalify$1.fromPromise;
const { makeDir: _makeDir, makeDirSync } = makeDir$1;
const makeDir = u$e(_makeDir);
var mkdirs$2 = {
  mkdirs: makeDir,
  mkdirsSync: makeDirSync,
  // alias
  mkdirp: makeDir,
  mkdirpSync: makeDirSync,
  ensureDir: makeDir,
  ensureDirSync: makeDirSync
};
const u$d = universalify$1.fromPromise;
const fs$e = fs$g;
function pathExists$6(path2) {
  return fs$e.access(path2).then(() => true).catch(() => false);
}
var pathExists_1 = {
  pathExists: u$d(pathExists$6),
  pathExistsSync: fs$e.existsSync
};
const fs$d = fs$g;
const u$c = universalify$1.fromPromise;
async function utimesMillis$1(path2, atime, mtime) {
  const fd = await fs$d.open(path2, "r+");
  let closeErr = null;
  try {
    await fs$d.futimes(fd, atime, mtime);
  } finally {
    try {
      await fs$d.close(fd);
    } catch (e) {
      closeErr = e;
    }
  }
  if (closeErr) {
    throw closeErr;
  }
}
function utimesMillisSync$1(path2, atime, mtime) {
  const fd = fs$d.openSync(path2, "r+");
  fs$d.futimesSync(fd, atime, mtime);
  return fs$d.closeSync(fd);
}
var utimes = {
  utimesMillis: u$c(utimesMillis$1),
  utimesMillisSync: utimesMillisSync$1
};
const fs$c = fs$g;
const path$a = require$$0$5;
const u$b = universalify$1.fromPromise;
function getStats$1(src, dest, opts) {
  const statFunc = opts.dereference ? (file2) => fs$c.stat(file2, { bigint: true }) : (file2) => fs$c.lstat(file2, { bigint: true });
  return Promise.all([
    statFunc(src),
    statFunc(dest).catch((err) => {
      if (err.code === "ENOENT")
        return null;
      throw err;
    })
  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
}
function getStatsSync(src, dest, opts) {
  let destStat;
  const statFunc = opts.dereference ? (file2) => fs$c.statSync(file2, { bigint: true }) : (file2) => fs$c.lstatSync(file2, { bigint: true });
  const srcStat = statFunc(src);
  try {
    destStat = statFunc(dest);
  } catch (err) {
    if (err.code === "ENOENT")
      return { srcStat, destStat: null };
    throw err;
  }
  return { srcStat, destStat };
}
async function checkPaths(src, dest, funcName, opts) {
  const { srcStat, destStat } = await getStats$1(src, dest, opts);
  if (destStat) {
    if (areIdentical$2(srcStat, destStat)) {
      const srcBaseName = path$a.basename(src);
      const destBaseName = path$a.basename(dest);
      if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
        return { srcStat, destStat, isChangingCase: true };
      }
      throw new Error("Source and destination must not be the same.");
    }
    if (srcStat.isDirectory() && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
    }
    if (!srcStat.isDirectory() && destStat.isDirectory()) {
      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
    }
  }
  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
    throw new Error(errMsg(src, dest, funcName));
  }
  return { srcStat, destStat };
}
function checkPathsSync(src, dest, funcName, opts) {
  const { srcStat, destStat } = getStatsSync(src, dest, opts);
  if (destStat) {
    if (areIdentical$2(srcStat, destStat)) {
      const srcBaseName = path$a.basename(src);
      const destBaseName = path$a.basename(dest);
      if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
        return { srcStat, destStat, isChangingCase: true };
      }
      throw new Error("Source and destination must not be the same.");
    }
    if (srcStat.isDirectory() && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
    }
    if (!srcStat.isDirectory() && destStat.isDirectory()) {
      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
    }
  }
  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
    throw new Error(errMsg(src, dest, funcName));
  }
  return { srcStat, destStat };
}
async function checkParentPaths(src, srcStat, dest, funcName) {
  const srcParent = path$a.resolve(path$a.dirname(src));
  const destParent = path$a.resolve(path$a.dirname(dest));
  if (destParent === srcParent || destParent === path$a.parse(destParent).root)
    return;
  let destStat;
  try {
    destStat = await fs$c.stat(destParent, { bigint: true });
  } catch (err) {
    if (err.code === "ENOENT")
      return;
    throw err;
  }
  if (areIdentical$2(srcStat, destStat)) {
    throw new Error(errMsg(src, dest, funcName));
  }
  return checkParentPaths(src, srcStat, destParent, funcName);
}
function checkParentPathsSync(src, srcStat, dest, funcName) {
  const srcParent = path$a.resolve(path$a.dirname(src));
  const destParent = path$a.resolve(path$a.dirname(dest));
  if (destParent === srcParent || destParent === path$a.parse(destParent).root)
    return;
  let destStat;
  try {
    destStat = fs$c.statSync(destParent, { bigint: true });
  } catch (err) {
    if (err.code === "ENOENT")
      return;
    throw err;
  }
  if (areIdentical$2(srcStat, destStat)) {
    throw new Error(errMsg(src, dest, funcName));
  }
  return checkParentPathsSync(src, srcStat, destParent, funcName);
}
function areIdentical$2(srcStat, destStat) {
  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
}
function isSrcSubdir(src, dest) {
  const srcArr = path$a.resolve(src).split(path$a.sep).filter((i) => i);
  const destArr = path$a.resolve(dest).split(path$a.sep).filter((i) => i);
  return srcArr.every((cur, i) => destArr[i] === cur);
}
function errMsg(src, dest, funcName) {
  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
}
var stat$4 = {
  // checkPaths
  checkPaths: u$b(checkPaths),
  checkPathsSync,
  // checkParent
  checkParentPaths: u$b(checkParentPaths),
  checkParentPathsSync,
  // Misc
  isSrcSubdir,
  areIdentical: areIdentical$2
};
const fs$b = fs$g;
const path$9 = require$$0$5;
const { mkdirs: mkdirs$1 } = mkdirs$2;
const { pathExists: pathExists$5 } = pathExists_1;
const { utimesMillis } = utimes;
const stat$3 = stat$4;
async function copy$2(src, dest, opts = {}) {
  if (typeof opts === "function") {
    opts = { filter: opts };
  }
  opts.clobber = "clobber" in opts ? !!opts.clobber : true;
  opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
  if (opts.preserveTimestamps && process.arch === "ia32") {
    process.emitWarning(
      "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
      "Warning",
      "fs-extra-WARN0001"
    );
  }
  const { srcStat, destStat } = await stat$3.checkPaths(src, dest, "copy", opts);
  await stat$3.checkParentPaths(src, srcStat, dest, "copy");
  const include = await runFilter(src, dest, opts);
  if (!include)
    return;
  const destParent = path$9.dirname(dest);
  const dirExists = await pathExists$5(destParent);
  if (!dirExists) {
    await mkdirs$1(destParent);
  }
  await getStatsAndPerformCopy(destStat, src, dest, opts);
}
async function runFilter(src, dest, opts) {
  if (!opts.filter)
    return true;
  return opts.filter(src, dest);
}
async function getStatsAndPerformCopy(destStat, src, dest, opts) {
  const statFn = opts.dereference ? fs$b.stat : fs$b.lstat;
  const srcStat = await statFn(src);
  if (srcStat.isDirectory())
    return onDir$1(srcStat, destStat, src, dest, opts);
  if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
    return onFile$1(srcStat, destStat, src, dest, opts);
  if (srcStat.isSymbolicLink())
    return onLink$1(destStat, src, dest, opts);
  if (srcStat.isSocket())
    throw new Error(`Cannot copy a socket file: ${src}`);
  if (srcStat.isFIFO())
    throw new Error(`Cannot copy a FIFO pipe: ${src}`);
  throw new Error(`Unknown file: ${src}`);
}
async function onFile$1(srcStat, destStat, src, dest, opts) {
  if (!destStat)
    return copyFile$1(srcStat, src, dest, opts);
  if (opts.overwrite) {
    await fs$b.unlink(dest);
    return copyFile$1(srcStat, src, dest, opts);
  }
  if (opts.errorOnExist) {
    throw new Error(`'${dest}' already exists`);
  }
}
async function copyFile$1(srcStat, src, dest, opts) {
  await fs$b.copyFile(src, dest);
  if (opts.preserveTimestamps) {
    if (fileIsNotWritable$1(srcStat.mode)) {
      await makeFileWritable$1(dest, srcStat.mode);
    }
    const updatedSrcStat = await fs$b.stat(src);
    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
  }
  return fs$b.chmod(dest, srcStat.mode);
}
function fileIsNotWritable$1(srcMode) {
  return (srcMode & 128) === 0;
}
function makeFileWritable$1(dest, srcMode) {
  return fs$b.chmod(dest, srcMode | 128);
}
async function onDir$1(srcStat, destStat, src, dest, opts) {
  if (!destStat) {
    await fs$b.mkdir(dest);
  }
  const items = await fs$b.readdir(src);
  await Promise.all(items.map(async (item) => {
    const srcItem = path$9.join(src, item);
    const destItem = path$9.join(dest, item);
    const include = await runFilter(srcItem, destItem, opts);
    if (!include)
      return;
    const { destStat: destStat2 } = await stat$3.checkPaths(srcItem, destItem, "copy", opts);
    return getStatsAndPerformCopy(destStat2, srcItem, destItem, opts);
  }));
  if (!destStat) {
    await fs$b.chmod(dest, srcStat.mode);
  }
}
async function onLink$1(destStat, src, dest, opts) {
  let resolvedSrc = await fs$b.readlink(src);
  if (opts.dereference) {
    resolvedSrc = path$9.resolve(process.cwd(), resolvedSrc);
  }
  if (!destStat) {
    return fs$b.symlink(resolvedSrc, dest);
  }
  let resolvedDest = null;
  try {
    resolvedDest = await fs$b.readlink(dest);
  } catch (e) {
    if (e.code === "EINVAL" || e.code === "UNKNOWN")
      return fs$b.symlink(resolvedSrc, dest);
    throw e;
  }
  if (opts.dereference) {
    resolvedDest = path$9.resolve(process.cwd(), resolvedDest);
  }
  if (stat$3.isSrcSubdir(resolvedSrc, resolvedDest)) {
    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
  }
  if (stat$3.isSrcSubdir(resolvedDest, resolvedSrc)) {
    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
  }
  await fs$b.unlink(dest);
  return fs$b.symlink(resolvedSrc, dest);
}
var copy_1 = copy$2;
const fs$a = gracefulFs;
const path$8 = require$$0$5;
const mkdirsSync$1 = mkdirs$2.mkdirsSync;
const utimesMillisSync = utimes.utimesMillisSync;
const stat$2 = stat$4;
function copySync$1(src, dest, opts) {
  if (typeof opts === "function") {
    opts = { filter: opts };
  }
  opts = opts || {};
  opts.clobber = "clobber" in opts ? !!opts.clobber : true;
  opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
  if (opts.preserveTimestamps && process.arch === "ia32") {
    process.emitWarning(
      "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
      "Warning",
      "fs-extra-WARN0002"
    );
  }
  const { srcStat, destStat } = stat$2.checkPathsSync(src, dest, "copy", opts);
  stat$2.checkParentPathsSync(src, srcStat, dest, "copy");
  if (opts.filter && !opts.filter(src, dest))
    return;
  const destParent = path$8.dirname(dest);
  if (!fs$a.existsSync(destParent))
    mkdirsSync$1(destParent);
  return getStats(destStat, src, dest, opts);
}
function getStats(destStat, src, dest, opts) {
  const statSync = opts.dereference ? fs$a.statSync : fs$a.lstatSync;
  const srcStat = statSync(src);
  if (srcStat.isDirectory())
    return onDir(srcStat, destStat, src, dest, opts);
  else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
    return onFile(srcStat, destStat, src, dest, opts);
  else if (srcStat.isSymbolicLink())
    return onLink(destStat, src, dest, opts);
  else if (srcStat.isSocket())
    throw new Error(`Cannot copy a socket file: ${src}`);
  else if (srcStat.isFIFO())
    throw new Error(`Cannot copy a FIFO pipe: ${src}`);
  throw new Error(`Unknown file: ${src}`);
}
function onFile(srcStat, destStat, src, dest, opts) {
  if (!destStat)
    return copyFile(srcStat, src, dest, opts);
  return mayCopyFile(srcStat, src, dest, opts);
}
function mayCopyFile(srcStat, src, dest, opts) {
  if (opts.overwrite) {
    fs$a.unlinkSync(dest);
    return copyFile(srcStat, src, dest, opts);
  } else if (opts.errorOnExist) {
    throw new Error(`'${dest}' already exists`);
  }
}
function copyFile(srcStat, src, dest, opts) {
  fs$a.copyFileSync(src, dest);
  if (opts.preserveTimestamps)
    handleTimestamps(srcStat.mode, src, dest);
  return setDestMode(dest, srcStat.mode);
}
function handleTimestamps(srcMode, src, dest) {
  if (fileIsNotWritable(srcMode))
    makeFileWritable(dest, srcMode);
  return setDestTimestamps(src, dest);
}
function fileIsNotWritable(srcMode) {
  return (srcMode & 128) === 0;
}
function makeFileWritable(dest, srcMode) {
  return setDestMode(dest, srcMode | 128);
}
function setDestMode(dest, srcMode) {
  return fs$a.chmodSync(dest, srcMode);
}
function setDestTimestamps(src, dest) {
  const updatedSrcStat = fs$a.statSync(src);
  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
}
function onDir(srcStat, destStat, src, dest, opts) {
  if (!destStat)
    return mkDirAndCopy(srcStat.mode, src, dest, opts);
  return copyDir(src, dest, opts);
}
function mkDirAndCopy(srcMode, src, dest, opts) {
  fs$a.mkdirSync(dest);
  copyDir(src, dest, opts);
  return setDestMode(dest, srcMode);
}
function copyDir(src, dest, opts) {
  fs$a.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
}
function copyDirItem(item, src, dest, opts) {
  const srcItem = path$8.join(src, item);
  const destItem = path$8.join(dest, item);
  if (opts.filter && !opts.filter(srcItem, destItem))
    return;
  const { destStat } = stat$2.checkPathsSync(srcItem, destItem, "copy", opts);
  return getStats(destStat, srcItem, destItem, opts);
}
function onLink(destStat, src, dest, opts) {
  let resolvedSrc = fs$a.readlinkSync(src);
  if (opts.dereference) {
    resolvedSrc = path$8.resolve(process.cwd(), resolvedSrc);
  }
  if (!destStat) {
    return fs$a.symlinkSync(resolvedSrc, dest);
  } else {
    let resolvedDest;
    try {
      resolvedDest = fs$a.readlinkSync(dest);
    } catch (err) {
      if (err.code === "EINVAL" || err.code === "UNKNOWN")
        return fs$a.symlinkSync(resolvedSrc, dest);
      throw err;
    }
    if (opts.dereference) {
      resolvedDest = path$8.resolve(process.cwd(), resolvedDest);
    }
    if (stat$2.isSrcSubdir(resolvedSrc, resolvedDest)) {
      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
    }
    if (stat$2.isSrcSubdir(resolvedDest, resolvedSrc)) {
      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
    }
    return copyLink(resolvedSrc, dest);
  }
}
function copyLink(resolvedSrc, dest) {
  fs$a.unlinkSync(dest);
  return fs$a.symlinkSync(resolvedSrc, dest);
}
var copySync_1 = copySync$1;
const u$a = universalify$1.fromPromise;
var copy$1 = {
  copy: u$a(copy_1),
  copySync: copySync_1
};
const fs$9 = gracefulFs;
const u$9 = universalify$1.fromCallback;
function remove$2(path2, callback) {
  fs$9.rm(path2, { recursive: true, force: true }, callback);
}
function removeSync$1(path2) {
  fs$9.rmSync(path2, { recursive: true, force: true });
}
var remove_1 = {
  remove: u$9(remove$2),
  removeSync: removeSync$1
};
const u$8 = universalify$1.fromPromise;
const fs$8 = fs$g;
const path$7 = require$$0$5;
const mkdir$3 = mkdirs$2;
const remove$1 = remove_1;
const emptyDir = u$8(async function emptyDir2(dir) {
  let items;
  try {
    items = await fs$8.readdir(dir);
  } catch {
    return mkdir$3.mkdirs(dir);
  }
  return Promise.all(items.map((item) => remove$1.remove(path$7.join(dir, item))));
});
function emptyDirSync(dir) {
  let items;
  try {
    items = fs$8.readdirSync(dir);
  } catch {
    return mkdir$3.mkdirsSync(dir);
  }
  items.forEach((item) => {
    item = path$7.join(dir, item);
    remove$1.removeSync(item);
  });
}
var empty = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir
};
const u$7 = universalify$1.fromPromise;
const path$6 = require$$0$5;
const fs$7 = fs$g;
const mkdir$2 = mkdirs$2;
async function createFile$1(file2) {
  let stats;
  try {
    stats = await fs$7.stat(file2);
  } catch {
  }
  if (stats && stats.isFile())
    return;
  const dir = path$6.dirname(file2);
  let dirStats = null;
  try {
    dirStats = await fs$7.stat(dir);
  } catch (err) {
    if (err.code === "ENOENT") {
      await mkdir$2.mkdirs(dir);
      await fs$7.writeFile(file2, "");
      return;
    } else {
      throw err;
    }
  }
  if (dirStats.isDirectory()) {
    await fs$7.writeFile(file2, "");
  } else {
    await fs$7.readdir(dir);
  }
}
function createFileSync$1(file2) {
  let stats;
  try {
    stats = fs$7.statSync(file2);
  } catch {
  }
  if (stats && stats.isFile())
    return;
  const dir = path$6.dirname(file2);
  try {
    if (!fs$7.statSync(dir).isDirectory()) {
      fs$7.readdirSync(dir);
    }
  } catch (err) {
    if (err && err.code === "ENOENT")
      mkdir$2.mkdirsSync(dir);
    else
      throw err;
  }
  fs$7.writeFileSync(file2, "");
}
var file = {
  createFile: u$7(createFile$1),
  createFileSync: createFileSync$1
};
const u$6 = universalify$1.fromPromise;
const path$5 = require$$0$5;
const fs$6 = fs$g;
const mkdir$1 = mkdirs$2;
const { pathExists: pathExists$4 } = pathExists_1;
const { areIdentical: areIdentical$1 } = stat$4;
async function createLink$1(srcpath, dstpath) {
  let dstStat;
  try {
    dstStat = await fs$6.lstat(dstpath);
  } catch {
  }
  let srcStat;
  try {
    srcStat = await fs$6.lstat(srcpath);
  } catch (err) {
    err.message = err.message.replace("lstat", "ensureLink");
    throw err;
  }
  if (dstStat && areIdentical$1(srcStat, dstStat))
    return;
  const dir = path$5.dirname(dstpath);
  const dirExists = await pathExists$4(dir);
  if (!dirExists) {
    await mkdir$1.mkdirs(dir);
  }
  await fs$6.link(srcpath, dstpath);
}
function createLinkSync$1(srcpath, dstpath) {
  let dstStat;
  try {
    dstStat = fs$6.lstatSync(dstpath);
  } catch {
  }
  try {
    const srcStat = fs$6.lstatSync(srcpath);
    if (dstStat && areIdentical$1(srcStat, dstStat))
      return;
  } catch (err) {
    err.message = err.message.replace("lstat", "ensureLink");
    throw err;
  }
  const dir = path$5.dirname(dstpath);
  const dirExists = fs$6.existsSync(dir);
  if (dirExists)
    return fs$6.linkSync(srcpath, dstpath);
  mkdir$1.mkdirsSync(dir);
  return fs$6.linkSync(srcpath, dstpath);
}
var link = {
  createLink: u$6(createLink$1),
  createLinkSync: createLinkSync$1
};
const path$4 = require$$0$5;
const fs$5 = fs$g;
const { pathExists: pathExists$3 } = pathExists_1;
const u$5 = universalify$1.fromPromise;
async function symlinkPaths$1(srcpath, dstpath) {
  if (path$4.isAbsolute(srcpath)) {
    try {
      await fs$5.lstat(srcpath);
    } catch (err) {
      err.message = err.message.replace("lstat", "ensureSymlink");
      throw err;
    }
    return {
      toCwd: srcpath,
      toDst: srcpath
    };
  }
  const dstdir = path$4.dirname(dstpath);
  const relativeToDst = path$4.join(dstdir, srcpath);
  const exists = await pathExists$3(relativeToDst);
  if (exists) {
    return {
      toCwd: relativeToDst,
      toDst: srcpath
    };
  }
  try {
    await fs$5.lstat(srcpath);
  } catch (err) {
    err.message = err.message.replace("lstat", "ensureSymlink");
    throw err;
  }
  return {
    toCwd: srcpath,
    toDst: path$4.relative(dstdir, srcpath)
  };
}
function symlinkPathsSync$1(srcpath, dstpath) {
  if (path$4.isAbsolute(srcpath)) {
    const exists2 = fs$5.existsSync(srcpath);
    if (!exists2)
      throw new Error("absolute srcpath does not exist");
    return {
      toCwd: srcpath,
      toDst: srcpath
    };
  }
  const dstdir = path$4.dirname(dstpath);
  const relativeToDst = path$4.join(dstdir, srcpath);
  const exists = fs$5.existsSync(relativeToDst);
  if (exists) {
    return {
      toCwd: relativeToDst,
      toDst: srcpath
    };
  }
  const srcExists = fs$5.existsSync(srcpath);
  if (!srcExists)
    throw new Error("relative srcpath does not exist");
  return {
    toCwd: srcpath,
    toDst: path$4.relative(dstdir, srcpath)
  };
}
var symlinkPaths_1 = {
  symlinkPaths: u$5(symlinkPaths$1),
  symlinkPathsSync: symlinkPathsSync$1
};
const fs$4 = fs$g;
const u$4 = universalify$1.fromPromise;
async function symlinkType$1(srcpath, type2) {
  if (type2)
    return type2;
  let stats;
  try {
    stats = await fs$4.lstat(srcpath);
  } catch {
    return "file";
  }
  return stats && stats.isDirectory() ? "dir" : "file";
}
function symlinkTypeSync$1(srcpath, type2) {
  if (type2)
    return type2;
  let stats;
  try {
    stats = fs$4.lstatSync(srcpath);
  } catch {
    return "file";
  }
  return stats && stats.isDirectory() ? "dir" : "file";
}
var symlinkType_1 = {
  symlinkType: u$4(symlinkType$1),
  symlinkTypeSync: symlinkTypeSync$1
};
const u$3 = universalify$1.fromPromise;
const path$3 = require$$0$5;
const fs$3 = fs$g;
const { mkdirs, mkdirsSync } = mkdirs$2;
const { symlinkPaths, symlinkPathsSync } = symlinkPaths_1;
const { symlinkType, symlinkTypeSync } = symlinkType_1;
const { pathExists: pathExists$2 } = pathExists_1;
const { areIdentical } = stat$4;
async function createSymlink$1(srcpath, dstpath, type2) {
  let stats;
  try {
    stats = await fs$3.lstat(dstpath);
  } catch {
  }
  if (stats && stats.isSymbolicLink()) {
    const [srcStat, dstStat] = await Promise.all([
      fs$3.stat(srcpath),
      fs$3.stat(dstpath)
    ]);
    if (areIdentical(srcStat, dstStat))
      return;
  }
  const relative = await symlinkPaths(srcpath, dstpath);
  srcpath = relative.toDst;
  const toType = await symlinkType(relative.toCwd, type2);
  const dir = path$3.dirname(dstpath);
  if (!await pathExists$2(dir)) {
    await mkdirs(dir);
  }
  return fs$3.symlink(srcpath, dstpath, toType);
}
function createSymlinkSync$1(srcpath, dstpath, type2) {
  let stats;
  try {
    stats = fs$3.lstatSync(dstpath);
  } catch {
  }
  if (stats && stats.isSymbolicLink()) {
    const srcStat = fs$3.statSync(srcpath);
    const dstStat = fs$3.statSync(dstpath);
    if (areIdentical(srcStat, dstStat))
      return;
  }
  const relative = symlinkPathsSync(srcpath, dstpath);
  srcpath = relative.toDst;
  type2 = symlinkTypeSync(relative.toCwd, type2);
  const dir = path$3.dirname(dstpath);
  const exists = fs$3.existsSync(dir);
  if (exists)
    return fs$3.symlinkSync(srcpath, dstpath, type2);
  mkdirsSync(dir);
  return fs$3.symlinkSync(srcpath, dstpath, type2);
}
var symlink = {
  createSymlink: u$3(createSymlink$1),
  createSymlinkSync: createSymlinkSync$1
};
const { createFile, createFileSync } = file;
const { createLink, createLinkSync } = link;
const { createSymlink, createSymlinkSync } = symlink;
var ensure = {
  // file
  createFile,
  createFileSync,
  ensureFile: createFile,
  ensureFileSync: createFileSync,
  // link
  createLink,
  createLinkSync,
  ensureLink: createLink,
  ensureLinkSync: createLinkSync,
  // symlink
  createSymlink,
  createSymlinkSync,
  ensureSymlink: createSymlink,
  ensureSymlinkSync: createSymlinkSync
};
function stringify$3(obj, { EOL = "\n", finalEOL = true, replacer = null, spaces } = {}) {
  const EOF = finalEOL ? EOL : "";
  const str2 = JSON.stringify(obj, replacer, spaces);
  return str2.replace(/\n/g, EOL) + EOF;
}
function stripBom$1(content) {
  if (Buffer.isBuffer(content))
    content = content.toString("utf8");
  return content.replace(/^\uFEFF/, "");
}
var utils$1 = { stringify: stringify$3, stripBom: stripBom$1 };
let _fs;
try {
  _fs = gracefulFs;
} catch (_2) {
  _fs = require$$0$4;
}
const universalify = universalify$1;
const { stringify: stringify$2, stripBom } = utils$1;
async function _readFile(file2, options = {}) {
  if (typeof options === "string") {
    options = { encoding: options };
  }
  const fs2 = options.fs || _fs;
  const shouldThrow = "throws" in options ? options.throws : true;
  let data = await universalify.fromCallback(fs2.readFile)(file2, options);
  data = stripBom(data);
  let obj;
  try {
    obj = JSON.parse(data, options ? options.reviver : null);
  } catch (err) {
    if (shouldThrow) {
      err.message = `${file2}: ${err.message}`;
      throw err;
    } else {
      return null;
    }
  }
  return obj;
}
const readFile = universalify.fromPromise(_readFile);
function readFileSync(file2, options = {}) {
  if (typeof options === "string") {
    options = { encoding: options };
  }
  const fs2 = options.fs || _fs;
  const shouldThrow = "throws" in options ? options.throws : true;
  try {
    let content = fs2.readFileSync(file2, options);
    content = stripBom(content);
    return JSON.parse(content, options.reviver);
  } catch (err) {
    if (shouldThrow) {
      err.message = `${file2}: ${err.message}`;
      throw err;
    } else {
      return null;
    }
  }
}
async function _writeFile(file2, obj, options = {}) {
  const fs2 = options.fs || _fs;
  const str2 = stringify$2(obj, options);
  await universalify.fromCallback(fs2.writeFile)(file2, str2, options);
}
const writeFile$1 = universalify.fromPromise(_writeFile);
function writeFileSync(file2, obj, options = {}) {
  const fs2 = options.fs || _fs;
  const str2 = stringify$2(obj, options);
  return fs2.writeFileSync(file2, str2, options);
}
const jsonfile$1 = {
  readFile,
  readFileSync,
  writeFile: writeFile$1,
  writeFileSync
};
var jsonfile_1 = jsonfile$1;
const jsonFile$1 = jsonfile_1;
var jsonfile = {
  // jsonfile exports
  readJson: jsonFile$1.readFile,
  readJsonSync: jsonFile$1.readFileSync,
  writeJson: jsonFile$1.writeFile,
  writeJsonSync: jsonFile$1.writeFileSync
};
const u$2 = universalify$1.fromPromise;
const fs$2 = fs$g;
const path$2 = require$$0$5;
const mkdir = mkdirs$2;
const pathExists$1 = pathExists_1.pathExists;
async function outputFile$1(file2, data, encoding = "utf-8") {
  const dir = path$2.dirname(file2);
  if (!await pathExists$1(dir)) {
    await mkdir.mkdirs(dir);
  }
  return fs$2.writeFile(file2, data, encoding);
}
function outputFileSync$1(file2, ...args) {
  const dir = path$2.dirname(file2);
  if (!fs$2.existsSync(dir)) {
    mkdir.mkdirsSync(dir);
  }
  fs$2.writeFileSync(file2, ...args);
}
var outputFile_1 = {
  outputFile: u$2(outputFile$1),
  outputFileSync: outputFileSync$1
};
const { stringify: stringify$1 } = utils$1;
const { outputFile } = outputFile_1;
async function outputJson(file2, data, options = {}) {
  const str2 = stringify$1(data, options);
  await outputFile(file2, str2, options);
}
var outputJson_1 = outputJson;
const { stringify: stringify2 } = utils$1;
const { outputFileSync } = outputFile_1;
function outputJsonSync(file2, data, options) {
  const str2 = stringify2(data, options);
  outputFileSync(file2, str2, options);
}
var outputJsonSync_1 = outputJsonSync;
const u$1 = universalify$1.fromPromise;
const jsonFile = jsonfile;
jsonFile.outputJson = u$1(outputJson_1);
jsonFile.outputJsonSync = outputJsonSync_1;
jsonFile.outputJSON = jsonFile.outputJson;
jsonFile.outputJSONSync = jsonFile.outputJsonSync;
jsonFile.writeJSON = jsonFile.writeJson;
jsonFile.writeJSONSync = jsonFile.writeJsonSync;
jsonFile.readJSON = jsonFile.readJson;
jsonFile.readJSONSync = jsonFile.readJsonSync;
var json = jsonFile;
const fs$1 = fs$g;
const path$1 = require$$0$5;
const { copy } = copy$1;
const { remove } = remove_1;
const { mkdirp } = mkdirs$2;
const { pathExists } = pathExists_1;
const stat$1 = stat$4;
async function move$1(src, dest, opts = {}) {
  const overwrite = opts.overwrite || opts.clobber || false;
  const { srcStat, isChangingCase = false } = await stat$1.checkPaths(src, dest, "move", opts);
  await stat$1.checkParentPaths(src, srcStat, dest, "move");
  const destParent = path$1.dirname(dest);
  const parsedParentPath = path$1.parse(destParent);
  if (parsedParentPath.root !== destParent) {
    await mkdirp(destParent);
  }
  return doRename$1(src, dest, overwrite, isChangingCase);
}
async function doRename$1(src, dest, overwrite, isChangingCase) {
  if (!isChangingCase) {
    if (overwrite) {
      await remove(dest);
    } else if (await pathExists(dest)) {
      throw new Error("dest already exists.");
    }
  }
  try {
    await fs$1.rename(src, dest);
  } catch (err) {
    if (err.code !== "EXDEV") {
      throw err;
    }
    await moveAcrossDevice$1(src, dest, overwrite);
  }
}
async function moveAcrossDevice$1(src, dest, overwrite) {
  const opts = {
    overwrite,
    errorOnExist: true,
    preserveTimestamps: true
  };
  await copy(src, dest, opts);
  return remove(src);
}
var move_1 = move$1;
const fs = gracefulFs;
const path = require$$0$5;
const copySync = copy$1.copySync;
const removeSync = remove_1.removeSync;
const mkdirpSync = mkdirs$2.mkdirpSync;
const stat = stat$4;
function moveSync(src, dest, opts) {
  opts = opts || {};
  const overwrite = opts.overwrite || opts.clobber || false;
  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, "move", opts);
  stat.checkParentPathsSync(src, srcStat, dest, "move");
  if (!isParentRoot(dest))
    mkdirpSync(path.dirname(dest));
  return doRename(src, dest, overwrite, isChangingCase);
}
function isParentRoot(dest) {
  const parent2 = path.dirname(dest);
  const parsedPath = path.parse(parent2);
  return parsedPath.root === parent2;
}
function doRename(src, dest, overwrite, isChangingCase) {
  if (isChangingCase)
    return rename(src, dest, overwrite);
  if (overwrite) {
    removeSync(dest);
    return rename(src, dest, overwrite);
  }
  if (fs.existsSync(dest))
    throw new Error("dest already exists.");
  return rename(src, dest, overwrite);
}
function rename(src, dest, overwrite) {
  try {
    fs.renameSync(src, dest);
  } catch (err) {
    if (err.code !== "EXDEV")
      throw err;
    return moveAcrossDevice(src, dest, overwrite);
  }
}
function moveAcrossDevice(src, dest, overwrite) {
  const opts = {
    overwrite,
    errorOnExist: true,
    preserveTimestamps: true
  };
  copySync(src, dest, opts);
  return removeSync(src);
}
var moveSync_1 = moveSync;
const u = universalify$1.fromPromise;
var move = {
  move: u(move_1),
  moveSync: moveSync_1
};
var lib$1 = {
  // Export promiseified graceful-fs:
  ...fs$g,
  // Export extra methods:
  ...copy$1,
  ...empty,
  ...ensure,
  ...json,
  ...mkdirs$2,
  ...move,
  ...outputFile_1,
  ...pathExists_1,
  ...remove_1
};
const fse = /* @__PURE__ */ getDefaultExportFromCjs(lib$1);
function last$1(array2) {
  var length = array2 == null ? 0 : array2.length;
  return length ? array2[length - 1] : void 0;
}
var last_1 = last$1;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string2) {
  var index2 = string2.length;
  while (index2-- && reWhitespace.test(string2.charAt(index2))) {
  }
  return index2;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string2) {
  return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
}
var _baseTrim = baseTrim$1;
function baseFindIndex$1(array2, predicate, fromIndex, fromRight) {
  var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index2-- : ++index2 < length) {
    if (predicate(array2[index2], index2, array2)) {
      return index2;
    }
  }
  return -1;
}
var _baseFindIndex = baseFindIndex$1;
function baseIsNaN$1(value) {
  return value !== value;
}
var _baseIsNaN = baseIsNaN$1;
function strictIndexOf$1(array2, value, fromIndex) {
  var index2 = fromIndex - 1, length = array2.length;
  while (++index2 < length) {
    if (array2[index2] === value) {
      return index2;
    }
  }
  return -1;
}
var _strictIndexOf = strictIndexOf$1;
var baseFindIndex = _baseFindIndex, baseIsNaN = _baseIsNaN, strictIndexOf = _strictIndexOf;
function baseIndexOf$2(array2, value, fromIndex) {
  return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
}
var _baseIndexOf = baseIndexOf$2;
var baseIndexOf$1 = _baseIndexOf;
function charsEndIndex$1(strSymbols, chrSymbols) {
  var index2 = strSymbols.length;
  while (index2-- && baseIndexOf$1(chrSymbols, strSymbols[index2], 0) > -1) {
  }
  return index2;
}
var _charsEndIndex = charsEndIndex$1;
var baseIndexOf = _baseIndexOf;
function charsStartIndex$1(strSymbols, chrSymbols) {
  var index2 = -1, length = strSymbols.length;
  while (++index2 < length && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
  }
  return index2;
}
var _charsStartIndex = charsStartIndex$1;
var baseToString = _baseToString, baseTrim = _baseTrim, castSlice = _castSlice, charsEndIndex = _charsEndIndex, charsStartIndex = _charsStartIndex, stringToArray = _stringToArray, toString3 = toString_1;
function trim(string2, chars, guard) {
  string2 = toString3(string2);
  if (string2 && (guard || chars === void 0)) {
    return baseTrim(string2);
  }
  if (!string2 || !(chars = baseToString(chars))) {
    return string2;
  }
  var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
  return castSlice(strSymbols, start, end).join("");
}
var trim_1 = trim;
const trim$1 = /* @__PURE__ */ getDefaultExportFromCjs(trim_1);
var publicApi = {};
var URL$2 = { exports: {} };
var conversions = {};
var lib = conversions;
function sign(x) {
  return x < 0 ? -1 : 1;
}
function evenRound(x) {
  if (x % 1 === 0.5 && (x & 1) === 0) {
    return Math.floor(x);
  } else {
    return Math.round(x);
  }
}
function createNumberConversion(bitLength, typeOpts) {
  if (!typeOpts.unsigned) {
    --bitLength;
  }
  const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
  const upperBound = Math.pow(2, bitLength) - 1;
  const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
  const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
  return function(V, opts) {
    if (!opts)
      opts = {};
    let x = +V;
    if (opts.enforceRange) {
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite number");
      }
      x = sign(x) * Math.floor(Math.abs(x));
      if (x < lowerBound || x > upperBound) {
        throw new TypeError("Argument is not in byte range");
      }
      return x;
    }
    if (!isNaN(x) && opts.clamp) {
      x = evenRound(x);
      if (x < lowerBound)
        x = lowerBound;
      if (x > upperBound)
        x = upperBound;
      return x;
    }
    if (!Number.isFinite(x) || x === 0) {
      return 0;
    }
    x = sign(x) * Math.floor(Math.abs(x));
    x = x % moduloVal;
    if (!typeOpts.unsigned && x >= moduloBound) {
      return x - moduloVal;
    } else if (typeOpts.unsigned) {
      if (x < 0) {
        x += moduloVal;
      } else if (x === -0) {
        return 0;
      }
    }
    return x;
  };
}
conversions["void"] = function() {
  return void 0;
};
conversions["boolean"] = function(val) {
  return !!val;
};
conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });
conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
conversions["double"] = function(V) {
  const x = +V;
  if (!Number.isFinite(x)) {
    throw new TypeError("Argument is not a finite floating-point value");
  }
  return x;
};
conversions["unrestricted double"] = function(V) {
  const x = +V;
  if (isNaN(x)) {
    throw new TypeError("Argument is NaN");
  }
  return x;
};
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];
conversions["DOMString"] = function(V, opts) {
  if (!opts)
    opts = {};
  if (opts.treatNullAsEmptyString && V === null) {
    return "";
  }
  return String(V);
};
conversions["ByteString"] = function(V, opts) {
  const x = String(V);
  let c = void 0;
  for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
    if (c > 255) {
      throw new TypeError("Argument is not a valid bytestring");
    }
  }
  return x;
};
conversions["USVString"] = function(V) {
  const S = String(V);
  const n = S.length;
  const U = [];
  for (let i = 0; i < n; ++i) {
    const c = S.charCodeAt(i);
    if (c < 55296 || c > 57343) {
      U.push(String.fromCodePoint(c));
    } else if (56320 <= c && c <= 57343) {
      U.push(String.fromCodePoint(65533));
    } else {
      if (i === n - 1) {
        U.push(String.fromCodePoint(65533));
      } else {
        const d = S.charCodeAt(i + 1);
        if (56320 <= d && d <= 57343) {
          const a = c & 1023;
          const b = d & 1023;
          U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(65533));
        }
      }
    }
  }
  return U.join("");
};
conversions["Date"] = function(V, opts) {
  if (!(V instanceof Date)) {
    throw new TypeError("Argument is not a Date object");
  }
  if (isNaN(V)) {
    return void 0;
  }
  return V;
};
conversions["RegExp"] = function(V, opts) {
  if (!(V instanceof RegExp)) {
    V = new RegExp(V);
  }
  return V;
};
var utils = { exports: {} };
(function(module) {
  module.exports.mixin = function mixin(target, source) {
    const keys2 = Object.getOwnPropertyNames(source);
    for (let i = 0; i < keys2.length; ++i) {
      Object.defineProperty(target, keys2[i], Object.getOwnPropertyDescriptor(source, keys2[i]));
    }
  };
  module.exports.wrapperSymbol = Symbol("wrapper");
  module.exports.implSymbol = Symbol("impl");
  module.exports.wrapperForImpl = function(impl) {
    return impl[module.exports.wrapperSymbol];
  };
  module.exports.implForWrapper = function(wrapper) {
    return wrapper[module.exports.implSymbol];
  };
})(utils);
var utilsExports = utils.exports;
var URLImpl = {};
var urlStateMachine = { exports: {} };
var tr46 = {};
const require$$1 = [
  [
    [
      0,
      44
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      45,
      46
    ],
    "valid"
  ],
  [
    [
      47,
      47
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      48,
      57
    ],
    "valid"
  ],
  [
    [
      58,
      64
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      65,
      65
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      66,
      66
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      67,
      67
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      68,
      68
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      69,
      69
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      70,
      70
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      71,
      71
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      72,
      72
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      73,
      73
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      74,
      74
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      75,
      75
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      76,
      76
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      77,
      77
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      78,
      78
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      79,
      79
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      80,
      80
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      81,
      81
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      82,
      82
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      83,
      83
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      84,
      84
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      85,
      85
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      86,
      86
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      87,
      87
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      88,
      88
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      89,
      89
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      90,
      90
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      91,
      96
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      97,
      122
    ],
    "valid"
  ],
  [
    [
      123,
      127
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      128,
      159
    ],
    "disallowed"
  ],
  [
    [
      160,
      160
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      161,
      167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      168,
      168
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776
    ]
  ],
  [
    [
      169,
      169
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      170,
      170
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      171,
      172
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      173,
      173
    ],
    "ignored"
  ],
  [
    [
      174,
      174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      175,
      175
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      176,
      177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      178,
      178
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      179,
      179
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      180,
      180
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      181,
      181
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      182,
      182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      183,
      183
    ],
    "valid"
  ],
  [
    [
      184,
      184
    ],
    "disallowed_STD3_mapped",
    [
      32,
      807
    ]
  ],
  [
    [
      185,
      185
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      186,
      186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      187,
      187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      188,
      188
    ],
    "mapped",
    [
      49,
      8260,
      52
    ]
  ],
  [
    [
      189,
      189
    ],
    "mapped",
    [
      49,
      8260,
      50
    ]
  ],
  [
    [
      190,
      190
    ],
    "mapped",
    [
      51,
      8260,
      52
    ]
  ],
  [
    [
      191,
      191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      192,
      192
    ],
    "mapped",
    [
      224
    ]
  ],
  [
    [
      193,
      193
    ],
    "mapped",
    [
      225
    ]
  ],
  [
    [
      194,
      194
    ],
    "mapped",
    [
      226
    ]
  ],
  [
    [
      195,
      195
    ],
    "mapped",
    [
      227
    ]
  ],
  [
    [
      196,
      196
    ],
    "mapped",
    [
      228
    ]
  ],
  [
    [
      197,
      197
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      198,
      198
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      199,
      199
    ],
    "mapped",
    [
      231
    ]
  ],
  [
    [
      200,
      200
    ],
    "mapped",
    [
      232
    ]
  ],
  [
    [
      201,
      201
    ],
    "mapped",
    [
      233
    ]
  ],
  [
    [
      202,
      202
    ],
    "mapped",
    [
      234
    ]
  ],
  [
    [
      203,
      203
    ],
    "mapped",
    [
      235
    ]
  ],
  [
    [
      204,
      204
    ],
    "mapped",
    [
      236
    ]
  ],
  [
    [
      205,
      205
    ],
    "mapped",
    [
      237
    ]
  ],
  [
    [
      206,
      206
    ],
    "mapped",
    [
      238
    ]
  ],
  [
    [
      207,
      207
    ],
    "mapped",
    [
      239
    ]
  ],
  [
    [
      208,
      208
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      209,
      209
    ],
    "mapped",
    [
      241
    ]
  ],
  [
    [
      210,
      210
    ],
    "mapped",
    [
      242
    ]
  ],
  [
    [
      211,
      211
    ],
    "mapped",
    [
      243
    ]
  ],
  [
    [
      212,
      212
    ],
    "mapped",
    [
      244
    ]
  ],
  [
    [
      213,
      213
    ],
    "mapped",
    [
      245
    ]
  ],
  [
    [
      214,
      214
    ],
    "mapped",
    [
      246
    ]
  ],
  [
    [
      215,
      215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      216,
      216
    ],
    "mapped",
    [
      248
    ]
  ],
  [
    [
      217,
      217
    ],
    "mapped",
    [
      249
    ]
  ],
  [
    [
      218,
      218
    ],
    "mapped",
    [
      250
    ]
  ],
  [
    [
      219,
      219
    ],
    "mapped",
    [
      251
    ]
  ],
  [
    [
      220,
      220
    ],
    "mapped",
    [
      252
    ]
  ],
  [
    [
      221,
      221
    ],
    "mapped",
    [
      253
    ]
  ],
  [
    [
      222,
      222
    ],
    "mapped",
    [
      254
    ]
  ],
  [
    [
      223,
      223
    ],
    "deviation",
    [
      115,
      115
    ]
  ],
  [
    [
      224,
      246
    ],
    "valid"
  ],
  [
    [
      247,
      247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      248,
      255
    ],
    "valid"
  ],
  [
    [
      256,
      256
    ],
    "mapped",
    [
      257
    ]
  ],
  [
    [
      257,
      257
    ],
    "valid"
  ],
  [
    [
      258,
      258
    ],
    "mapped",
    [
      259
    ]
  ],
  [
    [
      259,
      259
    ],
    "valid"
  ],
  [
    [
      260,
      260
    ],
    "mapped",
    [
      261
    ]
  ],
  [
    [
      261,
      261
    ],
    "valid"
  ],
  [
    [
      262,
      262
    ],
    "mapped",
    [
      263
    ]
  ],
  [
    [
      263,
      263
    ],
    "valid"
  ],
  [
    [
      264,
      264
    ],
    "mapped",
    [
      265
    ]
  ],
  [
    [
      265,
      265
    ],
    "valid"
  ],
  [
    [
      266,
      266
    ],
    "mapped",
    [
      267
    ]
  ],
  [
    [
      267,
      267
    ],
    "valid"
  ],
  [
    [
      268,
      268
    ],
    "mapped",
    [
      269
    ]
  ],
  [
    [
      269,
      269
    ],
    "valid"
  ],
  [
    [
      270,
      270
    ],
    "mapped",
    [
      271
    ]
  ],
  [
    [
      271,
      271
    ],
    "valid"
  ],
  [
    [
      272,
      272
    ],
    "mapped",
    [
      273
    ]
  ],
  [
    [
      273,
      273
    ],
    "valid"
  ],
  [
    [
      274,
      274
    ],
    "mapped",
    [
      275
    ]
  ],
  [
    [
      275,
      275
    ],
    "valid"
  ],
  [
    [
      276,
      276
    ],
    "mapped",
    [
      277
    ]
  ],
  [
    [
      277,
      277
    ],
    "valid"
  ],
  [
    [
      278,
      278
    ],
    "mapped",
    [
      279
    ]
  ],
  [
    [
      279,
      279
    ],
    "valid"
  ],
  [
    [
      280,
      280
    ],
    "mapped",
    [
      281
    ]
  ],
  [
    [
      281,
      281
    ],
    "valid"
  ],
  [
    [
      282,
      282
    ],
    "mapped",
    [
      283
    ]
  ],
  [
    [
      283,
      283
    ],
    "valid"
  ],
  [
    [
      284,
      284
    ],
    "mapped",
    [
      285
    ]
  ],
  [
    [
      285,
      285
    ],
    "valid"
  ],
  [
    [
      286,
      286
    ],
    "mapped",
    [
      287
    ]
  ],
  [
    [
      287,
      287
    ],
    "valid"
  ],
  [
    [
      288,
      288
    ],
    "mapped",
    [
      289
    ]
  ],
  [
    [
      289,
      289
    ],
    "valid"
  ],
  [
    [
      290,
      290
    ],
    "mapped",
    [
      291
    ]
  ],
  [
    [
      291,
      291
    ],
    "valid"
  ],
  [
    [
      292,
      292
    ],
    "mapped",
    [
      293
    ]
  ],
  [
    [
      293,
      293
    ],
    "valid"
  ],
  [
    [
      294,
      294
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      295,
      295
    ],
    "valid"
  ],
  [
    [
      296,
      296
    ],
    "mapped",
    [
      297
    ]
  ],
  [
    [
      297,
      297
    ],
    "valid"
  ],
  [
    [
      298,
      298
    ],
    "mapped",
    [
      299
    ]
  ],
  [
    [
      299,
      299
    ],
    "valid"
  ],
  [
    [
      300,
      300
    ],
    "mapped",
    [
      301
    ]
  ],
  [
    [
      301,
      301
    ],
    "valid"
  ],
  [
    [
      302,
      302
    ],
    "mapped",
    [
      303
    ]
  ],
  [
    [
      303,
      303
    ],
    "valid"
  ],
  [
    [
      304,
      304
    ],
    "mapped",
    [
      105,
      775
    ]
  ],
  [
    [
      305,
      305
    ],
    "valid"
  ],
  [
    [
      306,
      307
    ],
    "mapped",
    [
      105,
      106
    ]
  ],
  [
    [
      308,
      308
    ],
    "mapped",
    [
      309
    ]
  ],
  [
    [
      309,
      309
    ],
    "valid"
  ],
  [
    [
      310,
      310
    ],
    "mapped",
    [
      311
    ]
  ],
  [
    [
      311,
      312
    ],
    "valid"
  ],
  [
    [
      313,
      313
    ],
    "mapped",
    [
      314
    ]
  ],
  [
    [
      314,
      314
    ],
    "valid"
  ],
  [
    [
      315,
      315
    ],
    "mapped",
    [
      316
    ]
  ],
  [
    [
      316,
      316
    ],
    "valid"
  ],
  [
    [
      317,
      317
    ],
    "mapped",
    [
      318
    ]
  ],
  [
    [
      318,
      318
    ],
    "valid"
  ],
  [
    [
      319,
      320
    ],
    "mapped",
    [
      108,
      183
    ]
  ],
  [
    [
      321,
      321
    ],
    "mapped",
    [
      322
    ]
  ],
  [
    [
      322,
      322
    ],
    "valid"
  ],
  [
    [
      323,
      323
    ],
    "mapped",
    [
      324
    ]
  ],
  [
    [
      324,
      324
    ],
    "valid"
  ],
  [
    [
      325,
      325
    ],
    "mapped",
    [
      326
    ]
  ],
  [
    [
      326,
      326
    ],
    "valid"
  ],
  [
    [
      327,
      327
    ],
    "mapped",
    [
      328
    ]
  ],
  [
    [
      328,
      328
    ],
    "valid"
  ],
  [
    [
      329,
      329
    ],
    "mapped",
    [
      700,
      110
    ]
  ],
  [
    [
      330,
      330
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      331,
      331
    ],
    "valid"
  ],
  [
    [
      332,
      332
    ],
    "mapped",
    [
      333
    ]
  ],
  [
    [
      333,
      333
    ],
    "valid"
  ],
  [
    [
      334,
      334
    ],
    "mapped",
    [
      335
    ]
  ],
  [
    [
      335,
      335
    ],
    "valid"
  ],
  [
    [
      336,
      336
    ],
    "mapped",
    [
      337
    ]
  ],
  [
    [
      337,
      337
    ],
    "valid"
  ],
  [
    [
      338,
      338
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      339,
      339
    ],
    "valid"
  ],
  [
    [
      340,
      340
    ],
    "mapped",
    [
      341
    ]
  ],
  [
    [
      341,
      341
    ],
    "valid"
  ],
  [
    [
      342,
      342
    ],
    "mapped",
    [
      343
    ]
  ],
  [
    [
      343,
      343
    ],
    "valid"
  ],
  [
    [
      344,
      344
    ],
    "mapped",
    [
      345
    ]
  ],
  [
    [
      345,
      345
    ],
    "valid"
  ],
  [
    [
      346,
      346
    ],
    "mapped",
    [
      347
    ]
  ],
  [
    [
      347,
      347
    ],
    "valid"
  ],
  [
    [
      348,
      348
    ],
    "mapped",
    [
      349
    ]
  ],
  [
    [
      349,
      349
    ],
    "valid"
  ],
  [
    [
      350,
      350
    ],
    "mapped",
    [
      351
    ]
  ],
  [
    [
      351,
      351
    ],
    "valid"
  ],
  [
    [
      352,
      352
    ],
    "mapped",
    [
      353
    ]
  ],
  [
    [
      353,
      353
    ],
    "valid"
  ],
  [
    [
      354,
      354
    ],
    "mapped",
    [
      355
    ]
  ],
  [
    [
      355,
      355
    ],
    "valid"
  ],
  [
    [
      356,
      356
    ],
    "mapped",
    [
      357
    ]
  ],
  [
    [
      357,
      357
    ],
    "valid"
  ],
  [
    [
      358,
      358
    ],
    "mapped",
    [
      359
    ]
  ],
  [
    [
      359,
      359
    ],
    "valid"
  ],
  [
    [
      360,
      360
    ],
    "mapped",
    [
      361
    ]
  ],
  [
    [
      361,
      361
    ],
    "valid"
  ],
  [
    [
      362,
      362
    ],
    "mapped",
    [
      363
    ]
  ],
  [
    [
      363,
      363
    ],
    "valid"
  ],
  [
    [
      364,
      364
    ],
    "mapped",
    [
      365
    ]
  ],
  [
    [
      365,
      365
    ],
    "valid"
  ],
  [
    [
      366,
      366
    ],
    "mapped",
    [
      367
    ]
  ],
  [
    [
      367,
      367
    ],
    "valid"
  ],
  [
    [
      368,
      368
    ],
    "mapped",
    [
      369
    ]
  ],
  [
    [
      369,
      369
    ],
    "valid"
  ],
  [
    [
      370,
      370
    ],
    "mapped",
    [
      371
    ]
  ],
  [
    [
      371,
      371
    ],
    "valid"
  ],
  [
    [
      372,
      372
    ],
    "mapped",
    [
      373
    ]
  ],
  [
    [
      373,
      373
    ],
    "valid"
  ],
  [
    [
      374,
      374
    ],
    "mapped",
    [
      375
    ]
  ],
  [
    [
      375,
      375
    ],
    "valid"
  ],
  [
    [
      376,
      376
    ],
    "mapped",
    [
      255
    ]
  ],
  [
    [
      377,
      377
    ],
    "mapped",
    [
      378
    ]
  ],
  [
    [
      378,
      378
    ],
    "valid"
  ],
  [
    [
      379,
      379
    ],
    "mapped",
    [
      380
    ]
  ],
  [
    [
      380,
      380
    ],
    "valid"
  ],
  [
    [
      381,
      381
    ],
    "mapped",
    [
      382
    ]
  ],
  [
    [
      382,
      382
    ],
    "valid"
  ],
  [
    [
      383,
      383
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      384,
      384
    ],
    "valid"
  ],
  [
    [
      385,
      385
    ],
    "mapped",
    [
      595
    ]
  ],
  [
    [
      386,
      386
    ],
    "mapped",
    [
      387
    ]
  ],
  [
    [
      387,
      387
    ],
    "valid"
  ],
  [
    [
      388,
      388
    ],
    "mapped",
    [
      389
    ]
  ],
  [
    [
      389,
      389
    ],
    "valid"
  ],
  [
    [
      390,
      390
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      391,
      391
    ],
    "mapped",
    [
      392
    ]
  ],
  [
    [
      392,
      392
    ],
    "valid"
  ],
  [
    [
      393,
      393
    ],
    "mapped",
    [
      598
    ]
  ],
  [
    [
      394,
      394
    ],
    "mapped",
    [
      599
    ]
  ],
  [
    [
      395,
      395
    ],
    "mapped",
    [
      396
    ]
  ],
  [
    [
      396,
      397
    ],
    "valid"
  ],
  [
    [
      398,
      398
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      399,
      399
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      400,
      400
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      401,
      401
    ],
    "mapped",
    [
      402
    ]
  ],
  [
    [
      402,
      402
    ],
    "valid"
  ],
  [
    [
      403,
      403
    ],
    "mapped",
    [
      608
    ]
  ],
  [
    [
      404,
      404
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      405,
      405
    ],
    "valid"
  ],
  [
    [
      406,
      406
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      407,
      407
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      408,
      408
    ],
    "mapped",
    [
      409
    ]
  ],
  [
    [
      409,
      411
    ],
    "valid"
  ],
  [
    [
      412,
      412
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      413,
      413
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      414,
      414
    ],
    "valid"
  ],
  [
    [
      415,
      415
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      416,
      416
    ],
    "mapped",
    [
      417
    ]
  ],
  [
    [
      417,
      417
    ],
    "valid"
  ],
  [
    [
      418,
      418
    ],
    "mapped",
    [
      419
    ]
  ],
  [
    [
      419,
      419
    ],
    "valid"
  ],
  [
    [
      420,
      420
    ],
    "mapped",
    [
      421
    ]
  ],
  [
    [
      421,
      421
    ],
    "valid"
  ],
  [
    [
      422,
      422
    ],
    "mapped",
    [
      640
    ]
  ],
  [
    [
      423,
      423
    ],
    "mapped",
    [
      424
    ]
  ],
  [
    [
      424,
      424
    ],
    "valid"
  ],
  [
    [
      425,
      425
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      426,
      427
    ],
    "valid"
  ],
  [
    [
      428,
      428
    ],
    "mapped",
    [
      429
    ]
  ],
  [
    [
      429,
      429
    ],
    "valid"
  ],
  [
    [
      430,
      430
    ],
    "mapped",
    [
      648
    ]
  ],
  [
    [
      431,
      431
    ],
    "mapped",
    [
      432
    ]
  ],
  [
    [
      432,
      432
    ],
    "valid"
  ],
  [
    [
      433,
      433
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      434,
      434
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      435,
      435
    ],
    "mapped",
    [
      436
    ]
  ],
  [
    [
      436,
      436
    ],
    "valid"
  ],
  [
    [
      437,
      437
    ],
    "mapped",
    [
      438
    ]
  ],
  [
    [
      438,
      438
    ],
    "valid"
  ],
  [
    [
      439,
      439
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      440,
      440
    ],
    "mapped",
    [
      441
    ]
  ],
  [
    [
      441,
      443
    ],
    "valid"
  ],
  [
    [
      444,
      444
    ],
    "mapped",
    [
      445
    ]
  ],
  [
    [
      445,
      451
    ],
    "valid"
  ],
  [
    [
      452,
      454
    ],
    "mapped",
    [
      100,
      382
    ]
  ],
  [
    [
      455,
      457
    ],
    "mapped",
    [
      108,
      106
    ]
  ],
  [
    [
      458,
      460
    ],
    "mapped",
    [
      110,
      106
    ]
  ],
  [
    [
      461,
      461
    ],
    "mapped",
    [
      462
    ]
  ],
  [
    [
      462,
      462
    ],
    "valid"
  ],
  [
    [
      463,
      463
    ],
    "mapped",
    [
      464
    ]
  ],
  [
    [
      464,
      464
    ],
    "valid"
  ],
  [
    [
      465,
      465
    ],
    "mapped",
    [
      466
    ]
  ],
  [
    [
      466,
      466
    ],
    "valid"
  ],
  [
    [
      467,
      467
    ],
    "mapped",
    [
      468
    ]
  ],
  [
    [
      468,
      468
    ],
    "valid"
  ],
  [
    [
      469,
      469
    ],
    "mapped",
    [
      470
    ]
  ],
  [
    [
      470,
      470
    ],
    "valid"
  ],
  [
    [
      471,
      471
    ],
    "mapped",
    [
      472
    ]
  ],
  [
    [
      472,
      472
    ],
    "valid"
  ],
  [
    [
      473,
      473
    ],
    "mapped",
    [
      474
    ]
  ],
  [
    [
      474,
      474
    ],
    "valid"
  ],
  [
    [
      475,
      475
    ],
    "mapped",
    [
      476
    ]
  ],
  [
    [
      476,
      477
    ],
    "valid"
  ],
  [
    [
      478,
      478
    ],
    "mapped",
    [
      479
    ]
  ],
  [
    [
      479,
      479
    ],
    "valid"
  ],
  [
    [
      480,
      480
    ],
    "mapped",
    [
      481
    ]
  ],
  [
    [
      481,
      481
    ],
    "valid"
  ],
  [
    [
      482,
      482
    ],
    "mapped",
    [
      483
    ]
  ],
  [
    [
      483,
      483
    ],
    "valid"
  ],
  [
    [
      484,
      484
    ],
    "mapped",
    [
      485
    ]
  ],
  [
    [
      485,
      485
    ],
    "valid"
  ],
  [
    [
      486,
      486
    ],
    "mapped",
    [
      487
    ]
  ],
  [
    [
      487,
      487
    ],
    "valid"
  ],
  [
    [
      488,
      488
    ],
    "mapped",
    [
      489
    ]
  ],
  [
    [
      489,
      489
    ],
    "valid"
  ],
  [
    [
      490,
      490
    ],
    "mapped",
    [
      491
    ]
  ],
  [
    [
      491,
      491
    ],
    "valid"
  ],
  [
    [
      492,
      492
    ],
    "mapped",
    [
      493
    ]
  ],
  [
    [
      493,
      493
    ],
    "valid"
  ],
  [
    [
      494,
      494
    ],
    "mapped",
    [
      495
    ]
  ],
  [
    [
      495,
      496
    ],
    "valid"
  ],
  [
    [
      497,
      499
    ],
    "mapped",
    [
      100,
      122
    ]
  ],
  [
    [
      500,
      500
    ],
    "mapped",
    [
      501
    ]
  ],
  [
    [
      501,
      501
    ],
    "valid"
  ],
  [
    [
      502,
      502
    ],
    "mapped",
    [
      405
    ]
  ],
  [
    [
      503,
      503
    ],
    "mapped",
    [
      447
    ]
  ],
  [
    [
      504,
      504
    ],
    "mapped",
    [
      505
    ]
  ],
  [
    [
      505,
      505
    ],
    "valid"
  ],
  [
    [
      506,
      506
    ],
    "mapped",
    [
      507
    ]
  ],
  [
    [
      507,
      507
    ],
    "valid"
  ],
  [
    [
      508,
      508
    ],
    "mapped",
    [
      509
    ]
  ],
  [
    [
      509,
      509
    ],
    "valid"
  ],
  [
    [
      510,
      510
    ],
    "mapped",
    [
      511
    ]
  ],
  [
    [
      511,
      511
    ],
    "valid"
  ],
  [
    [
      512,
      512
    ],
    "mapped",
    [
      513
    ]
  ],
  [
    [
      513,
      513
    ],
    "valid"
  ],
  [
    [
      514,
      514
    ],
    "mapped",
    [
      515
    ]
  ],
  [
    [
      515,
      515
    ],
    "valid"
  ],
  [
    [
      516,
      516
    ],
    "mapped",
    [
      517
    ]
  ],
  [
    [
      517,
      517
    ],
    "valid"
  ],
  [
    [
      518,
      518
    ],
    "mapped",
    [
      519
    ]
  ],
  [
    [
      519,
      519
    ],
    "valid"
  ],
  [
    [
      520,
      520
    ],
    "mapped",
    [
      521
    ]
  ],
  [
    [
      521,
      521
    ],
    "valid"
  ],
  [
    [
      522,
      522
    ],
    "mapped",
    [
      523
    ]
  ],
  [
    [
      523,
      523
    ],
    "valid"
  ],
  [
    [
      524,
      524
    ],
    "mapped",
    [
      525
    ]
  ],
  [
    [
      525,
      525
    ],
    "valid"
  ],
  [
    [
      526,
      526
    ],
    "mapped",
    [
      527
    ]
  ],
  [
    [
      527,
      527
    ],
    "valid"
  ],
  [
    [
      528,
      528
    ],
    "mapped",
    [
      529
    ]
  ],
  [
    [
      529,
      529
    ],
    "valid"
  ],
  [
    [
      530,
      530
    ],
    "mapped",
    [
      531
    ]
  ],
  [
    [
      531,
      531
    ],
    "valid"
  ],
  [
    [
      532,
      532
    ],
    "mapped",
    [
      533
    ]
  ],
  [
    [
      533,
      533
    ],
    "valid"
  ],
  [
    [
      534,
      534
    ],
    "mapped",
    [
      535
    ]
  ],
  [
    [
      535,
      535
    ],
    "valid"
  ],
  [
    [
      536,
      536
    ],
    "mapped",
    [
      537
    ]
  ],
  [
    [
      537,
      537
    ],
    "valid"
  ],
  [
    [
      538,
      538
    ],
    "mapped",
    [
      539
    ]
  ],
  [
    [
      539,
      539
    ],
    "valid"
  ],
  [
    [
      540,
      540
    ],
    "mapped",
    [
      541
    ]
  ],
  [
    [
      541,
      541
    ],
    "valid"
  ],
  [
    [
      542,
      542
    ],
    "mapped",
    [
      543
    ]
  ],
  [
    [
      543,
      543
    ],
    "valid"
  ],
  [
    [
      544,
      544
    ],
    "mapped",
    [
      414
    ]
  ],
  [
    [
      545,
      545
    ],
    "valid"
  ],
  [
    [
      546,
      546
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      547,
      547
    ],
    "valid"
  ],
  [
    [
      548,
      548
    ],
    "mapped",
    [
      549
    ]
  ],
  [
    [
      549,
      549
    ],
    "valid"
  ],
  [
    [
      550,
      550
    ],
    "mapped",
    [
      551
    ]
  ],
  [
    [
      551,
      551
    ],
    "valid"
  ],
  [
    [
      552,
      552
    ],
    "mapped",
    [
      553
    ]
  ],
  [
    [
      553,
      553
    ],
    "valid"
  ],
  [
    [
      554,
      554
    ],
    "mapped",
    [
      555
    ]
  ],
  [
    [
      555,
      555
    ],
    "valid"
  ],
  [
    [
      556,
      556
    ],
    "mapped",
    [
      557
    ]
  ],
  [
    [
      557,
      557
    ],
    "valid"
  ],
  [
    [
      558,
      558
    ],
    "mapped",
    [
      559
    ]
  ],
  [
    [
      559,
      559
    ],
    "valid"
  ],
  [
    [
      560,
      560
    ],
    "mapped",
    [
      561
    ]
  ],
  [
    [
      561,
      561
    ],
    "valid"
  ],
  [
    [
      562,
      562
    ],
    "mapped",
    [
      563
    ]
  ],
  [
    [
      563,
      563
    ],
    "valid"
  ],
  [
    [
      564,
      566
    ],
    "valid"
  ],
  [
    [
      567,
      569
    ],
    "valid"
  ],
  [
    [
      570,
      570
    ],
    "mapped",
    [
      11365
    ]
  ],
  [
    [
      571,
      571
    ],
    "mapped",
    [
      572
    ]
  ],
  [
    [
      572,
      572
    ],
    "valid"
  ],
  [
    [
      573,
      573
    ],
    "mapped",
    [
      410
    ]
  ],
  [
    [
      574,
      574
    ],
    "mapped",
    [
      11366
    ]
  ],
  [
    [
      575,
      576
    ],
    "valid"
  ],
  [
    [
      577,
      577
    ],
    "mapped",
    [
      578
    ]
  ],
  [
    [
      578,
      578
    ],
    "valid"
  ],
  [
    [
      579,
      579
    ],
    "mapped",
    [
      384
    ]
  ],
  [
    [
      580,
      580
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      581,
      581
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      582,
      582
    ],
    "mapped",
    [
      583
    ]
  ],
  [
    [
      583,
      583
    ],
    "valid"
  ],
  [
    [
      584,
      584
    ],
    "mapped",
    [
      585
    ]
  ],
  [
    [
      585,
      585
    ],
    "valid"
  ],
  [
    [
      586,
      586
    ],
    "mapped",
    [
      587
    ]
  ],
  [
    [
      587,
      587
    ],
    "valid"
  ],
  [
    [
      588,
      588
    ],
    "mapped",
    [
      589
    ]
  ],
  [
    [
      589,
      589
    ],
    "valid"
  ],
  [
    [
      590,
      590
    ],
    "mapped",
    [
      591
    ]
  ],
  [
    [
      591,
      591
    ],
    "valid"
  ],
  [
    [
      592,
      680
    ],
    "valid"
  ],
  [
    [
      681,
      685
    ],
    "valid"
  ],
  [
    [
      686,
      687
    ],
    "valid"
  ],
  [
    [
      688,
      688
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      689,
      689
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      690,
      690
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      691,
      691
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      692,
      692
    ],
    "mapped",
    [
      633
    ]
  ],
  [
    [
      693,
      693
    ],
    "mapped",
    [
      635
    ]
  ],
  [
    [
      694,
      694
    ],
    "mapped",
    [
      641
    ]
  ],
  [
    [
      695,
      695
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      696,
      696
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      697,
      705
    ],
    "valid"
  ],
  [
    [
      706,
      709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      710,
      721
    ],
    "valid"
  ],
  [
    [
      722,
      727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      728,
      728
    ],
    "disallowed_STD3_mapped",
    [
      32,
      774
    ]
  ],
  [
    [
      729,
      729
    ],
    "disallowed_STD3_mapped",
    [
      32,
      775
    ]
  ],
  [
    [
      730,
      730
    ],
    "disallowed_STD3_mapped",
    [
      32,
      778
    ]
  ],
  [
    [
      731,
      731
    ],
    "disallowed_STD3_mapped",
    [
      32,
      808
    ]
  ],
  [
    [
      732,
      732
    ],
    "disallowed_STD3_mapped",
    [
      32,
      771
    ]
  ],
  [
    [
      733,
      733
    ],
    "disallowed_STD3_mapped",
    [
      32,
      779
    ]
  ],
  [
    [
      734,
      734
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      735,
      735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      736,
      736
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      737,
      737
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      738,
      738
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      739,
      739
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      740,
      740
    ],
    "mapped",
    [
      661
    ]
  ],
  [
    [
      741,
      745
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      746,
      747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      748,
      748
    ],
    "valid"
  ],
  [
    [
      749,
      749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      750,
      750
    ],
    "valid"
  ],
  [
    [
      751,
      767
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      768,
      831
    ],
    "valid"
  ],
  [
    [
      832,
      832
    ],
    "mapped",
    [
      768
    ]
  ],
  [
    [
      833,
      833
    ],
    "mapped",
    [
      769
    ]
  ],
  [
    [
      834,
      834
    ],
    "valid"
  ],
  [
    [
      835,
      835
    ],
    "mapped",
    [
      787
    ]
  ],
  [
    [
      836,
      836
    ],
    "mapped",
    [
      776,
      769
    ]
  ],
  [
    [
      837,
      837
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      838,
      846
    ],
    "valid"
  ],
  [
    [
      847,
      847
    ],
    "ignored"
  ],
  [
    [
      848,
      855
    ],
    "valid"
  ],
  [
    [
      856,
      860
    ],
    "valid"
  ],
  [
    [
      861,
      863
    ],
    "valid"
  ],
  [
    [
      864,
      865
    ],
    "valid"
  ],
  [
    [
      866,
      866
    ],
    "valid"
  ],
  [
    [
      867,
      879
    ],
    "valid"
  ],
  [
    [
      880,
      880
    ],
    "mapped",
    [
      881
    ]
  ],
  [
    [
      881,
      881
    ],
    "valid"
  ],
  [
    [
      882,
      882
    ],
    "mapped",
    [
      883
    ]
  ],
  [
    [
      883,
      883
    ],
    "valid"
  ],
  [
    [
      884,
      884
    ],
    "mapped",
    [
      697
    ]
  ],
  [
    [
      885,
      885
    ],
    "valid"
  ],
  [
    [
      886,
      886
    ],
    "mapped",
    [
      887
    ]
  ],
  [
    [
      887,
      887
    ],
    "valid"
  ],
  [
    [
      888,
      889
    ],
    "disallowed"
  ],
  [
    [
      890,
      890
    ],
    "disallowed_STD3_mapped",
    [
      32,
      953
    ]
  ],
  [
    [
      891,
      893
    ],
    "valid"
  ],
  [
    [
      894,
      894
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      895,
      895
    ],
    "mapped",
    [
      1011
    ]
  ],
  [
    [
      896,
      899
    ],
    "disallowed"
  ],
  [
    [
      900,
      900
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      901,
      901
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      902,
      902
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      903,
      903
    ],
    "mapped",
    [
      183
    ]
  ],
  [
    [
      904,
      904
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      905,
      905
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      906,
      906
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      907,
      907
    ],
    "disallowed"
  ],
  [
    [
      908,
      908
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      909,
      909
    ],
    "disallowed"
  ],
  [
    [
      910,
      910
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      911,
      911
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      912,
      912
    ],
    "valid"
  ],
  [
    [
      913,
      913
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      914,
      914
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      915,
      915
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      916,
      916
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      917,
      917
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      918,
      918
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      919,
      919
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      920,
      920
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      921,
      921
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      922,
      922
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      923,
      923
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      924,
      924
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      925,
      925
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      926,
      926
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      927,
      927
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      928,
      928
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      929,
      929
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      930,
      930
    ],
    "disallowed"
  ],
  [
    [
      931,
      931
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      932,
      932
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      933,
      933
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      934,
      934
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      935,
      935
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      936,
      936
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      937,
      937
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      938,
      938
    ],
    "mapped",
    [
      970
    ]
  ],
  [
    [
      939,
      939
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      940,
      961
    ],
    "valid"
  ],
  [
    [
      962,
      962
    ],
    "deviation",
    [
      963
    ]
  ],
  [
    [
      963,
      974
    ],
    "valid"
  ],
  [
    [
      975,
      975
    ],
    "mapped",
    [
      983
    ]
  ],
  [
    [
      976,
      976
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      977,
      977
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      978,
      978
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      979,
      979
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      980,
      980
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      981,
      981
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      982,
      982
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      983,
      983
    ],
    "valid"
  ],
  [
    [
      984,
      984
    ],
    "mapped",
    [
      985
    ]
  ],
  [
    [
      985,
      985
    ],
    "valid"
  ],
  [
    [
      986,
      986
    ],
    "mapped",
    [
      987
    ]
  ],
  [
    [
      987,
      987
    ],
    "valid"
  ],
  [
    [
      988,
      988
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      989,
      989
    ],
    "valid"
  ],
  [
    [
      990,
      990
    ],
    "mapped",
    [
      991
    ]
  ],
  [
    [
      991,
      991
    ],
    "valid"
  ],
  [
    [
      992,
      992
    ],
    "mapped",
    [
      993
    ]
  ],
  [
    [
      993,
      993
    ],
    "valid"
  ],
  [
    [
      994,
      994
    ],
    "mapped",
    [
      995
    ]
  ],
  [
    [
      995,
      995
    ],
    "valid"
  ],
  [
    [
      996,
      996
    ],
    "mapped",
    [
      997
    ]
  ],
  [
    [
      997,
      997
    ],
    "valid"
  ],
  [
    [
      998,
      998
    ],
    "mapped",
    [
      999
    ]
  ],
  [
    [
      999,
      999
    ],
    "valid"
  ],
  [
    [
      1e3,
      1e3
    ],
    "mapped",
    [
      1001
    ]
  ],
  [
    [
      1001,
      1001
    ],
    "valid"
  ],
  [
    [
      1002,
      1002
    ],
    "mapped",
    [
      1003
    ]
  ],
  [
    [
      1003,
      1003
    ],
    "valid"
  ],
  [
    [
      1004,
      1004
    ],
    "mapped",
    [
      1005
    ]
  ],
  [
    [
      1005,
      1005
    ],
    "valid"
  ],
  [
    [
      1006,
      1006
    ],
    "mapped",
    [
      1007
    ]
  ],
  [
    [
      1007,
      1007
    ],
    "valid"
  ],
  [
    [
      1008,
      1008
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      1009,
      1009
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      1010,
      1010
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1011,
      1011
    ],
    "valid"
  ],
  [
    [
      1012,
      1012
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      1013,
      1013
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      1014,
      1014
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1015,
      1015
    ],
    "mapped",
    [
      1016
    ]
  ],
  [
    [
      1016,
      1016
    ],
    "valid"
  ],
  [
    [
      1017,
      1017
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1018,
      1018
    ],
    "mapped",
    [
      1019
    ]
  ],
  [
    [
      1019,
      1019
    ],
    "valid"
  ],
  [
    [
      1020,
      1020
    ],
    "valid"
  ],
  [
    [
      1021,
      1021
    ],
    "mapped",
    [
      891
    ]
  ],
  [
    [
      1022,
      1022
    ],
    "mapped",
    [
      892
    ]
  ],
  [
    [
      1023,
      1023
    ],
    "mapped",
    [
      893
    ]
  ],
  [
    [
      1024,
      1024
    ],
    "mapped",
    [
      1104
    ]
  ],
  [
    [
      1025,
      1025
    ],
    "mapped",
    [
      1105
    ]
  ],
  [
    [
      1026,
      1026
    ],
    "mapped",
    [
      1106
    ]
  ],
  [
    [
      1027,
      1027
    ],
    "mapped",
    [
      1107
    ]
  ],
  [
    [
      1028,
      1028
    ],
    "mapped",
    [
      1108
    ]
  ],
  [
    [
      1029,
      1029
    ],
    "mapped",
    [
      1109
    ]
  ],
  [
    [
      1030,
      1030
    ],
    "mapped",
    [
      1110
    ]
  ],
  [
    [
      1031,
      1031
    ],
    "mapped",
    [
      1111
    ]
  ],
  [
    [
      1032,
      1032
    ],
    "mapped",
    [
      1112
    ]
  ],
  [
    [
      1033,
      1033
    ],
    "mapped",
    [
      1113
    ]
  ],
  [
    [
      1034,
      1034
    ],
    "mapped",
    [
      1114
    ]
  ],
  [
    [
      1035,
      1035
    ],
    "mapped",
    [
      1115
    ]
  ],
  [
    [
      1036,
      1036
    ],
    "mapped",
    [
      1116
    ]
  ],
  [
    [
      1037,
      1037
    ],
    "mapped",
    [
      1117
    ]
  ],
  [
    [
      1038,
      1038
    ],
    "mapped",
    [
      1118
    ]
  ],
  [
    [
      1039,
      1039
    ],
    "mapped",
    [
      1119
    ]
  ],
  [
    [
      1040,
      1040
    ],
    "mapped",
    [
      1072
    ]
  ],
  [
    [
      1041,
      1041
    ],
    "mapped",
    [
      1073
    ]
  ],
  [
    [
      1042,
      1042
    ],
    "mapped",
    [
      1074
    ]
  ],
  [
    [
      1043,
      1043
    ],
    "mapped",
    [
      1075
    ]
  ],
  [
    [
      1044,
      1044
    ],
    "mapped",
    [
      1076
    ]
  ],
  [
    [
      1045,
      1045
    ],
    "mapped",
    [
      1077
    ]
  ],
  [
    [
      1046,
      1046
    ],
    "mapped",
    [
      1078
    ]
  ],
  [
    [
      1047,
      1047
    ],
    "mapped",
    [
      1079
    ]
  ],
  [
    [
      1048,
      1048
    ],
    "mapped",
    [
      1080
    ]
  ],
  [
    [
      1049,
      1049
    ],
    "mapped",
    [
      1081
    ]
  ],
  [
    [
      1050,
      1050
    ],
    "mapped",
    [
      1082
    ]
  ],
  [
    [
      1051,
      1051
    ],
    "mapped",
    [
      1083
    ]
  ],
  [
    [
      1052,
      1052
    ],
    "mapped",
    [
      1084
    ]
  ],
  [
    [
      1053,
      1053
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      1054,
      1054
    ],
    "mapped",
    [
      1086
    ]
  ],
  [
    [
      1055,
      1055
    ],
    "mapped",
    [
      1087
    ]
  ],
  [
    [
      1056,
      1056
    ],
    "mapped",
    [
      1088
    ]
  ],
  [
    [
      1057,
      1057
    ],
    "mapped",
    [
      1089
    ]
  ],
  [
    [
      1058,
      1058
    ],
    "mapped",
    [
      1090
    ]
  ],
  [
    [
      1059,
      1059
    ],
    "mapped",
    [
      1091
    ]
  ],
  [
    [
      1060,
      1060
    ],
    "mapped",
    [
      1092
    ]
  ],
  [
    [
      1061,
      1061
    ],
    "mapped",
    [
      1093
    ]
  ],
  [
    [
      1062,
      1062
    ],
    "mapped",
    [
      1094
    ]
  ],
  [
    [
      1063,
      1063
    ],
    "mapped",
    [
      1095
    ]
  ],
  [
    [
      1064,
      1064
    ],
    "mapped",
    [
      1096
    ]
  ],
  [
    [
      1065,
      1065
    ],
    "mapped",
    [
      1097
    ]
  ],
  [
    [
      1066,
      1066
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      1067,
      1067
    ],
    "mapped",
    [
      1099
    ]
  ],
  [
    [
      1068,
      1068
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      1069,
      1069
    ],
    "mapped",
    [
      1101
    ]
  ],
  [
    [
      1070,
      1070
    ],
    "mapped",
    [
      1102
    ]
  ],
  [
    [
      1071,
      1071
    ],
    "mapped",
    [
      1103
    ]
  ],
  [
    [
      1072,
      1103
    ],
    "valid"
  ],
  [
    [
      1104,
      1104
    ],
    "valid"
  ],
  [
    [
      1105,
      1116
    ],
    "valid"
  ],
  [
    [
      1117,
      1117
    ],
    "valid"
  ],
  [
    [
      1118,
      1119
    ],
    "valid"
  ],
  [
    [
      1120,
      1120
    ],
    "mapped",
    [
      1121
    ]
  ],
  [
    [
      1121,
      1121
    ],
    "valid"
  ],
  [
    [
      1122,
      1122
    ],
    "mapped",
    [
      1123
    ]
  ],
  [
    [
      1123,
      1123
    ],
    "valid"
  ],
  [
    [
      1124,
      1124
    ],
    "mapped",
    [
      1125
    ]
  ],
  [
    [
      1125,
      1125
    ],
    "valid"
  ],
  [
    [
      1126,
      1126
    ],
    "mapped",
    [
      1127
    ]
  ],
  [
    [
      1127,
      1127
    ],
    "valid"
  ],
  [
    [
      1128,
      1128
    ],
    "mapped",
    [
      1129
    ]
  ],
  [
    [
      1129,
      1129
    ],
    "valid"
  ],
  [
    [
      1130,
      1130
    ],
    "mapped",
    [
      1131
    ]
  ],
  [
    [
      1131,
      1131
    ],
    "valid"
  ],
  [
    [
      1132,
      1132
    ],
    "mapped",
    [
      1133
    ]
  ],
  [
    [
      1133,
      1133
    ],
    "valid"
  ],
  [
    [
      1134,
      1134
    ],
    "mapped",
    [
      1135
    ]
  ],
  [
    [
      1135,
      1135
    ],
    "valid"
  ],
  [
    [
      1136,
      1136
    ],
    "mapped",
    [
      1137
    ]
  ],
  [
    [
      1137,
      1137
    ],
    "valid"
  ],
  [
    [
      1138,
      1138
    ],
    "mapped",
    [
      1139
    ]
  ],
  [
    [
      1139,
      1139
    ],
    "valid"
  ],
  [
    [
      1140,
      1140
    ],
    "mapped",
    [
      1141
    ]
  ],
  [
    [
      1141,
      1141
    ],
    "valid"
  ],
  [
    [
      1142,
      1142
    ],
    "mapped",
    [
      1143
    ]
  ],
  [
    [
      1143,
      1143
    ],
    "valid"
  ],
  [
    [
      1144,
      1144
    ],
    "mapped",
    [
      1145
    ]
  ],
  [
    [
      1145,
      1145
    ],
    "valid"
  ],
  [
    [
      1146,
      1146
    ],
    "mapped",
    [
      1147
    ]
  ],
  [
    [
      1147,
      1147
    ],
    "valid"
  ],
  [
    [
      1148,
      1148
    ],
    "mapped",
    [
      1149
    ]
  ],
  [
    [
      1149,
      1149
    ],
    "valid"
  ],
  [
    [
      1150,
      1150
    ],
    "mapped",
    [
      1151
    ]
  ],
  [
    [
      1151,
      1151
    ],
    "valid"
  ],
  [
    [
      1152,
      1152
    ],
    "mapped",
    [
      1153
    ]
  ],
  [
    [
      1153,
      1153
    ],
    "valid"
  ],
  [
    [
      1154,
      1154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1155,
      1158
    ],
    "valid"
  ],
  [
    [
      1159,
      1159
    ],
    "valid"
  ],
  [
    [
      1160,
      1161
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1162,
      1162
    ],
    "mapped",
    [
      1163
    ]
  ],
  [
    [
      1163,
      1163
    ],
    "valid"
  ],
  [
    [
      1164,
      1164
    ],
    "mapped",
    [
      1165
    ]
  ],
  [
    [
      1165,
      1165
    ],
    "valid"
  ],
  [
    [
      1166,
      1166
    ],
    "mapped",
    [
      1167
    ]
  ],
  [
    [
      1167,
      1167
    ],
    "valid"
  ],
  [
    [
      1168,
      1168
    ],
    "mapped",
    [
      1169
    ]
  ],
  [
    [
      1169,
      1169
    ],
    "valid"
  ],
  [
    [
      1170,
      1170
    ],
    "mapped",
    [
      1171
    ]
  ],
  [
    [
      1171,
      1171
    ],
    "valid"
  ],
  [
    [
      1172,
      1172
    ],
    "mapped",
    [
      1173
    ]
  ],
  [
    [
      1173,
      1173
    ],
    "valid"
  ],
  [
    [
      1174,
      1174
    ],
    "mapped",
    [
      1175
    ]
  ],
  [
    [
      1175,
      1175
    ],
    "valid"
  ],
  [
    [
      1176,
      1176
    ],
    "mapped",
    [
      1177
    ]
  ],
  [
    [
      1177,
      1177
    ],
    "valid"
  ],
  [
    [
      1178,
      1178
    ],
    "mapped",
    [
      1179
    ]
  ],
  [
    [
      1179,
      1179
    ],
    "valid"
  ],
  [
    [
      1180,
      1180
    ],
    "mapped",
    [
      1181
    ]
  ],
  [
    [
      1181,
      1181
    ],
    "valid"
  ],
  [
    [
      1182,
      1182
    ],
    "mapped",
    [
      1183
    ]
  ],
  [
    [
      1183,
      1183
    ],
    "valid"
  ],
  [
    [
      1184,
      1184
    ],
    "mapped",
    [
      1185
    ]
  ],
  [
    [
      1185,
      1185
    ],
    "valid"
  ],
  [
    [
      1186,
      1186
    ],
    "mapped",
    [
      1187
    ]
  ],
  [
    [
      1187,
      1187
    ],
    "valid"
  ],
  [
    [
      1188,
      1188
    ],
    "mapped",
    [
      1189
    ]
  ],
  [
    [
      1189,
      1189
    ],
    "valid"
  ],
  [
    [
      1190,
      1190
    ],
    "mapped",
    [
      1191
    ]
  ],
  [
    [
      1191,
      1191
    ],
    "valid"
  ],
  [
    [
      1192,
      1192
    ],
    "mapped",
    [
      1193
    ]
  ],
  [
    [
      1193,
      1193
    ],
    "valid"
  ],
  [
    [
      1194,
      1194
    ],
    "mapped",
    [
      1195
    ]
  ],
  [
    [
      1195,
      1195
    ],
    "valid"
  ],
  [
    [
      1196,
      1196
    ],
    "mapped",
    [
      1197
    ]
  ],
  [
    [
      1197,
      1197
    ],
    "valid"
  ],
  [
    [
      1198,
      1198
    ],
    "mapped",
    [
      1199
    ]
  ],
  [
    [
      1199,
      1199
    ],
    "valid"
  ],
  [
    [
      1200,
      1200
    ],
    "mapped",
    [
      1201
    ]
  ],
  [
    [
      1201,
      1201
    ],
    "valid"
  ],
  [
    [
      1202,
      1202
    ],
    "mapped",
    [
      1203
    ]
  ],
  [
    [
      1203,
      1203
    ],
    "valid"
  ],
  [
    [
      1204,
      1204
    ],
    "mapped",
    [
      1205
    ]
  ],
  [
    [
      1205,
      1205
    ],
    "valid"
  ],
  [
    [
      1206,
      1206
    ],
    "mapped",
    [
      1207
    ]
  ],
  [
    [
      1207,
      1207
    ],
    "valid"
  ],
  [
    [
      1208,
      1208
    ],
    "mapped",
    [
      1209
    ]
  ],
  [
    [
      1209,
      1209
    ],
    "valid"
  ],
  [
    [
      1210,
      1210
    ],
    "mapped",
    [
      1211
    ]
  ],
  [
    [
      1211,
      1211
    ],
    "valid"
  ],
  [
    [
      1212,
      1212
    ],
    "mapped",
    [
      1213
    ]
  ],
  [
    [
      1213,
      1213
    ],
    "valid"
  ],
  [
    [
      1214,
      1214
    ],
    "mapped",
    [
      1215
    ]
  ],
  [
    [
      1215,
      1215
    ],
    "valid"
  ],
  [
    [
      1216,
      1216
    ],
    "disallowed"
  ],
  [
    [
      1217,
      1217
    ],
    "mapped",
    [
      1218
    ]
  ],
  [
    [
      1218,
      1218
    ],
    "valid"
  ],
  [
    [
      1219,
      1219
    ],
    "mapped",
    [
      1220
    ]
  ],
  [
    [
      1220,
      1220
    ],
    "valid"
  ],
  [
    [
      1221,
      1221
    ],
    "mapped",
    [
      1222
    ]
  ],
  [
    [
      1222,
      1222
    ],
    "valid"
  ],
  [
    [
      1223,
      1223
    ],
    "mapped",
    [
      1224
    ]
  ],
  [
    [
      1224,
      1224
    ],
    "valid"
  ],
  [
    [
      1225,
      1225
    ],
    "mapped",
    [
      1226
    ]
  ],
  [
    [
      1226,
      1226
    ],
    "valid"
  ],
  [
    [
      1227,
      1227
    ],
    "mapped",
    [
      1228
    ]
  ],
  [
    [
      1228,
      1228
    ],
    "valid"
  ],
  [
    [
      1229,
      1229
    ],
    "mapped",
    [
      1230
    ]
  ],
  [
    [
      1230,
      1230
    ],
    "valid"
  ],
  [
    [
      1231,
      1231
    ],
    "valid"
  ],
  [
    [
      1232,
      1232
    ],
    "mapped",
    [
      1233
    ]
  ],
  [
    [
      1233,
      1233
    ],
    "valid"
  ],
  [
    [
      1234,
      1234
    ],
    "mapped",
    [
      1235
    ]
  ],
  [
    [
      1235,
      1235
    ],
    "valid"
  ],
  [
    [
      1236,
      1236
    ],
    "mapped",
    [
      1237
    ]
  ],
  [
    [
      1237,
      1237
    ],
    "valid"
  ],
  [
    [
      1238,
      1238
    ],
    "mapped",
    [
      1239
    ]
  ],
  [
    [
      1239,
      1239
    ],
    "valid"
  ],
  [
    [
      1240,
      1240
    ],
    "mapped",
    [
      1241
    ]
  ],
  [
    [
      1241,
      1241
    ],
    "valid"
  ],
  [
    [
      1242,
      1242
    ],
    "mapped",
    [
      1243
    ]
  ],
  [
    [
      1243,
      1243
    ],
    "valid"
  ],
  [
    [
      1244,
      1244
    ],
    "mapped",
    [
      1245
    ]
  ],
  [
    [
      1245,
      1245
    ],
    "valid"
  ],
  [
    [
      1246,
      1246
    ],
    "mapped",
    [
      1247
    ]
  ],
  [
    [
      1247,
      1247
    ],
    "valid"
  ],
  [
    [
      1248,
      1248
    ],
    "mapped",
    [
      1249
    ]
  ],
  [
    [
      1249,
      1249
    ],
    "valid"
  ],
  [
    [
      1250,
      1250
    ],
    "mapped",
    [
      1251
    ]
  ],
  [
    [
      1251,
      1251
    ],
    "valid"
  ],
  [
    [
      1252,
      1252
    ],
    "mapped",
    [
      1253
    ]
  ],
  [
    [
      1253,
      1253
    ],
    "valid"
  ],
  [
    [
      1254,
      1254
    ],
    "mapped",
    [
      1255
    ]
  ],
  [
    [
      1255,
      1255
    ],
    "valid"
  ],
  [
    [
      1256,
      1256
    ],
    "mapped",
    [
      1257
    ]
  ],
  [
    [
      1257,
      1257
    ],
    "valid"
  ],
  [
    [
      1258,
      1258
    ],
    "mapped",
    [
      1259
    ]
  ],
  [
    [
      1259,
      1259
    ],
    "valid"
  ],
  [
    [
      1260,
      1260
    ],
    "mapped",
    [
      1261
    ]
  ],
  [
    [
      1261,
      1261
    ],
    "valid"
  ],
  [
    [
      1262,
      1262
    ],
    "mapped",
    [
      1263
    ]
  ],
  [
    [
      1263,
      1263
    ],
    "valid"
  ],
  [
    [
      1264,
      1264
    ],
    "mapped",
    [
      1265
    ]
  ],
  [
    [
      1265,
      1265
    ],
    "valid"
  ],
  [
    [
      1266,
      1266
    ],
    "mapped",
    [
      1267
    ]
  ],
  [
    [
      1267,
      1267
    ],
    "valid"
  ],
  [
    [
      1268,
      1268
    ],
    "mapped",
    [
      1269
    ]
  ],
  [
    [
      1269,
      1269
    ],
    "valid"
  ],
  [
    [
      1270,
      1270
    ],
    "mapped",
    [
      1271
    ]
  ],
  [
    [
      1271,
      1271
    ],
    "valid"
  ],
  [
    [
      1272,
      1272
    ],
    "mapped",
    [
      1273
    ]
  ],
  [
    [
      1273,
      1273
    ],
    "valid"
  ],
  [
    [
      1274,
      1274
    ],
    "mapped",
    [
      1275
    ]
  ],
  [
    [
      1275,
      1275
    ],
    "valid"
  ],
  [
    [
      1276,
      1276
    ],
    "mapped",
    [
      1277
    ]
  ],
  [
    [
      1277,
      1277
    ],
    "valid"
  ],
  [
    [
      1278,
      1278
    ],
    "mapped",
    [
      1279
    ]
  ],
  [
    [
      1279,
      1279
    ],
    "valid"
  ],
  [
    [
      1280,
      1280
    ],
    "mapped",
    [
      1281
    ]
  ],
  [
    [
      1281,
      1281
    ],
    "valid"
  ],
  [
    [
      1282,
      1282
    ],
    "mapped",
    [
      1283
    ]
  ],
  [
    [
      1283,
      1283
    ],
    "valid"
  ],
  [
    [
      1284,
      1284
    ],
    "mapped",
    [
      1285
    ]
  ],
  [
    [
      1285,
      1285
    ],
    "valid"
  ],
  [
    [
      1286,
      1286
    ],
    "mapped",
    [
      1287
    ]
  ],
  [
    [
      1287,
      1287
    ],
    "valid"
  ],
  [
    [
      1288,
      1288
    ],
    "mapped",
    [
      1289
    ]
  ],
  [
    [
      1289,
      1289
    ],
    "valid"
  ],
  [
    [
      1290,
      1290
    ],
    "mapped",
    [
      1291
    ]
  ],
  [
    [
      1291,
      1291
    ],
    "valid"
  ],
  [
    [
      1292,
      1292
    ],
    "mapped",
    [
      1293
    ]
  ],
  [
    [
      1293,
      1293
    ],
    "valid"
  ],
  [
    [
      1294,
      1294
    ],
    "mapped",
    [
      1295
    ]
  ],
  [
    [
      1295,
      1295
    ],
    "valid"
  ],
  [
    [
      1296,
      1296
    ],
    "mapped",
    [
      1297
    ]
  ],
  [
    [
      1297,
      1297
    ],
    "valid"
  ],
  [
    [
      1298,
      1298
    ],
    "mapped",
    [
      1299
    ]
  ],
  [
    [
      1299,
      1299
    ],
    "valid"
  ],
  [
    [
      1300,
      1300
    ],
    "mapped",
    [
      1301
    ]
  ],
  [
    [
      1301,
      1301
    ],
    "valid"
  ],
  [
    [
      1302,
      1302
    ],
    "mapped",
    [
      1303
    ]
  ],
  [
    [
      1303,
      1303
    ],
    "valid"
  ],
  [
    [
      1304,
      1304
    ],
    "mapped",
    [
      1305
    ]
  ],
  [
    [
      1305,
      1305
    ],
    "valid"
  ],
  [
    [
      1306,
      1306
    ],
    "mapped",
    [
      1307
    ]
  ],
  [
    [
      1307,
      1307
    ],
    "valid"
  ],
  [
    [
      1308,
      1308
    ],
    "mapped",
    [
      1309
    ]
  ],
  [
    [
      1309,
      1309
    ],
    "valid"
  ],
  [
    [
      1310,
      1310
    ],
    "mapped",
    [
      1311
    ]
  ],
  [
    [
      1311,
      1311
    ],
    "valid"
  ],
  [
    [
      1312,
      1312
    ],
    "mapped",
    [
      1313
    ]
  ],
  [
    [
      1313,
      1313
    ],
    "valid"
  ],
  [
    [
      1314,
      1314
    ],
    "mapped",
    [
      1315
    ]
  ],
  [
    [
      1315,
      1315
    ],
    "valid"
  ],
  [
    [
      1316,
      1316
    ],
    "mapped",
    [
      1317
    ]
  ],
  [
    [
      1317,
      1317
    ],
    "valid"
  ],
  [
    [
      1318,
      1318
    ],
    "mapped",
    [
      1319
    ]
  ],
  [
    [
      1319,
      1319
    ],
    "valid"
  ],
  [
    [
      1320,
      1320
    ],
    "mapped",
    [
      1321
    ]
  ],
  [
    [
      1321,
      1321
    ],
    "valid"
  ],
  [
    [
      1322,
      1322
    ],
    "mapped",
    [
      1323
    ]
  ],
  [
    [
      1323,
      1323
    ],
    "valid"
  ],
  [
    [
      1324,
      1324
    ],
    "mapped",
    [
      1325
    ]
  ],
  [
    [
      1325,
      1325
    ],
    "valid"
  ],
  [
    [
      1326,
      1326
    ],
    "mapped",
    [
      1327
    ]
  ],
  [
    [
      1327,
      1327
    ],
    "valid"
  ],
  [
    [
      1328,
      1328
    ],
    "disallowed"
  ],
  [
    [
      1329,
      1329
    ],
    "mapped",
    [
      1377
    ]
  ],
  [
    [
      1330,
      1330
    ],
    "mapped",
    [
      1378
    ]
  ],
  [
    [
      1331,
      1331
    ],
    "mapped",
    [
      1379
    ]
  ],
  [
    [
      1332,
      1332
    ],
    "mapped",
    [
      1380
    ]
  ],
  [
    [
      1333,
      1333
    ],
    "mapped",
    [
      1381
    ]
  ],
  [
    [
      1334,
      1334
    ],
    "mapped",
    [
      1382
    ]
  ],
  [
    [
      1335,
      1335
    ],
    "mapped",
    [
      1383
    ]
  ],
  [
    [
      1336,
      1336
    ],
    "mapped",
    [
      1384
    ]
  ],
  [
    [
      1337,
      1337
    ],
    "mapped",
    [
      1385
    ]
  ],
  [
    [
      1338,
      1338
    ],
    "mapped",
    [
      1386
    ]
  ],
  [
    [
      1339,
      1339
    ],
    "mapped",
    [
      1387
    ]
  ],
  [
    [
      1340,
      1340
    ],
    "mapped",
    [
      1388
    ]
  ],
  [
    [
      1341,
      1341
    ],
    "mapped",
    [
      1389
    ]
  ],
  [
    [
      1342,
      1342
    ],
    "mapped",
    [
      1390
    ]
  ],
  [
    [
      1343,
      1343
    ],
    "mapped",
    [
      1391
    ]
  ],
  [
    [
      1344,
      1344
    ],
    "mapped",
    [
      1392
    ]
  ],
  [
    [
      1345,
      1345
    ],
    "mapped",
    [
      1393
    ]
  ],
  [
    [
      1346,
      1346
    ],
    "mapped",
    [
      1394
    ]
  ],
  [
    [
      1347,
      1347
    ],
    "mapped",
    [
      1395
    ]
  ],
  [
    [
      1348,
      1348
    ],
    "mapped",
    [
      1396
    ]
  ],
  [
    [
      1349,
      1349
    ],
    "mapped",
    [
      1397
    ]
  ],
  [
    [
      1350,
      1350
    ],
    "mapped",
    [
      1398
    ]
  ],
  [
    [
      1351,
      1351
    ],
    "mapped",
    [
      1399
    ]
  ],
  [
    [
      1352,
      1352
    ],
    "mapped",
    [
      1400
    ]
  ],
  [
    [
      1353,
      1353
    ],
    "mapped",
    [
      1401
    ]
  ],
  [
    [
      1354,
      1354
    ],
    "mapped",
    [
      1402
    ]
  ],
  [
    [
      1355,
      1355
    ],
    "mapped",
    [
      1403
    ]
  ],
  [
    [
      1356,
      1356
    ],
    "mapped",
    [
      1404
    ]
  ],
  [
    [
      1357,
      1357
    ],
    "mapped",
    [
      1405
    ]
  ],
  [
    [
      1358,
      1358
    ],
    "mapped",
    [
      1406
    ]
  ],
  [
    [
      1359,
      1359
    ],
    "mapped",
    [
      1407
    ]
  ],
  [
    [
      1360,
      1360
    ],
    "mapped",
    [
      1408
    ]
  ],
  [
    [
      1361,
      1361
    ],
    "mapped",
    [
      1409
    ]
  ],
  [
    [
      1362,
      1362
    ],
    "mapped",
    [
      1410
    ]
  ],
  [
    [
      1363,
      1363
    ],
    "mapped",
    [
      1411
    ]
  ],
  [
    [
      1364,
      1364
    ],
    "mapped",
    [
      1412
    ]
  ],
  [
    [
      1365,
      1365
    ],
    "mapped",
    [
      1413
    ]
  ],
  [
    [
      1366,
      1366
    ],
    "mapped",
    [
      1414
    ]
  ],
  [
    [
      1367,
      1368
    ],
    "disallowed"
  ],
  [
    [
      1369,
      1369
    ],
    "valid"
  ],
  [
    [
      1370,
      1375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1376,
      1376
    ],
    "disallowed"
  ],
  [
    [
      1377,
      1414
    ],
    "valid"
  ],
  [
    [
      1415,
      1415
    ],
    "mapped",
    [
      1381,
      1410
    ]
  ],
  [
    [
      1416,
      1416
    ],
    "disallowed"
  ],
  [
    [
      1417,
      1417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1418,
      1418
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1419,
      1420
    ],
    "disallowed"
  ],
  [
    [
      1421,
      1422
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1423,
      1423
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1424,
      1424
    ],
    "disallowed"
  ],
  [
    [
      1425,
      1441
    ],
    "valid"
  ],
  [
    [
      1442,
      1442
    ],
    "valid"
  ],
  [
    [
      1443,
      1455
    ],
    "valid"
  ],
  [
    [
      1456,
      1465
    ],
    "valid"
  ],
  [
    [
      1466,
      1466
    ],
    "valid"
  ],
  [
    [
      1467,
      1469
    ],
    "valid"
  ],
  [
    [
      1470,
      1470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1471,
      1471
    ],
    "valid"
  ],
  [
    [
      1472,
      1472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1473,
      1474
    ],
    "valid"
  ],
  [
    [
      1475,
      1475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1476,
      1476
    ],
    "valid"
  ],
  [
    [
      1477,
      1477
    ],
    "valid"
  ],
  [
    [
      1478,
      1478
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1479,
      1479
    ],
    "valid"
  ],
  [
    [
      1480,
      1487
    ],
    "disallowed"
  ],
  [
    [
      1488,
      1514
    ],
    "valid"
  ],
  [
    [
      1515,
      1519
    ],
    "disallowed"
  ],
  [
    [
      1520,
      1524
    ],
    "valid"
  ],
  [
    [
      1525,
      1535
    ],
    "disallowed"
  ],
  [
    [
      1536,
      1539
    ],
    "disallowed"
  ],
  [
    [
      1540,
      1540
    ],
    "disallowed"
  ],
  [
    [
      1541,
      1541
    ],
    "disallowed"
  ],
  [
    [
      1542,
      1546
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1547,
      1547
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1548,
      1548
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1549,
      1551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1552,
      1557
    ],
    "valid"
  ],
  [
    [
      1558,
      1562
    ],
    "valid"
  ],
  [
    [
      1563,
      1563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1564,
      1564
    ],
    "disallowed"
  ],
  [
    [
      1565,
      1565
    ],
    "disallowed"
  ],
  [
    [
      1566,
      1566
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1567,
      1567
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1568,
      1568
    ],
    "valid"
  ],
  [
    [
      1569,
      1594
    ],
    "valid"
  ],
  [
    [
      1595,
      1599
    ],
    "valid"
  ],
  [
    [
      1600,
      1600
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1601,
      1618
    ],
    "valid"
  ],
  [
    [
      1619,
      1621
    ],
    "valid"
  ],
  [
    [
      1622,
      1624
    ],
    "valid"
  ],
  [
    [
      1625,
      1630
    ],
    "valid"
  ],
  [
    [
      1631,
      1631
    ],
    "valid"
  ],
  [
    [
      1632,
      1641
    ],
    "valid"
  ],
  [
    [
      1642,
      1645
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1646,
      1647
    ],
    "valid"
  ],
  [
    [
      1648,
      1652
    ],
    "valid"
  ],
  [
    [
      1653,
      1653
    ],
    "mapped",
    [
      1575,
      1652
    ]
  ],
  [
    [
      1654,
      1654
    ],
    "mapped",
    [
      1608,
      1652
    ]
  ],
  [
    [
      1655,
      1655
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      1656,
      1656
    ],
    "mapped",
    [
      1610,
      1652
    ]
  ],
  [
    [
      1657,
      1719
    ],
    "valid"
  ],
  [
    [
      1720,
      1721
    ],
    "valid"
  ],
  [
    [
      1722,
      1726
    ],
    "valid"
  ],
  [
    [
      1727,
      1727
    ],
    "valid"
  ],
  [
    [
      1728,
      1742
    ],
    "valid"
  ],
  [
    [
      1743,
      1743
    ],
    "valid"
  ],
  [
    [
      1744,
      1747
    ],
    "valid"
  ],
  [
    [
      1748,
      1748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1749,
      1756
    ],
    "valid"
  ],
  [
    [
      1757,
      1757
    ],
    "disallowed"
  ],
  [
    [
      1758,
      1758
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1759,
      1768
    ],
    "valid"
  ],
  [
    [
      1769,
      1769
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1770,
      1773
    ],
    "valid"
  ],
  [
    [
      1774,
      1775
    ],
    "valid"
  ],
  [
    [
      1776,
      1785
    ],
    "valid"
  ],
  [
    [
      1786,
      1790
    ],
    "valid"
  ],
  [
    [
      1791,
      1791
    ],
    "valid"
  ],
  [
    [
      1792,
      1805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1806,
      1806
    ],
    "disallowed"
  ],
  [
    [
      1807,
      1807
    ],
    "disallowed"
  ],
  [
    [
      1808,
      1836
    ],
    "valid"
  ],
  [
    [
      1837,
      1839
    ],
    "valid"
  ],
  [
    [
      1840,
      1866
    ],
    "valid"
  ],
  [
    [
      1867,
      1868
    ],
    "disallowed"
  ],
  [
    [
      1869,
      1871
    ],
    "valid"
  ],
  [
    [
      1872,
      1901
    ],
    "valid"
  ],
  [
    [
      1902,
      1919
    ],
    "valid"
  ],
  [
    [
      1920,
      1968
    ],
    "valid"
  ],
  [
    [
      1969,
      1969
    ],
    "valid"
  ],
  [
    [
      1970,
      1983
    ],
    "disallowed"
  ],
  [
    [
      1984,
      2037
    ],
    "valid"
  ],
  [
    [
      2038,
      2042
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2043,
      2047
    ],
    "disallowed"
  ],
  [
    [
      2048,
      2093
    ],
    "valid"
  ],
  [
    [
      2094,
      2095
    ],
    "disallowed"
  ],
  [
    [
      2096,
      2110
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2111,
      2111
    ],
    "disallowed"
  ],
  [
    [
      2112,
      2139
    ],
    "valid"
  ],
  [
    [
      2140,
      2141
    ],
    "disallowed"
  ],
  [
    [
      2142,
      2142
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2143,
      2207
    ],
    "disallowed"
  ],
  [
    [
      2208,
      2208
    ],
    "valid"
  ],
  [
    [
      2209,
      2209
    ],
    "valid"
  ],
  [
    [
      2210,
      2220
    ],
    "valid"
  ],
  [
    [
      2221,
      2226
    ],
    "valid"
  ],
  [
    [
      2227,
      2228
    ],
    "valid"
  ],
  [
    [
      2229,
      2274
    ],
    "disallowed"
  ],
  [
    [
      2275,
      2275
    ],
    "valid"
  ],
  [
    [
      2276,
      2302
    ],
    "valid"
  ],
  [
    [
      2303,
      2303
    ],
    "valid"
  ],
  [
    [
      2304,
      2304
    ],
    "valid"
  ],
  [
    [
      2305,
      2307
    ],
    "valid"
  ],
  [
    [
      2308,
      2308
    ],
    "valid"
  ],
  [
    [
      2309,
      2361
    ],
    "valid"
  ],
  [
    [
      2362,
      2363
    ],
    "valid"
  ],
  [
    [
      2364,
      2381
    ],
    "valid"
  ],
  [
    [
      2382,
      2382
    ],
    "valid"
  ],
  [
    [
      2383,
      2383
    ],
    "valid"
  ],
  [
    [
      2384,
      2388
    ],
    "valid"
  ],
  [
    [
      2389,
      2389
    ],
    "valid"
  ],
  [
    [
      2390,
      2391
    ],
    "valid"
  ],
  [
    [
      2392,
      2392
    ],
    "mapped",
    [
      2325,
      2364
    ]
  ],
  [
    [
      2393,
      2393
    ],
    "mapped",
    [
      2326,
      2364
    ]
  ],
  [
    [
      2394,
      2394
    ],
    "mapped",
    [
      2327,
      2364
    ]
  ],
  [
    [
      2395,
      2395
    ],
    "mapped",
    [
      2332,
      2364
    ]
  ],
  [
    [
      2396,
      2396
    ],
    "mapped",
    [
      2337,
      2364
    ]
  ],
  [
    [
      2397,
      2397
    ],
    "mapped",
    [
      2338,
      2364
    ]
  ],
  [
    [
      2398,
      2398
    ],
    "mapped",
    [
      2347,
      2364
    ]
  ],
  [
    [
      2399,
      2399
    ],
    "mapped",
    [
      2351,
      2364
    ]
  ],
  [
    [
      2400,
      2403
    ],
    "valid"
  ],
  [
    [
      2404,
      2405
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2406,
      2415
    ],
    "valid"
  ],
  [
    [
      2416,
      2416
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2417,
      2418
    ],
    "valid"
  ],
  [
    [
      2419,
      2423
    ],
    "valid"
  ],
  [
    [
      2424,
      2424
    ],
    "valid"
  ],
  [
    [
      2425,
      2426
    ],
    "valid"
  ],
  [
    [
      2427,
      2428
    ],
    "valid"
  ],
  [
    [
      2429,
      2429
    ],
    "valid"
  ],
  [
    [
      2430,
      2431
    ],
    "valid"
  ],
  [
    [
      2432,
      2432
    ],
    "valid"
  ],
  [
    [
      2433,
      2435
    ],
    "valid"
  ],
  [
    [
      2436,
      2436
    ],
    "disallowed"
  ],
  [
    [
      2437,
      2444
    ],
    "valid"
  ],
  [
    [
      2445,
      2446
    ],
    "disallowed"
  ],
  [
    [
      2447,
      2448
    ],
    "valid"
  ],
  [
    [
      2449,
      2450
    ],
    "disallowed"
  ],
  [
    [
      2451,
      2472
    ],
    "valid"
  ],
  [
    [
      2473,
      2473
    ],
    "disallowed"
  ],
  [
    [
      2474,
      2480
    ],
    "valid"
  ],
  [
    [
      2481,
      2481
    ],
    "disallowed"
  ],
  [
    [
      2482,
      2482
    ],
    "valid"
  ],
  [
    [
      2483,
      2485
    ],
    "disallowed"
  ],
  [
    [
      2486,
      2489
    ],
    "valid"
  ],
  [
    [
      2490,
      2491
    ],
    "disallowed"
  ],
  [
    [
      2492,
      2492
    ],
    "valid"
  ],
  [
    [
      2493,
      2493
    ],
    "valid"
  ],
  [
    [
      2494,
      2500
    ],
    "valid"
  ],
  [
    [
      2501,
      2502
    ],
    "disallowed"
  ],
  [
    [
      2503,
      2504
    ],
    "valid"
  ],
  [
    [
      2505,
      2506
    ],
    "disallowed"
  ],
  [
    [
      2507,
      2509
    ],
    "valid"
  ],
  [
    [
      2510,
      2510
    ],
    "valid"
  ],
  [
    [
      2511,
      2518
    ],
    "disallowed"
  ],
  [
    [
      2519,
      2519
    ],
    "valid"
  ],
  [
    [
      2520,
      2523
    ],
    "disallowed"
  ],
  [
    [
      2524,
      2524
    ],
    "mapped",
    [
      2465,
      2492
    ]
  ],
  [
    [
      2525,
      2525
    ],
    "mapped",
    [
      2466,
      2492
    ]
  ],
  [
    [
      2526,
      2526
    ],
    "disallowed"
  ],
  [
    [
      2527,
      2527
    ],
    "mapped",
    [
      2479,
      2492
    ]
  ],
  [
    [
      2528,
      2531
    ],
    "valid"
  ],
  [
    [
      2532,
      2533
    ],
    "disallowed"
  ],
  [
    [
      2534,
      2545
    ],
    "valid"
  ],
  [
    [
      2546,
      2554
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2555,
      2555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2556,
      2560
    ],
    "disallowed"
  ],
  [
    [
      2561,
      2561
    ],
    "valid"
  ],
  [
    [
      2562,
      2562
    ],
    "valid"
  ],
  [
    [
      2563,
      2563
    ],
    "valid"
  ],
  [
    [
      2564,
      2564
    ],
    "disallowed"
  ],
  [
    [
      2565,
      2570
    ],
    "valid"
  ],
  [
    [
      2571,
      2574
    ],
    "disallowed"
  ],
  [
    [
      2575,
      2576
    ],
    "valid"
  ],
  [
    [
      2577,
      2578
    ],
    "disallowed"
  ],
  [
    [
      2579,
      2600
    ],
    "valid"
  ],
  [
    [
      2601,
      2601
    ],
    "disallowed"
  ],
  [
    [
      2602,
      2608
    ],
    "valid"
  ],
  [
    [
      2609,
      2609
    ],
    "disallowed"
  ],
  [
    [
      2610,
      2610
    ],
    "valid"
  ],
  [
    [
      2611,
      2611
    ],
    "mapped",
    [
      2610,
      2620
    ]
  ],
  [
    [
      2612,
      2612
    ],
    "disallowed"
  ],
  [
    [
      2613,
      2613
    ],
    "valid"
  ],
  [
    [
      2614,
      2614
    ],
    "mapped",
    [
      2616,
      2620
    ]
  ],
  [
    [
      2615,
      2615
    ],
    "disallowed"
  ],
  [
    [
      2616,
      2617
    ],
    "valid"
  ],
  [
    [
      2618,
      2619
    ],
    "disallowed"
  ],
  [
    [
      2620,
      2620
    ],
    "valid"
  ],
  [
    [
      2621,
      2621
    ],
    "disallowed"
  ],
  [
    [
      2622,
      2626
    ],
    "valid"
  ],
  [
    [
      2627,
      2630
    ],
    "disallowed"
  ],
  [
    [
      2631,
      2632
    ],
    "valid"
  ],
  [
    [
      2633,
      2634
    ],
    "disallowed"
  ],
  [
    [
      2635,
      2637
    ],
    "valid"
  ],
  [
    [
      2638,
      2640
    ],
    "disallowed"
  ],
  [
    [
      2641,
      2641
    ],
    "valid"
  ],
  [
    [
      2642,
      2648
    ],
    "disallowed"
  ],
  [
    [
      2649,
      2649
    ],
    "mapped",
    [
      2582,
      2620
    ]
  ],
  [
    [
      2650,
      2650
    ],
    "mapped",
    [
      2583,
      2620
    ]
  ],
  [
    [
      2651,
      2651
    ],
    "mapped",
    [
      2588,
      2620
    ]
  ],
  [
    [
      2652,
      2652
    ],
    "valid"
  ],
  [
    [
      2653,
      2653
    ],
    "disallowed"
  ],
  [
    [
      2654,
      2654
    ],
    "mapped",
    [
      2603,
      2620
    ]
  ],
  [
    [
      2655,
      2661
    ],
    "disallowed"
  ],
  [
    [
      2662,
      2676
    ],
    "valid"
  ],
  [
    [
      2677,
      2677
    ],
    "valid"
  ],
  [
    [
      2678,
      2688
    ],
    "disallowed"
  ],
  [
    [
      2689,
      2691
    ],
    "valid"
  ],
  [
    [
      2692,
      2692
    ],
    "disallowed"
  ],
  [
    [
      2693,
      2699
    ],
    "valid"
  ],
  [
    [
      2700,
      2700
    ],
    "valid"
  ],
  [
    [
      2701,
      2701
    ],
    "valid"
  ],
  [
    [
      2702,
      2702
    ],
    "disallowed"
  ],
  [
    [
      2703,
      2705
    ],
    "valid"
  ],
  [
    [
      2706,
      2706
    ],
    "disallowed"
  ],
  [
    [
      2707,
      2728
    ],
    "valid"
  ],
  [
    [
      2729,
      2729
    ],
    "disallowed"
  ],
  [
    [
      2730,
      2736
    ],
    "valid"
  ],
  [
    [
      2737,
      2737
    ],
    "disallowed"
  ],
  [
    [
      2738,
      2739
    ],
    "valid"
  ],
  [
    [
      2740,
      2740
    ],
    "disallowed"
  ],
  [
    [
      2741,
      2745
    ],
    "valid"
  ],
  [
    [
      2746,
      2747
    ],
    "disallowed"
  ],
  [
    [
      2748,
      2757
    ],
    "valid"
  ],
  [
    [
      2758,
      2758
    ],
    "disallowed"
  ],
  [
    [
      2759,
      2761
    ],
    "valid"
  ],
  [
    [
      2762,
      2762
    ],
    "disallowed"
  ],
  [
    [
      2763,
      2765
    ],
    "valid"
  ],
  [
    [
      2766,
      2767
    ],
    "disallowed"
  ],
  [
    [
      2768,
      2768
    ],
    "valid"
  ],
  [
    [
      2769,
      2783
    ],
    "disallowed"
  ],
  [
    [
      2784,
      2784
    ],
    "valid"
  ],
  [
    [
      2785,
      2787
    ],
    "valid"
  ],
  [
    [
      2788,
      2789
    ],
    "disallowed"
  ],
  [
    [
      2790,
      2799
    ],
    "valid"
  ],
  [
    [
      2800,
      2800
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2801,
      2801
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2802,
      2808
    ],
    "disallowed"
  ],
  [
    [
      2809,
      2809
    ],
    "valid"
  ],
  [
    [
      2810,
      2816
    ],
    "disallowed"
  ],
  [
    [
      2817,
      2819
    ],
    "valid"
  ],
  [
    [
      2820,
      2820
    ],
    "disallowed"
  ],
  [
    [
      2821,
      2828
    ],
    "valid"
  ],
  [
    [
      2829,
      2830
    ],
    "disallowed"
  ],
  [
    [
      2831,
      2832
    ],
    "valid"
  ],
  [
    [
      2833,
      2834
    ],
    "disallowed"
  ],
  [
    [
      2835,
      2856
    ],
    "valid"
  ],
  [
    [
      2857,
      2857
    ],
    "disallowed"
  ],
  [
    [
      2858,
      2864
    ],
    "valid"
  ],
  [
    [
      2865,
      2865
    ],
    "disallowed"
  ],
  [
    [
      2866,
      2867
    ],
    "valid"
  ],
  [
    [
      2868,
      2868
    ],
    "disallowed"
  ],
  [
    [
      2869,
      2869
    ],
    "valid"
  ],
  [
    [
      2870,
      2873
    ],
    "valid"
  ],
  [
    [
      2874,
      2875
    ],
    "disallowed"
  ],
  [
    [
      2876,
      2883
    ],
    "valid"
  ],
  [
    [
      2884,
      2884
    ],
    "valid"
  ],
  [
    [
      2885,
      2886
    ],
    "disallowed"
  ],
  [
    [
      2887,
      2888
    ],
    "valid"
  ],
  [
    [
      2889,
      2890
    ],
    "disallowed"
  ],
  [
    [
      2891,
      2893
    ],
    "valid"
  ],
  [
    [
      2894,
      2901
    ],
    "disallowed"
  ],
  [
    [
      2902,
      2903
    ],
    "valid"
  ],
  [
    [
      2904,
      2907
    ],
    "disallowed"
  ],
  [
    [
      2908,
      2908
    ],
    "mapped",
    [
      2849,
      2876
    ]
  ],
  [
    [
      2909,
      2909
    ],
    "mapped",
    [
      2850,
      2876
    ]
  ],
  [
    [
      2910,
      2910
    ],
    "disallowed"
  ],
  [
    [
      2911,
      2913
    ],
    "valid"
  ],
  [
    [
      2914,
      2915
    ],
    "valid"
  ],
  [
    [
      2916,
      2917
    ],
    "disallowed"
  ],
  [
    [
      2918,
      2927
    ],
    "valid"
  ],
  [
    [
      2928,
      2928
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2929,
      2929
    ],
    "valid"
  ],
  [
    [
      2930,
      2935
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2936,
      2945
    ],
    "disallowed"
  ],
  [
    [
      2946,
      2947
    ],
    "valid"
  ],
  [
    [
      2948,
      2948
    ],
    "disallowed"
  ],
  [
    [
      2949,
      2954
    ],
    "valid"
  ],
  [
    [
      2955,
      2957
    ],
    "disallowed"
  ],
  [
    [
      2958,
      2960
    ],
    "valid"
  ],
  [
    [
      2961,
      2961
    ],
    "disallowed"
  ],
  [
    [
      2962,
      2965
    ],
    "valid"
  ],
  [
    [
      2966,
      2968
    ],
    "disallowed"
  ],
  [
    [
      2969,
      2970
    ],
    "valid"
  ],
  [
    [
      2971,
      2971
    ],
    "disallowed"
  ],
  [
    [
      2972,
      2972
    ],
    "valid"
  ],
  [
    [
      2973,
      2973
    ],
    "disallowed"
  ],
  [
    [
      2974,
      2975
    ],
    "valid"
  ],
  [
    [
      2976,
      2978
    ],
    "disallowed"
  ],
  [
    [
      2979,
      2980
    ],
    "valid"
  ],
  [
    [
      2981,
      2983
    ],
    "disallowed"
  ],
  [
    [
      2984,
      2986
    ],
    "valid"
  ],
  [
    [
      2987,
      2989
    ],
    "disallowed"
  ],
  [
    [
      2990,
      2997
    ],
    "valid"
  ],
  [
    [
      2998,
      2998
    ],
    "valid"
  ],
  [
    [
      2999,
      3001
    ],
    "valid"
  ],
  [
    [
      3002,
      3005
    ],
    "disallowed"
  ],
  [
    [
      3006,
      3010
    ],
    "valid"
  ],
  [
    [
      3011,
      3013
    ],
    "disallowed"
  ],
  [
    [
      3014,
      3016
    ],
    "valid"
  ],
  [
    [
      3017,
      3017
    ],
    "disallowed"
  ],
  [
    [
      3018,
      3021
    ],
    "valid"
  ],
  [
    [
      3022,
      3023
    ],
    "disallowed"
  ],
  [
    [
      3024,
      3024
    ],
    "valid"
  ],
  [
    [
      3025,
      3030
    ],
    "disallowed"
  ],
  [
    [
      3031,
      3031
    ],
    "valid"
  ],
  [
    [
      3032,
      3045
    ],
    "disallowed"
  ],
  [
    [
      3046,
      3046
    ],
    "valid"
  ],
  [
    [
      3047,
      3055
    ],
    "valid"
  ],
  [
    [
      3056,
      3058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3059,
      3066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3067,
      3071
    ],
    "disallowed"
  ],
  [
    [
      3072,
      3072
    ],
    "valid"
  ],
  [
    [
      3073,
      3075
    ],
    "valid"
  ],
  [
    [
      3076,
      3076
    ],
    "disallowed"
  ],
  [
    [
      3077,
      3084
    ],
    "valid"
  ],
  [
    [
      3085,
      3085
    ],
    "disallowed"
  ],
  [
    [
      3086,
      3088
    ],
    "valid"
  ],
  [
    [
      3089,
      3089
    ],
    "disallowed"
  ],
  [
    [
      3090,
      3112
    ],
    "valid"
  ],
  [
    [
      3113,
      3113
    ],
    "disallowed"
  ],
  [
    [
      3114,
      3123
    ],
    "valid"
  ],
  [
    [
      3124,
      3124
    ],
    "valid"
  ],
  [
    [
      3125,
      3129
    ],
    "valid"
  ],
  [
    [
      3130,
      3132
    ],
    "disallowed"
  ],
  [
    [
      3133,
      3133
    ],
    "valid"
  ],
  [
    [
      3134,
      3140
    ],
    "valid"
  ],
  [
    [
      3141,
      3141
    ],
    "disallowed"
  ],
  [
    [
      3142,
      3144
    ],
    "valid"
  ],
  [
    [
      3145,
      3145
    ],
    "disallowed"
  ],
  [
    [
      3146,
      3149
    ],
    "valid"
  ],
  [
    [
      3150,
      3156
    ],
    "disallowed"
  ],
  [
    [
      3157,
      3158
    ],
    "valid"
  ],
  [
    [
      3159,
      3159
    ],
    "disallowed"
  ],
  [
    [
      3160,
      3161
    ],
    "valid"
  ],
  [
    [
      3162,
      3162
    ],
    "valid"
  ],
  [
    [
      3163,
      3167
    ],
    "disallowed"
  ],
  [
    [
      3168,
      3169
    ],
    "valid"
  ],
  [
    [
      3170,
      3171
    ],
    "valid"
  ],
  [
    [
      3172,
      3173
    ],
    "disallowed"
  ],
  [
    [
      3174,
      3183
    ],
    "valid"
  ],
  [
    [
      3184,
      3191
    ],
    "disallowed"
  ],
  [
    [
      3192,
      3199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3200,
      3200
    ],
    "disallowed"
  ],
  [
    [
      3201,
      3201
    ],
    "valid"
  ],
  [
    [
      3202,
      3203
    ],
    "valid"
  ],
  [
    [
      3204,
      3204
    ],
    "disallowed"
  ],
  [
    [
      3205,
      3212
    ],
    "valid"
  ],
  [
    [
      3213,
      3213
    ],
    "disallowed"
  ],
  [
    [
      3214,
      3216
    ],
    "valid"
  ],
  [
    [
      3217,
      3217
    ],
    "disallowed"
  ],
  [
    [
      3218,
      3240
    ],
    "valid"
  ],
  [
    [
      3241,
      3241
    ],
    "disallowed"
  ],
  [
    [
      3242,
      3251
    ],
    "valid"
  ],
  [
    [
      3252,
      3252
    ],
    "disallowed"
  ],
  [
    [
      3253,
      3257
    ],
    "valid"
  ],
  [
    [
      3258,
      3259
    ],
    "disallowed"
  ],
  [
    [
      3260,
      3261
    ],
    "valid"
  ],
  [
    [
      3262,
      3268
    ],
    "valid"
  ],
  [
    [
      3269,
      3269
    ],
    "disallowed"
  ],
  [
    [
      3270,
      3272
    ],
    "valid"
  ],
  [
    [
      3273,
      3273
    ],
    "disallowed"
  ],
  [
    [
      3274,
      3277
    ],
    "valid"
  ],
  [
    [
      3278,
      3284
    ],
    "disallowed"
  ],
  [
    [
      3285,
      3286
    ],
    "valid"
  ],
  [
    [
      3287,
      3293
    ],
    "disallowed"
  ],
  [
    [
      3294,
      3294
    ],
    "valid"
  ],
  [
    [
      3295,
      3295
    ],
    "disallowed"
  ],
  [
    [
      3296,
      3297
    ],
    "valid"
  ],
  [
    [
      3298,
      3299
    ],
    "valid"
  ],
  [
    [
      3300,
      3301
    ],
    "disallowed"
  ],
  [
    [
      3302,
      3311
    ],
    "valid"
  ],
  [
    [
      3312,
      3312
    ],
    "disallowed"
  ],
  [
    [
      3313,
      3314
    ],
    "valid"
  ],
  [
    [
      3315,
      3328
    ],
    "disallowed"
  ],
  [
    [
      3329,
      3329
    ],
    "valid"
  ],
  [
    [
      3330,
      3331
    ],
    "valid"
  ],
  [
    [
      3332,
      3332
    ],
    "disallowed"
  ],
  [
    [
      3333,
      3340
    ],
    "valid"
  ],
  [
    [
      3341,
      3341
    ],
    "disallowed"
  ],
  [
    [
      3342,
      3344
    ],
    "valid"
  ],
  [
    [
      3345,
      3345
    ],
    "disallowed"
  ],
  [
    [
      3346,
      3368
    ],
    "valid"
  ],
  [
    [
      3369,
      3369
    ],
    "valid"
  ],
  [
    [
      3370,
      3385
    ],
    "valid"
  ],
  [
    [
      3386,
      3386
    ],
    "valid"
  ],
  [
    [
      3387,
      3388
    ],
    "disallowed"
  ],
  [
    [
      3389,
      3389
    ],
    "valid"
  ],
  [
    [
      3390,
      3395
    ],
    "valid"
  ],
  [
    [
      3396,
      3396
    ],
    "valid"
  ],
  [
    [
      3397,
      3397
    ],
    "disallowed"
  ],
  [
    [
      3398,
      3400
    ],
    "valid"
  ],
  [
    [
      3401,
      3401
    ],
    "disallowed"
  ],
  [
    [
      3402,
      3405
    ],
    "valid"
  ],
  [
    [
      3406,
      3406
    ],
    "valid"
  ],
  [
    [
      3407,
      3414
    ],
    "disallowed"
  ],
  [
    [
      3415,
      3415
    ],
    "valid"
  ],
  [
    [
      3416,
      3422
    ],
    "disallowed"
  ],
  [
    [
      3423,
      3423
    ],
    "valid"
  ],
  [
    [
      3424,
      3425
    ],
    "valid"
  ],
  [
    [
      3426,
      3427
    ],
    "valid"
  ],
  [
    [
      3428,
      3429
    ],
    "disallowed"
  ],
  [
    [
      3430,
      3439
    ],
    "valid"
  ],
  [
    [
      3440,
      3445
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3446,
      3448
    ],
    "disallowed"
  ],
  [
    [
      3449,
      3449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3450,
      3455
    ],
    "valid"
  ],
  [
    [
      3456,
      3457
    ],
    "disallowed"
  ],
  [
    [
      3458,
      3459
    ],
    "valid"
  ],
  [
    [
      3460,
      3460
    ],
    "disallowed"
  ],
  [
    [
      3461,
      3478
    ],
    "valid"
  ],
  [
    [
      3479,
      3481
    ],
    "disallowed"
  ],
  [
    [
      3482,
      3505
    ],
    "valid"
  ],
  [
    [
      3506,
      3506
    ],
    "disallowed"
  ],
  [
    [
      3507,
      3515
    ],
    "valid"
  ],
  [
    [
      3516,
      3516
    ],
    "disallowed"
  ],
  [
    [
      3517,
      3517
    ],
    "valid"
  ],
  [
    [
      3518,
      3519
    ],
    "disallowed"
  ],
  [
    [
      3520,
      3526
    ],
    "valid"
  ],
  [
    [
      3527,
      3529
    ],
    "disallowed"
  ],
  [
    [
      3530,
      3530
    ],
    "valid"
  ],
  [
    [
      3531,
      3534
    ],
    "disallowed"
  ],
  [
    [
      3535,
      3540
    ],
    "valid"
  ],
  [
    [
      3541,
      3541
    ],
    "disallowed"
  ],
  [
    [
      3542,
      3542
    ],
    "valid"
  ],
  [
    [
      3543,
      3543
    ],
    "disallowed"
  ],
  [
    [
      3544,
      3551
    ],
    "valid"
  ],
  [
    [
      3552,
      3557
    ],
    "disallowed"
  ],
  [
    [
      3558,
      3567
    ],
    "valid"
  ],
  [
    [
      3568,
      3569
    ],
    "disallowed"
  ],
  [
    [
      3570,
      3571
    ],
    "valid"
  ],
  [
    [
      3572,
      3572
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3573,
      3584
    ],
    "disallowed"
  ],
  [
    [
      3585,
      3634
    ],
    "valid"
  ],
  [
    [
      3635,
      3635
    ],
    "mapped",
    [
      3661,
      3634
    ]
  ],
  [
    [
      3636,
      3642
    ],
    "valid"
  ],
  [
    [
      3643,
      3646
    ],
    "disallowed"
  ],
  [
    [
      3647,
      3647
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3648,
      3662
    ],
    "valid"
  ],
  [
    [
      3663,
      3663
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3664,
      3673
    ],
    "valid"
  ],
  [
    [
      3674,
      3675
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3676,
      3712
    ],
    "disallowed"
  ],
  [
    [
      3713,
      3714
    ],
    "valid"
  ],
  [
    [
      3715,
      3715
    ],
    "disallowed"
  ],
  [
    [
      3716,
      3716
    ],
    "valid"
  ],
  [
    [
      3717,
      3718
    ],
    "disallowed"
  ],
  [
    [
      3719,
      3720
    ],
    "valid"
  ],
  [
    [
      3721,
      3721
    ],
    "disallowed"
  ],
  [
    [
      3722,
      3722
    ],
    "valid"
  ],
  [
    [
      3723,
      3724
    ],
    "disallowed"
  ],
  [
    [
      3725,
      3725
    ],
    "valid"
  ],
  [
    [
      3726,
      3731
    ],
    "disallowed"
  ],
  [
    [
      3732,
      3735
    ],
    "valid"
  ],
  [
    [
      3736,
      3736
    ],
    "disallowed"
  ],
  [
    [
      3737,
      3743
    ],
    "valid"
  ],
  [
    [
      3744,
      3744
    ],
    "disallowed"
  ],
  [
    [
      3745,
      3747
    ],
    "valid"
  ],
  [
    [
      3748,
      3748
    ],
    "disallowed"
  ],
  [
    [
      3749,
      3749
    ],
    "valid"
  ],
  [
    [
      3750,
      3750
    ],
    "disallowed"
  ],
  [
    [
      3751,
      3751
    ],
    "valid"
  ],
  [
    [
      3752,
      3753
    ],
    "disallowed"
  ],
  [
    [
      3754,
      3755
    ],
    "valid"
  ],
  [
    [
      3756,
      3756
    ],
    "disallowed"
  ],
  [
    [
      3757,
      3762
    ],
    "valid"
  ],
  [
    [
      3763,
      3763
    ],
    "mapped",
    [
      3789,
      3762
    ]
  ],
  [
    [
      3764,
      3769
    ],
    "valid"
  ],
  [
    [
      3770,
      3770
    ],
    "disallowed"
  ],
  [
    [
      3771,
      3773
    ],
    "valid"
  ],
  [
    [
      3774,
      3775
    ],
    "disallowed"
  ],
  [
    [
      3776,
      3780
    ],
    "valid"
  ],
  [
    [
      3781,
      3781
    ],
    "disallowed"
  ],
  [
    [
      3782,
      3782
    ],
    "valid"
  ],
  [
    [
      3783,
      3783
    ],
    "disallowed"
  ],
  [
    [
      3784,
      3789
    ],
    "valid"
  ],
  [
    [
      3790,
      3791
    ],
    "disallowed"
  ],
  [
    [
      3792,
      3801
    ],
    "valid"
  ],
  [
    [
      3802,
      3803
    ],
    "disallowed"
  ],
  [
    [
      3804,
      3804
    ],
    "mapped",
    [
      3755,
      3737
    ]
  ],
  [
    [
      3805,
      3805
    ],
    "mapped",
    [
      3755,
      3745
    ]
  ],
  [
    [
      3806,
      3807
    ],
    "valid"
  ],
  [
    [
      3808,
      3839
    ],
    "disallowed"
  ],
  [
    [
      3840,
      3840
    ],
    "valid"
  ],
  [
    [
      3841,
      3850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3851,
      3851
    ],
    "valid"
  ],
  [
    [
      3852,
      3852
    ],
    "mapped",
    [
      3851
    ]
  ],
  [
    [
      3853,
      3863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3864,
      3865
    ],
    "valid"
  ],
  [
    [
      3866,
      3871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3872,
      3881
    ],
    "valid"
  ],
  [
    [
      3882,
      3892
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3893,
      3893
    ],
    "valid"
  ],
  [
    [
      3894,
      3894
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3895,
      3895
    ],
    "valid"
  ],
  [
    [
      3896,
      3896
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3897,
      3897
    ],
    "valid"
  ],
  [
    [
      3898,
      3901
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3902,
      3906
    ],
    "valid"
  ],
  [
    [
      3907,
      3907
    ],
    "mapped",
    [
      3906,
      4023
    ]
  ],
  [
    [
      3908,
      3911
    ],
    "valid"
  ],
  [
    [
      3912,
      3912
    ],
    "disallowed"
  ],
  [
    [
      3913,
      3916
    ],
    "valid"
  ],
  [
    [
      3917,
      3917
    ],
    "mapped",
    [
      3916,
      4023
    ]
  ],
  [
    [
      3918,
      3921
    ],
    "valid"
  ],
  [
    [
      3922,
      3922
    ],
    "mapped",
    [
      3921,
      4023
    ]
  ],
  [
    [
      3923,
      3926
    ],
    "valid"
  ],
  [
    [
      3927,
      3927
    ],
    "mapped",
    [
      3926,
      4023
    ]
  ],
  [
    [
      3928,
      3931
    ],
    "valid"
  ],
  [
    [
      3932,
      3932
    ],
    "mapped",
    [
      3931,
      4023
    ]
  ],
  [
    [
      3933,
      3944
    ],
    "valid"
  ],
  [
    [
      3945,
      3945
    ],
    "mapped",
    [
      3904,
      4021
    ]
  ],
  [
    [
      3946,
      3946
    ],
    "valid"
  ],
  [
    [
      3947,
      3948
    ],
    "valid"
  ],
  [
    [
      3949,
      3952
    ],
    "disallowed"
  ],
  [
    [
      3953,
      3954
    ],
    "valid"
  ],
  [
    [
      3955,
      3955
    ],
    "mapped",
    [
      3953,
      3954
    ]
  ],
  [
    [
      3956,
      3956
    ],
    "valid"
  ],
  [
    [
      3957,
      3957
    ],
    "mapped",
    [
      3953,
      3956
    ]
  ],
  [
    [
      3958,
      3958
    ],
    "mapped",
    [
      4018,
      3968
    ]
  ],
  [
    [
      3959,
      3959
    ],
    "mapped",
    [
      4018,
      3953,
      3968
    ]
  ],
  [
    [
      3960,
      3960
    ],
    "mapped",
    [
      4019,
      3968
    ]
  ],
  [
    [
      3961,
      3961
    ],
    "mapped",
    [
      4019,
      3953,
      3968
    ]
  ],
  [
    [
      3962,
      3968
    ],
    "valid"
  ],
  [
    [
      3969,
      3969
    ],
    "mapped",
    [
      3953,
      3968
    ]
  ],
  [
    [
      3970,
      3972
    ],
    "valid"
  ],
  [
    [
      3973,
      3973
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3974,
      3979
    ],
    "valid"
  ],
  [
    [
      3980,
      3983
    ],
    "valid"
  ],
  [
    [
      3984,
      3986
    ],
    "valid"
  ],
  [
    [
      3987,
      3987
    ],
    "mapped",
    [
      3986,
      4023
    ]
  ],
  [
    [
      3988,
      3989
    ],
    "valid"
  ],
  [
    [
      3990,
      3990
    ],
    "valid"
  ],
  [
    [
      3991,
      3991
    ],
    "valid"
  ],
  [
    [
      3992,
      3992
    ],
    "disallowed"
  ],
  [
    [
      3993,
      3996
    ],
    "valid"
  ],
  [
    [
      3997,
      3997
    ],
    "mapped",
    [
      3996,
      4023
    ]
  ],
  [
    [
      3998,
      4001
    ],
    "valid"
  ],
  [
    [
      4002,
      4002
    ],
    "mapped",
    [
      4001,
      4023
    ]
  ],
  [
    [
      4003,
      4006
    ],
    "valid"
  ],
  [
    [
      4007,
      4007
    ],
    "mapped",
    [
      4006,
      4023
    ]
  ],
  [
    [
      4008,
      4011
    ],
    "valid"
  ],
  [
    [
      4012,
      4012
    ],
    "mapped",
    [
      4011,
      4023
    ]
  ],
  [
    [
      4013,
      4013
    ],
    "valid"
  ],
  [
    [
      4014,
      4016
    ],
    "valid"
  ],
  [
    [
      4017,
      4023
    ],
    "valid"
  ],
  [
    [
      4024,
      4024
    ],
    "valid"
  ],
  [
    [
      4025,
      4025
    ],
    "mapped",
    [
      3984,
      4021
    ]
  ],
  [
    [
      4026,
      4028
    ],
    "valid"
  ],
  [
    [
      4029,
      4029
    ],
    "disallowed"
  ],
  [
    [
      4030,
      4037
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4038,
      4038
    ],
    "valid"
  ],
  [
    [
      4039,
      4044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4045,
      4045
    ],
    "disallowed"
  ],
  [
    [
      4046,
      4046
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4047,
      4047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4048,
      4049
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4050,
      4052
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4053,
      4056
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4057,
      4058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4059,
      4095
    ],
    "disallowed"
  ],
  [
    [
      4096,
      4129
    ],
    "valid"
  ],
  [
    [
      4130,
      4130
    ],
    "valid"
  ],
  [
    [
      4131,
      4135
    ],
    "valid"
  ],
  [
    [
      4136,
      4136
    ],
    "valid"
  ],
  [
    [
      4137,
      4138
    ],
    "valid"
  ],
  [
    [
      4139,
      4139
    ],
    "valid"
  ],
  [
    [
      4140,
      4146
    ],
    "valid"
  ],
  [
    [
      4147,
      4149
    ],
    "valid"
  ],
  [
    [
      4150,
      4153
    ],
    "valid"
  ],
  [
    [
      4154,
      4159
    ],
    "valid"
  ],
  [
    [
      4160,
      4169
    ],
    "valid"
  ],
  [
    [
      4170,
      4175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4176,
      4185
    ],
    "valid"
  ],
  [
    [
      4186,
      4249
    ],
    "valid"
  ],
  [
    [
      4250,
      4253
    ],
    "valid"
  ],
  [
    [
      4254,
      4255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4256,
      4293
    ],
    "disallowed"
  ],
  [
    [
      4294,
      4294
    ],
    "disallowed"
  ],
  [
    [
      4295,
      4295
    ],
    "mapped",
    [
      11559
    ]
  ],
  [
    [
      4296,
      4300
    ],
    "disallowed"
  ],
  [
    [
      4301,
      4301
    ],
    "mapped",
    [
      11565
    ]
  ],
  [
    [
      4302,
      4303
    ],
    "disallowed"
  ],
  [
    [
      4304,
      4342
    ],
    "valid"
  ],
  [
    [
      4343,
      4344
    ],
    "valid"
  ],
  [
    [
      4345,
      4346
    ],
    "valid"
  ],
  [
    [
      4347,
      4347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4348,
      4348
    ],
    "mapped",
    [
      4316
    ]
  ],
  [
    [
      4349,
      4351
    ],
    "valid"
  ],
  [
    [
      4352,
      4441
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4442,
      4446
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4447,
      4448
    ],
    "disallowed"
  ],
  [
    [
      4449,
      4514
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4515,
      4519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4520,
      4601
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4602,
      4607
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4608,
      4614
    ],
    "valid"
  ],
  [
    [
      4615,
      4615
    ],
    "valid"
  ],
  [
    [
      4616,
      4678
    ],
    "valid"
  ],
  [
    [
      4679,
      4679
    ],
    "valid"
  ],
  [
    [
      4680,
      4680
    ],
    "valid"
  ],
  [
    [
      4681,
      4681
    ],
    "disallowed"
  ],
  [
    [
      4682,
      4685
    ],
    "valid"
  ],
  [
    [
      4686,
      4687
    ],
    "disallowed"
  ],
  [
    [
      4688,
      4694
    ],
    "valid"
  ],
  [
    [
      4695,
      4695
    ],
    "disallowed"
  ],
  [
    [
      4696,
      4696
    ],
    "valid"
  ],
  [
    [
      4697,
      4697
    ],
    "disallowed"
  ],
  [
    [
      4698,
      4701
    ],
    "valid"
  ],
  [
    [
      4702,
      4703
    ],
    "disallowed"
  ],
  [
    [
      4704,
      4742
    ],
    "valid"
  ],
  [
    [
      4743,
      4743
    ],
    "valid"
  ],
  [
    [
      4744,
      4744
    ],
    "valid"
  ],
  [
    [
      4745,
      4745
    ],
    "disallowed"
  ],
  [
    [
      4746,
      4749
    ],
    "valid"
  ],
  [
    [
      4750,
      4751
    ],
    "disallowed"
  ],
  [
    [
      4752,
      4782
    ],
    "valid"
  ],
  [
    [
      4783,
      4783
    ],
    "valid"
  ],
  [
    [
      4784,
      4784
    ],
    "valid"
  ],
  [
    [
      4785,
      4785
    ],
    "disallowed"
  ],
  [
    [
      4786,
      4789
    ],
    "valid"
  ],
  [
    [
      4790,
      4791
    ],
    "disallowed"
  ],
  [
    [
      4792,
      4798
    ],
    "valid"
  ],
  [
    [
      4799,
      4799
    ],
    "disallowed"
  ],
  [
    [
      4800,
      4800
    ],
    "valid"
  ],
  [
    [
      4801,
      4801
    ],
    "disallowed"
  ],
  [
    [
      4802,
      4805
    ],
    "valid"
  ],
  [
    [
      4806,
      4807
    ],
    "disallowed"
  ],
  [
    [
      4808,
      4814
    ],
    "valid"
  ],
  [
    [
      4815,
      4815
    ],
    "valid"
  ],
  [
    [
      4816,
      4822
    ],
    "valid"
  ],
  [
    [
      4823,
      4823
    ],
    "disallowed"
  ],
  [
    [
      4824,
      4846
    ],
    "valid"
  ],
  [
    [
      4847,
      4847
    ],
    "valid"
  ],
  [
    [
      4848,
      4878
    ],
    "valid"
  ],
  [
    [
      4879,
      4879
    ],
    "valid"
  ],
  [
    [
      4880,
      4880
    ],
    "valid"
  ],
  [
    [
      4881,
      4881
    ],
    "disallowed"
  ],
  [
    [
      4882,
      4885
    ],
    "valid"
  ],
  [
    [
      4886,
      4887
    ],
    "disallowed"
  ],
  [
    [
      4888,
      4894
    ],
    "valid"
  ],
  [
    [
      4895,
      4895
    ],
    "valid"
  ],
  [
    [
      4896,
      4934
    ],
    "valid"
  ],
  [
    [
      4935,
      4935
    ],
    "valid"
  ],
  [
    [
      4936,
      4954
    ],
    "valid"
  ],
  [
    [
      4955,
      4956
    ],
    "disallowed"
  ],
  [
    [
      4957,
      4958
    ],
    "valid"
  ],
  [
    [
      4959,
      4959
    ],
    "valid"
  ],
  [
    [
      4960,
      4960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4961,
      4988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4989,
      4991
    ],
    "disallowed"
  ],
  [
    [
      4992,
      5007
    ],
    "valid"
  ],
  [
    [
      5008,
      5017
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5018,
      5023
    ],
    "disallowed"
  ],
  [
    [
      5024,
      5108
    ],
    "valid"
  ],
  [
    [
      5109,
      5109
    ],
    "valid"
  ],
  [
    [
      5110,
      5111
    ],
    "disallowed"
  ],
  [
    [
      5112,
      5112
    ],
    "mapped",
    [
      5104
    ]
  ],
  [
    [
      5113,
      5113
    ],
    "mapped",
    [
      5105
    ]
  ],
  [
    [
      5114,
      5114
    ],
    "mapped",
    [
      5106
    ]
  ],
  [
    [
      5115,
      5115
    ],
    "mapped",
    [
      5107
    ]
  ],
  [
    [
      5116,
      5116
    ],
    "mapped",
    [
      5108
    ]
  ],
  [
    [
      5117,
      5117
    ],
    "mapped",
    [
      5109
    ]
  ],
  [
    [
      5118,
      5119
    ],
    "disallowed"
  ],
  [
    [
      5120,
      5120
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5121,
      5740
    ],
    "valid"
  ],
  [
    [
      5741,
      5742
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5743,
      5750
    ],
    "valid"
  ],
  [
    [
      5751,
      5759
    ],
    "valid"
  ],
  [
    [
      5760,
      5760
    ],
    "disallowed"
  ],
  [
    [
      5761,
      5786
    ],
    "valid"
  ],
  [
    [
      5787,
      5788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5789,
      5791
    ],
    "disallowed"
  ],
  [
    [
      5792,
      5866
    ],
    "valid"
  ],
  [
    [
      5867,
      5872
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5873,
      5880
    ],
    "valid"
  ],
  [
    [
      5881,
      5887
    ],
    "disallowed"
  ],
  [
    [
      5888,
      5900
    ],
    "valid"
  ],
  [
    [
      5901,
      5901
    ],
    "disallowed"
  ],
  [
    [
      5902,
      5908
    ],
    "valid"
  ],
  [
    [
      5909,
      5919
    ],
    "disallowed"
  ],
  [
    [
      5920,
      5940
    ],
    "valid"
  ],
  [
    [
      5941,
      5942
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5943,
      5951
    ],
    "disallowed"
  ],
  [
    [
      5952,
      5971
    ],
    "valid"
  ],
  [
    [
      5972,
      5983
    ],
    "disallowed"
  ],
  [
    [
      5984,
      5996
    ],
    "valid"
  ],
  [
    [
      5997,
      5997
    ],
    "disallowed"
  ],
  [
    [
      5998,
      6e3
    ],
    "valid"
  ],
  [
    [
      6001,
      6001
    ],
    "disallowed"
  ],
  [
    [
      6002,
      6003
    ],
    "valid"
  ],
  [
    [
      6004,
      6015
    ],
    "disallowed"
  ],
  [
    [
      6016,
      6067
    ],
    "valid"
  ],
  [
    [
      6068,
      6069
    ],
    "disallowed"
  ],
  [
    [
      6070,
      6099
    ],
    "valid"
  ],
  [
    [
      6100,
      6102
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6103,
      6103
    ],
    "valid"
  ],
  [
    [
      6104,
      6107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6108,
      6108
    ],
    "valid"
  ],
  [
    [
      6109,
      6109
    ],
    "valid"
  ],
  [
    [
      6110,
      6111
    ],
    "disallowed"
  ],
  [
    [
      6112,
      6121
    ],
    "valid"
  ],
  [
    [
      6122,
      6127
    ],
    "disallowed"
  ],
  [
    [
      6128,
      6137
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6138,
      6143
    ],
    "disallowed"
  ],
  [
    [
      6144,
      6149
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6150,
      6150
    ],
    "disallowed"
  ],
  [
    [
      6151,
      6154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6155,
      6157
    ],
    "ignored"
  ],
  [
    [
      6158,
      6158
    ],
    "disallowed"
  ],
  [
    [
      6159,
      6159
    ],
    "disallowed"
  ],
  [
    [
      6160,
      6169
    ],
    "valid"
  ],
  [
    [
      6170,
      6175
    ],
    "disallowed"
  ],
  [
    [
      6176,
      6263
    ],
    "valid"
  ],
  [
    [
      6264,
      6271
    ],
    "disallowed"
  ],
  [
    [
      6272,
      6313
    ],
    "valid"
  ],
  [
    [
      6314,
      6314
    ],
    "valid"
  ],
  [
    [
      6315,
      6319
    ],
    "disallowed"
  ],
  [
    [
      6320,
      6389
    ],
    "valid"
  ],
  [
    [
      6390,
      6399
    ],
    "disallowed"
  ],
  [
    [
      6400,
      6428
    ],
    "valid"
  ],
  [
    [
      6429,
      6430
    ],
    "valid"
  ],
  [
    [
      6431,
      6431
    ],
    "disallowed"
  ],
  [
    [
      6432,
      6443
    ],
    "valid"
  ],
  [
    [
      6444,
      6447
    ],
    "disallowed"
  ],
  [
    [
      6448,
      6459
    ],
    "valid"
  ],
  [
    [
      6460,
      6463
    ],
    "disallowed"
  ],
  [
    [
      6464,
      6464
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6465,
      6467
    ],
    "disallowed"
  ],
  [
    [
      6468,
      6469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6470,
      6509
    ],
    "valid"
  ],
  [
    [
      6510,
      6511
    ],
    "disallowed"
  ],
  [
    [
      6512,
      6516
    ],
    "valid"
  ],
  [
    [
      6517,
      6527
    ],
    "disallowed"
  ],
  [
    [
      6528,
      6569
    ],
    "valid"
  ],
  [
    [
      6570,
      6571
    ],
    "valid"
  ],
  [
    [
      6572,
      6575
    ],
    "disallowed"
  ],
  [
    [
      6576,
      6601
    ],
    "valid"
  ],
  [
    [
      6602,
      6607
    ],
    "disallowed"
  ],
  [
    [
      6608,
      6617
    ],
    "valid"
  ],
  [
    [
      6618,
      6618
    ],
    "valid",
    [],
    "XV8"
  ],
  [
    [
      6619,
      6621
    ],
    "disallowed"
  ],
  [
    [
      6622,
      6623
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6624,
      6655
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6656,
      6683
    ],
    "valid"
  ],
  [
    [
      6684,
      6685
    ],
    "disallowed"
  ],
  [
    [
      6686,
      6687
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6688,
      6750
    ],
    "valid"
  ],
  [
    [
      6751,
      6751
    ],
    "disallowed"
  ],
  [
    [
      6752,
      6780
    ],
    "valid"
  ],
  [
    [
      6781,
      6782
    ],
    "disallowed"
  ],
  [
    [
      6783,
      6793
    ],
    "valid"
  ],
  [
    [
      6794,
      6799
    ],
    "disallowed"
  ],
  [
    [
      6800,
      6809
    ],
    "valid"
  ],
  [
    [
      6810,
      6815
    ],
    "disallowed"
  ],
  [
    [
      6816,
      6822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6823,
      6823
    ],
    "valid"
  ],
  [
    [
      6824,
      6829
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6830,
      6831
    ],
    "disallowed"
  ],
  [
    [
      6832,
      6845
    ],
    "valid"
  ],
  [
    [
      6846,
      6846
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6847,
      6911
    ],
    "disallowed"
  ],
  [
    [
      6912,
      6987
    ],
    "valid"
  ],
  [
    [
      6988,
      6991
    ],
    "disallowed"
  ],
  [
    [
      6992,
      7001
    ],
    "valid"
  ],
  [
    [
      7002,
      7018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7019,
      7027
    ],
    "valid"
  ],
  [
    [
      7028,
      7036
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7037,
      7039
    ],
    "disallowed"
  ],
  [
    [
      7040,
      7082
    ],
    "valid"
  ],
  [
    [
      7083,
      7085
    ],
    "valid"
  ],
  [
    [
      7086,
      7097
    ],
    "valid"
  ],
  [
    [
      7098,
      7103
    ],
    "valid"
  ],
  [
    [
      7104,
      7155
    ],
    "valid"
  ],
  [
    [
      7156,
      7163
    ],
    "disallowed"
  ],
  [
    [
      7164,
      7167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7168,
      7223
    ],
    "valid"
  ],
  [
    [
      7224,
      7226
    ],
    "disallowed"
  ],
  [
    [
      7227,
      7231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7232,
      7241
    ],
    "valid"
  ],
  [
    [
      7242,
      7244
    ],
    "disallowed"
  ],
  [
    [
      7245,
      7293
    ],
    "valid"
  ],
  [
    [
      7294,
      7295
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7296,
      7359
    ],
    "disallowed"
  ],
  [
    [
      7360,
      7367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7368,
      7375
    ],
    "disallowed"
  ],
  [
    [
      7376,
      7378
    ],
    "valid"
  ],
  [
    [
      7379,
      7379
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7380,
      7410
    ],
    "valid"
  ],
  [
    [
      7411,
      7414
    ],
    "valid"
  ],
  [
    [
      7415,
      7415
    ],
    "disallowed"
  ],
  [
    [
      7416,
      7417
    ],
    "valid"
  ],
  [
    [
      7418,
      7423
    ],
    "disallowed"
  ],
  [
    [
      7424,
      7467
    ],
    "valid"
  ],
  [
    [
      7468,
      7468
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7469,
      7469
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      7470,
      7470
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7471,
      7471
    ],
    "valid"
  ],
  [
    [
      7472,
      7472
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7473,
      7473
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7474,
      7474
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      7475,
      7475
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7476,
      7476
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      7477,
      7477
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7478,
      7478
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      7479,
      7479
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7480,
      7480
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      7481,
      7481
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7482,
      7482
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      7483,
      7483
    ],
    "valid"
  ],
  [
    [
      7484,
      7484
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7485,
      7485
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      7486,
      7486
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7487,
      7487
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7488,
      7488
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7489,
      7489
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7490,
      7490
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      7491,
      7491
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7492,
      7492
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      7493,
      7493
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      7494,
      7494
    ],
    "mapped",
    [
      7426
    ]
  ],
  [
    [
      7495,
      7495
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7496,
      7496
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7497,
      7497
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7498,
      7498
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      7499,
      7499
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      7500,
      7500
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7501,
      7501
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7502,
      7502
    ],
    "valid"
  ],
  [
    [
      7503,
      7503
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7504,
      7504
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7505,
      7505
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      7506,
      7506
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7507,
      7507
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      7508,
      7508
    ],
    "mapped",
    [
      7446
    ]
  ],
  [
    [
      7509,
      7509
    ],
    "mapped",
    [
      7447
    ]
  ],
  [
    [
      7510,
      7510
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7511,
      7511
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7512,
      7512
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7513,
      7513
    ],
    "mapped",
    [
      7453
    ]
  ],
  [
    [
      7514,
      7514
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      7515,
      7515
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7516,
      7516
    ],
    "mapped",
    [
      7461
    ]
  ],
  [
    [
      7517,
      7517
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7518,
      7518
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7519,
      7519
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      7520,
      7520
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7521,
      7521
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7522,
      7522
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7523,
      7523
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7524,
      7524
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7525,
      7525
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7526,
      7526
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7527,
      7527
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7528,
      7528
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      7529,
      7529
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7530,
      7530
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7531,
      7531
    ],
    "valid"
  ],
  [
    [
      7532,
      7543
    ],
    "valid"
  ],
  [
    [
      7544,
      7544
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      7545,
      7578
    ],
    "valid"
  ],
  [
    [
      7579,
      7579
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      7580,
      7580
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      7581,
      7581
    ],
    "mapped",
    [
      597
    ]
  ],
  [
    [
      7582,
      7582
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      7583,
      7583
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7584,
      7584
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      7585,
      7585
    ],
    "mapped",
    [
      607
    ]
  ],
  [
    [
      7586,
      7586
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      7587,
      7587
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      7588,
      7588
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      7589,
      7589
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      7590,
      7590
    ],
    "mapped",
    [
      618
    ]
  ],
  [
    [
      7591,
      7591
    ],
    "mapped",
    [
      7547
    ]
  ],
  [
    [
      7592,
      7592
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      7593,
      7593
    ],
    "mapped",
    [
      621
    ]
  ],
  [
    [
      7594,
      7594
    ],
    "mapped",
    [
      7557
    ]
  ],
  [
    [
      7595,
      7595
    ],
    "mapped",
    [
      671
    ]
  ],
  [
    [
      7596,
      7596
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      7597,
      7597
    ],
    "mapped",
    [
      624
    ]
  ],
  [
    [
      7598,
      7598
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      7599,
      7599
    ],
    "mapped",
    [
      627
    ]
  ],
  [
    [
      7600,
      7600
    ],
    "mapped",
    [
      628
    ]
  ],
  [
    [
      7601,
      7601
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      7602,
      7602
    ],
    "mapped",
    [
      632
    ]
  ],
  [
    [
      7603,
      7603
    ],
    "mapped",
    [
      642
    ]
  ],
  [
    [
      7604,
      7604
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      7605,
      7605
    ],
    "mapped",
    [
      427
    ]
  ],
  [
    [
      7606,
      7606
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      7607,
      7607
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      7608,
      7608
    ],
    "mapped",
    [
      7452
    ]
  ],
  [
    [
      7609,
      7609
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      7610,
      7610
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      7611,
      7611
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      7612,
      7612
    ],
    "mapped",
    [
      656
    ]
  ],
  [
    [
      7613,
      7613
    ],
    "mapped",
    [
      657
    ]
  ],
  [
    [
      7614,
      7614
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      7615,
      7615
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      7616,
      7619
    ],
    "valid"
  ],
  [
    [
      7620,
      7626
    ],
    "valid"
  ],
  [
    [
      7627,
      7654
    ],
    "valid"
  ],
  [
    [
      7655,
      7669
    ],
    "valid"
  ],
  [
    [
      7670,
      7675
    ],
    "disallowed"
  ],
  [
    [
      7676,
      7676
    ],
    "valid"
  ],
  [
    [
      7677,
      7677
    ],
    "valid"
  ],
  [
    [
      7678,
      7679
    ],
    "valid"
  ],
  [
    [
      7680,
      7680
    ],
    "mapped",
    [
      7681
    ]
  ],
  [
    [
      7681,
      7681
    ],
    "valid"
  ],
  [
    [
      7682,
      7682
    ],
    "mapped",
    [
      7683
    ]
  ],
  [
    [
      7683,
      7683
    ],
    "valid"
  ],
  [
    [
      7684,
      7684
    ],
    "mapped",
    [
      7685
    ]
  ],
  [
    [
      7685,
      7685
    ],
    "valid"
  ],
  [
    [
      7686,
      7686
    ],
    "mapped",
    [
      7687
    ]
  ],
  [
    [
      7687,
      7687
    ],
    "valid"
  ],
  [
    [
      7688,
      7688
    ],
    "mapped",
    [
      7689
    ]
  ],
  [
    [
      7689,
      7689
    ],
    "valid"
  ],
  [
    [
      7690,
      7690
    ],
    "mapped",
    [
      7691
    ]
  ],
  [
    [
      7691,
      7691
    ],
    "valid"
  ],
  [
    [
      7692,
      7692
    ],
    "mapped",
    [
      7693
    ]
  ],
  [
    [
      7693,
      7693
    ],
    "valid"
  ],
  [
    [
      7694,
      7694
    ],
    "mapped",
    [
      7695
    ]
  ],
  [
    [
      7695,
      7695
    ],
    "valid"
  ],
  [
    [
      7696,
      7696
    ],
    "mapped",
    [
      7697
    ]
  ],
  [
    [
      7697,
      7697
    ],
    "valid"
  ],
  [
    [
      7698,
      7698
    ],
    "mapped",
    [
      7699
    ]
  ],
  [
    [
      7699,
      7699
    ],
    "valid"
  ],
  [
    [
      7700,
      7700
    ],
    "mapped",
    [
      7701
    ]
  ],
  [
    [
      7701,
      7701
    ],
    "valid"
  ],
  [
    [
      7702,
      7702
    ],
    "mapped",
    [
      7703
    ]
  ],
  [
    [
      7703,
      7703
    ],
    "valid"
  ],
  [
    [
      7704,
      7704
    ],
    "mapped",
    [
      7705
    ]
  ],
  [
    [
      7705,
      7705
    ],
    "valid"
  ],
  [
    [
      7706,
      7706
    ],
    "mapped",
    [
      7707
    ]
  ],
  [
    [
      7707,
      7707
    ],
    "valid"
  ],
  [
    [
      7708,
      7708
    ],
    "mapped",
    [
      7709
    ]
  ],
  [
    [
      7709,
      7709
    ],
    "valid"
  ],
  [
    [
      7710,
      7710
    ],
    "mapped",
    [
      7711
    ]
  ],
  [
    [
      7711,
      7711
    ],
    "valid"
  ],
  [
    [
      7712,
      7712
    ],
    "mapped",
    [
      7713
    ]
  ],
  [
    [
      7713,
      7713
    ],
    "valid"
  ],
  [
    [
      7714,
      7714
    ],
    "mapped",
    [
      7715
    ]
  ],
  [
    [
      7715,
      7715
    ],
    "valid"
  ],
  [
    [
      7716,
      7716
    ],
    "mapped",
    [
      7717
    ]
  ],
  [
    [
      7717,
      7717
    ],
    "valid"
  ],
  [
    [
      7718,
      7718
    ],
    "mapped",
    [
      7719
    ]
  ],
  [
    [
      7719,
      7719
    ],
    "valid"
  ],
  [
    [
      7720,
      7720
    ],
    "mapped",
    [
      7721
    ]
  ],
  [
    [
      7721,
      7721
    ],
    "valid"
  ],
  [
    [
      7722,
      7722
    ],
    "mapped",
    [
      7723
    ]
  ],
  [
    [
      7723,
      7723
    ],
    "valid"
  ],
  [
    [
      7724,
      7724
    ],
    "mapped",
    [
      7725
    ]
  ],
  [
    [
      7725,
      7725
    ],
    "valid"
  ],
  [
    [
      7726,
      7726
    ],
    "mapped",
    [
      7727
    ]
  ],
  [
    [
      7727,
      7727
    ],
    "valid"
  ],
  [
    [
      7728,
      7728
    ],
    "mapped",
    [
      7729
    ]
  ],
  [
    [
      7729,
      7729
    ],
    "valid"
  ],
  [
    [
      7730,
      7730
    ],
    "mapped",
    [
      7731
    ]
  ],
  [
    [
      7731,
      7731
    ],
    "valid"
  ],
  [
    [
      7732,
      7732
    ],
    "mapped",
    [
      7733
    ]
  ],
  [
    [
      7733,
      7733
    ],
    "valid"
  ],
  [
    [
      7734,
      7734
    ],
    "mapped",
    [
      7735
    ]
  ],
  [
    [
      7735,
      7735
    ],
    "valid"
  ],
  [
    [
      7736,
      7736
    ],
    "mapped",
    [
      7737
    ]
  ],
  [
    [
      7737,
      7737
    ],
    "valid"
  ],
  [
    [
      7738,
      7738
    ],
    "mapped",
    [
      7739
    ]
  ],
  [
    [
      7739,
      7739
    ],
    "valid"
  ],
  [
    [
      7740,
      7740
    ],
    "mapped",
    [
      7741
    ]
  ],
  [
    [
      7741,
      7741
    ],
    "valid"
  ],
  [
    [
      7742,
      7742
    ],
    "mapped",
    [
      7743
    ]
  ],
  [
    [
      7743,
      7743
    ],
    "valid"
  ],
  [
    [
      7744,
      7744
    ],
    "mapped",
    [
      7745
    ]
  ],
  [
    [
      7745,
      7745
    ],
    "valid"
  ],
  [
    [
      7746,
      7746
    ],
    "mapped",
    [
      7747
    ]
  ],
  [
    [
      7747,
      7747
    ],
    "valid"
  ],
  [
    [
      7748,
      7748
    ],
    "mapped",
    [
      7749
    ]
  ],
  [
    [
      7749,
      7749
    ],
    "valid"
  ],
  [
    [
      7750,
      7750
    ],
    "mapped",
    [
      7751
    ]
  ],
  [
    [
      7751,
      7751
    ],
    "valid"
  ],
  [
    [
      7752,
      7752
    ],
    "mapped",
    [
      7753
    ]
  ],
  [
    [
      7753,
      7753
    ],
    "valid"
  ],
  [
    [
      7754,
      7754
    ],
    "mapped",
    [
      7755
    ]
  ],
  [
    [
      7755,
      7755
    ],
    "valid"
  ],
  [
    [
      7756,
      7756
    ],
    "mapped",
    [
      7757
    ]
  ],
  [
    [
      7757,
      7757
    ],
    "valid"
  ],
  [
    [
      7758,
      7758
    ],
    "mapped",
    [
      7759
    ]
  ],
  [
    [
      7759,
      7759
    ],
    "valid"
  ],
  [
    [
      7760,
      7760
    ],
    "mapped",
    [
      7761
    ]
  ],
  [
    [
      7761,
      7761
    ],
    "valid"
  ],
  [
    [
      7762,
      7762
    ],
    "mapped",
    [
      7763
    ]
  ],
  [
    [
      7763,
      7763
    ],
    "valid"
  ],
  [
    [
      7764,
      7764
    ],
    "mapped",
    [
      7765
    ]
  ],
  [
    [
      7765,
      7765
    ],
    "valid"
  ],
  [
    [
      7766,
      7766
    ],
    "mapped",
    [
      7767
    ]
  ],
  [
    [
      7767,
      7767
    ],
    "valid"
  ],
  [
    [
      7768,
      7768
    ],
    "mapped",
    [
      7769
    ]
  ],
  [
    [
      7769,
      7769
    ],
    "valid"
  ],
  [
    [
      7770,
      7770
    ],
    "mapped",
    [
      7771
    ]
  ],
  [
    [
      7771,
      7771
    ],
    "valid"
  ],
  [
    [
      7772,
      7772
    ],
    "mapped",
    [
      7773
    ]
  ],
  [
    [
      7773,
      7773
    ],
    "valid"
  ],
  [
    [
      7774,
      7774
    ],
    "mapped",
    [
      7775
    ]
  ],
  [
    [
      7775,
      7775
    ],
    "valid"
  ],
  [
    [
      7776,
      7776
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7777,
      7777
    ],
    "valid"
  ],
  [
    [
      7778,
      7778
    ],
    "mapped",
    [
      7779
    ]
  ],
  [
    [
      7779,
      7779
    ],
    "valid"
  ],
  [
    [
      7780,
      7780
    ],
    "mapped",
    [
      7781
    ]
  ],
  [
    [
      7781,
      7781
    ],
    "valid"
  ],
  [
    [
      7782,
      7782
    ],
    "mapped",
    [
      7783
    ]
  ],
  [
    [
      7783,
      7783
    ],
    "valid"
  ],
  [
    [
      7784,
      7784
    ],
    "mapped",
    [
      7785
    ]
  ],
  [
    [
      7785,
      7785
    ],
    "valid"
  ],
  [
    [
      7786,
      7786
    ],
    "mapped",
    [
      7787
    ]
  ],
  [
    [
      7787,
      7787
    ],
    "valid"
  ],
  [
    [
      7788,
      7788
    ],
    "mapped",
    [
      7789
    ]
  ],
  [
    [
      7789,
      7789
    ],
    "valid"
  ],
  [
    [
      7790,
      7790
    ],
    "mapped",
    [
      7791
    ]
  ],
  [
    [
      7791,
      7791
    ],
    "valid"
  ],
  [
    [
      7792,
      7792
    ],
    "mapped",
    [
      7793
    ]
  ],
  [
    [
      7793,
      7793
    ],
    "valid"
  ],
  [
    [
      7794,
      7794
    ],
    "mapped",
    [
      7795
    ]
  ],
  [
    [
      7795,
      7795
    ],
    "valid"
  ],
  [
    [
      7796,
      7796
    ],
    "mapped",
    [
      7797
    ]
  ],
  [
    [
      7797,
      7797
    ],
    "valid"
  ],
  [
    [
      7798,
      7798
    ],
    "mapped",
    [
      7799
    ]
  ],
  [
    [
      7799,
      7799
    ],
    "valid"
  ],
  [
    [
      7800,
      7800
    ],
    "mapped",
    [
      7801
    ]
  ],
  [
    [
      7801,
      7801
    ],
    "valid"
  ],
  [
    [
      7802,
      7802
    ],
    "mapped",
    [
      7803
    ]
  ],
  [
    [
      7803,
      7803
    ],
    "valid"
  ],
  [
    [
      7804,
      7804
    ],
    "mapped",
    [
      7805
    ]
  ],
  [
    [
      7805,
      7805
    ],
    "valid"
  ],
  [
    [
      7806,
      7806
    ],
    "mapped",
    [
      7807
    ]
  ],
  [
    [
      7807,
      7807
    ],
    "valid"
  ],
  [
    [
      7808,
      7808
    ],
    "mapped",
    [
      7809
    ]
  ],
  [
    [
      7809,
      7809
    ],
    "valid"
  ],
  [
    [
      7810,
      7810
    ],
    "mapped",
    [
      7811
    ]
  ],
  [
    [
      7811,
      7811
    ],
    "valid"
  ],
  [
    [
      7812,
      7812
    ],
    "mapped",
    [
      7813
    ]
  ],
  [
    [
      7813,
      7813
    ],
    "valid"
  ],
  [
    [
      7814,
      7814
    ],
    "mapped",
    [
      7815
    ]
  ],
  [
    [
      7815,
      7815
    ],
    "valid"
  ],
  [
    [
      7816,
      7816
    ],
    "mapped",
    [
      7817
    ]
  ],
  [
    [
      7817,
      7817
    ],
    "valid"
  ],
  [
    [
      7818,
      7818
    ],
    "mapped",
    [
      7819
    ]
  ],
  [
    [
      7819,
      7819
    ],
    "valid"
  ],
  [
    [
      7820,
      7820
    ],
    "mapped",
    [
      7821
    ]
  ],
  [
    [
      7821,
      7821
    ],
    "valid"
  ],
  [
    [
      7822,
      7822
    ],
    "mapped",
    [
      7823
    ]
  ],
  [
    [
      7823,
      7823
    ],
    "valid"
  ],
  [
    [
      7824,
      7824
    ],
    "mapped",
    [
      7825
    ]
  ],
  [
    [
      7825,
      7825
    ],
    "valid"
  ],
  [
    [
      7826,
      7826
    ],
    "mapped",
    [
      7827
    ]
  ],
  [
    [
      7827,
      7827
    ],
    "valid"
  ],
  [
    [
      7828,
      7828
    ],
    "mapped",
    [
      7829
    ]
  ],
  [
    [
      7829,
      7833
    ],
    "valid"
  ],
  [
    [
      7834,
      7834
    ],
    "mapped",
    [
      97,
      702
    ]
  ],
  [
    [
      7835,
      7835
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7836,
      7837
    ],
    "valid"
  ],
  [
    [
      7838,
      7838
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      7839,
      7839
    ],
    "valid"
  ],
  [
    [
      7840,
      7840
    ],
    "mapped",
    [
      7841
    ]
  ],
  [
    [
      7841,
      7841
    ],
    "valid"
  ],
  [
    [
      7842,
      7842
    ],
    "mapped",
    [
      7843
    ]
  ],
  [
    [
      7843,
      7843
    ],
    "valid"
  ],
  [
    [
      7844,
      7844
    ],
    "mapped",
    [
      7845
    ]
  ],
  [
    [
      7845,
      7845
    ],
    "valid"
  ],
  [
    [
      7846,
      7846
    ],
    "mapped",
    [
      7847
    ]
  ],
  [
    [
      7847,
      7847
    ],
    "valid"
  ],
  [
    [
      7848,
      7848
    ],
    "mapped",
    [
      7849
    ]
  ],
  [
    [
      7849,
      7849
    ],
    "valid"
  ],
  [
    [
      7850,
      7850
    ],
    "mapped",
    [
      7851
    ]
  ],
  [
    [
      7851,
      7851
    ],
    "valid"
  ],
  [
    [
      7852,
      7852
    ],
    "mapped",
    [
      7853
    ]
  ],
  [
    [
      7853,
      7853
    ],
    "valid"
  ],
  [
    [
      7854,
      7854
    ],
    "mapped",
    [
      7855
    ]
  ],
  [
    [
      7855,
      7855
    ],
    "valid"
  ],
  [
    [
      7856,
      7856
    ],
    "mapped",
    [
      7857
    ]
  ],
  [
    [
      7857,
      7857
    ],
    "valid"
  ],
  [
    [
      7858,
      7858
    ],
    "mapped",
    [
      7859
    ]
  ],
  [
    [
      7859,
      7859
    ],
    "valid"
  ],
  [
    [
      7860,
      7860
    ],
    "mapped",
    [
      7861
    ]
  ],
  [
    [
      7861,
      7861
    ],
    "valid"
  ],
  [
    [
      7862,
      7862
    ],
    "mapped",
    [
      7863
    ]
  ],
  [
    [
      7863,
      7863
    ],
    "valid"
  ],
  [
    [
      7864,
      7864
    ],
    "mapped",
    [
      7865
    ]
  ],
  [
    [
      7865,
      7865
    ],
    "valid"
  ],
  [
    [
      7866,
      7866
    ],
    "mapped",
    [
      7867
    ]
  ],
  [
    [
      7867,
      7867
    ],
    "valid"
  ],
  [
    [
      7868,
      7868
    ],
    "mapped",
    [
      7869
    ]
  ],
  [
    [
      7869,
      7869
    ],
    "valid"
  ],
  [
    [
      7870,
      7870
    ],
    "mapped",
    [
      7871
    ]
  ],
  [
    [
      7871,
      7871
    ],
    "valid"
  ],
  [
    [
      7872,
      7872
    ],
    "mapped",
    [
      7873
    ]
  ],
  [
    [
      7873,
      7873
    ],
    "valid"
  ],
  [
    [
      7874,
      7874
    ],
    "mapped",
    [
      7875
    ]
  ],
  [
    [
      7875,
      7875
    ],
    "valid"
  ],
  [
    [
      7876,
      7876
    ],
    "mapped",
    [
      7877
    ]
  ],
  [
    [
      7877,
      7877
    ],
    "valid"
  ],
  [
    [
      7878,
      7878
    ],
    "mapped",
    [
      7879
    ]
  ],
  [
    [
      7879,
      7879
    ],
    "valid"
  ],
  [
    [
      7880,
      7880
    ],
    "mapped",
    [
      7881
    ]
  ],
  [
    [
      7881,
      7881
    ],
    "valid"
  ],
  [
    [
      7882,
      7882
    ],
    "mapped",
    [
      7883
    ]
  ],
  [
    [
      7883,
      7883
    ],
    "valid"
  ],
  [
    [
      7884,
      7884
    ],
    "mapped",
    [
      7885
    ]
  ],
  [
    [
      7885,
      7885
    ],
    "valid"
  ],
  [
    [
      7886,
      7886
    ],
    "mapped",
    [
      7887
    ]
  ],
  [
    [
      7887,
      7887
    ],
    "valid"
  ],
  [
    [
      7888,
      7888
    ],
    "mapped",
    [
      7889
    ]
  ],
  [
    [
      7889,
      7889
    ],
    "valid"
  ],
  [
    [
      7890,
      7890
    ],
    "mapped",
    [
      7891
    ]
  ],
  [
    [
      7891,
      7891
    ],
    "valid"
  ],
  [
    [
      7892,
      7892
    ],
    "mapped",
    [
      7893
    ]
  ],
  [
    [
      7893,
      7893
    ],
    "valid"
  ],
  [
    [
      7894,
      7894
    ],
    "mapped",
    [
      7895
    ]
  ],
  [
    [
      7895,
      7895
    ],
    "valid"
  ],
  [
    [
      7896,
      7896
    ],
    "mapped",
    [
      7897
    ]
  ],
  [
    [
      7897,
      7897
    ],
    "valid"
  ],
  [
    [
      7898,
      7898
    ],
    "mapped",
    [
      7899
    ]
  ],
  [
    [
      7899,
      7899
    ],
    "valid"
  ],
  [
    [
      7900,
      7900
    ],
    "mapped",
    [
      7901
    ]
  ],
  [
    [
      7901,
      7901
    ],
    "valid"
  ],
  [
    [
      7902,
      7902
    ],
    "mapped",
    [
      7903
    ]
  ],
  [
    [
      7903,
      7903
    ],
    "valid"
  ],
  [
    [
      7904,
      7904
    ],
    "mapped",
    [
      7905
    ]
  ],
  [
    [
      7905,
      7905
    ],
    "valid"
  ],
  [
    [
      7906,
      7906
    ],
    "mapped",
    [
      7907
    ]
  ],
  [
    [
      7907,
      7907
    ],
    "valid"
  ],
  [
    [
      7908,
      7908
    ],
    "mapped",
    [
      7909
    ]
  ],
  [
    [
      7909,
      7909
    ],
    "valid"
  ],
  [
    [
      7910,
      7910
    ],
    "mapped",
    [
      7911
    ]
  ],
  [
    [
      7911,
      7911
    ],
    "valid"
  ],
  [
    [
      7912,
      7912
    ],
    "mapped",
    [
      7913
    ]
  ],
  [
    [
      7913,
      7913
    ],
    "valid"
  ],
  [
    [
      7914,
      7914
    ],
    "mapped",
    [
      7915
    ]
  ],
  [
    [
      7915,
      7915
    ],
    "valid"
  ],
  [
    [
      7916,
      7916
    ],
    "mapped",
    [
      7917
    ]
  ],
  [
    [
      7917,
      7917
    ],
    "valid"
  ],
  [
    [
      7918,
      7918
    ],
    "mapped",
    [
      7919
    ]
  ],
  [
    [
      7919,
      7919
    ],
    "valid"
  ],
  [
    [
      7920,
      7920
    ],
    "mapped",
    [
      7921
    ]
  ],
  [
    [
      7921,
      7921
    ],
    "valid"
  ],
  [
    [
      7922,
      7922
    ],
    "mapped",
    [
      7923
    ]
  ],
  [
    [
      7923,
      7923
    ],
    "valid"
  ],
  [
    [
      7924,
      7924
    ],
    "mapped",
    [
      7925
    ]
  ],
  [
    [
      7925,
      7925
    ],
    "valid"
  ],
  [
    [
      7926,
      7926
    ],
    "mapped",
    [
      7927
    ]
  ],
  [
    [
      7927,
      7927
    ],
    "valid"
  ],
  [
    [
      7928,
      7928
    ],
    "mapped",
    [
      7929
    ]
  ],
  [
    [
      7929,
      7929
    ],
    "valid"
  ],
  [
    [
      7930,
      7930
    ],
    "mapped",
    [
      7931
    ]
  ],
  [
    [
      7931,
      7931
    ],
    "valid"
  ],
  [
    [
      7932,
      7932
    ],
    "mapped",
    [
      7933
    ]
  ],
  [
    [
      7933,
      7933
    ],
    "valid"
  ],
  [
    [
      7934,
      7934
    ],
    "mapped",
    [
      7935
    ]
  ],
  [
    [
      7935,
      7935
    ],
    "valid"
  ],
  [
    [
      7936,
      7943
    ],
    "valid"
  ],
  [
    [
      7944,
      7944
    ],
    "mapped",
    [
      7936
    ]
  ],
  [
    [
      7945,
      7945
    ],
    "mapped",
    [
      7937
    ]
  ],
  [
    [
      7946,
      7946
    ],
    "mapped",
    [
      7938
    ]
  ],
  [
    [
      7947,
      7947
    ],
    "mapped",
    [
      7939
    ]
  ],
  [
    [
      7948,
      7948
    ],
    "mapped",
    [
      7940
    ]
  ],
  [
    [
      7949,
      7949
    ],
    "mapped",
    [
      7941
    ]
  ],
  [
    [
      7950,
      7950
    ],
    "mapped",
    [
      7942
    ]
  ],
  [
    [
      7951,
      7951
    ],
    "mapped",
    [
      7943
    ]
  ],
  [
    [
      7952,
      7957
    ],
    "valid"
  ],
  [
    [
      7958,
      7959
    ],
    "disallowed"
  ],
  [
    [
      7960,
      7960
    ],
    "mapped",
    [
      7952
    ]
  ],
  [
    [
      7961,
      7961
    ],
    "mapped",
    [
      7953
    ]
  ],
  [
    [
      7962,
      7962
    ],
    "mapped",
    [
      7954
    ]
  ],
  [
    [
      7963,
      7963
    ],
    "mapped",
    [
      7955
    ]
  ],
  [
    [
      7964,
      7964
    ],
    "mapped",
    [
      7956
    ]
  ],
  [
    [
      7965,
      7965
    ],
    "mapped",
    [
      7957
    ]
  ],
  [
    [
      7966,
      7967
    ],
    "disallowed"
  ],
  [
    [
      7968,
      7975
    ],
    "valid"
  ],
  [
    [
      7976,
      7976
    ],
    "mapped",
    [
      7968
    ]
  ],
  [
    [
      7977,
      7977
    ],
    "mapped",
    [
      7969
    ]
  ],
  [
    [
      7978,
      7978
    ],
    "mapped",
    [
      7970
    ]
  ],
  [
    [
      7979,
      7979
    ],
    "mapped",
    [
      7971
    ]
  ],
  [
    [
      7980,
      7980
    ],
    "mapped",
    [
      7972
    ]
  ],
  [
    [
      7981,
      7981
    ],
    "mapped",
    [
      7973
    ]
  ],
  [
    [
      7982,
      7982
    ],
    "mapped",
    [
      7974
    ]
  ],
  [
    [
      7983,
      7983
    ],
    "mapped",
    [
      7975
    ]
  ],
  [
    [
      7984,
      7991
    ],
    "valid"
  ],
  [
    [
      7992,
      7992
    ],
    "mapped",
    [
      7984
    ]
  ],
  [
    [
      7993,
      7993
    ],
    "mapped",
    [
      7985
    ]
  ],
  [
    [
      7994,
      7994
    ],
    "mapped",
    [
      7986
    ]
  ],
  [
    [
      7995,
      7995
    ],
    "mapped",
    [
      7987
    ]
  ],
  [
    [
      7996,
      7996
    ],
    "mapped",
    [
      7988
    ]
  ],
  [
    [
      7997,
      7997
    ],
    "mapped",
    [
      7989
    ]
  ],
  [
    [
      7998,
      7998
    ],
    "mapped",
    [
      7990
    ]
  ],
  [
    [
      7999,
      7999
    ],
    "mapped",
    [
      7991
    ]
  ],
  [
    [
      8e3,
      8005
    ],
    "valid"
  ],
  [
    [
      8006,
      8007
    ],
    "disallowed"
  ],
  [
    [
      8008,
      8008
    ],
    "mapped",
    [
      8e3
    ]
  ],
  [
    [
      8009,
      8009
    ],
    "mapped",
    [
      8001
    ]
  ],
  [
    [
      8010,
      8010
    ],
    "mapped",
    [
      8002
    ]
  ],
  [
    [
      8011,
      8011
    ],
    "mapped",
    [
      8003
    ]
  ],
  [
    [
      8012,
      8012
    ],
    "mapped",
    [
      8004
    ]
  ],
  [
    [
      8013,
      8013
    ],
    "mapped",
    [
      8005
    ]
  ],
  [
    [
      8014,
      8015
    ],
    "disallowed"
  ],
  [
    [
      8016,
      8023
    ],
    "valid"
  ],
  [
    [
      8024,
      8024
    ],
    "disallowed"
  ],
  [
    [
      8025,
      8025
    ],
    "mapped",
    [
      8017
    ]
  ],
  [
    [
      8026,
      8026
    ],
    "disallowed"
  ],
  [
    [
      8027,
      8027
    ],
    "mapped",
    [
      8019
    ]
  ],
  [
    [
      8028,
      8028
    ],
    "disallowed"
  ],
  [
    [
      8029,
      8029
    ],
    "mapped",
    [
      8021
    ]
  ],
  [
    [
      8030,
      8030
    ],
    "disallowed"
  ],
  [
    [
      8031,
      8031
    ],
    "mapped",
    [
      8023
    ]
  ],
  [
    [
      8032,
      8039
    ],
    "valid"
  ],
  [
    [
      8040,
      8040
    ],
    "mapped",
    [
      8032
    ]
  ],
  [
    [
      8041,
      8041
    ],
    "mapped",
    [
      8033
    ]
  ],
  [
    [
      8042,
      8042
    ],
    "mapped",
    [
      8034
    ]
  ],
  [
    [
      8043,
      8043
    ],
    "mapped",
    [
      8035
    ]
  ],
  [
    [
      8044,
      8044
    ],
    "mapped",
    [
      8036
    ]
  ],
  [
    [
      8045,
      8045
    ],
    "mapped",
    [
      8037
    ]
  ],
  [
    [
      8046,
      8046
    ],
    "mapped",
    [
      8038
    ]
  ],
  [
    [
      8047,
      8047
    ],
    "mapped",
    [
      8039
    ]
  ],
  [
    [
      8048,
      8048
    ],
    "valid"
  ],
  [
    [
      8049,
      8049
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8050,
      8050
    ],
    "valid"
  ],
  [
    [
      8051,
      8051
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8052,
      8052
    ],
    "valid"
  ],
  [
    [
      8053,
      8053
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8054,
      8054
    ],
    "valid"
  ],
  [
    [
      8055,
      8055
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8056,
      8056
    ],
    "valid"
  ],
  [
    [
      8057,
      8057
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8058,
      8058
    ],
    "valid"
  ],
  [
    [
      8059,
      8059
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8060,
      8060
    ],
    "valid"
  ],
  [
    [
      8061,
      8061
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8062,
      8063
    ],
    "disallowed"
  ],
  [
    [
      8064,
      8064
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8065,
      8065
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8066,
      8066
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8067,
      8067
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8068,
      8068
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8069,
      8069
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8070,
      8070
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8071,
      8071
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8072,
      8072
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8073,
      8073
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8074,
      8074
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8075,
      8075
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8076,
      8076
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8077,
      8077
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8078,
      8078
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8079,
      8079
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8080,
      8080
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8081,
      8081
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8082,
      8082
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8083,
      8083
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8084,
      8084
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8085,
      8085
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8086,
      8086
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8087,
      8087
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8088,
      8088
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8089,
      8089
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8090,
      8090
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8091,
      8091
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8092,
      8092
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8093,
      8093
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8094,
      8094
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8095,
      8095
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8096,
      8096
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8097,
      8097
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8098,
      8098
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8099,
      8099
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8100,
      8100
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8101,
      8101
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8102,
      8102
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8103,
      8103
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8104,
      8104
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8105,
      8105
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8106,
      8106
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8107,
      8107
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8108,
      8108
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8109,
      8109
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8110,
      8110
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8111,
      8111
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8112,
      8113
    ],
    "valid"
  ],
  [
    [
      8114,
      8114
    ],
    "mapped",
    [
      8048,
      953
    ]
  ],
  [
    [
      8115,
      8115
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8116,
      8116
    ],
    "mapped",
    [
      940,
      953
    ]
  ],
  [
    [
      8117,
      8117
    ],
    "disallowed"
  ],
  [
    [
      8118,
      8118
    ],
    "valid"
  ],
  [
    [
      8119,
      8119
    ],
    "mapped",
    [
      8118,
      953
    ]
  ],
  [
    [
      8120,
      8120
    ],
    "mapped",
    [
      8112
    ]
  ],
  [
    [
      8121,
      8121
    ],
    "mapped",
    [
      8113
    ]
  ],
  [
    [
      8122,
      8122
    ],
    "mapped",
    [
      8048
    ]
  ],
  [
    [
      8123,
      8123
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8124,
      8124
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8125,
      8125
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8126,
      8126
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      8127,
      8127
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8128,
      8128
    ],
    "disallowed_STD3_mapped",
    [
      32,
      834
    ]
  ],
  [
    [
      8129,
      8129
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      834
    ]
  ],
  [
    [
      8130,
      8130
    ],
    "mapped",
    [
      8052,
      953
    ]
  ],
  [
    [
      8131,
      8131
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8132,
      8132
    ],
    "mapped",
    [
      942,
      953
    ]
  ],
  [
    [
      8133,
      8133
    ],
    "disallowed"
  ],
  [
    [
      8134,
      8134
    ],
    "valid"
  ],
  [
    [
      8135,
      8135
    ],
    "mapped",
    [
      8134,
      953
    ]
  ],
  [
    [
      8136,
      8136
    ],
    "mapped",
    [
      8050
    ]
  ],
  [
    [
      8137,
      8137
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8138,
      8138
    ],
    "mapped",
    [
      8052
    ]
  ],
  [
    [
      8139,
      8139
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8140,
      8140
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8141,
      8141
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      768
    ]
  ],
  [
    [
      8142,
      8142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      769
    ]
  ],
  [
    [
      8143,
      8143
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      834
    ]
  ],
  [
    [
      8144,
      8146
    ],
    "valid"
  ],
  [
    [
      8147,
      8147
    ],
    "mapped",
    [
      912
    ]
  ],
  [
    [
      8148,
      8149
    ],
    "disallowed"
  ],
  [
    [
      8150,
      8151
    ],
    "valid"
  ],
  [
    [
      8152,
      8152
    ],
    "mapped",
    [
      8144
    ]
  ],
  [
    [
      8153,
      8153
    ],
    "mapped",
    [
      8145
    ]
  ],
  [
    [
      8154,
      8154
    ],
    "mapped",
    [
      8054
    ]
  ],
  [
    [
      8155,
      8155
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8156,
      8156
    ],
    "disallowed"
  ],
  [
    [
      8157,
      8157
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      768
    ]
  ],
  [
    [
      8158,
      8158
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      769
    ]
  ],
  [
    [
      8159,
      8159
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      834
    ]
  ],
  [
    [
      8160,
      8162
    ],
    "valid"
  ],
  [
    [
      8163,
      8163
    ],
    "mapped",
    [
      944
    ]
  ],
  [
    [
      8164,
      8167
    ],
    "valid"
  ],
  [
    [
      8168,
      8168
    ],
    "mapped",
    [
      8160
    ]
  ],
  [
    [
      8169,
      8169
    ],
    "mapped",
    [
      8161
    ]
  ],
  [
    [
      8170,
      8170
    ],
    "mapped",
    [
      8058
    ]
  ],
  [
    [
      8171,
      8171
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8172,
      8172
    ],
    "mapped",
    [
      8165
    ]
  ],
  [
    [
      8173,
      8173
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      768
    ]
  ],
  [
    [
      8174,
      8174
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      8175,
      8175
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      8176,
      8177
    ],
    "disallowed"
  ],
  [
    [
      8178,
      8178
    ],
    "mapped",
    [
      8060,
      953
    ]
  ],
  [
    [
      8179,
      8179
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8180,
      8180
    ],
    "mapped",
    [
      974,
      953
    ]
  ],
  [
    [
      8181,
      8181
    ],
    "disallowed"
  ],
  [
    [
      8182,
      8182
    ],
    "valid"
  ],
  [
    [
      8183,
      8183
    ],
    "mapped",
    [
      8182,
      953
    ]
  ],
  [
    [
      8184,
      8184
    ],
    "mapped",
    [
      8056
    ]
  ],
  [
    [
      8185,
      8185
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8186,
      8186
    ],
    "mapped",
    [
      8060
    ]
  ],
  [
    [
      8187,
      8187
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8188,
      8188
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8189,
      8189
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      8190,
      8190
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788
    ]
  ],
  [
    [
      8191,
      8191
    ],
    "disallowed"
  ],
  [
    [
      8192,
      8202
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8203,
      8203
    ],
    "ignored"
  ],
  [
    [
      8204,
      8205
    ],
    "deviation",
    []
  ],
  [
    [
      8206,
      8207
    ],
    "disallowed"
  ],
  [
    [
      8208,
      8208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8209,
      8209
    ],
    "mapped",
    [
      8208
    ]
  ],
  [
    [
      8210,
      8214
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8215,
      8215
    ],
    "disallowed_STD3_mapped",
    [
      32,
      819
    ]
  ],
  [
    [
      8216,
      8227
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8228,
      8230
    ],
    "disallowed"
  ],
  [
    [
      8231,
      8231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8232,
      8238
    ],
    "disallowed"
  ],
  [
    [
      8239,
      8239
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8240,
      8242
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8243,
      8243
    ],
    "mapped",
    [
      8242,
      8242
    ]
  ],
  [
    [
      8244,
      8244
    ],
    "mapped",
    [
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8245,
      8245
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8246,
      8246
    ],
    "mapped",
    [
      8245,
      8245
    ]
  ],
  [
    [
      8247,
      8247
    ],
    "mapped",
    [
      8245,
      8245,
      8245
    ]
  ],
  [
    [
      8248,
      8251
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8252,
      8252
    ],
    "disallowed_STD3_mapped",
    [
      33,
      33
    ]
  ],
  [
    [
      8253,
      8253
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8254,
      8254
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      8255,
      8262
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8263,
      8263
    ],
    "disallowed_STD3_mapped",
    [
      63,
      63
    ]
  ],
  [
    [
      8264,
      8264
    ],
    "disallowed_STD3_mapped",
    [
      63,
      33
    ]
  ],
  [
    [
      8265,
      8265
    ],
    "disallowed_STD3_mapped",
    [
      33,
      63
    ]
  ],
  [
    [
      8266,
      8269
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8270,
      8274
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8275,
      8276
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8277,
      8278
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8279,
      8279
    ],
    "mapped",
    [
      8242,
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8280,
      8286
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8287,
      8287
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8288,
      8288
    ],
    "ignored"
  ],
  [
    [
      8289,
      8291
    ],
    "disallowed"
  ],
  [
    [
      8292,
      8292
    ],
    "ignored"
  ],
  [
    [
      8293,
      8293
    ],
    "disallowed"
  ],
  [
    [
      8294,
      8297
    ],
    "disallowed"
  ],
  [
    [
      8298,
      8303
    ],
    "disallowed"
  ],
  [
    [
      8304,
      8304
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8305,
      8305
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8306,
      8307
    ],
    "disallowed"
  ],
  [
    [
      8308,
      8308
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8309,
      8309
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8310,
      8310
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8311,
      8311
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8312,
      8312
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8313,
      8313
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8314,
      8314
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8315,
      8315
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8316,
      8316
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8317,
      8317
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8318,
      8318
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8319,
      8319
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8320,
      8320
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8321,
      8321
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      8322,
      8322
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      8323,
      8323
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      8324,
      8324
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8325,
      8325
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8326,
      8326
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8327,
      8327
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8328,
      8328
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8329,
      8329
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8330,
      8330
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8331,
      8331
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8332,
      8332
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8333,
      8333
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8334,
      8334
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8335,
      8335
    ],
    "disallowed"
  ],
  [
    [
      8336,
      8336
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      8337,
      8337
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8338,
      8338
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8339,
      8339
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8340,
      8340
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      8341,
      8341
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8342,
      8342
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8343,
      8343
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8344,
      8344
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8345,
      8345
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8346,
      8346
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8347,
      8347
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      8348,
      8348
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      8349,
      8351
    ],
    "disallowed"
  ],
  [
    [
      8352,
      8359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8360,
      8360
    ],
    "mapped",
    [
      114,
      115
    ]
  ],
  [
    [
      8361,
      8362
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8363,
      8363
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8364,
      8364
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8365,
      8367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8368,
      8369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8370,
      8373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8374,
      8376
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8377,
      8377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8378,
      8378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8379,
      8381
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8382,
      8382
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8383,
      8399
    ],
    "disallowed"
  ],
  [
    [
      8400,
      8417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8418,
      8419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8420,
      8426
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8427,
      8427
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8428,
      8431
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8432,
      8432
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8433,
      8447
    ],
    "disallowed"
  ],
  [
    [
      8448,
      8448
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      99
    ]
  ],
  [
    [
      8449,
      8449
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      115
    ]
  ],
  [
    [
      8450,
      8450
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8451,
      8451
    ],
    "mapped",
    [
      176,
      99
    ]
  ],
  [
    [
      8452,
      8452
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8453,
      8453
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      111
    ]
  ],
  [
    [
      8454,
      8454
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      117
    ]
  ],
  [
    [
      8455,
      8455
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      8456,
      8456
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8457,
      8457
    ],
    "mapped",
    [
      176,
      102
    ]
  ],
  [
    [
      8458,
      8458
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      8459,
      8462
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8463,
      8463
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      8464,
      8465
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8466,
      8467
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8468,
      8468
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8469,
      8469
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8470,
      8470
    ],
    "mapped",
    [
      110,
      111
    ]
  ],
  [
    [
      8471,
      8472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8473,
      8473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8474,
      8474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      8475,
      8477
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      8478,
      8479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8480,
      8480
    ],
    "mapped",
    [
      115,
      109
    ]
  ],
  [
    [
      8481,
      8481
    ],
    "mapped",
    [
      116,
      101,
      108
    ]
  ],
  [
    [
      8482,
      8482
    ],
    "mapped",
    [
      116,
      109
    ]
  ],
  [
    [
      8483,
      8483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8484,
      8484
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8485,
      8485
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8486,
      8486
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      8487,
      8487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8488,
      8488
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8489,
      8489
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8490,
      8490
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8491,
      8491
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      8492,
      8492
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      8493,
      8493
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8494,
      8494
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8495,
      8496
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8497,
      8497
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      8498,
      8498
    ],
    "disallowed"
  ],
  [
    [
      8499,
      8499
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8500,
      8500
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8501,
      8501
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      8502,
      8502
    ],
    "mapped",
    [
      1489
    ]
  ],
  [
    [
      8503,
      8503
    ],
    "mapped",
    [
      1490
    ]
  ],
  [
    [
      8504,
      8504
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      8505,
      8505
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8506,
      8506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8507,
      8507
    ],
    "mapped",
    [
      102,
      97,
      120
    ]
  ],
  [
    [
      8508,
      8508
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8509,
      8510
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      8511,
      8511
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8512,
      8512
    ],
    "mapped",
    [
      8721
    ]
  ],
  [
    [
      8513,
      8516
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8517,
      8518
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8519,
      8519
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8520,
      8520
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8521,
      8521
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      8522,
      8523
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8524,
      8524
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8525,
      8525
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8526,
      8526
    ],
    "valid"
  ],
  [
    [
      8527,
      8527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8528,
      8528
    ],
    "mapped",
    [
      49,
      8260,
      55
    ]
  ],
  [
    [
      8529,
      8529
    ],
    "mapped",
    [
      49,
      8260,
      57
    ]
  ],
  [
    [
      8530,
      8530
    ],
    "mapped",
    [
      49,
      8260,
      49,
      48
    ]
  ],
  [
    [
      8531,
      8531
    ],
    "mapped",
    [
      49,
      8260,
      51
    ]
  ],
  [
    [
      8532,
      8532
    ],
    "mapped",
    [
      50,
      8260,
      51
    ]
  ],
  [
    [
      8533,
      8533
    ],
    "mapped",
    [
      49,
      8260,
      53
    ]
  ],
  [
    [
      8534,
      8534
    ],
    "mapped",
    [
      50,
      8260,
      53
    ]
  ],
  [
    [
      8535,
      8535
    ],
    "mapped",
    [
      51,
      8260,
      53
    ]
  ],
  [
    [
      8536,
      8536
    ],
    "mapped",
    [
      52,
      8260,
      53
    ]
  ],
  [
    [
      8537,
      8537
    ],
    "mapped",
    [
      49,
      8260,
      54
    ]
  ],
  [
    [
      8538,
      8538
    ],
    "mapped",
    [
      53,
      8260,
      54
    ]
  ],
  [
    [
      8539,
      8539
    ],
    "mapped",
    [
      49,
      8260,
      56
    ]
  ],
  [
    [
      8540,
      8540
    ],
    "mapped",
    [
      51,
      8260,
      56
    ]
  ],
  [
    [
      8541,
      8541
    ],
    "mapped",
    [
      53,
      8260,
      56
    ]
  ],
  [
    [
      8542,
      8542
    ],
    "mapped",
    [
      55,
      8260,
      56
    ]
  ],
  [
    [
      8543,
      8543
    ],
    "mapped",
    [
      49,
      8260
    ]
  ],
  [
    [
      8544,
      8544
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8545,
      8545
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8546,
      8546
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8547,
      8547
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8548,
      8548
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8549,
      8549
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8550,
      8550
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8551,
      8551
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8552,
      8552
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8553,
      8553
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8554,
      8554
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8555,
      8555
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8556,
      8556
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8557,
      8557
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8558,
      8558
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8559,
      8559
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8560,
      8560
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8561,
      8561
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8562,
      8562
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8563,
      8563
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8564,
      8564
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8565,
      8565
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8566,
      8566
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8567,
      8567
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8568,
      8568
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8569,
      8569
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8570,
      8570
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8571,
      8571
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8572,
      8572
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8573,
      8573
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8574,
      8574
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8575,
      8575
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8576,
      8578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8579,
      8579
    ],
    "disallowed"
  ],
  [
    [
      8580,
      8580
    ],
    "valid"
  ],
  [
    [
      8581,
      8584
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8585,
      8585
    ],
    "mapped",
    [
      48,
      8260,
      51
    ]
  ],
  [
    [
      8586,
      8587
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8588,
      8591
    ],
    "disallowed"
  ],
  [
    [
      8592,
      8682
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8683,
      8691
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8692,
      8703
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8704,
      8747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8748,
      8748
    ],
    "mapped",
    [
      8747,
      8747
    ]
  ],
  [
    [
      8749,
      8749
    ],
    "mapped",
    [
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      8750,
      8750
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8751,
      8751
    ],
    "mapped",
    [
      8750,
      8750
    ]
  ],
  [
    [
      8752,
      8752
    ],
    "mapped",
    [
      8750,
      8750,
      8750
    ]
  ],
  [
    [
      8753,
      8799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8800,
      8800
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8801,
      8813
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8814,
      8815
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8816,
      8945
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8946,
      8959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8960,
      8960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8961,
      8961
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8962,
      9e3
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9001,
      9001
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      9002,
      9002
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      9003,
      9082
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9083,
      9083
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9084,
      9084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9085,
      9114
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9115,
      9166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9167,
      9168
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9169,
      9179
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9180,
      9191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9192,
      9192
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9193,
      9203
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9204,
      9210
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9211,
      9215
    ],
    "disallowed"
  ],
  [
    [
      9216,
      9252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9253,
      9254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9255,
      9279
    ],
    "disallowed"
  ],
  [
    [
      9280,
      9290
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9291,
      9311
    ],
    "disallowed"
  ],
  [
    [
      9312,
      9312
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      9313,
      9313
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      9314,
      9314
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      9315,
      9315
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      9316,
      9316
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      9317,
      9317
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      9318,
      9318
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      9319,
      9319
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      9320,
      9320
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      9321,
      9321
    ],
    "mapped",
    [
      49,
      48
    ]
  ],
  [
    [
      9322,
      9322
    ],
    "mapped",
    [
      49,
      49
    ]
  ],
  [
    [
      9323,
      9323
    ],
    "mapped",
    [
      49,
      50
    ]
  ],
  [
    [
      9324,
      9324
    ],
    "mapped",
    [
      49,
      51
    ]
  ],
  [
    [
      9325,
      9325
    ],
    "mapped",
    [
      49,
      52
    ]
  ],
  [
    [
      9326,
      9326
    ],
    "mapped",
    [
      49,
      53
    ]
  ],
  [
    [
      9327,
      9327
    ],
    "mapped",
    [
      49,
      54
    ]
  ],
  [
    [
      9328,
      9328
    ],
    "mapped",
    [
      49,
      55
    ]
  ],
  [
    [
      9329,
      9329
    ],
    "mapped",
    [
      49,
      56
    ]
  ],
  [
    [
      9330,
      9330
    ],
    "mapped",
    [
      49,
      57
    ]
  ],
  [
    [
      9331,
      9331
    ],
    "mapped",
    [
      50,
      48
    ]
  ],
  [
    [
      9332,
      9332
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      41
    ]
  ],
  [
    [
      9333,
      9333
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      41
    ]
  ],
  [
    [
      9334,
      9334
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51,
      41
    ]
  ],
  [
    [
      9335,
      9335
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52,
      41
    ]
  ],
  [
    [
      9336,
      9336
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53,
      41
    ]
  ],
  [
    [
      9337,
      9337
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54,
      41
    ]
  ],
  [
    [
      9338,
      9338
    ],
    "disallowed_STD3_mapped",
    [
      40,
      55,
      41
    ]
  ],
  [
    [
      9339,
      9339
    ],
    "disallowed_STD3_mapped",
    [
      40,
      56,
      41
    ]
  ],
  [
    [
      9340,
      9340
    ],
    "disallowed_STD3_mapped",
    [
      40,
      57,
      41
    ]
  ],
  [
    [
      9341,
      9341
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      48,
      41
    ]
  ],
  [
    [
      9342,
      9342
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      49,
      41
    ]
  ],
  [
    [
      9343,
      9343
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      50,
      41
    ]
  ],
  [
    [
      9344,
      9344
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      51,
      41
    ]
  ],
  [
    [
      9345,
      9345
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      52,
      41
    ]
  ],
  [
    [
      9346,
      9346
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      53,
      41
    ]
  ],
  [
    [
      9347,
      9347
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      54,
      41
    ]
  ],
  [
    [
      9348,
      9348
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      55,
      41
    ]
  ],
  [
    [
      9349,
      9349
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      56,
      41
    ]
  ],
  [
    [
      9350,
      9350
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      57,
      41
    ]
  ],
  [
    [
      9351,
      9351
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      48,
      41
    ]
  ],
  [
    [
      9352,
      9371
    ],
    "disallowed"
  ],
  [
    [
      9372,
      9372
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      9373,
      9373
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      9374,
      9374
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      9375,
      9375
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      9376,
      9376
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      9377,
      9377
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      9378,
      9378
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      9379,
      9379
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      9380,
      9380
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      9381,
      9381
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      9382,
      9382
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      9383,
      9383
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      9384,
      9384
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      9385,
      9385
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      9386,
      9386
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      9387,
      9387
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      9388,
      9388
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      9389,
      9389
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      9390,
      9390
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      9391,
      9391
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      9392,
      9392
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      9393,
      9393
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      9394,
      9394
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      9395,
      9395
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      9396,
      9396
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      9397,
      9397
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      9398,
      9398
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9399,
      9399
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9400,
      9400
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9401,
      9401
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9402,
      9402
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9403,
      9403
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9404,
      9404
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9405,
      9405
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9406,
      9406
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9407,
      9407
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9408,
      9408
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9409,
      9409
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9410,
      9410
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9411,
      9411
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9412,
      9412
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9413,
      9413
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9414,
      9414
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9415,
      9415
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9416,
      9416
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9417,
      9417
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9418,
      9418
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9419,
      9419
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9420,
      9420
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9421,
      9421
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9422,
      9422
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9423,
      9423
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9424,
      9424
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9425,
      9425
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9426,
      9426
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9427,
      9427
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9428,
      9428
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9429,
      9429
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9430,
      9430
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9431,
      9431
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9432,
      9432
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9433,
      9433
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9434,
      9434
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9435,
      9435
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9436,
      9436
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9437,
      9437
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9438,
      9438
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9439,
      9439
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9440,
      9440
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9441,
      9441
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9442,
      9442
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9443,
      9443
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9444,
      9444
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9445,
      9445
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9446,
      9446
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9447,
      9447
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9448,
      9448
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9449,
      9449
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9450,
      9450
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      9451,
      9470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9471,
      9471
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9472,
      9621
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9622,
      9631
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9632,
      9711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9712,
      9719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9720,
      9727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9728,
      9747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9748,
      9749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9750,
      9751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9752,
      9752
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9753,
      9753
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9754,
      9839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9840,
      9841
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9842,
      9853
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9854,
      9855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9856,
      9865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9866,
      9873
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9874,
      9884
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9885,
      9885
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9886,
      9887
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9888,
      9889
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9890,
      9905
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9906,
      9906
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9907,
      9916
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9917,
      9919
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9920,
      9923
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9924,
      9933
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9934,
      9934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9935,
      9953
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9954,
      9954
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9955,
      9955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9956,
      9959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9960,
      9983
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9984,
      9984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9985,
      9988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9989,
      9989
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9990,
      9993
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9994,
      9995
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9996,
      10023
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10024,
      10024
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10025,
      10059
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10060,
      10060
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10061,
      10061
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10062,
      10062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10063,
      10066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10067,
      10069
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10070,
      10070
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10071,
      10071
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10072,
      10078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10079,
      10080
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10081,
      10087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10088,
      10101
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10102,
      10132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10133,
      10135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10136,
      10159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10160,
      10160
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10161,
      10174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10175,
      10175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10176,
      10182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10183,
      10186
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10187,
      10187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10188,
      10188
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10189,
      10189
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10190,
      10191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10192,
      10219
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10220,
      10223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10224,
      10239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10240,
      10495
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10496,
      10763
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10764,
      10764
    ],
    "mapped",
    [
      8747,
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      10765,
      10867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10868,
      10868
    ],
    "disallowed_STD3_mapped",
    [
      58,
      58,
      61
    ]
  ],
  [
    [
      10869,
      10869
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61
    ]
  ],
  [
    [
      10870,
      10870
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61,
      61
    ]
  ],
  [
    [
      10871,
      10971
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10972,
      10972
    ],
    "mapped",
    [
      10973,
      824
    ]
  ],
  [
    [
      10973,
      11007
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11008,
      11021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11022,
      11027
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11028,
      11034
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11035,
      11039
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11040,
      11043
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11044,
      11084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11085,
      11087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11088,
      11092
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11093,
      11097
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11098,
      11123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11124,
      11125
    ],
    "disallowed"
  ],
  [
    [
      11126,
      11157
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11158,
      11159
    ],
    "disallowed"
  ],
  [
    [
      11160,
      11193
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11194,
      11196
    ],
    "disallowed"
  ],
  [
    [
      11197,
      11208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11209,
      11209
    ],
    "disallowed"
  ],
  [
    [
      11210,
      11217
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11218,
      11243
    ],
    "disallowed"
  ],
  [
    [
      11244,
      11247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11248,
      11263
    ],
    "disallowed"
  ],
  [
    [
      11264,
      11264
    ],
    "mapped",
    [
      11312
    ]
  ],
  [
    [
      11265,
      11265
    ],
    "mapped",
    [
      11313
    ]
  ],
  [
    [
      11266,
      11266
    ],
    "mapped",
    [
      11314
    ]
  ],
  [
    [
      11267,
      11267
    ],
    "mapped",
    [
      11315
    ]
  ],
  [
    [
      11268,
      11268
    ],
    "mapped",
    [
      11316
    ]
  ],
  [
    [
      11269,
      11269
    ],
    "mapped",
    [
      11317
    ]
  ],
  [
    [
      11270,
      11270
    ],
    "mapped",
    [
      11318
    ]
  ],
  [
    [
      11271,
      11271
    ],
    "mapped",
    [
      11319
    ]
  ],
  [
    [
      11272,
      11272
    ],
    "mapped",
    [
      11320
    ]
  ],
  [
    [
      11273,
      11273
    ],
    "mapped",
    [
      11321
    ]
  ],
  [
    [
      11274,
      11274
    ],
    "mapped",
    [
      11322
    ]
  ],
  [
    [
      11275,
      11275
    ],
    "mapped",
    [
      11323
    ]
  ],
  [
    [
      11276,
      11276
    ],
    "mapped",
    [
      11324
    ]
  ],
  [
    [
      11277,
      11277
    ],
    "mapped",
    [
      11325
    ]
  ],
  [
    [
      11278,
      11278
    ],
    "mapped",
    [
      11326
    ]
  ],
  [
    [
      11279,
      11279
    ],
    "mapped",
    [
      11327
    ]
  ],
  [
    [
      11280,
      11280
    ],
    "mapped",
    [
      11328
    ]
  ],
  [
    [
      11281,
      11281
    ],
    "mapped",
    [
      11329
    ]
  ],
  [
    [
      11282,
      11282
    ],
    "mapped",
    [
      11330
    ]
  ],
  [
    [
      11283,
      11283
    ],
    "mapped",
    [
      11331
    ]
  ],
  [
    [
      11284,
      11284
    ],
    "mapped",
    [
      11332
    ]
  ],
  [
    [
      11285,
      11285
    ],
    "mapped",
    [
      11333
    ]
  ],
  [
    [
      11286,
      11286
    ],
    "mapped",
    [
      11334
    ]
  ],
  [
    [
      11287,
      11287
    ],
    "mapped",
    [
      11335
    ]
  ],
  [
    [
      11288,
      11288
    ],
    "mapped",
    [
      11336
    ]
  ],
  [
    [
      11289,
      11289
    ],
    "mapped",
    [
      11337
    ]
  ],
  [
    [
      11290,
      11290
    ],
    "mapped",
    [
      11338
    ]
  ],
  [
    [
      11291,
      11291
    ],
    "mapped",
    [
      11339
    ]
  ],
  [
    [
      11292,
      11292
    ],
    "mapped",
    [
      11340
    ]
  ],
  [
    [
      11293,
      11293
    ],
    "mapped",
    [
      11341
    ]
  ],
  [
    [
      11294,
      11294
    ],
    "mapped",
    [
      11342
    ]
  ],
  [
    [
      11295,
      11295
    ],
    "mapped",
    [
      11343
    ]
  ],
  [
    [
      11296,
      11296
    ],
    "mapped",
    [
      11344
    ]
  ],
  [
    [
      11297,
      11297
    ],
    "mapped",
    [
      11345
    ]
  ],
  [
    [
      11298,
      11298
    ],
    "mapped",
    [
      11346
    ]
  ],
  [
    [
      11299,
      11299
    ],
    "mapped",
    [
      11347
    ]
  ],
  [
    [
      11300,
      11300
    ],
    "mapped",
    [
      11348
    ]
  ],
  [
    [
      11301,
      11301
    ],
    "mapped",
    [
      11349
    ]
  ],
  [
    [
      11302,
      11302
    ],
    "mapped",
    [
      11350
    ]
  ],
  [
    [
      11303,
      11303
    ],
    "mapped",
    [
      11351
    ]
  ],
  [
    [
      11304,
      11304
    ],
    "mapped",
    [
      11352
    ]
  ],
  [
    [
      11305,
      11305
    ],
    "mapped",
    [
      11353
    ]
  ],
  [
    [
      11306,
      11306
    ],
    "mapped",
    [
      11354
    ]
  ],
  [
    [
      11307,
      11307
    ],
    "mapped",
    [
      11355
    ]
  ],
  [
    [
      11308,
      11308
    ],
    "mapped",
    [
      11356
    ]
  ],
  [
    [
      11309,
      11309
    ],
    "mapped",
    [
      11357
    ]
  ],
  [
    [
      11310,
      11310
    ],
    "mapped",
    [
      11358
    ]
  ],
  [
    [
      11311,
      11311
    ],
    "disallowed"
  ],
  [
    [
      11312,
      11358
    ],
    "valid"
  ],
  [
    [
      11359,
      11359
    ],
    "disallowed"
  ],
  [
    [
      11360,
      11360
    ],
    "mapped",
    [
      11361
    ]
  ],
  [
    [
      11361,
      11361
    ],
    "valid"
  ],
  [
    [
      11362,
      11362
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      11363,
      11363
    ],
    "mapped",
    [
      7549
    ]
  ],
  [
    [
      11364,
      11364
    ],
    "mapped",
    [
      637
    ]
  ],
  [
    [
      11365,
      11366
    ],
    "valid"
  ],
  [
    [
      11367,
      11367
    ],
    "mapped",
    [
      11368
    ]
  ],
  [
    [
      11368,
      11368
    ],
    "valid"
  ],
  [
    [
      11369,
      11369
    ],
    "mapped",
    [
      11370
    ]
  ],
  [
    [
      11370,
      11370
    ],
    "valid"
  ],
  [
    [
      11371,
      11371
    ],
    "mapped",
    [
      11372
    ]
  ],
  [
    [
      11372,
      11372
    ],
    "valid"
  ],
  [
    [
      11373,
      11373
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      11374,
      11374
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      11375,
      11375
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      11376,
      11376
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      11377,
      11377
    ],
    "valid"
  ],
  [
    [
      11378,
      11378
    ],
    "mapped",
    [
      11379
    ]
  ],
  [
    [
      11379,
      11379
    ],
    "valid"
  ],
  [
    [
      11380,
      11380
    ],
    "valid"
  ],
  [
    [
      11381,
      11381
    ],
    "mapped",
    [
      11382
    ]
  ],
  [
    [
      11382,
      11383
    ],
    "valid"
  ],
  [
    [
      11384,
      11387
    ],
    "valid"
  ],
  [
    [
      11388,
      11388
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      11389,
      11389
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      11390,
      11390
    ],
    "mapped",
    [
      575
    ]
  ],
  [
    [
      11391,
      11391
    ],
    "mapped",
    [
      576
    ]
  ],
  [
    [
      11392,
      11392
    ],
    "mapped",
    [
      11393
    ]
  ],
  [
    [
      11393,
      11393
    ],
    "valid"
  ],
  [
    [
      11394,
      11394
    ],
    "mapped",
    [
      11395
    ]
  ],
  [
    [
      11395,
      11395
    ],
    "valid"
  ],
  [
    [
      11396,
      11396
    ],
    "mapped",
    [
      11397
    ]
  ],
  [
    [
      11397,
      11397
    ],
    "valid"
  ],
  [
    [
      11398,
      11398
    ],
    "mapped",
    [
      11399
    ]
  ],
  [
    [
      11399,
      11399
    ],
    "valid"
  ],
  [
    [
      11400,
      11400
    ],
    "mapped",
    [
      11401
    ]
  ],
  [
    [
      11401,
      11401
    ],
    "valid"
  ],
  [
    [
      11402,
      11402
    ],
    "mapped",
    [
      11403
    ]
  ],
  [
    [
      11403,
      11403
    ],
    "valid"
  ],
  [
    [
      11404,
      11404
    ],
    "mapped",
    [
      11405
    ]
  ],
  [
    [
      11405,
      11405
    ],
    "valid"
  ],
  [
    [
      11406,
      11406
    ],
    "mapped",
    [
      11407
    ]
  ],
  [
    [
      11407,
      11407
    ],
    "valid"
  ],
  [
    [
      11408,
      11408
    ],
    "mapped",
    [
      11409
    ]
  ],
  [
    [
      11409,
      11409
    ],
    "valid"
  ],
  [
    [
      11410,
      11410
    ],
    "mapped",
    [
      11411
    ]
  ],
  [
    [
      11411,
      11411
    ],
    "valid"
  ],
  [
    [
      11412,
      11412
    ],
    "mapped",
    [
      11413
    ]
  ],
  [
    [
      11413,
      11413
    ],
    "valid"
  ],
  [
    [
      11414,
      11414
    ],
    "mapped",
    [
      11415
    ]
  ],
  [
    [
      11415,
      11415
    ],
    "valid"
  ],
  [
    [
      11416,
      11416
    ],
    "mapped",
    [
      11417
    ]
  ],
  [
    [
      11417,
      11417
    ],
    "valid"
  ],
  [
    [
      11418,
      11418
    ],
    "mapped",
    [
      11419
    ]
  ],
  [
    [
      11419,
      11419
    ],
    "valid"
  ],
  [
    [
      11420,
      11420
    ],
    "mapped",
    [
      11421
    ]
  ],
  [
    [
      11421,
      11421
    ],
    "valid"
  ],
  [
    [
      11422,
      11422
    ],
    "mapped",
    [
      11423
    ]
  ],
  [
    [
      11423,
      11423
    ],
    "valid"
  ],
  [
    [
      11424,
      11424
    ],
    "mapped",
    [
      11425
    ]
  ],
  [
    [
      11425,
      11425
    ],
    "valid"
  ],
  [
    [
      11426,
      11426
    ],
    "mapped",
    [
      11427
    ]
  ],
  [
    [
      11427,
      11427
    ],
    "valid"
  ],
  [
    [
      11428,
      11428
    ],
    "mapped",
    [
      11429
    ]
  ],
  [
    [
      11429,
      11429
    ],
    "valid"
  ],
  [
    [
      11430,
      11430
    ],
    "mapped",
    [
      11431
    ]
  ],
  [
    [
      11431,
      11431
    ],
    "valid"
  ],
  [
    [
      11432,
      11432
    ],
    "mapped",
    [
      11433
    ]
  ],
  [
    [
      11433,
      11433
    ],
    "valid"
  ],
  [
    [
      11434,
      11434
    ],
    "mapped",
    [
      11435
    ]
  ],
  [
    [
      11435,
      11435
    ],
    "valid"
  ],
  [
    [
      11436,
      11436
    ],
    "mapped",
    [
      11437
    ]
  ],
  [
    [
      11437,
      11437
    ],
    "valid"
  ],
  [
    [
      11438,
      11438
    ],
    "mapped",
    [
      11439
    ]
  ],
  [
    [
      11439,
      11439
    ],
    "valid"
  ],
  [
    [
      11440,
      11440
    ],
    "mapped",
    [
      11441
    ]
  ],
  [
    [
      11441,
      11441
    ],
    "valid"
  ],
  [
    [
      11442,
      11442
    ],
    "mapped",
    [
      11443
    ]
  ],
  [
    [
      11443,
      11443
    ],
    "valid"
  ],
  [
    [
      11444,
      11444
    ],
    "mapped",
    [
      11445
    ]
  ],
  [
    [
      11445,
      11445
    ],
    "valid"
  ],
  [
    [
      11446,
      11446
    ],
    "mapped",
    [
      11447
    ]
  ],
  [
    [
      11447,
      11447
    ],
    "valid"
  ],
  [
    [
      11448,
      11448
    ],
    "mapped",
    [
      11449
    ]
  ],
  [
    [
      11449,
      11449
    ],
    "valid"
  ],
  [
    [
      11450,
      11450
    ],
    "mapped",
    [
      11451
    ]
  ],
  [
    [
      11451,
      11451
    ],
    "valid"
  ],
  [
    [
      11452,
      11452
    ],
    "mapped",
    [
      11453
    ]
  ],
  [
    [
      11453,
      11453
    ],
    "valid"
  ],
  [
    [
      11454,
      11454
    ],
    "mapped",
    [
      11455
    ]
  ],
  [
    [
      11455,
      11455
    ],
    "valid"
  ],
  [
    [
      11456,
      11456
    ],
    "mapped",
    [
      11457
    ]
  ],
  [
    [
      11457,
      11457
    ],
    "valid"
  ],
  [
    [
      11458,
      11458
    ],
    "mapped",
    [
      11459
    ]
  ],
  [
    [
      11459,
      11459
    ],
    "valid"
  ],
  [
    [
      11460,
      11460
    ],
    "mapped",
    [
      11461
    ]
  ],
  [
    [
      11461,
      11461
    ],
    "valid"
  ],
  [
    [
      11462,
      11462
    ],
    "mapped",
    [
      11463
    ]
  ],
  [
    [
      11463,
      11463
    ],
    "valid"
  ],
  [
    [
      11464,
      11464
    ],
    "mapped",
    [
      11465
    ]
  ],
  [
    [
      11465,
      11465
    ],
    "valid"
  ],
  [
    [
      11466,
      11466
    ],
    "mapped",
    [
      11467
    ]
  ],
  [
    [
      11467,
      11467
    ],
    "valid"
  ],
  [
    [
      11468,
      11468
    ],
    "mapped",
    [
      11469
    ]
  ],
  [
    [
      11469,
      11469
    ],
    "valid"
  ],
  [
    [
      11470,
      11470
    ],
    "mapped",
    [
      11471
    ]
  ],
  [
    [
      11471,
      11471
    ],
    "valid"
  ],
  [
    [
      11472,
      11472
    ],
    "mapped",
    [
      11473
    ]
  ],
  [
    [
      11473,
      11473
    ],
    "valid"
  ],
  [
    [
      11474,
      11474
    ],
    "mapped",
    [
      11475
    ]
  ],
  [
    [
      11475,
      11475
    ],
    "valid"
  ],
  [
    [
      11476,
      11476
    ],
    "mapped",
    [
      11477
    ]
  ],
  [
    [
      11477,
      11477
    ],
    "valid"
  ],
  [
    [
      11478,
      11478
    ],
    "mapped",
    [
      11479
    ]
  ],
  [
    [
      11479,
      11479
    ],
    "valid"
  ],
  [
    [
      11480,
      11480
    ],
    "mapped",
    [
      11481
    ]
  ],
  [
    [
      11481,
      11481
    ],
    "valid"
  ],
  [
    [
      11482,
      11482
    ],
    "mapped",
    [
      11483
    ]
  ],
  [
    [
      11483,
      11483
    ],
    "valid"
  ],
  [
    [
      11484,
      11484
    ],
    "mapped",
    [
      11485
    ]
  ],
  [
    [
      11485,
      11485
    ],
    "valid"
  ],
  [
    [
      11486,
      11486
    ],
    "mapped",
    [
      11487
    ]
  ],
  [
    [
      11487,
      11487
    ],
    "valid"
  ],
  [
    [
      11488,
      11488
    ],
    "mapped",
    [
      11489
    ]
  ],
  [
    [
      11489,
      11489
    ],
    "valid"
  ],
  [
    [
      11490,
      11490
    ],
    "mapped",
    [
      11491
    ]
  ],
  [
    [
      11491,
      11492
    ],
    "valid"
  ],
  [
    [
      11493,
      11498
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11499,
      11499
    ],
    "mapped",
    [
      11500
    ]
  ],
  [
    [
      11500,
      11500
    ],
    "valid"
  ],
  [
    [
      11501,
      11501
    ],
    "mapped",
    [
      11502
    ]
  ],
  [
    [
      11502,
      11505
    ],
    "valid"
  ],
  [
    [
      11506,
      11506
    ],
    "mapped",
    [
      11507
    ]
  ],
  [
    [
      11507,
      11507
    ],
    "valid"
  ],
  [
    [
      11508,
      11512
    ],
    "disallowed"
  ],
  [
    [
      11513,
      11519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11520,
      11557
    ],
    "valid"
  ],
  [
    [
      11558,
      11558
    ],
    "disallowed"
  ],
  [
    [
      11559,
      11559
    ],
    "valid"
  ],
  [
    [
      11560,
      11564
    ],
    "disallowed"
  ],
  [
    [
      11565,
      11565
    ],
    "valid"
  ],
  [
    [
      11566,
      11567
    ],
    "disallowed"
  ],
  [
    [
      11568,
      11621
    ],
    "valid"
  ],
  [
    [
      11622,
      11623
    ],
    "valid"
  ],
  [
    [
      11624,
      11630
    ],
    "disallowed"
  ],
  [
    [
      11631,
      11631
    ],
    "mapped",
    [
      11617
    ]
  ],
  [
    [
      11632,
      11632
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11633,
      11646
    ],
    "disallowed"
  ],
  [
    [
      11647,
      11647
    ],
    "valid"
  ],
  [
    [
      11648,
      11670
    ],
    "valid"
  ],
  [
    [
      11671,
      11679
    ],
    "disallowed"
  ],
  [
    [
      11680,
      11686
    ],
    "valid"
  ],
  [
    [
      11687,
      11687
    ],
    "disallowed"
  ],
  [
    [
      11688,
      11694
    ],
    "valid"
  ],
  [
    [
      11695,
      11695
    ],
    "disallowed"
  ],
  [
    [
      11696,
      11702
    ],
    "valid"
  ],
  [
    [
      11703,
      11703
    ],
    "disallowed"
  ],
  [
    [
      11704,
      11710
    ],
    "valid"
  ],
  [
    [
      11711,
      11711
    ],
    "disallowed"
  ],
  [
    [
      11712,
      11718
    ],
    "valid"
  ],
  [
    [
      11719,
      11719
    ],
    "disallowed"
  ],
  [
    [
      11720,
      11726
    ],
    "valid"
  ],
  [
    [
      11727,
      11727
    ],
    "disallowed"
  ],
  [
    [
      11728,
      11734
    ],
    "valid"
  ],
  [
    [
      11735,
      11735
    ],
    "disallowed"
  ],
  [
    [
      11736,
      11742
    ],
    "valid"
  ],
  [
    [
      11743,
      11743
    ],
    "disallowed"
  ],
  [
    [
      11744,
      11775
    ],
    "valid"
  ],
  [
    [
      11776,
      11799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11800,
      11803
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11804,
      11805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11806,
      11822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11823,
      11823
    ],
    "valid"
  ],
  [
    [
      11824,
      11824
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11825,
      11825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11826,
      11835
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11836,
      11842
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11843,
      11903
    ],
    "disallowed"
  ],
  [
    [
      11904,
      11929
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11930,
      11930
    ],
    "disallowed"
  ],
  [
    [
      11931,
      11934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11935,
      11935
    ],
    "mapped",
    [
      27597
    ]
  ],
  [
    [
      11936,
      12018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12019,
      12019
    ],
    "mapped",
    [
      40863
    ]
  ],
  [
    [
      12020,
      12031
    ],
    "disallowed"
  ],
  [
    [
      12032,
      12032
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12033,
      12033
    ],
    "mapped",
    [
      20008
    ]
  ],
  [
    [
      12034,
      12034
    ],
    "mapped",
    [
      20022
    ]
  ],
  [
    [
      12035,
      12035
    ],
    "mapped",
    [
      20031
    ]
  ],
  [
    [
      12036,
      12036
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12037,
      12037
    ],
    "mapped",
    [
      20101
    ]
  ],
  [
    [
      12038,
      12038
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12039,
      12039
    ],
    "mapped",
    [
      20128
    ]
  ],
  [
    [
      12040,
      12040
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12041,
      12041
    ],
    "mapped",
    [
      20799
    ]
  ],
  [
    [
      12042,
      12042
    ],
    "mapped",
    [
      20837
    ]
  ],
  [
    [
      12043,
      12043
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12044,
      12044
    ],
    "mapped",
    [
      20866
    ]
  ],
  [
    [
      12045,
      12045
    ],
    "mapped",
    [
      20886
    ]
  ],
  [
    [
      12046,
      12046
    ],
    "mapped",
    [
      20907
    ]
  ],
  [
    [
      12047,
      12047
    ],
    "mapped",
    [
      20960
    ]
  ],
  [
    [
      12048,
      12048
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      12049,
      12049
    ],
    "mapped",
    [
      20992
    ]
  ],
  [
    [
      12050,
      12050
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      12051,
      12051
    ],
    "mapped",
    [
      21241
    ]
  ],
  [
    [
      12052,
      12052
    ],
    "mapped",
    [
      21269
    ]
  ],
  [
    [
      12053,
      12053
    ],
    "mapped",
    [
      21274
    ]
  ],
  [
    [
      12054,
      12054
    ],
    "mapped",
    [
      21304
    ]
  ],
  [
    [
      12055,
      12055
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12056,
      12056
    ],
    "mapped",
    [
      21340
    ]
  ],
  [
    [
      12057,
      12057
    ],
    "mapped",
    [
      21353
    ]
  ],
  [
    [
      12058,
      12058
    ],
    "mapped",
    [
      21378
    ]
  ],
  [
    [
      12059,
      12059
    ],
    "mapped",
    [
      21430
    ]
  ],
  [
    [
      12060,
      12060
    ],
    "mapped",
    [
      21448
    ]
  ],
  [
    [
      12061,
      12061
    ],
    "mapped",
    [
      21475
    ]
  ],
  [
    [
      12062,
      12062
    ],
    "mapped",
    [
      22231
    ]
  ],
  [
    [
      12063,
      12063
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12064,
      12064
    ],
    "mapped",
    [
      22763
    ]
  ],
  [
    [
      12065,
      12065
    ],
    "mapped",
    [
      22786
    ]
  ],
  [
    [
      12066,
      12066
    ],
    "mapped",
    [
      22794
    ]
  ],
  [
    [
      12067,
      12067
    ],
    "mapped",
    [
      22805
    ]
  ],
  [
    [
      12068,
      12068
    ],
    "mapped",
    [
      22823
    ]
  ],
  [
    [
      12069,
      12069
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12070,
      12070
    ],
    "mapped",
    [
      23376
    ]
  ],
  [
    [
      12071,
      12071
    ],
    "mapped",
    [
      23424
    ]
  ],
  [
    [
      12072,
      12072
    ],
    "mapped",
    [
      23544
    ]
  ],
  [
    [
      12073,
      12073
    ],
    "mapped",
    [
      23567
    ]
  ],
  [
    [
      12074,
      12074
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      12075,
      12075
    ],
    "mapped",
    [
      23608
    ]
  ],
  [
    [
      12076,
      12076
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      12077,
      12077
    ],
    "mapped",
    [
      23665
    ]
  ],
  [
    [
      12078,
      12078
    ],
    "mapped",
    [
      24027
    ]
  ],
  [
    [
      12079,
      12079
    ],
    "mapped",
    [
      24037
    ]
  ],
  [
    [
      12080,
      12080
    ],
    "mapped",
    [
      24049
    ]
  ],
  [
    [
      12081,
      12081
    ],
    "mapped",
    [
      24062
    ]
  ],
  [
    [
      12082,
      12082
    ],
    "mapped",
    [
      24178
    ]
  ],
  [
    [
      12083,
      12083
    ],
    "mapped",
    [
      24186
    ]
  ],
  [
    [
      12084,
      12084
    ],
    "mapped",
    [
      24191
    ]
  ],
  [
    [
      12085,
      12085
    ],
    "mapped",
    [
      24308
    ]
  ],
  [
    [
      12086,
      12086
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      12087,
      12087
    ],
    "mapped",
    [
      24331
    ]
  ],
  [
    [
      12088,
      12088
    ],
    "mapped",
    [
      24339
    ]
  ],
  [
    [
      12089,
      12089
    ],
    "mapped",
    [
      24400
    ]
  ],
  [
    [
      12090,
      12090
    ],
    "mapped",
    [
      24417
    ]
  ],
  [
    [
      12091,
      12091
    ],
    "mapped",
    [
      24435
    ]
  ],
  [
    [
      12092,
      12092
    ],
    "mapped",
    [
      24515
    ]
  ],
  [
    [
      12093,
      12093
    ],
    "mapped",
    [
      25096
    ]
  ],
  [
    [
      12094,
      12094
    ],
    "mapped",
    [
      25142
    ]
  ],
  [
    [
      12095,
      12095
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      12096,
      12096
    ],
    "mapped",
    [
      25903
    ]
  ],
  [
    [
      12097,
      12097
    ],
    "mapped",
    [
      25908
    ]
  ],
  [
    [
      12098,
      12098
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12099,
      12099
    ],
    "mapped",
    [
      26007
    ]
  ],
  [
    [
      12100,
      12100
    ],
    "mapped",
    [
      26020
    ]
  ],
  [
    [
      12101,
      12101
    ],
    "mapped",
    [
      26041
    ]
  ],
  [
    [
      12102,
      12102
    ],
    "mapped",
    [
      26080
    ]
  ],
  [
    [
      12103,
      12103
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12104,
      12104
    ],
    "mapped",
    [
      26352
    ]
  ],
  [
    [
      12105,
      12105
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12106,
      12106
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12107,
      12107
    ],
    "mapped",
    [
      27424
    ]
  ],
  [
    [
      12108,
      12108
    ],
    "mapped",
    [
      27490
    ]
  ],
  [
    [
      12109,
      12109
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      12110,
      12110
    ],
    "mapped",
    [
      27571
    ]
  ],
  [
    [
      12111,
      12111
    ],
    "mapped",
    [
      27595
    ]
  ],
  [
    [
      12112,
      12112
    ],
    "mapped",
    [
      27604
    ]
  ],
  [
    [
      12113,
      12113
    ],
    "mapped",
    [
      27611
    ]
  ],
  [
    [
      12114,
      12114
    ],
    "mapped",
    [
      27663
    ]
  ],
  [
    [
      12115,
      12115
    ],
    "mapped",
    [
      27668
    ]
  ],
  [
    [
      12116,
      12116
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12117,
      12117
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12118,
      12118
    ],
    "mapped",
    [
      29226
    ]
  ],
  [
    [
      12119,
      12119
    ],
    "mapped",
    [
      29238
    ]
  ],
  [
    [
      12120,
      12120
    ],
    "mapped",
    [
      29243
    ]
  ],
  [
    [
      12121,
      12121
    ],
    "mapped",
    [
      29247
    ]
  ],
  [
    [
      12122,
      12122
    ],
    "mapped",
    [
      29255
    ]
  ],
  [
    [
      12123,
      12123
    ],
    "mapped",
    [
      29273
    ]
  ],
  [
    [
      12124,
      12124
    ],
    "mapped",
    [
      29275
    ]
  ],
  [
    [
      12125,
      12125
    ],
    "mapped",
    [
      29356
    ]
  ],
  [
    [
      12126,
      12126
    ],
    "mapped",
    [
      29572
    ]
  ],
  [
    [
      12127,
      12127
    ],
    "mapped",
    [
      29577
    ]
  ],
  [
    [
      12128,
      12128
    ],
    "mapped",
    [
      29916
    ]
  ],
  [
    [
      12129,
      12129
    ],
    "mapped",
    [
      29926
    ]
  ],
  [
    [
      12130,
      12130
    ],
    "mapped",
    [
      29976
    ]
  ],
  [
    [
      12131,
      12131
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      12132,
      12132
    ],
    "mapped",
    [
      29992
    ]
  ],
  [
    [
      12133,
      12133
    ],
    "mapped",
    [
      3e4
    ]
  ],
  [
    [
      12134,
      12134
    ],
    "mapped",
    [
      30091
    ]
  ],
  [
    [
      12135,
      12135
    ],
    "mapped",
    [
      30098
    ]
  ],
  [
    [
      12136,
      12136
    ],
    "mapped",
    [
      30326
    ]
  ],
  [
    [
      12137,
      12137
    ],
    "mapped",
    [
      30333
    ]
  ],
  [
    [
      12138,
      12138
    ],
    "mapped",
    [
      30382
    ]
  ],
  [
    [
      12139,
      12139
    ],
    "mapped",
    [
      30399
    ]
  ],
  [
    [
      12140,
      12140
    ],
    "mapped",
    [
      30446
    ]
  ],
  [
    [
      12141,
      12141
    ],
    "mapped",
    [
      30683
    ]
  ],
  [
    [
      12142,
      12142
    ],
    "mapped",
    [
      30690
    ]
  ],
  [
    [
      12143,
      12143
    ],
    "mapped",
    [
      30707
    ]
  ],
  [
    [
      12144,
      12144
    ],
    "mapped",
    [
      31034
    ]
  ],
  [
    [
      12145,
      12145
    ],
    "mapped",
    [
      31160
    ]
  ],
  [
    [
      12146,
      12146
    ],
    "mapped",
    [
      31166
    ]
  ],
  [
    [
      12147,
      12147
    ],
    "mapped",
    [
      31348
    ]
  ],
  [
    [
      12148,
      12148
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      12149,
      12149
    ],
    "mapped",
    [
      31481
    ]
  ],
  [
    [
      12150,
      12150
    ],
    "mapped",
    [
      31859
    ]
  ],
  [
    [
      12151,
      12151
    ],
    "mapped",
    [
      31992
    ]
  ],
  [
    [
      12152,
      12152
    ],
    "mapped",
    [
      32566
    ]
  ],
  [
    [
      12153,
      12153
    ],
    "mapped",
    [
      32593
    ]
  ],
  [
    [
      12154,
      12154
    ],
    "mapped",
    [
      32650
    ]
  ],
  [
    [
      12155,
      12155
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      12156,
      12156
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      12157,
      12157
    ],
    "mapped",
    [
      32780
    ]
  ],
  [
    [
      12158,
      12158
    ],
    "mapped",
    [
      32786
    ]
  ],
  [
    [
      12159,
      12159
    ],
    "mapped",
    [
      32819
    ]
  ],
  [
    [
      12160,
      12160
    ],
    "mapped",
    [
      32895
    ]
  ],
  [
    [
      12161,
      12161
    ],
    "mapped",
    [
      32905
    ]
  ],
  [
    [
      12162,
      12162
    ],
    "mapped",
    [
      33251
    ]
  ],
  [
    [
      12163,
      12163
    ],
    "mapped",
    [
      33258
    ]
  ],
  [
    [
      12164,
      12164
    ],
    "mapped",
    [
      33267
    ]
  ],
  [
    [
      12165,
      12165
    ],
    "mapped",
    [
      33276
    ]
  ],
  [
    [
      12166,
      12166
    ],
    "mapped",
    [
      33292
    ]
  ],
  [
    [
      12167,
      12167
    ],
    "mapped",
    [
      33307
    ]
  ],
  [
    [
      12168,
      12168
    ],
    "mapped",
    [
      33311
    ]
  ],
  [
    [
      12169,
      12169
    ],
    "mapped",
    [
      33390
    ]
  ],
  [
    [
      12170,
      12170
    ],
    "mapped",
    [
      33394
    ]
  ],
  [
    [
      12171,
      12171
    ],
    "mapped",
    [
      33400
    ]
  ],
  [
    [
      12172,
      12172
    ],
    "mapped",
    [
      34381
    ]
  ],
  [
    [
      12173,
      12173
    ],
    "mapped",
    [
      34411
    ]
  ],
  [
    [
      12174,
      12174
    ],
    "mapped",
    [
      34880
    ]
  ],
  [
    [
      12175,
      12175
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      12176,
      12176
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      12177,
      12177
    ],
    "mapped",
    [
      35198
    ]
  ],
  [
    [
      12178,
      12178
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      12179,
      12179
    ],
    "mapped",
    [
      35282
    ]
  ],
  [
    [
      12180,
      12180
    ],
    "mapped",
    [
      35328
    ]
  ],
  [
    [
      12181,
      12181
    ],
    "mapped",
    [
      35895
    ]
  ],
  [
    [
      12182,
      12182
    ],
    "mapped",
    [
      35910
    ]
  ],
  [
    [
      12183,
      12183
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      12184,
      12184
    ],
    "mapped",
    [
      35960
    ]
  ],
  [
    [
      12185,
      12185
    ],
    "mapped",
    [
      35997
    ]
  ],
  [
    [
      12186,
      12186
    ],
    "mapped",
    [
      36196
    ]
  ],
  [
    [
      12187,
      12187
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      12188,
      12188
    ],
    "mapped",
    [
      36275
    ]
  ],
  [
    [
      12189,
      12189
    ],
    "mapped",
    [
      36523
    ]
  ],
  [
    [
      12190,
      12190
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      12191,
      12191
    ],
    "mapped",
    [
      36763
    ]
  ],
  [
    [
      12192,
      12192
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      12193,
      12193
    ],
    "mapped",
    [
      36789
    ]
  ],
  [
    [
      12194,
      12194
    ],
    "mapped",
    [
      37009
    ]
  ],
  [
    [
      12195,
      12195
    ],
    "mapped",
    [
      37193
    ]
  ],
  [
    [
      12196,
      12196
    ],
    "mapped",
    [
      37318
    ]
  ],
  [
    [
      12197,
      12197
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      12198,
      12198
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12199,
      12199
    ],
    "mapped",
    [
      38263
    ]
  ],
  [
    [
      12200,
      12200
    ],
    "mapped",
    [
      38272
    ]
  ],
  [
    [
      12201,
      12201
    ],
    "mapped",
    [
      38428
    ]
  ],
  [
    [
      12202,
      12202
    ],
    "mapped",
    [
      38582
    ]
  ],
  [
    [
      12203,
      12203
    ],
    "mapped",
    [
      38585
    ]
  ],
  [
    [
      12204,
      12204
    ],
    "mapped",
    [
      38632
    ]
  ],
  [
    [
      12205,
      12205
    ],
    "mapped",
    [
      38737
    ]
  ],
  [
    [
      12206,
      12206
    ],
    "mapped",
    [
      38750
    ]
  ],
  [
    [
      12207,
      12207
    ],
    "mapped",
    [
      38754
    ]
  ],
  [
    [
      12208,
      12208
    ],
    "mapped",
    [
      38761
    ]
  ],
  [
    [
      12209,
      12209
    ],
    "mapped",
    [
      38859
    ]
  ],
  [
    [
      12210,
      12210
    ],
    "mapped",
    [
      38893
    ]
  ],
  [
    [
      12211,
      12211
    ],
    "mapped",
    [
      38899
    ]
  ],
  [
    [
      12212,
      12212
    ],
    "mapped",
    [
      38913
    ]
  ],
  [
    [
      12213,
      12213
    ],
    "mapped",
    [
      39080
    ]
  ],
  [
    [
      12214,
      12214
    ],
    "mapped",
    [
      39131
    ]
  ],
  [
    [
      12215,
      12215
    ],
    "mapped",
    [
      39135
    ]
  ],
  [
    [
      12216,
      12216
    ],
    "mapped",
    [
      39318
    ]
  ],
  [
    [
      12217,
      12217
    ],
    "mapped",
    [
      39321
    ]
  ],
  [
    [
      12218,
      12218
    ],
    "mapped",
    [
      39340
    ]
  ],
  [
    [
      12219,
      12219
    ],
    "mapped",
    [
      39592
    ]
  ],
  [
    [
      12220,
      12220
    ],
    "mapped",
    [
      39640
    ]
  ],
  [
    [
      12221,
      12221
    ],
    "mapped",
    [
      39647
    ]
  ],
  [
    [
      12222,
      12222
    ],
    "mapped",
    [
      39717
    ]
  ],
  [
    [
      12223,
      12223
    ],
    "mapped",
    [
      39727
    ]
  ],
  [
    [
      12224,
      12224
    ],
    "mapped",
    [
      39730
    ]
  ],
  [
    [
      12225,
      12225
    ],
    "mapped",
    [
      39740
    ]
  ],
  [
    [
      12226,
      12226
    ],
    "mapped",
    [
      39770
    ]
  ],
  [
    [
      12227,
      12227
    ],
    "mapped",
    [
      40165
    ]
  ],
  [
    [
      12228,
      12228
    ],
    "mapped",
    [
      40565
    ]
  ],
  [
    [
      12229,
      12229
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      12230,
      12230
    ],
    "mapped",
    [
      40613
    ]
  ],
  [
    [
      12231,
      12231
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      12232,
      12232
    ],
    "mapped",
    [
      40643
    ]
  ],
  [
    [
      12233,
      12233
    ],
    "mapped",
    [
      40653
    ]
  ],
  [
    [
      12234,
      12234
    ],
    "mapped",
    [
      40657
    ]
  ],
  [
    [
      12235,
      12235
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      12236,
      12236
    ],
    "mapped",
    [
      40701
    ]
  ],
  [
    [
      12237,
      12237
    ],
    "mapped",
    [
      40718
    ]
  ],
  [
    [
      12238,
      12238
    ],
    "mapped",
    [
      40723
    ]
  ],
  [
    [
      12239,
      12239
    ],
    "mapped",
    [
      40736
    ]
  ],
  [
    [
      12240,
      12240
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      12241,
      12241
    ],
    "mapped",
    [
      40778
    ]
  ],
  [
    [
      12242,
      12242
    ],
    "mapped",
    [
      40786
    ]
  ],
  [
    [
      12243,
      12243
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      12244,
      12244
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      12245,
      12245
    ],
    "mapped",
    [
      40864
    ]
  ],
  [
    [
      12246,
      12271
    ],
    "disallowed"
  ],
  [
    [
      12272,
      12283
    ],
    "disallowed"
  ],
  [
    [
      12284,
      12287
    ],
    "disallowed"
  ],
  [
    [
      12288,
      12288
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      12289,
      12289
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12290,
      12290
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      12291,
      12292
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12293,
      12295
    ],
    "valid"
  ],
  [
    [
      12296,
      12329
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12330,
      12333
    ],
    "valid"
  ],
  [
    [
      12334,
      12341
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12342,
      12342
    ],
    "mapped",
    [
      12306
    ]
  ],
  [
    [
      12343,
      12343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12344,
      12344
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12345,
      12345
    ],
    "mapped",
    [
      21316
    ]
  ],
  [
    [
      12346,
      12346
    ],
    "mapped",
    [
      21317
    ]
  ],
  [
    [
      12347,
      12347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12348,
      12348
    ],
    "valid"
  ],
  [
    [
      12349,
      12349
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12350,
      12350
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12351,
      12351
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12352,
      12352
    ],
    "disallowed"
  ],
  [
    [
      12353,
      12436
    ],
    "valid"
  ],
  [
    [
      12437,
      12438
    ],
    "valid"
  ],
  [
    [
      12439,
      12440
    ],
    "disallowed"
  ],
  [
    [
      12441,
      12442
    ],
    "valid"
  ],
  [
    [
      12443,
      12443
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12441
    ]
  ],
  [
    [
      12444,
      12444
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12442
    ]
  ],
  [
    [
      12445,
      12446
    ],
    "valid"
  ],
  [
    [
      12447,
      12447
    ],
    "mapped",
    [
      12424,
      12426
    ]
  ],
  [
    [
      12448,
      12448
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12449,
      12542
    ],
    "valid"
  ],
  [
    [
      12543,
      12543
    ],
    "mapped",
    [
      12467,
      12488
    ]
  ],
  [
    [
      12544,
      12548
    ],
    "disallowed"
  ],
  [
    [
      12549,
      12588
    ],
    "valid"
  ],
  [
    [
      12589,
      12589
    ],
    "valid"
  ],
  [
    [
      12590,
      12592
    ],
    "disallowed"
  ],
  [
    [
      12593,
      12593
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12594,
      12594
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      12595,
      12595
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      12596,
      12596
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12597,
      12597
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      12598,
      12598
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      12599,
      12599
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12600,
      12600
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      12601,
      12601
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12602,
      12602
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      12603,
      12603
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      12604,
      12604
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      12605,
      12605
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      12606,
      12606
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      12607,
      12607
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      12608,
      12608
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      12609,
      12609
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12610,
      12610
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12611,
      12611
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      12612,
      12612
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      12613,
      12613
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12614,
      12614
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      12615,
      12615
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12616,
      12616
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12617,
      12617
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      12618,
      12618
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12619,
      12619
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12620,
      12620
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12621,
      12621
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12622,
      12622
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12623,
      12623
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      12624,
      12624
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      12625,
      12625
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      12626,
      12626
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      12627,
      12627
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      12628,
      12628
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      12629,
      12629
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      12630,
      12630
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      12631,
      12631
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      12632,
      12632
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      12633,
      12633
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      12634,
      12634
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      12635,
      12635
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      12636,
      12636
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      12637,
      12637
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      12638,
      12638
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      12639,
      12639
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      12640,
      12640
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      12641,
      12641
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      12642,
      12642
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      12643,
      12643
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      12644,
      12644
    ],
    "disallowed"
  ],
  [
    [
      12645,
      12645
    ],
    "mapped",
    [
      4372
    ]
  ],
  [
    [
      12646,
      12646
    ],
    "mapped",
    [
      4373
    ]
  ],
  [
    [
      12647,
      12647
    ],
    "mapped",
    [
      4551
    ]
  ],
  [
    [
      12648,
      12648
    ],
    "mapped",
    [
      4552
    ]
  ],
  [
    [
      12649,
      12649
    ],
    "mapped",
    [
      4556
    ]
  ],
  [
    [
      12650,
      12650
    ],
    "mapped",
    [
      4558
    ]
  ],
  [
    [
      12651,
      12651
    ],
    "mapped",
    [
      4563
    ]
  ],
  [
    [
      12652,
      12652
    ],
    "mapped",
    [
      4567
    ]
  ],
  [
    [
      12653,
      12653
    ],
    "mapped",
    [
      4569
    ]
  ],
  [
    [
      12654,
      12654
    ],
    "mapped",
    [
      4380
    ]
  ],
  [
    [
      12655,
      12655
    ],
    "mapped",
    [
      4573
    ]
  ],
  [
    [
      12656,
      12656
    ],
    "mapped",
    [
      4575
    ]
  ],
  [
    [
      12657,
      12657
    ],
    "mapped",
    [
      4381
    ]
  ],
  [
    [
      12658,
      12658
    ],
    "mapped",
    [
      4382
    ]
  ],
  [
    [
      12659,
      12659
    ],
    "mapped",
    [
      4384
    ]
  ],
  [
    [
      12660,
      12660
    ],
    "mapped",
    [
      4386
    ]
  ],
  [
    [
      12661,
      12661
    ],
    "mapped",
    [
      4387
    ]
  ],
  [
    [
      12662,
      12662
    ],
    "mapped",
    [
      4391
    ]
  ],
  [
    [
      12663,
      12663
    ],
    "mapped",
    [
      4393
    ]
  ],
  [
    [
      12664,
      12664
    ],
    "mapped",
    [
      4395
    ]
  ],
  [
    [
      12665,
      12665
    ],
    "mapped",
    [
      4396
    ]
  ],
  [
    [
      12666,
      12666
    ],
    "mapped",
    [
      4397
    ]
  ],
  [
    [
      12667,
      12667
    ],
    "mapped",
    [
      4398
    ]
  ],
  [
    [
      12668,
      12668
    ],
    "mapped",
    [
      4399
    ]
  ],
  [
    [
      12669,
      12669
    ],
    "mapped",
    [
      4402
    ]
  ],
  [
    [
      12670,
      12670
    ],
    "mapped",
    [
      4406
    ]
  ],
  [
    [
      12671,
      12671
    ],
    "mapped",
    [
      4416
    ]
  ],
  [
    [
      12672,
      12672
    ],
    "mapped",
    [
      4423
    ]
  ],
  [
    [
      12673,
      12673
    ],
    "mapped",
    [
      4428
    ]
  ],
  [
    [
      12674,
      12674
    ],
    "mapped",
    [
      4593
    ]
  ],
  [
    [
      12675,
      12675
    ],
    "mapped",
    [
      4594
    ]
  ],
  [
    [
      12676,
      12676
    ],
    "mapped",
    [
      4439
    ]
  ],
  [
    [
      12677,
      12677
    ],
    "mapped",
    [
      4440
    ]
  ],
  [
    [
      12678,
      12678
    ],
    "mapped",
    [
      4441
    ]
  ],
  [
    [
      12679,
      12679
    ],
    "mapped",
    [
      4484
    ]
  ],
  [
    [
      12680,
      12680
    ],
    "mapped",
    [
      4485
    ]
  ],
  [
    [
      12681,
      12681
    ],
    "mapped",
    [
      4488
    ]
  ],
  [
    [
      12682,
      12682
    ],
    "mapped",
    [
      4497
    ]
  ],
  [
    [
      12683,
      12683
    ],
    "mapped",
    [
      4498
    ]
  ],
  [
    [
      12684,
      12684
    ],
    "mapped",
    [
      4500
    ]
  ],
  [
    [
      12685,
      12685
    ],
    "mapped",
    [
      4510
    ]
  ],
  [
    [
      12686,
      12686
    ],
    "mapped",
    [
      4513
    ]
  ],
  [
    [
      12687,
      12687
    ],
    "disallowed"
  ],
  [
    [
      12688,
      12689
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12690,
      12690
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12691,
      12691
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12692,
      12692
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12693,
      12693
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12694,
      12694
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12695,
      12695
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12696,
      12696
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12697,
      12697
    ],
    "mapped",
    [
      30002
    ]
  ],
  [
    [
      12698,
      12698
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12699,
      12699
    ],
    "mapped",
    [
      19993
    ]
  ],
  [
    [
      12700,
      12700
    ],
    "mapped",
    [
      19969
    ]
  ],
  [
    [
      12701,
      12701
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      12702,
      12702
    ],
    "mapped",
    [
      22320
    ]
  ],
  [
    [
      12703,
      12703
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12704,
      12727
    ],
    "valid"
  ],
  [
    [
      12728,
      12730
    ],
    "valid"
  ],
  [
    [
      12731,
      12735
    ],
    "disallowed"
  ],
  [
    [
      12736,
      12751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12752,
      12771
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12772,
      12783
    ],
    "disallowed"
  ],
  [
    [
      12784,
      12799
    ],
    "valid"
  ],
  [
    [
      12800,
      12800
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4352,
      41
    ]
  ],
  [
    [
      12801,
      12801
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4354,
      41
    ]
  ],
  [
    [
      12802,
      12802
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4355,
      41
    ]
  ],
  [
    [
      12803,
      12803
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4357,
      41
    ]
  ],
  [
    [
      12804,
      12804
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4358,
      41
    ]
  ],
  [
    [
      12805,
      12805
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4359,
      41
    ]
  ],
  [
    [
      12806,
      12806
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4361,
      41
    ]
  ],
  [
    [
      12807,
      12807
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4363,
      41
    ]
  ],
  [
    [
      12808,
      12808
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4364,
      41
    ]
  ],
  [
    [
      12809,
      12809
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4366,
      41
    ]
  ],
  [
    [
      12810,
      12810
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4367,
      41
    ]
  ],
  [
    [
      12811,
      12811
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4368,
      41
    ]
  ],
  [
    [
      12812,
      12812
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4369,
      41
    ]
  ],
  [
    [
      12813,
      12813
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4370,
      41
    ]
  ],
  [
    [
      12814,
      12814
    ],
    "disallowed_STD3_mapped",
    [
      40,
      44032,
      41
    ]
  ],
  [
    [
      12815,
      12815
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45208,
      41
    ]
  ],
  [
    [
      12816,
      12816
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45796,
      41
    ]
  ],
  [
    [
      12817,
      12817
    ],
    "disallowed_STD3_mapped",
    [
      40,
      46972,
      41
    ]
  ],
  [
    [
      12818,
      12818
    ],
    "disallowed_STD3_mapped",
    [
      40,
      47560,
      41
    ]
  ],
  [
    [
      12819,
      12819
    ],
    "disallowed_STD3_mapped",
    [
      40,
      48148,
      41
    ]
  ],
  [
    [
      12820,
      12820
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49324,
      41
    ]
  ],
  [
    [
      12821,
      12821
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50500,
      41
    ]
  ],
  [
    [
      12822,
      12822
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51088,
      41
    ]
  ],
  [
    [
      12823,
      12823
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52264,
      41
    ]
  ],
  [
    [
      12824,
      12824
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52852,
      41
    ]
  ],
  [
    [
      12825,
      12825
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53440,
      41
    ]
  ],
  [
    [
      12826,
      12826
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54028,
      41
    ]
  ],
  [
    [
      12827,
      12827
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54616,
      41
    ]
  ],
  [
    [
      12828,
      12828
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51452,
      41
    ]
  ],
  [
    [
      12829,
      12829
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      51204,
      41
    ]
  ],
  [
    [
      12830,
      12830
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      54980,
      41
    ]
  ],
  [
    [
      12831,
      12831
    ],
    "disallowed"
  ],
  [
    [
      12832,
      12832
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19968,
      41
    ]
  ],
  [
    [
      12833,
      12833
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20108,
      41
    ]
  ],
  [
    [
      12834,
      12834
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19977,
      41
    ]
  ],
  [
    [
      12835,
      12835
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22235,
      41
    ]
  ],
  [
    [
      12836,
      12836
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20116,
      41
    ]
  ],
  [
    [
      12837,
      12837
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20845,
      41
    ]
  ],
  [
    [
      12838,
      12838
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19971,
      41
    ]
  ],
  [
    [
      12839,
      12839
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20843,
      41
    ]
  ],
  [
    [
      12840,
      12840
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20061,
      41
    ]
  ],
  [
    [
      12841,
      12841
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21313,
      41
    ]
  ],
  [
    [
      12842,
      12842
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26376,
      41
    ]
  ],
  [
    [
      12843,
      12843
    ],
    "disallowed_STD3_mapped",
    [
      40,
      28779,
      41
    ]
  ],
  [
    [
      12844,
      12844
    ],
    "disallowed_STD3_mapped",
    [
      40,
      27700,
      41
    ]
  ],
  [
    [
      12845,
      12845
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26408,
      41
    ]
  ],
  [
    [
      12846,
      12846
    ],
    "disallowed_STD3_mapped",
    [
      40,
      37329,
      41
    ]
  ],
  [
    [
      12847,
      12847
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22303,
      41
    ]
  ],
  [
    [
      12848,
      12848
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26085,
      41
    ]
  ],
  [
    [
      12849,
      12849
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26666,
      41
    ]
  ],
  [
    [
      12850,
      12850
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26377,
      41
    ]
  ],
  [
    [
      12851,
      12851
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31038,
      41
    ]
  ],
  [
    [
      12852,
      12852
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21517,
      41
    ]
  ],
  [
    [
      12853,
      12853
    ],
    "disallowed_STD3_mapped",
    [
      40,
      29305,
      41
    ]
  ],
  [
    [
      12854,
      12854
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36001,
      41
    ]
  ],
  [
    [
      12855,
      12855
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31069,
      41
    ]
  ],
  [
    [
      12856,
      12856
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21172,
      41
    ]
  ],
  [
    [
      12857,
      12857
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20195,
      41
    ]
  ],
  [
    [
      12858,
      12858
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21628,
      41
    ]
  ],
  [
    [
      12859,
      12859
    ],
    "disallowed_STD3_mapped",
    [
      40,
      23398,
      41
    ]
  ],
  [
    [
      12860,
      12860
    ],
    "disallowed_STD3_mapped",
    [
      40,
      30435,
      41
    ]
  ],
  [
    [
      12861,
      12861
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20225,
      41
    ]
  ],
  [
    [
      12862,
      12862
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36039,
      41
    ]
  ],
  [
    [
      12863,
      12863
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21332,
      41
    ]
  ],
  [
    [
      12864,
      12864
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31085,
      41
    ]
  ],
  [
    [
      12865,
      12865
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20241,
      41
    ]
  ],
  [
    [
      12866,
      12866
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33258,
      41
    ]
  ],
  [
    [
      12867,
      12867
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33267,
      41
    ]
  ],
  [
    [
      12868,
      12868
    ],
    "mapped",
    [
      21839
    ]
  ],
  [
    [
      12869,
      12869
    ],
    "mapped",
    [
      24188
    ]
  ],
  [
    [
      12870,
      12870
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12871,
      12871
    ],
    "mapped",
    [
      31631
    ]
  ],
  [
    [
      12872,
      12879
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12880,
      12880
    ],
    "mapped",
    [
      112,
      116,
      101
    ]
  ],
  [
    [
      12881,
      12881
    ],
    "mapped",
    [
      50,
      49
    ]
  ],
  [
    [
      12882,
      12882
    ],
    "mapped",
    [
      50,
      50
    ]
  ],
  [
    [
      12883,
      12883
    ],
    "mapped",
    [
      50,
      51
    ]
  ],
  [
    [
      12884,
      12884
    ],
    "mapped",
    [
      50,
      52
    ]
  ],
  [
    [
      12885,
      12885
    ],
    "mapped",
    [
      50,
      53
    ]
  ],
  [
    [
      12886,
      12886
    ],
    "mapped",
    [
      50,
      54
    ]
  ],
  [
    [
      12887,
      12887
    ],
    "mapped",
    [
      50,
      55
    ]
  ],
  [
    [
      12888,
      12888
    ],
    "mapped",
    [
      50,
      56
    ]
  ],
  [
    [
      12889,
      12889
    ],
    "mapped",
    [
      50,
      57
    ]
  ],
  [
    [
      12890,
      12890
    ],
    "mapped",
    [
      51,
      48
    ]
  ],
  [
    [
      12891,
      12891
    ],
    "mapped",
    [
      51,
      49
    ]
  ],
  [
    [
      12892,
      12892
    ],
    "mapped",
    [
      51,
      50
    ]
  ],
  [
    [
      12893,
      12893
    ],
    "mapped",
    [
      51,
      51
    ]
  ],
  [
    [
      12894,
      12894
    ],
    "mapped",
    [
      51,
      52
    ]
  ],
  [
    [
      12895,
      12895
    ],
    "mapped",
    [
      51,
      53
    ]
  ],
  [
    [
      12896,
      12896
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12897,
      12897
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12898,
      12898
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12899,
      12899
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12900,
      12900
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12901,
      12901
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12902,
      12902
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12903,
      12903
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12904,
      12904
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12905,
      12905
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12906,
      12906
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12907,
      12907
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12908,
      12908
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12909,
      12909
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12910,
      12910
    ],
    "mapped",
    [
      44032
    ]
  ],
  [
    [
      12911,
      12911
    ],
    "mapped",
    [
      45208
    ]
  ],
  [
    [
      12912,
      12912
    ],
    "mapped",
    [
      45796
    ]
  ],
  [
    [
      12913,
      12913
    ],
    "mapped",
    [
      46972
    ]
  ],
  [
    [
      12914,
      12914
    ],
    "mapped",
    [
      47560
    ]
  ],
  [
    [
      12915,
      12915
    ],
    "mapped",
    [
      48148
    ]
  ],
  [
    [
      12916,
      12916
    ],
    "mapped",
    [
      49324
    ]
  ],
  [
    [
      12917,
      12917
    ],
    "mapped",
    [
      50500
    ]
  ],
  [
    [
      12918,
      12918
    ],
    "mapped",
    [
      51088
    ]
  ],
  [
    [
      12919,
      12919
    ],
    "mapped",
    [
      52264
    ]
  ],
  [
    [
      12920,
      12920
    ],
    "mapped",
    [
      52852
    ]
  ],
  [
    [
      12921,
      12921
    ],
    "mapped",
    [
      53440
    ]
  ],
  [
    [
      12922,
      12922
    ],
    "mapped",
    [
      54028
    ]
  ],
  [
    [
      12923,
      12923
    ],
    "mapped",
    [
      54616
    ]
  ],
  [
    [
      12924,
      12924
    ],
    "mapped",
    [
      52280,
      44256
    ]
  ],
  [
    [
      12925,
      12925
    ],
    "mapped",
    [
      51452,
      51032
    ]
  ],
  [
    [
      12926,
      12926
    ],
    "mapped",
    [
      50864
    ]
  ],
  [
    [
      12927,
      12927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12928,
      12928
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12929,
      12929
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12930,
      12930
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12931,
      12931
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12932,
      12932
    ],
    "mapped",
    [
      20116
    ]
  ],
  [
    [
      12933,
      12933
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      12934,
      12934
    ],
    "mapped",
    [
      19971
    ]
  ],
  [
    [
      12935,
      12935
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12936,
      12936
    ],
    "mapped",
    [
      20061
    ]
  ],
  [
    [
      12937,
      12937
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12938,
      12938
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12939,
      12939
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12940,
      12940
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12941,
      12941
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12942,
      12942
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12943,
      12943
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12944,
      12944
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12945,
      12945
    ],
    "mapped",
    [
      26666
    ]
  ],
  [
    [
      12946,
      12946
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      12947,
      12947
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      12948,
      12948
    ],
    "mapped",
    [
      21517
    ]
  ],
  [
    [
      12949,
      12949
    ],
    "mapped",
    [
      29305
    ]
  ],
  [
    [
      12950,
      12950
    ],
    "mapped",
    [
      36001
    ]
  ],
  [
    [
      12951,
      12951
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      12952,
      12952
    ],
    "mapped",
    [
      21172
    ]
  ],
  [
    [
      12953,
      12953
    ],
    "mapped",
    [
      31192
    ]
  ],
  [
    [
      12954,
      12954
    ],
    "mapped",
    [
      30007
    ]
  ],
  [
    [
      12955,
      12955
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12956,
      12956
    ],
    "mapped",
    [
      36969
    ]
  ],
  [
    [
      12957,
      12957
    ],
    "mapped",
    [
      20778
    ]
  ],
  [
    [
      12958,
      12958
    ],
    "mapped",
    [
      21360
    ]
  ],
  [
    [
      12959,
      12959
    ],
    "mapped",
    [
      27880
    ]
  ],
  [
    [
      12960,
      12960
    ],
    "mapped",
    [
      38917
    ]
  ],
  [
    [
      12961,
      12961
    ],
    "mapped",
    [
      20241
    ]
  ],
  [
    [
      12962,
      12962
    ],
    "mapped",
    [
      20889
    ]
  ],
  [
    [
      12963,
      12963
    ],
    "mapped",
    [
      27491
    ]
  ],
  [
    [
      12964,
      12964
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12965,
      12965
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12966,
      12966
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12967,
      12967
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      12968,
      12968
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      12969,
      12969
    ],
    "mapped",
    [
      21307
    ]
  ],
  [
    [
      12970,
      12970
    ],
    "mapped",
    [
      23447
    ]
  ],
  [
    [
      12971,
      12971
    ],
    "mapped",
    [
      23398
    ]
  ],
  [
    [
      12972,
      12972
    ],
    "mapped",
    [
      30435
    ]
  ],
  [
    [
      12973,
      12973
    ],
    "mapped",
    [
      20225
    ]
  ],
  [
    [
      12974,
      12974
    ],
    "mapped",
    [
      36039
    ]
  ],
  [
    [
      12975,
      12975
    ],
    "mapped",
    [
      21332
    ]
  ],
  [
    [
      12976,
      12976
    ],
    "mapped",
    [
      22812
    ]
  ],
  [
    [
      12977,
      12977
    ],
    "mapped",
    [
      51,
      54
    ]
  ],
  [
    [
      12978,
      12978
    ],
    "mapped",
    [
      51,
      55
    ]
  ],
  [
    [
      12979,
      12979
    ],
    "mapped",
    [
      51,
      56
    ]
  ],
  [
    [
      12980,
      12980
    ],
    "mapped",
    [
      51,
      57
    ]
  ],
  [
    [
      12981,
      12981
    ],
    "mapped",
    [
      52,
      48
    ]
  ],
  [
    [
      12982,
      12982
    ],
    "mapped",
    [
      52,
      49
    ]
  ],
  [
    [
      12983,
      12983
    ],
    "mapped",
    [
      52,
      50
    ]
  ],
  [
    [
      12984,
      12984
    ],
    "mapped",
    [
      52,
      51
    ]
  ],
  [
    [
      12985,
      12985
    ],
    "mapped",
    [
      52,
      52
    ]
  ],
  [
    [
      12986,
      12986
    ],
    "mapped",
    [
      52,
      53
    ]
  ],
  [
    [
      12987,
      12987
    ],
    "mapped",
    [
      52,
      54
    ]
  ],
  [
    [
      12988,
      12988
    ],
    "mapped",
    [
      52,
      55
    ]
  ],
  [
    [
      12989,
      12989
    ],
    "mapped",
    [
      52,
      56
    ]
  ],
  [
    [
      12990,
      12990
    ],
    "mapped",
    [
      52,
      57
    ]
  ],
  [
    [
      12991,
      12991
    ],
    "mapped",
    [
      53,
      48
    ]
  ],
  [
    [
      12992,
      12992
    ],
    "mapped",
    [
      49,
      26376
    ]
  ],
  [
    [
      12993,
      12993
    ],
    "mapped",
    [
      50,
      26376
    ]
  ],
  [
    [
      12994,
      12994
    ],
    "mapped",
    [
      51,
      26376
    ]
  ],
  [
    [
      12995,
      12995
    ],
    "mapped",
    [
      52,
      26376
    ]
  ],
  [
    [
      12996,
      12996
    ],
    "mapped",
    [
      53,
      26376
    ]
  ],
  [
    [
      12997,
      12997
    ],
    "mapped",
    [
      54,
      26376
    ]
  ],
  [
    [
      12998,
      12998
    ],
    "mapped",
    [
      55,
      26376
    ]
  ],
  [
    [
      12999,
      12999
    ],
    "mapped",
    [
      56,
      26376
    ]
  ],
  [
    [
      13e3,
      13e3
    ],
    "mapped",
    [
      57,
      26376
    ]
  ],
  [
    [
      13001,
      13001
    ],
    "mapped",
    [
      49,
      48,
      26376
    ]
  ],
  [
    [
      13002,
      13002
    ],
    "mapped",
    [
      49,
      49,
      26376
    ]
  ],
  [
    [
      13003,
      13003
    ],
    "mapped",
    [
      49,
      50,
      26376
    ]
  ],
  [
    [
      13004,
      13004
    ],
    "mapped",
    [
      104,
      103
    ]
  ],
  [
    [
      13005,
      13005
    ],
    "mapped",
    [
      101,
      114,
      103
    ]
  ],
  [
    [
      13006,
      13006
    ],
    "mapped",
    [
      101,
      118
    ]
  ],
  [
    [
      13007,
      13007
    ],
    "mapped",
    [
      108,
      116,
      100
    ]
  ],
  [
    [
      13008,
      13008
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      13009,
      13009
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      13010,
      13010
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      13011,
      13011
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      13012,
      13012
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      13013,
      13013
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      13014,
      13014
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      13015,
      13015
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      13016,
      13016
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      13017,
      13017
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      13018,
      13018
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      13019,
      13019
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      13020,
      13020
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      13021,
      13021
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      13022,
      13022
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      13023,
      13023
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      13024,
      13024
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      13025,
      13025
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      13026,
      13026
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      13027,
      13027
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      13028,
      13028
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      13029,
      13029
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      13030,
      13030
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      13031,
      13031
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      13032,
      13032
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      13033,
      13033
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      13034,
      13034
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      13035,
      13035
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      13036,
      13036
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      13037,
      13037
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      13038,
      13038
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      13039,
      13039
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      13040,
      13040
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      13041,
      13041
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      13042,
      13042
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      13043,
      13043
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      13044,
      13044
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      13045,
      13045
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      13046,
      13046
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      13047,
      13047
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      13048,
      13048
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      13049,
      13049
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      13050,
      13050
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      13051,
      13051
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      13052,
      13052
    ],
    "mapped",
    [
      12528
    ]
  ],
  [
    [
      13053,
      13053
    ],
    "mapped",
    [
      12529
    ]
  ],
  [
    [
      13054,
      13054
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      13055,
      13055
    ],
    "disallowed"
  ],
  [
    [
      13056,
      13056
    ],
    "mapped",
    [
      12450,
      12497,
      12540,
      12488
    ]
  ],
  [
    [
      13057,
      13057
    ],
    "mapped",
    [
      12450,
      12523,
      12501,
      12449
    ]
  ],
  [
    [
      13058,
      13058
    ],
    "mapped",
    [
      12450,
      12531,
      12506,
      12450
    ]
  ],
  [
    [
      13059,
      13059
    ],
    "mapped",
    [
      12450,
      12540,
      12523
    ]
  ],
  [
    [
      13060,
      13060
    ],
    "mapped",
    [
      12452,
      12491,
      12531,
      12464
    ]
  ],
  [
    [
      13061,
      13061
    ],
    "mapped",
    [
      12452,
      12531,
      12481
    ]
  ],
  [
    [
      13062,
      13062
    ],
    "mapped",
    [
      12454,
      12457,
      12531
    ]
  ],
  [
    [
      13063,
      13063
    ],
    "mapped",
    [
      12456,
      12473,
      12463,
      12540,
      12489
    ]
  ],
  [
    [
      13064,
      13064
    ],
    "mapped",
    [
      12456,
      12540,
      12459,
      12540
    ]
  ],
  [
    [
      13065,
      13065
    ],
    "mapped",
    [
      12458,
      12531,
      12473
    ]
  ],
  [
    [
      13066,
      13066
    ],
    "mapped",
    [
      12458,
      12540,
      12512
    ]
  ],
  [
    [
      13067,
      13067
    ],
    "mapped",
    [
      12459,
      12452,
      12522
    ]
  ],
  [
    [
      13068,
      13068
    ],
    "mapped",
    [
      12459,
      12521,
      12483,
      12488
    ]
  ],
  [
    [
      13069,
      13069
    ],
    "mapped",
    [
      12459,
      12525,
      12522,
      12540
    ]
  ],
  [
    [
      13070,
      13070
    ],
    "mapped",
    [
      12460,
      12525,
      12531
    ]
  ],
  [
    [
      13071,
      13071
    ],
    "mapped",
    [
      12460,
      12531,
      12510
    ]
  ],
  [
    [
      13072,
      13072
    ],
    "mapped",
    [
      12462,
      12460
    ]
  ],
  [
    [
      13073,
      13073
    ],
    "mapped",
    [
      12462,
      12491,
      12540
    ]
  ],
  [
    [
      13074,
      13074
    ],
    "mapped",
    [
      12461,
      12517,
      12522,
      12540
    ]
  ],
  [
    [
      13075,
      13075
    ],
    "mapped",
    [
      12462,
      12523,
      12480,
      12540
    ]
  ],
  [
    [
      13076,
      13076
    ],
    "mapped",
    [
      12461,
      12525
    ]
  ],
  [
    [
      13077,
      13077
    ],
    "mapped",
    [
      12461,
      12525,
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13078,
      13078
    ],
    "mapped",
    [
      12461,
      12525,
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13079,
      13079
    ],
    "mapped",
    [
      12461,
      12525,
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13080,
      13080
    ],
    "mapped",
    [
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13081,
      13081
    ],
    "mapped",
    [
      12464,
      12521,
      12512,
      12488,
      12531
    ]
  ],
  [
    [
      13082,
      13082
    ],
    "mapped",
    [
      12463,
      12523,
      12476,
      12452,
      12525
    ]
  ],
  [
    [
      13083,
      13083
    ],
    "mapped",
    [
      12463,
      12525,
      12540,
      12493
    ]
  ],
  [
    [
      13084,
      13084
    ],
    "mapped",
    [
      12465,
      12540,
      12473
    ]
  ],
  [
    [
      13085,
      13085
    ],
    "mapped",
    [
      12467,
      12523,
      12490
    ]
  ],
  [
    [
      13086,
      13086
    ],
    "mapped",
    [
      12467,
      12540,
      12509
    ]
  ],
  [
    [
      13087,
      13087
    ],
    "mapped",
    [
      12469,
      12452,
      12463,
      12523
    ]
  ],
  [
    [
      13088,
      13088
    ],
    "mapped",
    [
      12469,
      12531,
      12481,
      12540,
      12512
    ]
  ],
  [
    [
      13089,
      13089
    ],
    "mapped",
    [
      12471,
      12522,
      12531,
      12464
    ]
  ],
  [
    [
      13090,
      13090
    ],
    "mapped",
    [
      12475,
      12531,
      12481
    ]
  ],
  [
    [
      13091,
      13091
    ],
    "mapped",
    [
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13092,
      13092
    ],
    "mapped",
    [
      12480,
      12540,
      12473
    ]
  ],
  [
    [
      13093,
      13093
    ],
    "mapped",
    [
      12487,
      12471
    ]
  ],
  [
    [
      13094,
      13094
    ],
    "mapped",
    [
      12489,
      12523
    ]
  ],
  [
    [
      13095,
      13095
    ],
    "mapped",
    [
      12488,
      12531
    ]
  ],
  [
    [
      13096,
      13096
    ],
    "mapped",
    [
      12490,
      12494
    ]
  ],
  [
    [
      13097,
      13097
    ],
    "mapped",
    [
      12494,
      12483,
      12488
    ]
  ],
  [
    [
      13098,
      13098
    ],
    "mapped",
    [
      12495,
      12452,
      12484
    ]
  ],
  [
    [
      13099,
      13099
    ],
    "mapped",
    [
      12497,
      12540,
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13100,
      13100
    ],
    "mapped",
    [
      12497,
      12540,
      12484
    ]
  ],
  [
    [
      13101,
      13101
    ],
    "mapped",
    [
      12496,
      12540,
      12524,
      12523
    ]
  ],
  [
    [
      13102,
      13102
    ],
    "mapped",
    [
      12500,
      12450,
      12473,
      12488,
      12523
    ]
  ],
  [
    [
      13103,
      13103
    ],
    "mapped",
    [
      12500,
      12463,
      12523
    ]
  ],
  [
    [
      13104,
      13104
    ],
    "mapped",
    [
      12500,
      12467
    ]
  ],
  [
    [
      13105,
      13105
    ],
    "mapped",
    [
      12499,
      12523
    ]
  ],
  [
    [
      13106,
      13106
    ],
    "mapped",
    [
      12501,
      12449,
      12521,
      12483,
      12489
    ]
  ],
  [
    [
      13107,
      13107
    ],
    "mapped",
    [
      12501,
      12451,
      12540,
      12488
    ]
  ],
  [
    [
      13108,
      13108
    ],
    "mapped",
    [
      12502,
      12483,
      12471,
      12455,
      12523
    ]
  ],
  [
    [
      13109,
      13109
    ],
    "mapped",
    [
      12501,
      12521,
      12531
    ]
  ],
  [
    [
      13110,
      13110
    ],
    "mapped",
    [
      12504,
      12463,
      12479,
      12540,
      12523
    ]
  ],
  [
    [
      13111,
      13111
    ],
    "mapped",
    [
      12506,
      12477
    ]
  ],
  [
    [
      13112,
      13112
    ],
    "mapped",
    [
      12506,
      12491,
      12498
    ]
  ],
  [
    [
      13113,
      13113
    ],
    "mapped",
    [
      12504,
      12523,
      12484
    ]
  ],
  [
    [
      13114,
      13114
    ],
    "mapped",
    [
      12506,
      12531,
      12473
    ]
  ],
  [
    [
      13115,
      13115
    ],
    "mapped",
    [
      12506,
      12540,
      12472
    ]
  ],
  [
    [
      13116,
      13116
    ],
    "mapped",
    [
      12505,
      12540,
      12479
    ]
  ],
  [
    [
      13117,
      13117
    ],
    "mapped",
    [
      12509,
      12452,
      12531,
      12488
    ]
  ],
  [
    [
      13118,
      13118
    ],
    "mapped",
    [
      12508,
      12523,
      12488
    ]
  ],
  [
    [
      13119,
      13119
    ],
    "mapped",
    [
      12507,
      12531
    ]
  ],
  [
    [
      13120,
      13120
    ],
    "mapped",
    [
      12509,
      12531,
      12489
    ]
  ],
  [
    [
      13121,
      13121
    ],
    "mapped",
    [
      12507,
      12540,
      12523
    ]
  ],
  [
    [
      13122,
      13122
    ],
    "mapped",
    [
      12507,
      12540,
      12531
    ]
  ],
  [
    [
      13123,
      13123
    ],
    "mapped",
    [
      12510,
      12452,
      12463,
      12525
    ]
  ],
  [
    [
      13124,
      13124
    ],
    "mapped",
    [
      12510,
      12452,
      12523
    ]
  ],
  [
    [
      13125,
      13125
    ],
    "mapped",
    [
      12510,
      12483,
      12495
    ]
  ],
  [
    [
      13126,
      13126
    ],
    "mapped",
    [
      12510,
      12523,
      12463
    ]
  ],
  [
    [
      13127,
      13127
    ],
    "mapped",
    [
      12510,
      12531,
      12471,
      12519,
      12531
    ]
  ],
  [
    [
      13128,
      13128
    ],
    "mapped",
    [
      12511,
      12463,
      12525,
      12531
    ]
  ],
  [
    [
      13129,
      13129
    ],
    "mapped",
    [
      12511,
      12522
    ]
  ],
  [
    [
      13130,
      13130
    ],
    "mapped",
    [
      12511,
      12522,
      12496,
      12540,
      12523
    ]
  ],
  [
    [
      13131,
      13131
    ],
    "mapped",
    [
      12513,
      12460
    ]
  ],
  [
    [
      13132,
      13132
    ],
    "mapped",
    [
      12513,
      12460,
      12488,
      12531
    ]
  ],
  [
    [
      13133,
      13133
    ],
    "mapped",
    [
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13134,
      13134
    ],
    "mapped",
    [
      12516,
      12540,
      12489
    ]
  ],
  [
    [
      13135,
      13135
    ],
    "mapped",
    [
      12516,
      12540,
      12523
    ]
  ],
  [
    [
      13136,
      13136
    ],
    "mapped",
    [
      12518,
      12450,
      12531
    ]
  ],
  [
    [
      13137,
      13137
    ],
    "mapped",
    [
      12522,
      12483,
      12488,
      12523
    ]
  ],
  [
    [
      13138,
      13138
    ],
    "mapped",
    [
      12522,
      12521
    ]
  ],
  [
    [
      13139,
      13139
    ],
    "mapped",
    [
      12523,
      12500,
      12540
    ]
  ],
  [
    [
      13140,
      13140
    ],
    "mapped",
    [
      12523,
      12540,
      12502,
      12523
    ]
  ],
  [
    [
      13141,
      13141
    ],
    "mapped",
    [
      12524,
      12512
    ]
  ],
  [
    [
      13142,
      13142
    ],
    "mapped",
    [
      12524,
      12531,
      12488,
      12466,
      12531
    ]
  ],
  [
    [
      13143,
      13143
    ],
    "mapped",
    [
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13144,
      13144
    ],
    "mapped",
    [
      48,
      28857
    ]
  ],
  [
    [
      13145,
      13145
    ],
    "mapped",
    [
      49,
      28857
    ]
  ],
  [
    [
      13146,
      13146
    ],
    "mapped",
    [
      50,
      28857
    ]
  ],
  [
    [
      13147,
      13147
    ],
    "mapped",
    [
      51,
      28857
    ]
  ],
  [
    [
      13148,
      13148
    ],
    "mapped",
    [
      52,
      28857
    ]
  ],
  [
    [
      13149,
      13149
    ],
    "mapped",
    [
      53,
      28857
    ]
  ],
  [
    [
      13150,
      13150
    ],
    "mapped",
    [
      54,
      28857
    ]
  ],
  [
    [
      13151,
      13151
    ],
    "mapped",
    [
      55,
      28857
    ]
  ],
  [
    [
      13152,
      13152
    ],
    "mapped",
    [
      56,
      28857
    ]
  ],
  [
    [
      13153,
      13153
    ],
    "mapped",
    [
      57,
      28857
    ]
  ],
  [
    [
      13154,
      13154
    ],
    "mapped",
    [
      49,
      48,
      28857
    ]
  ],
  [
    [
      13155,
      13155
    ],
    "mapped",
    [
      49,
      49,
      28857
    ]
  ],
  [
    [
      13156,
      13156
    ],
    "mapped",
    [
      49,
      50,
      28857
    ]
  ],
  [
    [
      13157,
      13157
    ],
    "mapped",
    [
      49,
      51,
      28857
    ]
  ],
  [
    [
      13158,
      13158
    ],
    "mapped",
    [
      49,
      52,
      28857
    ]
  ],
  [
    [
      13159,
      13159
    ],
    "mapped",
    [
      49,
      53,
      28857
    ]
  ],
  [
    [
      13160,
      13160
    ],
    "mapped",
    [
      49,
      54,
      28857
    ]
  ],
  [
    [
      13161,
      13161
    ],
    "mapped",
    [
      49,
      55,
      28857
    ]
  ],
  [
    [
      13162,
      13162
    ],
    "mapped",
    [
      49,
      56,
      28857
    ]
  ],
  [
    [
      13163,
      13163
    ],
    "mapped",
    [
      49,
      57,
      28857
    ]
  ],
  [
    [
      13164,
      13164
    ],
    "mapped",
    [
      50,
      48,
      28857
    ]
  ],
  [
    [
      13165,
      13165
    ],
    "mapped",
    [
      50,
      49,
      28857
    ]
  ],
  [
    [
      13166,
      13166
    ],
    "mapped",
    [
      50,
      50,
      28857
    ]
  ],
  [
    [
      13167,
      13167
    ],
    "mapped",
    [
      50,
      51,
      28857
    ]
  ],
  [
    [
      13168,
      13168
    ],
    "mapped",
    [
      50,
      52,
      28857
    ]
  ],
  [
    [
      13169,
      13169
    ],
    "mapped",
    [
      104,
      112,
      97
    ]
  ],
  [
    [
      13170,
      13170
    ],
    "mapped",
    [
      100,
      97
    ]
  ],
  [
    [
      13171,
      13171
    ],
    "mapped",
    [
      97,
      117
    ]
  ],
  [
    [
      13172,
      13172
    ],
    "mapped",
    [
      98,
      97,
      114
    ]
  ],
  [
    [
      13173,
      13173
    ],
    "mapped",
    [
      111,
      118
    ]
  ],
  [
    [
      13174,
      13174
    ],
    "mapped",
    [
      112,
      99
    ]
  ],
  [
    [
      13175,
      13175
    ],
    "mapped",
    [
      100,
      109
    ]
  ],
  [
    [
      13176,
      13176
    ],
    "mapped",
    [
      100,
      109,
      50
    ]
  ],
  [
    [
      13177,
      13177
    ],
    "mapped",
    [
      100,
      109,
      51
    ]
  ],
  [
    [
      13178,
      13178
    ],
    "mapped",
    [
      105,
      117
    ]
  ],
  [
    [
      13179,
      13179
    ],
    "mapped",
    [
      24179,
      25104
    ]
  ],
  [
    [
      13180,
      13180
    ],
    "mapped",
    [
      26157,
      21644
    ]
  ],
  [
    [
      13181,
      13181
    ],
    "mapped",
    [
      22823,
      27491
    ]
  ],
  [
    [
      13182,
      13182
    ],
    "mapped",
    [
      26126,
      27835
    ]
  ],
  [
    [
      13183,
      13183
    ],
    "mapped",
    [
      26666,
      24335,
      20250,
      31038
    ]
  ],
  [
    [
      13184,
      13184
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13185,
      13185
    ],
    "mapped",
    [
      110,
      97
    ]
  ],
  [
    [
      13186,
      13186
    ],
    "mapped",
    [
      956,
      97
    ]
  ],
  [
    [
      13187,
      13187
    ],
    "mapped",
    [
      109,
      97
    ]
  ],
  [
    [
      13188,
      13188
    ],
    "mapped",
    [
      107,
      97
    ]
  ],
  [
    [
      13189,
      13189
    ],
    "mapped",
    [
      107,
      98
    ]
  ],
  [
    [
      13190,
      13190
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13191,
      13191
    ],
    "mapped",
    [
      103,
      98
    ]
  ],
  [
    [
      13192,
      13192
    ],
    "mapped",
    [
      99,
      97,
      108
    ]
  ],
  [
    [
      13193,
      13193
    ],
    "mapped",
    [
      107,
      99,
      97,
      108
    ]
  ],
  [
    [
      13194,
      13194
    ],
    "mapped",
    [
      112,
      102
    ]
  ],
  [
    [
      13195,
      13195
    ],
    "mapped",
    [
      110,
      102
    ]
  ],
  [
    [
      13196,
      13196
    ],
    "mapped",
    [
      956,
      102
    ]
  ],
  [
    [
      13197,
      13197
    ],
    "mapped",
    [
      956,
      103
    ]
  ],
  [
    [
      13198,
      13198
    ],
    "mapped",
    [
      109,
      103
    ]
  ],
  [
    [
      13199,
      13199
    ],
    "mapped",
    [
      107,
      103
    ]
  ],
  [
    [
      13200,
      13200
    ],
    "mapped",
    [
      104,
      122
    ]
  ],
  [
    [
      13201,
      13201
    ],
    "mapped",
    [
      107,
      104,
      122
    ]
  ],
  [
    [
      13202,
      13202
    ],
    "mapped",
    [
      109,
      104,
      122
    ]
  ],
  [
    [
      13203,
      13203
    ],
    "mapped",
    [
      103,
      104,
      122
    ]
  ],
  [
    [
      13204,
      13204
    ],
    "mapped",
    [
      116,
      104,
      122
    ]
  ],
  [
    [
      13205,
      13205
    ],
    "mapped",
    [
      956,
      108
    ]
  ],
  [
    [
      13206,
      13206
    ],
    "mapped",
    [
      109,
      108
    ]
  ],
  [
    [
      13207,
      13207
    ],
    "mapped",
    [
      100,
      108
    ]
  ],
  [
    [
      13208,
      13208
    ],
    "mapped",
    [
      107,
      108
    ]
  ],
  [
    [
      13209,
      13209
    ],
    "mapped",
    [
      102,
      109
    ]
  ],
  [
    [
      13210,
      13210
    ],
    "mapped",
    [
      110,
      109
    ]
  ],
  [
    [
      13211,
      13211
    ],
    "mapped",
    [
      956,
      109
    ]
  ],
  [
    [
      13212,
      13212
    ],
    "mapped",
    [
      109,
      109
    ]
  ],
  [
    [
      13213,
      13213
    ],
    "mapped",
    [
      99,
      109
    ]
  ],
  [
    [
      13214,
      13214
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13215,
      13215
    ],
    "mapped",
    [
      109,
      109,
      50
    ]
  ],
  [
    [
      13216,
      13216
    ],
    "mapped",
    [
      99,
      109,
      50
    ]
  ],
  [
    [
      13217,
      13217
    ],
    "mapped",
    [
      109,
      50
    ]
  ],
  [
    [
      13218,
      13218
    ],
    "mapped",
    [
      107,
      109,
      50
    ]
  ],
  [
    [
      13219,
      13219
    ],
    "mapped",
    [
      109,
      109,
      51
    ]
  ],
  [
    [
      13220,
      13220
    ],
    "mapped",
    [
      99,
      109,
      51
    ]
  ],
  [
    [
      13221,
      13221
    ],
    "mapped",
    [
      109,
      51
    ]
  ],
  [
    [
      13222,
      13222
    ],
    "mapped",
    [
      107,
      109,
      51
    ]
  ],
  [
    [
      13223,
      13223
    ],
    "mapped",
    [
      109,
      8725,
      115
    ]
  ],
  [
    [
      13224,
      13224
    ],
    "mapped",
    [
      109,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13225,
      13225
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13226,
      13226
    ],
    "mapped",
    [
      107,
      112,
      97
    ]
  ],
  [
    [
      13227,
      13227
    ],
    "mapped",
    [
      109,
      112,
      97
    ]
  ],
  [
    [
      13228,
      13228
    ],
    "mapped",
    [
      103,
      112,
      97
    ]
  ],
  [
    [
      13229,
      13229
    ],
    "mapped",
    [
      114,
      97,
      100
    ]
  ],
  [
    [
      13230,
      13230
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115
    ]
  ],
  [
    [
      13231,
      13231
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13232,
      13232
    ],
    "mapped",
    [
      112,
      115
    ]
  ],
  [
    [
      13233,
      13233
    ],
    "mapped",
    [
      110,
      115
    ]
  ],
  [
    [
      13234,
      13234
    ],
    "mapped",
    [
      956,
      115
    ]
  ],
  [
    [
      13235,
      13235
    ],
    "mapped",
    [
      109,
      115
    ]
  ],
  [
    [
      13236,
      13236
    ],
    "mapped",
    [
      112,
      118
    ]
  ],
  [
    [
      13237,
      13237
    ],
    "mapped",
    [
      110,
      118
    ]
  ],
  [
    [
      13238,
      13238
    ],
    "mapped",
    [
      956,
      118
    ]
  ],
  [
    [
      13239,
      13239
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13240,
      13240
    ],
    "mapped",
    [
      107,
      118
    ]
  ],
  [
    [
      13241,
      13241
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13242,
      13242
    ],
    "mapped",
    [
      112,
      119
    ]
  ],
  [
    [
      13243,
      13243
    ],
    "mapped",
    [
      110,
      119
    ]
  ],
  [
    [
      13244,
      13244
    ],
    "mapped",
    [
      956,
      119
    ]
  ],
  [
    [
      13245,
      13245
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13246,
      13246
    ],
    "mapped",
    [
      107,
      119
    ]
  ],
  [
    [
      13247,
      13247
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13248,
      13248
    ],
    "mapped",
    [
      107,
      969
    ]
  ],
  [
    [
      13249,
      13249
    ],
    "mapped",
    [
      109,
      969
    ]
  ],
  [
    [
      13250,
      13250
    ],
    "disallowed"
  ],
  [
    [
      13251,
      13251
    ],
    "mapped",
    [
      98,
      113
    ]
  ],
  [
    [
      13252,
      13252
    ],
    "mapped",
    [
      99,
      99
    ]
  ],
  [
    [
      13253,
      13253
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      13254,
      13254
    ],
    "mapped",
    [
      99,
      8725,
      107,
      103
    ]
  ],
  [
    [
      13255,
      13255
    ],
    "disallowed"
  ],
  [
    [
      13256,
      13256
    ],
    "mapped",
    [
      100,
      98
    ]
  ],
  [
    [
      13257,
      13257
    ],
    "mapped",
    [
      103,
      121
    ]
  ],
  [
    [
      13258,
      13258
    ],
    "mapped",
    [
      104,
      97
    ]
  ],
  [
    [
      13259,
      13259
    ],
    "mapped",
    [
      104,
      112
    ]
  ],
  [
    [
      13260,
      13260
    ],
    "mapped",
    [
      105,
      110
    ]
  ],
  [
    [
      13261,
      13261
    ],
    "mapped",
    [
      107,
      107
    ]
  ],
  [
    [
      13262,
      13262
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13263,
      13263
    ],
    "mapped",
    [
      107,
      116
    ]
  ],
  [
    [
      13264,
      13264
    ],
    "mapped",
    [
      108,
      109
    ]
  ],
  [
    [
      13265,
      13265
    ],
    "mapped",
    [
      108,
      110
    ]
  ],
  [
    [
      13266,
      13266
    ],
    "mapped",
    [
      108,
      111,
      103
    ]
  ],
  [
    [
      13267,
      13267
    ],
    "mapped",
    [
      108,
      120
    ]
  ],
  [
    [
      13268,
      13268
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13269,
      13269
    ],
    "mapped",
    [
      109,
      105,
      108
    ]
  ],
  [
    [
      13270,
      13270
    ],
    "mapped",
    [
      109,
      111,
      108
    ]
  ],
  [
    [
      13271,
      13271
    ],
    "mapped",
    [
      112,
      104
    ]
  ],
  [
    [
      13272,
      13272
    ],
    "disallowed"
  ],
  [
    [
      13273,
      13273
    ],
    "mapped",
    [
      112,
      112,
      109
    ]
  ],
  [
    [
      13274,
      13274
    ],
    "mapped",
    [
      112,
      114
    ]
  ],
  [
    [
      13275,
      13275
    ],
    "mapped",
    [
      115,
      114
    ]
  ],
  [
    [
      13276,
      13276
    ],
    "mapped",
    [
      115,
      118
    ]
  ],
  [
    [
      13277,
      13277
    ],
    "mapped",
    [
      119,
      98
    ]
  ],
  [
    [
      13278,
      13278
    ],
    "mapped",
    [
      118,
      8725,
      109
    ]
  ],
  [
    [
      13279,
      13279
    ],
    "mapped",
    [
      97,
      8725,
      109
    ]
  ],
  [
    [
      13280,
      13280
    ],
    "mapped",
    [
      49,
      26085
    ]
  ],
  [
    [
      13281,
      13281
    ],
    "mapped",
    [
      50,
      26085
    ]
  ],
  [
    [
      13282,
      13282
    ],
    "mapped",
    [
      51,
      26085
    ]
  ],
  [
    [
      13283,
      13283
    ],
    "mapped",
    [
      52,
      26085
    ]
  ],
  [
    [
      13284,
      13284
    ],
    "mapped",
    [
      53,
      26085
    ]
  ],
  [
    [
      13285,
      13285
    ],
    "mapped",
    [
      54,
      26085
    ]
  ],
  [
    [
      13286,
      13286
    ],
    "mapped",
    [
      55,
      26085
    ]
  ],
  [
    [
      13287,
      13287
    ],
    "mapped",
    [
      56,
      26085
    ]
  ],
  [
    [
      13288,
      13288
    ],
    "mapped",
    [
      57,
      26085
    ]
  ],
  [
    [
      13289,
      13289
    ],
    "mapped",
    [
      49,
      48,
      26085
    ]
  ],
  [
    [
      13290,
      13290
    ],
    "mapped",
    [
      49,
      49,
      26085
    ]
  ],
  [
    [
      13291,
      13291
    ],
    "mapped",
    [
      49,
      50,
      26085
    ]
  ],
  [
    [
      13292,
      13292
    ],
    "mapped",
    [
      49,
      51,
      26085
    ]
  ],
  [
    [
      13293,
      13293
    ],
    "mapped",
    [
      49,
      52,
      26085
    ]
  ],
  [
    [
      13294,
      13294
    ],
    "mapped",
    [
      49,
      53,
      26085
    ]
  ],
  [
    [
      13295,
      13295
    ],
    "mapped",
    [
      49,
      54,
      26085
    ]
  ],
  [
    [
      13296,
      13296
    ],
    "mapped",
    [
      49,
      55,
      26085
    ]
  ],
  [
    [
      13297,
      13297
    ],
    "mapped",
    [
      49,
      56,
      26085
    ]
  ],
  [
    [
      13298,
      13298
    ],
    "mapped",
    [
      49,
      57,
      26085
    ]
  ],
  [
    [
      13299,
      13299
    ],
    "mapped",
    [
      50,
      48,
      26085
    ]
  ],
  [
    [
      13300,
      13300
    ],
    "mapped",
    [
      50,
      49,
      26085
    ]
  ],
  [
    [
      13301,
      13301
    ],
    "mapped",
    [
      50,
      50,
      26085
    ]
  ],
  [
    [
      13302,
      13302
    ],
    "mapped",
    [
      50,
      51,
      26085
    ]
  ],
  [
    [
      13303,
      13303
    ],
    "mapped",
    [
      50,
      52,
      26085
    ]
  ],
  [
    [
      13304,
      13304
    ],
    "mapped",
    [
      50,
      53,
      26085
    ]
  ],
  [
    [
      13305,
      13305
    ],
    "mapped",
    [
      50,
      54,
      26085
    ]
  ],
  [
    [
      13306,
      13306
    ],
    "mapped",
    [
      50,
      55,
      26085
    ]
  ],
  [
    [
      13307,
      13307
    ],
    "mapped",
    [
      50,
      56,
      26085
    ]
  ],
  [
    [
      13308,
      13308
    ],
    "mapped",
    [
      50,
      57,
      26085
    ]
  ],
  [
    [
      13309,
      13309
    ],
    "mapped",
    [
      51,
      48,
      26085
    ]
  ],
  [
    [
      13310,
      13310
    ],
    "mapped",
    [
      51,
      49,
      26085
    ]
  ],
  [
    [
      13311,
      13311
    ],
    "mapped",
    [
      103,
      97,
      108
    ]
  ],
  [
    [
      13312,
      19893
    ],
    "valid"
  ],
  [
    [
      19894,
      19903
    ],
    "disallowed"
  ],
  [
    [
      19904,
      19967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      19968,
      40869
    ],
    "valid"
  ],
  [
    [
      40870,
      40891
    ],
    "valid"
  ],
  [
    [
      40892,
      40899
    ],
    "valid"
  ],
  [
    [
      40900,
      40907
    ],
    "valid"
  ],
  [
    [
      40908,
      40908
    ],
    "valid"
  ],
  [
    [
      40909,
      40917
    ],
    "valid"
  ],
  [
    [
      40918,
      40959
    ],
    "disallowed"
  ],
  [
    [
      40960,
      42124
    ],
    "valid"
  ],
  [
    [
      42125,
      42127
    ],
    "disallowed"
  ],
  [
    [
      42128,
      42145
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42146,
      42147
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42148,
      42163
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42164,
      42164
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42165,
      42176
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42177,
      42177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42178,
      42180
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42181,
      42181
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42182,
      42182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42183,
      42191
    ],
    "disallowed"
  ],
  [
    [
      42192,
      42237
    ],
    "valid"
  ],
  [
    [
      42238,
      42239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42240,
      42508
    ],
    "valid"
  ],
  [
    [
      42509,
      42511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42512,
      42539
    ],
    "valid"
  ],
  [
    [
      42540,
      42559
    ],
    "disallowed"
  ],
  [
    [
      42560,
      42560
    ],
    "mapped",
    [
      42561
    ]
  ],
  [
    [
      42561,
      42561
    ],
    "valid"
  ],
  [
    [
      42562,
      42562
    ],
    "mapped",
    [
      42563
    ]
  ],
  [
    [
      42563,
      42563
    ],
    "valid"
  ],
  [
    [
      42564,
      42564
    ],
    "mapped",
    [
      42565
    ]
  ],
  [
    [
      42565,
      42565
    ],
    "valid"
  ],
  [
    [
      42566,
      42566
    ],
    "mapped",
    [
      42567
    ]
  ],
  [
    [
      42567,
      42567
    ],
    "valid"
  ],
  [
    [
      42568,
      42568
    ],
    "mapped",
    [
      42569
    ]
  ],
  [
    [
      42569,
      42569
    ],
    "valid"
  ],
  [
    [
      42570,
      42570
    ],
    "mapped",
    [
      42571
    ]
  ],
  [
    [
      42571,
      42571
    ],
    "valid"
  ],
  [
    [
      42572,
      42572
    ],
    "mapped",
    [
      42573
    ]
  ],
  [
    [
      42573,
      42573
    ],
    "valid"
  ],
  [
    [
      42574,
      42574
    ],
    "mapped",
    [
      42575
    ]
  ],
  [
    [
      42575,
      42575
    ],
    "valid"
  ],
  [
    [
      42576,
      42576
    ],
    "mapped",
    [
      42577
    ]
  ],
  [
    [
      42577,
      42577
    ],
    "valid"
  ],
  [
    [
      42578,
      42578
    ],
    "mapped",
    [
      42579
    ]
  ],
  [
    [
      42579,
      42579
    ],
    "valid"
  ],
  [
    [
      42580,
      42580
    ],
    "mapped",
    [
      42581
    ]
  ],
  [
    [
      42581,
      42581
    ],
    "valid"
  ],
  [
    [
      42582,
      42582
    ],
    "mapped",
    [
      42583
    ]
  ],
  [
    [
      42583,
      42583
    ],
    "valid"
  ],
  [
    [
      42584,
      42584
    ],
    "mapped",
    [
      42585
    ]
  ],
  [
    [
      42585,
      42585
    ],
    "valid"
  ],
  [
    [
      42586,
      42586
    ],
    "mapped",
    [
      42587
    ]
  ],
  [
    [
      42587,
      42587
    ],
    "valid"
  ],
  [
    [
      42588,
      42588
    ],
    "mapped",
    [
      42589
    ]
  ],
  [
    [
      42589,
      42589
    ],
    "valid"
  ],
  [
    [
      42590,
      42590
    ],
    "mapped",
    [
      42591
    ]
  ],
  [
    [
      42591,
      42591
    ],
    "valid"
  ],
  [
    [
      42592,
      42592
    ],
    "mapped",
    [
      42593
    ]
  ],
  [
    [
      42593,
      42593
    ],
    "valid"
  ],
  [
    [
      42594,
      42594
    ],
    "mapped",
    [
      42595
    ]
  ],
  [
    [
      42595,
      42595
    ],
    "valid"
  ],
  [
    [
      42596,
      42596
    ],
    "mapped",
    [
      42597
    ]
  ],
  [
    [
      42597,
      42597
    ],
    "valid"
  ],
  [
    [
      42598,
      42598
    ],
    "mapped",
    [
      42599
    ]
  ],
  [
    [
      42599,
      42599
    ],
    "valid"
  ],
  [
    [
      42600,
      42600
    ],
    "mapped",
    [
      42601
    ]
  ],
  [
    [
      42601,
      42601
    ],
    "valid"
  ],
  [
    [
      42602,
      42602
    ],
    "mapped",
    [
      42603
    ]
  ],
  [
    [
      42603,
      42603
    ],
    "valid"
  ],
  [
    [
      42604,
      42604
    ],
    "mapped",
    [
      42605
    ]
  ],
  [
    [
      42605,
      42607
    ],
    "valid"
  ],
  [
    [
      42608,
      42611
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42612,
      42619
    ],
    "valid"
  ],
  [
    [
      42620,
      42621
    ],
    "valid"
  ],
  [
    [
      42622,
      42622
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42623,
      42623
    ],
    "valid"
  ],
  [
    [
      42624,
      42624
    ],
    "mapped",
    [
      42625
    ]
  ],
  [
    [
      42625,
      42625
    ],
    "valid"
  ],
  [
    [
      42626,
      42626
    ],
    "mapped",
    [
      42627
    ]
  ],
  [
    [
      42627,
      42627
    ],
    "valid"
  ],
  [
    [
      42628,
      42628
    ],
    "mapped",
    [
      42629
    ]
  ],
  [
    [
      42629,
      42629
    ],
    "valid"
  ],
  [
    [
      42630,
      42630
    ],
    "mapped",
    [
      42631
    ]
  ],
  [
    [
      42631,
      42631
    ],
    "valid"
  ],
  [
    [
      42632,
      42632
    ],
    "mapped",
    [
      42633
    ]
  ],
  [
    [
      42633,
      42633
    ],
    "valid"
  ],
  [
    [
      42634,
      42634
    ],
    "mapped",
    [
      42635
    ]
  ],
  [
    [
      42635,
      42635
    ],
    "valid"
  ],
  [
    [
      42636,
      42636
    ],
    "mapped",
    [
      42637
    ]
  ],
  [
    [
      42637,
      42637
    ],
    "valid"
  ],
  [
    [
      42638,
      42638
    ],
    "mapped",
    [
      42639
    ]
  ],
  [
    [
      42639,
      42639
    ],
    "valid"
  ],
  [
    [
      42640,
      42640
    ],
    "mapped",
    [
      42641
    ]
  ],
  [
    [
      42641,
      42641
    ],
    "valid"
  ],
  [
    [
      42642,
      42642
    ],
    "mapped",
    [
      42643
    ]
  ],
  [
    [
      42643,
      42643
    ],
    "valid"
  ],
  [
    [
      42644,
      42644
    ],
    "mapped",
    [
      42645
    ]
  ],
  [
    [
      42645,
      42645
    ],
    "valid"
  ],
  [
    [
      42646,
      42646
    ],
    "mapped",
    [
      42647
    ]
  ],
  [
    [
      42647,
      42647
    ],
    "valid"
  ],
  [
    [
      42648,
      42648
    ],
    "mapped",
    [
      42649
    ]
  ],
  [
    [
      42649,
      42649
    ],
    "valid"
  ],
  [
    [
      42650,
      42650
    ],
    "mapped",
    [
      42651
    ]
  ],
  [
    [
      42651,
      42651
    ],
    "valid"
  ],
  [
    [
      42652,
      42652
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      42653,
      42653
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      42654,
      42654
    ],
    "valid"
  ],
  [
    [
      42655,
      42655
    ],
    "valid"
  ],
  [
    [
      42656,
      42725
    ],
    "valid"
  ],
  [
    [
      42726,
      42735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42736,
      42737
    ],
    "valid"
  ],
  [
    [
      42738,
      42743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42744,
      42751
    ],
    "disallowed"
  ],
  [
    [
      42752,
      42774
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42775,
      42778
    ],
    "valid"
  ],
  [
    [
      42779,
      42783
    ],
    "valid"
  ],
  [
    [
      42784,
      42785
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42786,
      42786
    ],
    "mapped",
    [
      42787
    ]
  ],
  [
    [
      42787,
      42787
    ],
    "valid"
  ],
  [
    [
      42788,
      42788
    ],
    "mapped",
    [
      42789
    ]
  ],
  [
    [
      42789,
      42789
    ],
    "valid"
  ],
  [
    [
      42790,
      42790
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      42791,
      42791
    ],
    "valid"
  ],
  [
    [
      42792,
      42792
    ],
    "mapped",
    [
      42793
    ]
  ],
  [
    [
      42793,
      42793
    ],
    "valid"
  ],
  [
    [
      42794,
      42794
    ],
    "mapped",
    [
      42795
    ]
  ],
  [
    [
      42795,
      42795
    ],
    "valid"
  ],
  [
    [
      42796,
      42796
    ],
    "mapped",
    [
      42797
    ]
  ],
  [
    [
      42797,
      42797
    ],
    "valid"
  ],
  [
    [
      42798,
      42798
    ],
    "mapped",
    [
      42799
    ]
  ],
  [
    [
      42799,
      42801
    ],
    "valid"
  ],
  [
    [
      42802,
      42802
    ],
    "mapped",
    [
      42803
    ]
  ],
  [
    [
      42803,
      42803
    ],
    "valid"
  ],
  [
    [
      42804,
      42804
    ],
    "mapped",
    [
      42805
    ]
  ],
  [
    [
      42805,
      42805
    ],
    "valid"
  ],
  [
    [
      42806,
      42806
    ],
    "mapped",
    [
      42807
    ]
  ],
  [
    [
      42807,
      42807
    ],
    "valid"
  ],
  [
    [
      42808,
      42808
    ],
    "mapped",
    [
      42809
    ]
  ],
  [
    [
      42809,
      42809
    ],
    "valid"
  ],
  [
    [
      42810,
      42810
    ],
    "mapped",
    [
      42811
    ]
  ],
  [
    [
      42811,
      42811
    ],
    "valid"
  ],
  [
    [
      42812,
      42812
    ],
    "mapped",
    [
      42813
    ]
  ],
  [
    [
      42813,
      42813
    ],
    "valid"
  ],
  [
    [
      42814,
      42814
    ],
    "mapped",
    [
      42815
    ]
  ],
  [
    [
      42815,
      42815
    ],
    "valid"
  ],
  [
    [
      42816,
      42816
    ],
    "mapped",
    [
      42817
    ]
  ],
  [
    [
      42817,
      42817
    ],
    "valid"
  ],
  [
    [
      42818,
      42818
    ],
    "mapped",
    [
      42819
    ]
  ],
  [
    [
      42819,
      42819
    ],
    "valid"
  ],
  [
    [
      42820,
      42820
    ],
    "mapped",
    [
      42821
    ]
  ],
  [
    [
      42821,
      42821
    ],
    "valid"
  ],
  [
    [
      42822,
      42822
    ],
    "mapped",
    [
      42823
    ]
  ],
  [
    [
      42823,
      42823
    ],
    "valid"
  ],
  [
    [
      42824,
      42824
    ],
    "mapped",
    [
      42825
    ]
  ],
  [
    [
      42825,
      42825
    ],
    "valid"
  ],
  [
    [
      42826,
      42826
    ],
    "mapped",
    [
      42827
    ]
  ],
  [
    [
      42827,
      42827
    ],
    "valid"
  ],
  [
    [
      42828,
      42828
    ],
    "mapped",
    [
      42829
    ]
  ],
  [
    [
      42829,
      42829
    ],
    "valid"
  ],
  [
    [
      42830,
      42830
    ],
    "mapped",
    [
      42831
    ]
  ],
  [
    [
      42831,
      42831
    ],
    "valid"
  ],
  [
    [
      42832,
      42832
    ],
    "mapped",
    [
      42833
    ]
  ],
  [
    [
      42833,
      42833
    ],
    "valid"
  ],
  [
    [
      42834,
      42834
    ],
    "mapped",
    [
      42835
    ]
  ],
  [
    [
      42835,
      42835
    ],
    "valid"
  ],
  [
    [
      42836,
      42836
    ],
    "mapped",
    [
      42837
    ]
  ],
  [
    [
      42837,
      42837
    ],
    "valid"
  ],
  [
    [
      42838,
      42838
    ],
    "mapped",
    [
      42839
    ]
  ],
  [
    [
      42839,
      42839
    ],
    "valid"
  ],
  [
    [
      42840,
      42840
    ],
    "mapped",
    [
      42841
    ]
  ],
  [
    [
      42841,
      42841
    ],
    "valid"
  ],
  [
    [
      42842,
      42842
    ],
    "mapped",
    [
      42843
    ]
  ],
  [
    [
      42843,
      42843
    ],
    "valid"
  ],
  [
    [
      42844,
      42844
    ],
    "mapped",
    [
      42845
    ]
  ],
  [
    [
      42845,
      42845
    ],
    "valid"
  ],
  [
    [
      42846,
      42846
    ],
    "mapped",
    [
      42847
    ]
  ],
  [
    [
      42847,
      42847
    ],
    "valid"
  ],
  [
    [
      42848,
      42848
    ],
    "mapped",
    [
      42849
    ]
  ],
  [
    [
      42849,
      42849
    ],
    "valid"
  ],
  [
    [
      42850,
      42850
    ],
    "mapped",
    [
      42851
    ]
  ],
  [
    [
      42851,
      42851
    ],
    "valid"
  ],
  [
    [
      42852,
      42852
    ],
    "mapped",
    [
      42853
    ]
  ],
  [
    [
      42853,
      42853
    ],
    "valid"
  ],
  [
    [
      42854,
      42854
    ],
    "mapped",
    [
      42855
    ]
  ],
  [
    [
      42855,
      42855
    ],
    "valid"
  ],
  [
    [
      42856,
      42856
    ],
    "mapped",
    [
      42857
    ]
  ],
  [
    [
      42857,
      42857
    ],
    "valid"
  ],
  [
    [
      42858,
      42858
    ],
    "mapped",
    [
      42859
    ]
  ],
  [
    [
      42859,
      42859
    ],
    "valid"
  ],
  [
    [
      42860,
      42860
    ],
    "mapped",
    [
      42861
    ]
  ],
  [
    [
      42861,
      42861
    ],
    "valid"
  ],
  [
    [
      42862,
      42862
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42863,
      42863
    ],
    "valid"
  ],
  [
    [
      42864,
      42864
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42865,
      42872
    ],
    "valid"
  ],
  [
    [
      42873,
      42873
    ],
    "mapped",
    [
      42874
    ]
  ],
  [
    [
      42874,
      42874
    ],
    "valid"
  ],
  [
    [
      42875,
      42875
    ],
    "mapped",
    [
      42876
    ]
  ],
  [
    [
      42876,
      42876
    ],
    "valid"
  ],
  [
    [
      42877,
      42877
    ],
    "mapped",
    [
      7545
    ]
  ],
  [
    [
      42878,
      42878
    ],
    "mapped",
    [
      42879
    ]
  ],
  [
    [
      42879,
      42879
    ],
    "valid"
  ],
  [
    [
      42880,
      42880
    ],
    "mapped",
    [
      42881
    ]
  ],
  [
    [
      42881,
      42881
    ],
    "valid"
  ],
  [
    [
      42882,
      42882
    ],
    "mapped",
    [
      42883
    ]
  ],
  [
    [
      42883,
      42883
    ],
    "valid"
  ],
  [
    [
      42884,
      42884
    ],
    "mapped",
    [
      42885
    ]
  ],
  [
    [
      42885,
      42885
    ],
    "valid"
  ],
  [
    [
      42886,
      42886
    ],
    "mapped",
    [
      42887
    ]
  ],
  [
    [
      42887,
      42888
    ],
    "valid"
  ],
  [
    [
      42889,
      42890
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42891,
      42891
    ],
    "mapped",
    [
      42892
    ]
  ],
  [
    [
      42892,
      42892
    ],
    "valid"
  ],
  [
    [
      42893,
      42893
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      42894,
      42894
    ],
    "valid"
  ],
  [
    [
      42895,
      42895
    ],
    "valid"
  ],
  [
    [
      42896,
      42896
    ],
    "mapped",
    [
      42897
    ]
  ],
  [
    [
      42897,
      42897
    ],
    "valid"
  ],
  [
    [
      42898,
      42898
    ],
    "mapped",
    [
      42899
    ]
  ],
  [
    [
      42899,
      42899
    ],
    "valid"
  ],
  [
    [
      42900,
      42901
    ],
    "valid"
  ],
  [
    [
      42902,
      42902
    ],
    "mapped",
    [
      42903
    ]
  ],
  [
    [
      42903,
      42903
    ],
    "valid"
  ],
  [
    [
      42904,
      42904
    ],
    "mapped",
    [
      42905
    ]
  ],
  [
    [
      42905,
      42905
    ],
    "valid"
  ],
  [
    [
      42906,
      42906
    ],
    "mapped",
    [
      42907
    ]
  ],
  [
    [
      42907,
      42907
    ],
    "valid"
  ],
  [
    [
      42908,
      42908
    ],
    "mapped",
    [
      42909
    ]
  ],
  [
    [
      42909,
      42909
    ],
    "valid"
  ],
  [
    [
      42910,
      42910
    ],
    "mapped",
    [
      42911
    ]
  ],
  [
    [
      42911,
      42911
    ],
    "valid"
  ],
  [
    [
      42912,
      42912
    ],
    "mapped",
    [
      42913
    ]
  ],
  [
    [
      42913,
      42913
    ],
    "valid"
  ],
  [
    [
      42914,
      42914
    ],
    "mapped",
    [
      42915
    ]
  ],
  [
    [
      42915,
      42915
    ],
    "valid"
  ],
  [
    [
      42916,
      42916
    ],
    "mapped",
    [
      42917
    ]
  ],
  [
    [
      42917,
      42917
    ],
    "valid"
  ],
  [
    [
      42918,
      42918
    ],
    "mapped",
    [
      42919
    ]
  ],
  [
    [
      42919,
      42919
    ],
    "valid"
  ],
  [
    [
      42920,
      42920
    ],
    "mapped",
    [
      42921
    ]
  ],
  [
    [
      42921,
      42921
    ],
    "valid"
  ],
  [
    [
      42922,
      42922
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      42923,
      42923
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      42924,
      42924
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      42925,
      42925
    ],
    "mapped",
    [
      620
    ]
  ],
  [
    [
      42926,
      42927
    ],
    "disallowed"
  ],
  [
    [
      42928,
      42928
    ],
    "mapped",
    [
      670
    ]
  ],
  [
    [
      42929,
      42929
    ],
    "mapped",
    [
      647
    ]
  ],
  [
    [
      42930,
      42930
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      42931,
      42931
    ],
    "mapped",
    [
      43859
    ]
  ],
  [
    [
      42932,
      42932
    ],
    "mapped",
    [
      42933
    ]
  ],
  [
    [
      42933,
      42933
    ],
    "valid"
  ],
  [
    [
      42934,
      42934
    ],
    "mapped",
    [
      42935
    ]
  ],
  [
    [
      42935,
      42935
    ],
    "valid"
  ],
  [
    [
      42936,
      42998
    ],
    "disallowed"
  ],
  [
    [
      42999,
      42999
    ],
    "valid"
  ],
  [
    [
      43e3,
      43e3
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      43001,
      43001
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      43002,
      43002
    ],
    "valid"
  ],
  [
    [
      43003,
      43007
    ],
    "valid"
  ],
  [
    [
      43008,
      43047
    ],
    "valid"
  ],
  [
    [
      43048,
      43051
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43052,
      43055
    ],
    "disallowed"
  ],
  [
    [
      43056,
      43065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43066,
      43071
    ],
    "disallowed"
  ],
  [
    [
      43072,
      43123
    ],
    "valid"
  ],
  [
    [
      43124,
      43127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43128,
      43135
    ],
    "disallowed"
  ],
  [
    [
      43136,
      43204
    ],
    "valid"
  ],
  [
    [
      43205,
      43213
    ],
    "disallowed"
  ],
  [
    [
      43214,
      43215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43216,
      43225
    ],
    "valid"
  ],
  [
    [
      43226,
      43231
    ],
    "disallowed"
  ],
  [
    [
      43232,
      43255
    ],
    "valid"
  ],
  [
    [
      43256,
      43258
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43259,
      43259
    ],
    "valid"
  ],
  [
    [
      43260,
      43260
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43261,
      43261
    ],
    "valid"
  ],
  [
    [
      43262,
      43263
    ],
    "disallowed"
  ],
  [
    [
      43264,
      43309
    ],
    "valid"
  ],
  [
    [
      43310,
      43311
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43312,
      43347
    ],
    "valid"
  ],
  [
    [
      43348,
      43358
    ],
    "disallowed"
  ],
  [
    [
      43359,
      43359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43360,
      43388
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43389,
      43391
    ],
    "disallowed"
  ],
  [
    [
      43392,
      43456
    ],
    "valid"
  ],
  [
    [
      43457,
      43469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43470,
      43470
    ],
    "disallowed"
  ],
  [
    [
      43471,
      43481
    ],
    "valid"
  ],
  [
    [
      43482,
      43485
    ],
    "disallowed"
  ],
  [
    [
      43486,
      43487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43488,
      43518
    ],
    "valid"
  ],
  [
    [
      43519,
      43519
    ],
    "disallowed"
  ],
  [
    [
      43520,
      43574
    ],
    "valid"
  ],
  [
    [
      43575,
      43583
    ],
    "disallowed"
  ],
  [
    [
      43584,
      43597
    ],
    "valid"
  ],
  [
    [
      43598,
      43599
    ],
    "disallowed"
  ],
  [
    [
      43600,
      43609
    ],
    "valid"
  ],
  [
    [
      43610,
      43611
    ],
    "disallowed"
  ],
  [
    [
      43612,
      43615
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43616,
      43638
    ],
    "valid"
  ],
  [
    [
      43639,
      43641
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43642,
      43643
    ],
    "valid"
  ],
  [
    [
      43644,
      43647
    ],
    "valid"
  ],
  [
    [
      43648,
      43714
    ],
    "valid"
  ],
  [
    [
      43715,
      43738
    ],
    "disallowed"
  ],
  [
    [
      43739,
      43741
    ],
    "valid"
  ],
  [
    [
      43742,
      43743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43744,
      43759
    ],
    "valid"
  ],
  [
    [
      43760,
      43761
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43762,
      43766
    ],
    "valid"
  ],
  [
    [
      43767,
      43776
    ],
    "disallowed"
  ],
  [
    [
      43777,
      43782
    ],
    "valid"
  ],
  [
    [
      43783,
      43784
    ],
    "disallowed"
  ],
  [
    [
      43785,
      43790
    ],
    "valid"
  ],
  [
    [
      43791,
      43792
    ],
    "disallowed"
  ],
  [
    [
      43793,
      43798
    ],
    "valid"
  ],
  [
    [
      43799,
      43807
    ],
    "disallowed"
  ],
  [
    [
      43808,
      43814
    ],
    "valid"
  ],
  [
    [
      43815,
      43815
    ],
    "disallowed"
  ],
  [
    [
      43816,
      43822
    ],
    "valid"
  ],
  [
    [
      43823,
      43823
    ],
    "disallowed"
  ],
  [
    [
      43824,
      43866
    ],
    "valid"
  ],
  [
    [
      43867,
      43867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43868,
      43868
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      43869,
      43869
    ],
    "mapped",
    [
      43831
    ]
  ],
  [
    [
      43870,
      43870
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      43871,
      43871
    ],
    "mapped",
    [
      43858
    ]
  ],
  [
    [
      43872,
      43875
    ],
    "valid"
  ],
  [
    [
      43876,
      43877
    ],
    "valid"
  ],
  [
    [
      43878,
      43887
    ],
    "disallowed"
  ],
  [
    [
      43888,
      43888
    ],
    "mapped",
    [
      5024
    ]
  ],
  [
    [
      43889,
      43889
    ],
    "mapped",
    [
      5025
    ]
  ],
  [
    [
      43890,
      43890
    ],
    "mapped",
    [
      5026
    ]
  ],
  [
    [
      43891,
      43891
    ],
    "mapped",
    [
      5027
    ]
  ],
  [
    [
      43892,
      43892
    ],
    "mapped",
    [
      5028
    ]
  ],
  [
    [
      43893,
      43893
    ],
    "mapped",
    [
      5029
    ]
  ],
  [
    [
      43894,
      43894
    ],
    "mapped",
    [
      5030
    ]
  ],
  [
    [
      43895,
      43895
    ],
    "mapped",
    [
      5031
    ]
  ],
  [
    [
      43896,
      43896
    ],
    "mapped",
    [
      5032
    ]
  ],
  [
    [
      43897,
      43897
    ],
    "mapped",
    [
      5033
    ]
  ],
  [
    [
      43898,
      43898
    ],
    "mapped",
    [
      5034
    ]
  ],
  [
    [
      43899,
      43899
    ],
    "mapped",
    [
      5035
    ]
  ],
  [
    [
      43900,
      43900
    ],
    "mapped",
    [
      5036
    ]
  ],
  [
    [
      43901,
      43901
    ],
    "mapped",
    [
      5037
    ]
  ],
  [
    [
      43902,
      43902
    ],
    "mapped",
    [
      5038
    ]
  ],
  [
    [
      43903,
      43903
    ],
    "mapped",
    [
      5039
    ]
  ],
  [
    [
      43904,
      43904
    ],
    "mapped",
    [
      5040
    ]
  ],
  [
    [
      43905,
      43905
    ],
    "mapped",
    [
      5041
    ]
  ],
  [
    [
      43906,
      43906
    ],
    "mapped",
    [
      5042
    ]
  ],
  [
    [
      43907,
      43907
    ],
    "mapped",
    [
      5043
    ]
  ],
  [
    [
      43908,
      43908
    ],
    "mapped",
    [
      5044
    ]
  ],
  [
    [
      43909,
      43909
    ],
    "mapped",
    [
      5045
    ]
  ],
  [
    [
      43910,
      43910
    ],
    "mapped",
    [
      5046
    ]
  ],
  [
    [
      43911,
      43911
    ],
    "mapped",
    [
      5047
    ]
  ],
  [
    [
      43912,
      43912
    ],
    "mapped",
    [
      5048
    ]
  ],
  [
    [
      43913,
      43913
    ],
    "mapped",
    [
      5049
    ]
  ],
  [
    [
      43914,
      43914
    ],
    "mapped",
    [
      5050
    ]
  ],
  [
    [
      43915,
      43915
    ],
    "mapped",
    [
      5051
    ]
  ],
  [
    [
      43916,
      43916
    ],
    "mapped",
    [
      5052
    ]
  ],
  [
    [
      43917,
      43917
    ],
    "mapped",
    [
      5053
    ]
  ],
  [
    [
      43918,
      43918
    ],
    "mapped",
    [
      5054
    ]
  ],
  [
    [
      43919,
      43919
    ],
    "mapped",
    [
      5055
    ]
  ],
  [
    [
      43920,
      43920
    ],
    "mapped",
    [
      5056
    ]
  ],
  [
    [
      43921,
      43921
    ],
    "mapped",
    [
      5057
    ]
  ],
  [
    [
      43922,
      43922
    ],
    "mapped",
    [
      5058
    ]
  ],
  [
    [
      43923,
      43923
    ],
    "mapped",
    [
      5059
    ]
  ],
  [
    [
      43924,
      43924
    ],
    "mapped",
    [
      5060
    ]
  ],
  [
    [
      43925,
      43925
    ],
    "mapped",
    [
      5061
    ]
  ],
  [
    [
      43926,
      43926
    ],
    "mapped",
    [
      5062
    ]
  ],
  [
    [
      43927,
      43927
    ],
    "mapped",
    [
      5063
    ]
  ],
  [
    [
      43928,
      43928
    ],
    "mapped",
    [
      5064
    ]
  ],
  [
    [
      43929,
      43929
    ],
    "mapped",
    [
      5065
    ]
  ],
  [
    [
      43930,
      43930
    ],
    "mapped",
    [
      5066
    ]
  ],
  [
    [
      43931,
      43931
    ],
    "mapped",
    [
      5067
    ]
  ],
  [
    [
      43932,
      43932
    ],
    "mapped",
    [
      5068
    ]
  ],
  [
    [
      43933,
      43933
    ],
    "mapped",
    [
      5069
    ]
  ],
  [
    [
      43934,
      43934
    ],
    "mapped",
    [
      5070
    ]
  ],
  [
    [
      43935,
      43935
    ],
    "mapped",
    [
      5071
    ]
  ],
  [
    [
      43936,
      43936
    ],
    "mapped",
    [
      5072
    ]
  ],
  [
    [
      43937,
      43937
    ],
    "mapped",
    [
      5073
    ]
  ],
  [
    [
      43938,
      43938
    ],
    "mapped",
    [
      5074
    ]
  ],
  [
    [
      43939,
      43939
    ],
    "mapped",
    [
      5075
    ]
  ],
  [
    [
      43940,
      43940
    ],
    "mapped",
    [
      5076
    ]
  ],
  [
    [
      43941,
      43941
    ],
    "mapped",
    [
      5077
    ]
  ],
  [
    [
      43942,
      43942
    ],
    "mapped",
    [
      5078
    ]
  ],
  [
    [
      43943,
      43943
    ],
    "mapped",
    [
      5079
    ]
  ],
  [
    [
      43944,
      43944
    ],
    "mapped",
    [
      5080
    ]
  ],
  [
    [
      43945,
      43945
    ],
    "mapped",
    [
      5081
    ]
  ],
  [
    [
      43946,
      43946
    ],
    "mapped",
    [
      5082
    ]
  ],
  [
    [
      43947,
      43947
    ],
    "mapped",
    [
      5083
    ]
  ],
  [
    [
      43948,
      43948
    ],
    "mapped",
    [
      5084
    ]
  ],
  [
    [
      43949,
      43949
    ],
    "mapped",
    [
      5085
    ]
  ],
  [
    [
      43950,
      43950
    ],
    "mapped",
    [
      5086
    ]
  ],
  [
    [
      43951,
      43951
    ],
    "mapped",
    [
      5087
    ]
  ],
  [
    [
      43952,
      43952
    ],
    "mapped",
    [
      5088
    ]
  ],
  [
    [
      43953,
      43953
    ],
    "mapped",
    [
      5089
    ]
  ],
  [
    [
      43954,
      43954
    ],
    "mapped",
    [
      5090
    ]
  ],
  [
    [
      43955,
      43955
    ],
    "mapped",
    [
      5091
    ]
  ],
  [
    [
      43956,
      43956
    ],
    "mapped",
    [
      5092
    ]
  ],
  [
    [
      43957,
      43957
    ],
    "mapped",
    [
      5093
    ]
  ],
  [
    [
      43958,
      43958
    ],
    "mapped",
    [
      5094
    ]
  ],
  [
    [
      43959,
      43959
    ],
    "mapped",
    [
      5095
    ]
  ],
  [
    [
      43960,
      43960
    ],
    "mapped",
    [
      5096
    ]
  ],
  [
    [
      43961,
      43961
    ],
    "mapped",
    [
      5097
    ]
  ],
  [
    [
      43962,
      43962
    ],
    "mapped",
    [
      5098
    ]
  ],
  [
    [
      43963,
      43963
    ],
    "mapped",
    [
      5099
    ]
  ],
  [
    [
      43964,
      43964
    ],
    "mapped",
    [
      5100
    ]
  ],
  [
    [
      43965,
      43965
    ],
    "mapped",
    [
      5101
    ]
  ],
  [
    [
      43966,
      43966
    ],
    "mapped",
    [
      5102
    ]
  ],
  [
    [
      43967,
      43967
    ],
    "mapped",
    [
      5103
    ]
  ],
  [
    [
      43968,
      44010
    ],
    "valid"
  ],
  [
    [
      44011,
      44011
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      44012,
      44013
    ],
    "valid"
  ],
  [
    [
      44014,
      44015
    ],
    "disallowed"
  ],
  [
    [
      44016,
      44025
    ],
    "valid"
  ],
  [
    [
      44026,
      44031
    ],
    "disallowed"
  ],
  [
    [
      44032,
      55203
    ],
    "valid"
  ],
  [
    [
      55204,
      55215
    ],
    "disallowed"
  ],
  [
    [
      55216,
      55238
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55239,
      55242
    ],
    "disallowed"
  ],
  [
    [
      55243,
      55291
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55292,
      55295
    ],
    "disallowed"
  ],
  [
    [
      55296,
      57343
    ],
    "disallowed"
  ],
  [
    [
      57344,
      63743
    ],
    "disallowed"
  ],
  [
    [
      63744,
      63744
    ],
    "mapped",
    [
      35912
    ]
  ],
  [
    [
      63745,
      63745
    ],
    "mapped",
    [
      26356
    ]
  ],
  [
    [
      63746,
      63746
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      63747,
      63747
    ],
    "mapped",
    [
      36040
    ]
  ],
  [
    [
      63748,
      63748
    ],
    "mapped",
    [
      28369
    ]
  ],
  [
    [
      63749,
      63749
    ],
    "mapped",
    [
      20018
    ]
  ],
  [
    [
      63750,
      63750
    ],
    "mapped",
    [
      21477
    ]
  ],
  [
    [
      63751,
      63752
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      63753,
      63753
    ],
    "mapped",
    [
      22865
    ]
  ],
  [
    [
      63754,
      63754
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      63755,
      63755
    ],
    "mapped",
    [
      21895
    ]
  ],
  [
    [
      63756,
      63756
    ],
    "mapped",
    [
      22856
    ]
  ],
  [
    [
      63757,
      63757
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      63758,
      63758
    ],
    "mapped",
    [
      30313
    ]
  ],
  [
    [
      63759,
      63759
    ],
    "mapped",
    [
      32645
    ]
  ],
  [
    [
      63760,
      63760
    ],
    "mapped",
    [
      34367
    ]
  ],
  [
    [
      63761,
      63761
    ],
    "mapped",
    [
      34746
    ]
  ],
  [
    [
      63762,
      63762
    ],
    "mapped",
    [
      35064
    ]
  ],
  [
    [
      63763,
      63763
    ],
    "mapped",
    [
      37007
    ]
  ],
  [
    [
      63764,
      63764
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63765,
      63765
    ],
    "mapped",
    [
      27931
    ]
  ],
  [
    [
      63766,
      63766
    ],
    "mapped",
    [
      28889
    ]
  ],
  [
    [
      63767,
      63767
    ],
    "mapped",
    [
      29662
    ]
  ],
  [
    [
      63768,
      63768
    ],
    "mapped",
    [
      33853
    ]
  ],
  [
    [
      63769,
      63769
    ],
    "mapped",
    [
      37226
    ]
  ],
  [
    [
      63770,
      63770
    ],
    "mapped",
    [
      39409
    ]
  ],
  [
    [
      63771,
      63771
    ],
    "mapped",
    [
      20098
    ]
  ],
  [
    [
      63772,
      63772
    ],
    "mapped",
    [
      21365
    ]
  ],
  [
    [
      63773,
      63773
    ],
    "mapped",
    [
      27396
    ]
  ],
  [
    [
      63774,
      63774
    ],
    "mapped",
    [
      29211
    ]
  ],
  [
    [
      63775,
      63775
    ],
    "mapped",
    [
      34349
    ]
  ],
  [
    [
      63776,
      63776
    ],
    "mapped",
    [
      40478
    ]
  ],
  [
    [
      63777,
      63777
    ],
    "mapped",
    [
      23888
    ]
  ],
  [
    [
      63778,
      63778
    ],
    "mapped",
    [
      28651
    ]
  ],
  [
    [
      63779,
      63779
    ],
    "mapped",
    [
      34253
    ]
  ],
  [
    [
      63780,
      63780
    ],
    "mapped",
    [
      35172
    ]
  ],
  [
    [
      63781,
      63781
    ],
    "mapped",
    [
      25289
    ]
  ],
  [
    [
      63782,
      63782
    ],
    "mapped",
    [
      33240
    ]
  ],
  [
    [
      63783,
      63783
    ],
    "mapped",
    [
      34847
    ]
  ],
  [
    [
      63784,
      63784
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      63785,
      63785
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      63786,
      63786
    ],
    "mapped",
    [
      28010
    ]
  ],
  [
    [
      63787,
      63787
    ],
    "mapped",
    [
      29436
    ]
  ],
  [
    [
      63788,
      63788
    ],
    "mapped",
    [
      37070
    ]
  ],
  [
    [
      63789,
      63789
    ],
    "mapped",
    [
      20358
    ]
  ],
  [
    [
      63790,
      63790
    ],
    "mapped",
    [
      20919
    ]
  ],
  [
    [
      63791,
      63791
    ],
    "mapped",
    [
      21214
    ]
  ],
  [
    [
      63792,
      63792
    ],
    "mapped",
    [
      25796
    ]
  ],
  [
    [
      63793,
      63793
    ],
    "mapped",
    [
      27347
    ]
  ],
  [
    [
      63794,
      63794
    ],
    "mapped",
    [
      29200
    ]
  ],
  [
    [
      63795,
      63795
    ],
    "mapped",
    [
      30439
    ]
  ],
  [
    [
      63796,
      63796
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      63797,
      63797
    ],
    "mapped",
    [
      34310
    ]
  ],
  [
    [
      63798,
      63798
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      63799,
      63799
    ],
    "mapped",
    [
      36335
    ]
  ],
  [
    [
      63800,
      63800
    ],
    "mapped",
    [
      38706
    ]
  ],
  [
    [
      63801,
      63801
    ],
    "mapped",
    [
      39791
    ]
  ],
  [
    [
      63802,
      63802
    ],
    "mapped",
    [
      40442
    ]
  ],
  [
    [
      63803,
      63803
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      63804,
      63804
    ],
    "mapped",
    [
      31103
    ]
  ],
  [
    [
      63805,
      63805
    ],
    "mapped",
    [
      32160
    ]
  ],
  [
    [
      63806,
      63806
    ],
    "mapped",
    [
      33737
    ]
  ],
  [
    [
      63807,
      63807
    ],
    "mapped",
    [
      37636
    ]
  ],
  [
    [
      63808,
      63808
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      63809,
      63809
    ],
    "mapped",
    [
      35542
    ]
  ],
  [
    [
      63810,
      63810
    ],
    "mapped",
    [
      22751
    ]
  ],
  [
    [
      63811,
      63811
    ],
    "mapped",
    [
      24324
    ]
  ],
  [
    [
      63812,
      63812
    ],
    "mapped",
    [
      31840
    ]
  ],
  [
    [
      63813,
      63813
    ],
    "mapped",
    [
      32894
    ]
  ],
  [
    [
      63814,
      63814
    ],
    "mapped",
    [
      29282
    ]
  ],
  [
    [
      63815,
      63815
    ],
    "mapped",
    [
      30922
    ]
  ],
  [
    [
      63816,
      63816
    ],
    "mapped",
    [
      36034
    ]
  ],
  [
    [
      63817,
      63817
    ],
    "mapped",
    [
      38647
    ]
  ],
  [
    [
      63818,
      63818
    ],
    "mapped",
    [
      22744
    ]
  ],
  [
    [
      63819,
      63819
    ],
    "mapped",
    [
      23650
    ]
  ],
  [
    [
      63820,
      63820
    ],
    "mapped",
    [
      27155
    ]
  ],
  [
    [
      63821,
      63821
    ],
    "mapped",
    [
      28122
    ]
  ],
  [
    [
      63822,
      63822
    ],
    "mapped",
    [
      28431
    ]
  ],
  [
    [
      63823,
      63823
    ],
    "mapped",
    [
      32047
    ]
  ],
  [
    [
      63824,
      63824
    ],
    "mapped",
    [
      32311
    ]
  ],
  [
    [
      63825,
      63825
    ],
    "mapped",
    [
      38475
    ]
  ],
  [
    [
      63826,
      63826
    ],
    "mapped",
    [
      21202
    ]
  ],
  [
    [
      63827,
      63827
    ],
    "mapped",
    [
      32907
    ]
  ],
  [
    [
      63828,
      63828
    ],
    "mapped",
    [
      20956
    ]
  ],
  [
    [
      63829,
      63829
    ],
    "mapped",
    [
      20940
    ]
  ],
  [
    [
      63830,
      63830
    ],
    "mapped",
    [
      31260
    ]
  ],
  [
    [
      63831,
      63831
    ],
    "mapped",
    [
      32190
    ]
  ],
  [
    [
      63832,
      63832
    ],
    "mapped",
    [
      33777
    ]
  ],
  [
    [
      63833,
      63833
    ],
    "mapped",
    [
      38517
    ]
  ],
  [
    [
      63834,
      63834
    ],
    "mapped",
    [
      35712
    ]
  ],
  [
    [
      63835,
      63835
    ],
    "mapped",
    [
      25295
    ]
  ],
  [
    [
      63836,
      63836
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63837,
      63837
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      63838,
      63838
    ],
    "mapped",
    [
      20025
    ]
  ],
  [
    [
      63839,
      63839
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63840,
      63840
    ],
    "mapped",
    [
      24594
    ]
  ],
  [
    [
      63841,
      63841
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63842,
      63842
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      63843,
      63843
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      63844,
      63844
    ],
    "mapped",
    [
      30971
    ]
  ],
  [
    [
      63845,
      63845
    ],
    "mapped",
    [
      20415
    ]
  ],
  [
    [
      63846,
      63846
    ],
    "mapped",
    [
      24489
    ]
  ],
  [
    [
      63847,
      63847
    ],
    "mapped",
    [
      19981
    ]
  ],
  [
    [
      63848,
      63848
    ],
    "mapped",
    [
      27852
    ]
  ],
  [
    [
      63849,
      63849
    ],
    "mapped",
    [
      25976
    ]
  ],
  [
    [
      63850,
      63850
    ],
    "mapped",
    [
      32034
    ]
  ],
  [
    [
      63851,
      63851
    ],
    "mapped",
    [
      21443
    ]
  ],
  [
    [
      63852,
      63852
    ],
    "mapped",
    [
      22622
    ]
  ],
  [
    [
      63853,
      63853
    ],
    "mapped",
    [
      30465
    ]
  ],
  [
    [
      63854,
      63854
    ],
    "mapped",
    [
      33865
    ]
  ],
  [
    [
      63855,
      63855
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63856,
      63856
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      63857,
      63857
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      63858,
      63858
    ],
    "mapped",
    [
      27784
    ]
  ],
  [
    [
      63859,
      63859
    ],
    "mapped",
    [
      25342
    ]
  ],
  [
    [
      63860,
      63860
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      63861,
      63861
    ],
    "mapped",
    [
      25504
    ]
  ],
  [
    [
      63862,
      63862
    ],
    "mapped",
    [
      30053
    ]
  ],
  [
    [
      63863,
      63863
    ],
    "mapped",
    [
      20142
    ]
  ],
  [
    [
      63864,
      63864
    ],
    "mapped",
    [
      20841
    ]
  ],
  [
    [
      63865,
      63865
    ],
    "mapped",
    [
      20937
    ]
  ],
  [
    [
      63866,
      63866
    ],
    "mapped",
    [
      26753
    ]
  ],
  [
    [
      63867,
      63867
    ],
    "mapped",
    [
      31975
    ]
  ],
  [
    [
      63868,
      63868
    ],
    "mapped",
    [
      33391
    ]
  ],
  [
    [
      63869,
      63869
    ],
    "mapped",
    [
      35538
    ]
  ],
  [
    [
      63870,
      63870
    ],
    "mapped",
    [
      37327
    ]
  ],
  [
    [
      63871,
      63871
    ],
    "mapped",
    [
      21237
    ]
  ],
  [
    [
      63872,
      63872
    ],
    "mapped",
    [
      21570
    ]
  ],
  [
    [
      63873,
      63873
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      63874,
      63874
    ],
    "mapped",
    [
      24300
    ]
  ],
  [
    [
      63875,
      63875
    ],
    "mapped",
    [
      26053
    ]
  ],
  [
    [
      63876,
      63876
    ],
    "mapped",
    [
      28670
    ]
  ],
  [
    [
      63877,
      63877
    ],
    "mapped",
    [
      31018
    ]
  ],
  [
    [
      63878,
      63878
    ],
    "mapped",
    [
      38317
    ]
  ],
  [
    [
      63879,
      63879
    ],
    "mapped",
    [
      39530
    ]
  ],
  [
    [
      63880,
      63880
    ],
    "mapped",
    [
      40599
    ]
  ],
  [
    [
      63881,
      63881
    ],
    "mapped",
    [
      40654
    ]
  ],
  [
    [
      63882,
      63882
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      63883,
      63883
    ],
    "mapped",
    [
      26310
    ]
  ],
  [
    [
      63884,
      63884
    ],
    "mapped",
    [
      27511
    ]
  ],
  [
    [
      63885,
      63885
    ],
    "mapped",
    [
      36706
    ]
  ],
  [
    [
      63886,
      63886
    ],
    "mapped",
    [
      24180
    ]
  ],
  [
    [
      63887,
      63887
    ],
    "mapped",
    [
      24976
    ]
  ],
  [
    [
      63888,
      63888
    ],
    "mapped",
    [
      25088
    ]
  ],
  [
    [
      63889,
      63889
    ],
    "mapped",
    [
      25754
    ]
  ],
  [
    [
      63890,
      63890
    ],
    "mapped",
    [
      28451
    ]
  ],
  [
    [
      63891,
      63891
    ],
    "mapped",
    [
      29001
    ]
  ],
  [
    [
      63892,
      63892
    ],
    "mapped",
    [
      29833
    ]
  ],
  [
    [
      63893,
      63893
    ],
    "mapped",
    [
      31178
    ]
  ],
  [
    [
      63894,
      63894
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      63895,
      63895
    ],
    "mapped",
    [
      32879
    ]
  ],
  [
    [
      63896,
      63896
    ],
    "mapped",
    [
      36646
    ]
  ],
  [
    [
      63897,
      63897
    ],
    "mapped",
    [
      34030
    ]
  ],
  [
    [
      63898,
      63898
    ],
    "mapped",
    [
      36899
    ]
  ],
  [
    [
      63899,
      63899
    ],
    "mapped",
    [
      37706
    ]
  ],
  [
    [
      63900,
      63900
    ],
    "mapped",
    [
      21015
    ]
  ],
  [
    [
      63901,
      63901
    ],
    "mapped",
    [
      21155
    ]
  ],
  [
    [
      63902,
      63902
    ],
    "mapped",
    [
      21693
    ]
  ],
  [
    [
      63903,
      63903
    ],
    "mapped",
    [
      28872
    ]
  ],
  [
    [
      63904,
      63904
    ],
    "mapped",
    [
      35010
    ]
  ],
  [
    [
      63905,
      63905
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63906,
      63906
    ],
    "mapped",
    [
      24265
    ]
  ],
  [
    [
      63907,
      63907
    ],
    "mapped",
    [
      24565
    ]
  ],
  [
    [
      63908,
      63908
    ],
    "mapped",
    [
      25467
    ]
  ],
  [
    [
      63909,
      63909
    ],
    "mapped",
    [
      27566
    ]
  ],
  [
    [
      63910,
      63910
    ],
    "mapped",
    [
      31806
    ]
  ],
  [
    [
      63911,
      63911
    ],
    "mapped",
    [
      29557
    ]
  ],
  [
    [
      63912,
      63912
    ],
    "mapped",
    [
      20196
    ]
  ],
  [
    [
      63913,
      63913
    ],
    "mapped",
    [
      22265
    ]
  ],
  [
    [
      63914,
      63914
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63915,
      63915
    ],
    "mapped",
    [
      23994
    ]
  ],
  [
    [
      63916,
      63916
    ],
    "mapped",
    [
      24604
    ]
  ],
  [
    [
      63917,
      63917
    ],
    "mapped",
    [
      29618
    ]
  ],
  [
    [
      63918,
      63918
    ],
    "mapped",
    [
      29801
    ]
  ],
  [
    [
      63919,
      63919
    ],
    "mapped",
    [
      32666
    ]
  ],
  [
    [
      63920,
      63920
    ],
    "mapped",
    [
      32838
    ]
  ],
  [
    [
      63921,
      63921
    ],
    "mapped",
    [
      37428
    ]
  ],
  [
    [
      63922,
      63922
    ],
    "mapped",
    [
      38646
    ]
  ],
  [
    [
      63923,
      63923
    ],
    "mapped",
    [
      38728
    ]
  ],
  [
    [
      63924,
      63924
    ],
    "mapped",
    [
      38936
    ]
  ],
  [
    [
      63925,
      63925
    ],
    "mapped",
    [
      20363
    ]
  ],
  [
    [
      63926,
      63926
    ],
    "mapped",
    [
      31150
    ]
  ],
  [
    [
      63927,
      63927
    ],
    "mapped",
    [
      37300
    ]
  ],
  [
    [
      63928,
      63928
    ],
    "mapped",
    [
      38584
    ]
  ],
  [
    [
      63929,
      63929
    ],
    "mapped",
    [
      24801
    ]
  ],
  [
    [
      63930,
      63930
    ],
    "mapped",
    [
      20102
    ]
  ],
  [
    [
      63931,
      63931
    ],
    "mapped",
    [
      20698
    ]
  ],
  [
    [
      63932,
      63932
    ],
    "mapped",
    [
      23534
    ]
  ],
  [
    [
      63933,
      63933
    ],
    "mapped",
    [
      23615
    ]
  ],
  [
    [
      63934,
      63934
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      63935,
      63935
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63936,
      63936
    ],
    "mapped",
    [
      29134
    ]
  ],
  [
    [
      63937,
      63937
    ],
    "mapped",
    [
      30274
    ]
  ],
  [
    [
      63938,
      63938
    ],
    "mapped",
    [
      34044
    ]
  ],
  [
    [
      63939,
      63939
    ],
    "mapped",
    [
      36988
    ]
  ],
  [
    [
      63940,
      63940
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      63941,
      63941
    ],
    "mapped",
    [
      26248
    ]
  ],
  [
    [
      63942,
      63942
    ],
    "mapped",
    [
      38446
    ]
  ],
  [
    [
      63943,
      63943
    ],
    "mapped",
    [
      21129
    ]
  ],
  [
    [
      63944,
      63944
    ],
    "mapped",
    [
      26491
    ]
  ],
  [
    [
      63945,
      63945
    ],
    "mapped",
    [
      26611
    ]
  ],
  [
    [
      63946,
      63946
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      63947,
      63947
    ],
    "mapped",
    [
      28316
    ]
  ],
  [
    [
      63948,
      63948
    ],
    "mapped",
    [
      29705
    ]
  ],
  [
    [
      63949,
      63949
    ],
    "mapped",
    [
      30041
    ]
  ],
  [
    [
      63950,
      63950
    ],
    "mapped",
    [
      30827
    ]
  ],
  [
    [
      63951,
      63951
    ],
    "mapped",
    [
      32016
    ]
  ],
  [
    [
      63952,
      63952
    ],
    "mapped",
    [
      39006
    ]
  ],
  [
    [
      63953,
      63953
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      63954,
      63954
    ],
    "mapped",
    [
      25134
    ]
  ],
  [
    [
      63955,
      63955
    ],
    "mapped",
    [
      38520
    ]
  ],
  [
    [
      63956,
      63956
    ],
    "mapped",
    [
      20523
    ]
  ],
  [
    [
      63957,
      63957
    ],
    "mapped",
    [
      23833
    ]
  ],
  [
    [
      63958,
      63958
    ],
    "mapped",
    [
      28138
    ]
  ],
  [
    [
      63959,
      63959
    ],
    "mapped",
    [
      36650
    ]
  ],
  [
    [
      63960,
      63960
    ],
    "mapped",
    [
      24459
    ]
  ],
  [
    [
      63961,
      63961
    ],
    "mapped",
    [
      24900
    ]
  ],
  [
    [
      63962,
      63962
    ],
    "mapped",
    [
      26647
    ]
  ],
  [
    [
      63963,
      63963
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63964,
      63964
    ],
    "mapped",
    [
      38534
    ]
  ],
  [
    [
      63965,
      63965
    ],
    "mapped",
    [
      21033
    ]
  ],
  [
    [
      63966,
      63966
    ],
    "mapped",
    [
      21519
    ]
  ],
  [
    [
      63967,
      63967
    ],
    "mapped",
    [
      23653
    ]
  ],
  [
    [
      63968,
      63968
    ],
    "mapped",
    [
      26131
    ]
  ],
  [
    [
      63969,
      63969
    ],
    "mapped",
    [
      26446
    ]
  ],
  [
    [
      63970,
      63970
    ],
    "mapped",
    [
      26792
    ]
  ],
  [
    [
      63971,
      63971
    ],
    "mapped",
    [
      27877
    ]
  ],
  [
    [
      63972,
      63972
    ],
    "mapped",
    [
      29702
    ]
  ],
  [
    [
      63973,
      63973
    ],
    "mapped",
    [
      30178
    ]
  ],
  [
    [
      63974,
      63974
    ],
    "mapped",
    [
      32633
    ]
  ],
  [
    [
      63975,
      63975
    ],
    "mapped",
    [
      35023
    ]
  ],
  [
    [
      63976,
      63976
    ],
    "mapped",
    [
      35041
    ]
  ],
  [
    [
      63977,
      63977
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      63978,
      63978
    ],
    "mapped",
    [
      38626
    ]
  ],
  [
    [
      63979,
      63979
    ],
    "mapped",
    [
      21311
    ]
  ],
  [
    [
      63980,
      63980
    ],
    "mapped",
    [
      28346
    ]
  ],
  [
    [
      63981,
      63981
    ],
    "mapped",
    [
      21533
    ]
  ],
  [
    [
      63982,
      63982
    ],
    "mapped",
    [
      29136
    ]
  ],
  [
    [
      63983,
      63983
    ],
    "mapped",
    [
      29848
    ]
  ],
  [
    [
      63984,
      63984
    ],
    "mapped",
    [
      34298
    ]
  ],
  [
    [
      63985,
      63985
    ],
    "mapped",
    [
      38563
    ]
  ],
  [
    [
      63986,
      63986
    ],
    "mapped",
    [
      40023
    ]
  ],
  [
    [
      63987,
      63987
    ],
    "mapped",
    [
      40607
    ]
  ],
  [
    [
      63988,
      63988
    ],
    "mapped",
    [
      26519
    ]
  ],
  [
    [
      63989,
      63989
    ],
    "mapped",
    [
      28107
    ]
  ],
  [
    [
      63990,
      63990
    ],
    "mapped",
    [
      33256
    ]
  ],
  [
    [
      63991,
      63991
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      63992,
      63992
    ],
    "mapped",
    [
      31520
    ]
  ],
  [
    [
      63993,
      63993
    ],
    "mapped",
    [
      31890
    ]
  ],
  [
    [
      63994,
      63994
    ],
    "mapped",
    [
      29376
    ]
  ],
  [
    [
      63995,
      63995
    ],
    "mapped",
    [
      28825
    ]
  ],
  [
    [
      63996,
      63996
    ],
    "mapped",
    [
      35672
    ]
  ],
  [
    [
      63997,
      63997
    ],
    "mapped",
    [
      20160
    ]
  ],
  [
    [
      63998,
      63998
    ],
    "mapped",
    [
      33590
    ]
  ],
  [
    [
      63999,
      63999
    ],
    "mapped",
    [
      21050
    ]
  ],
  [
    [
      64e3,
      64e3
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      64001,
      64001
    ],
    "mapped",
    [
      24230
    ]
  ],
  [
    [
      64002,
      64002
    ],
    "mapped",
    [
      25299
    ]
  ],
  [
    [
      64003,
      64003
    ],
    "mapped",
    [
      31958
    ]
  ],
  [
    [
      64004,
      64004
    ],
    "mapped",
    [
      23429
    ]
  ],
  [
    [
      64005,
      64005
    ],
    "mapped",
    [
      27934
    ]
  ],
  [
    [
      64006,
      64006
    ],
    "mapped",
    [
      26292
    ]
  ],
  [
    [
      64007,
      64007
    ],
    "mapped",
    [
      36667
    ]
  ],
  [
    [
      64008,
      64008
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      64009,
      64009
    ],
    "mapped",
    [
      38477
    ]
  ],
  [
    [
      64010,
      64010
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      64011,
      64011
    ],
    "mapped",
    [
      24275
    ]
  ],
  [
    [
      64012,
      64012
    ],
    "mapped",
    [
      20800
    ]
  ],
  [
    [
      64013,
      64013
    ],
    "mapped",
    [
      21952
    ]
  ],
  [
    [
      64014,
      64015
    ],
    "valid"
  ],
  [
    [
      64016,
      64016
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64017,
      64017
    ],
    "valid"
  ],
  [
    [
      64018,
      64018
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64019,
      64020
    ],
    "valid"
  ],
  [
    [
      64021,
      64021
    ],
    "mapped",
    [
      20958
    ]
  ],
  [
    [
      64022,
      64022
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64023,
      64023
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64024,
      64024
    ],
    "mapped",
    [
      31036
    ]
  ],
  [
    [
      64025,
      64025
    ],
    "mapped",
    [
      31070
    ]
  ],
  [
    [
      64026,
      64026
    ],
    "mapped",
    [
      31077
    ]
  ],
  [
    [
      64027,
      64027
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      64028,
      64028
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64029,
      64029
    ],
    "mapped",
    [
      31934
    ]
  ],
  [
    [
      64030,
      64030
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      64031,
      64031
    ],
    "valid"
  ],
  [
    [
      64032,
      64032
    ],
    "mapped",
    [
      34322
    ]
  ],
  [
    [
      64033,
      64033
    ],
    "valid"
  ],
  [
    [
      64034,
      64034
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64035,
      64036
    ],
    "valid"
  ],
  [
    [
      64037,
      64037
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64038,
      64038
    ],
    "mapped",
    [
      37117
    ]
  ],
  [
    [
      64039,
      64041
    ],
    "valid"
  ],
  [
    [
      64042,
      64042
    ],
    "mapped",
    [
      39151
    ]
  ],
  [
    [
      64043,
      64043
    ],
    "mapped",
    [
      39164
    ]
  ],
  [
    [
      64044,
      64044
    ],
    "mapped",
    [
      39208
    ]
  ],
  [
    [
      64045,
      64045
    ],
    "mapped",
    [
      40372
    ]
  ],
  [
    [
      64046,
      64046
    ],
    "mapped",
    [
      37086
    ]
  ],
  [
    [
      64047,
      64047
    ],
    "mapped",
    [
      38583
    ]
  ],
  [
    [
      64048,
      64048
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      64049,
      64049
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      64050,
      64050
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      64051,
      64051
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      64052,
      64052
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      64053,
      64053
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      64054,
      64054
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64055,
      64055
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      64056,
      64056
    ],
    "mapped",
    [
      22120
    ]
  ],
  [
    [
      64057,
      64057
    ],
    "mapped",
    [
      22592
    ]
  ],
  [
    [
      64058,
      64058
    ],
    "mapped",
    [
      22696
    ]
  ],
  [
    [
      64059,
      64059
    ],
    "mapped",
    [
      23652
    ]
  ],
  [
    [
      64060,
      64060
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      64061,
      64061
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      64062,
      64062
    ],
    "mapped",
    [
      24936
    ]
  ],
  [
    [
      64063,
      64063
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64064,
      64064
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64065,
      64065
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      64066,
      64066
    ],
    "mapped",
    [
      26082
    ]
  ],
  [
    [
      64067,
      64067
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      64068,
      64068
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      64069,
      64069
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      64070,
      64070
    ],
    "mapped",
    [
      28186
    ]
  ],
  [
    [
      64071,
      64071
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64072,
      64072
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64073,
      64073
    ],
    "mapped",
    [
      29227
    ]
  ],
  [
    [
      64074,
      64074
    ],
    "mapped",
    [
      29730
    ]
  ],
  [
    [
      64075,
      64075
    ],
    "mapped",
    [
      30865
    ]
  ],
  [
    [
      64076,
      64076
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      64077,
      64077
    ],
    "mapped",
    [
      31049
    ]
  ],
  [
    [
      64078,
      64078
    ],
    "mapped",
    [
      31048
    ]
  ],
  [
    [
      64079,
      64079
    ],
    "mapped",
    [
      31056
    ]
  ],
  [
    [
      64080,
      64080
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      64081,
      64081
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      64082,
      64082
    ],
    "mapped",
    [
      31117
    ]
  ],
  [
    [
      64083,
      64083
    ],
    "mapped",
    [
      31118
    ]
  ],
  [
    [
      64084,
      64084
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      64085,
      64085
    ],
    "mapped",
    [
      31361
    ]
  ],
  [
    [
      64086,
      64086
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64087,
      64087
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64088,
      64088
    ],
    "mapped",
    [
      32265
    ]
  ],
  [
    [
      64089,
      64089
    ],
    "mapped",
    [
      32321
    ]
  ],
  [
    [
      64090,
      64090
    ],
    "mapped",
    [
      32626
    ]
  ],
  [
    [
      64091,
      64091
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64092,
      64092
    ],
    "mapped",
    [
      33261
    ]
  ],
  [
    [
      64093,
      64094
    ],
    "mapped",
    [
      33401
    ]
  ],
  [
    [
      64095,
      64095
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      64096,
      64096
    ],
    "mapped",
    [
      35088
    ]
  ],
  [
    [
      64097,
      64097
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64098,
      64098
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64099,
      64099
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64100,
      64100
    ],
    "mapped",
    [
      36051
    ]
  ],
  [
    [
      64101,
      64101
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64102,
      64102
    ],
    "mapped",
    [
      36790
    ]
  ],
  [
    [
      64103,
      64103
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64104,
      64104
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64105,
      64105
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64106,
      64106
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64107,
      64107
    ],
    "mapped",
    [
      24693
    ]
  ],
  [
    [
      64108,
      64108
    ],
    "mapped",
    [
      148206
    ]
  ],
  [
    [
      64109,
      64109
    ],
    "mapped",
    [
      33304
    ]
  ],
  [
    [
      64110,
      64111
    ],
    "disallowed"
  ],
  [
    [
      64112,
      64112
    ],
    "mapped",
    [
      20006
    ]
  ],
  [
    [
      64113,
      64113
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      64114,
      64114
    ],
    "mapped",
    [
      20840
    ]
  ],
  [
    [
      64115,
      64115
    ],
    "mapped",
    [
      20352
    ]
  ],
  [
    [
      64116,
      64116
    ],
    "mapped",
    [
      20805
    ]
  ],
  [
    [
      64117,
      64117
    ],
    "mapped",
    [
      20864
    ]
  ],
  [
    [
      64118,
      64118
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      64119,
      64119
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      64120,
      64120
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64121,
      64121
    ],
    "mapped",
    [
      21845
    ]
  ],
  [
    [
      64122,
      64122
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      64123,
      64123
    ],
    "mapped",
    [
      21986
    ]
  ],
  [
    [
      64124,
      64124
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64125,
      64125
    ],
    "mapped",
    [
      22707
    ]
  ],
  [
    [
      64126,
      64126
    ],
    "mapped",
    [
      22852
    ]
  ],
  [
    [
      64127,
      64127
    ],
    "mapped",
    [
      22868
    ]
  ],
  [
    [
      64128,
      64128
    ],
    "mapped",
    [
      23138
    ]
  ],
  [
    [
      64129,
      64129
    ],
    "mapped",
    [
      23336
    ]
  ],
  [
    [
      64130,
      64130
    ],
    "mapped",
    [
      24274
    ]
  ],
  [
    [
      64131,
      64131
    ],
    "mapped",
    [
      24281
    ]
  ],
  [
    [
      64132,
      64132
    ],
    "mapped",
    [
      24425
    ]
  ],
  [
    [
      64133,
      64133
    ],
    "mapped",
    [
      24493
    ]
  ],
  [
    [
      64134,
      64134
    ],
    "mapped",
    [
      24792
    ]
  ],
  [
    [
      64135,
      64135
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      64136,
      64136
    ],
    "mapped",
    [
      24840
    ]
  ],
  [
    [
      64137,
      64137
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64138,
      64138
    ],
    "mapped",
    [
      24928
    ]
  ],
  [
    [
      64139,
      64139
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64140,
      64140
    ],
    "mapped",
    [
      25140
    ]
  ],
  [
    [
      64141,
      64141
    ],
    "mapped",
    [
      25540
    ]
  ],
  [
    [
      64142,
      64142
    ],
    "mapped",
    [
      25628
    ]
  ],
  [
    [
      64143,
      64143
    ],
    "mapped",
    [
      25682
    ]
  ],
  [
    [
      64144,
      64144
    ],
    "mapped",
    [
      25942
    ]
  ],
  [
    [
      64145,
      64145
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64146,
      64146
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      64147,
      64147
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      64148,
      64148
    ],
    "mapped",
    [
      26454
    ]
  ],
  [
    [
      64149,
      64149
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      64150,
      64150
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      64151,
      64151
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      64152,
      64152
    ],
    "mapped",
    [
      28379
    ]
  ],
  [
    [
      64153,
      64153
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      64154,
      64154
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64155,
      64155
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      64156,
      64156
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64157,
      64157
    ],
    "mapped",
    [
      30631
    ]
  ],
  [
    [
      64158,
      64158
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      64159,
      64159
    ],
    "mapped",
    [
      29359
    ]
  ],
  [
    [
      64160,
      64160
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64161,
      64161
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      64162,
      64162
    ],
    "mapped",
    [
      29958
    ]
  ],
  [
    [
      64163,
      64163
    ],
    "mapped",
    [
      30011
    ]
  ],
  [
    [
      64164,
      64164
    ],
    "mapped",
    [
      30237
    ]
  ],
  [
    [
      64165,
      64165
    ],
    "mapped",
    [
      30239
    ]
  ],
  [
    [
      64166,
      64166
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64167,
      64167
    ],
    "mapped",
    [
      30427
    ]
  ],
  [
    [
      64168,
      64168
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      64169,
      64169
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      64170,
      64170
    ],
    "mapped",
    [
      30528
    ]
  ],
  [
    [
      64171,
      64171
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      64172,
      64172
    ],
    "mapped",
    [
      31409
    ]
  ],
  [
    [
      64173,
      64173
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64174,
      64174
    ],
    "mapped",
    [
      31867
    ]
  ],
  [
    [
      64175,
      64175
    ],
    "mapped",
    [
      32091
    ]
  ],
  [
    [
      64176,
      64176
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64177,
      64177
    ],
    "mapped",
    [
      32574
    ]
  ],
  [
    [
      64178,
      64178
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64179,
      64179
    ],
    "mapped",
    [
      33618
    ]
  ],
  [
    [
      64180,
      64180
    ],
    "mapped",
    [
      33775
    ]
  ],
  [
    [
      64181,
      64181
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      64182,
      64182
    ],
    "mapped",
    [
      35137
    ]
  ],
  [
    [
      64183,
      64183
    ],
    "mapped",
    [
      35206
    ]
  ],
  [
    [
      64184,
      64184
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64185,
      64185
    ],
    "mapped",
    [
      35519
    ]
  ],
  [
    [
      64186,
      64186
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64187,
      64187
    ],
    "mapped",
    [
      35531
    ]
  ],
  [
    [
      64188,
      64188
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64189,
      64189
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      64190,
      64190
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      64191,
      64191
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64192,
      64192
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      64193,
      64193
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64194,
      64194
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      64195,
      64195
    ],
    "mapped",
    [
      36978
    ]
  ],
  [
    [
      64196,
      64196
    ],
    "mapped",
    [
      37273
    ]
  ],
  [
    [
      64197,
      64197
    ],
    "mapped",
    [
      37494
    ]
  ],
  [
    [
      64198,
      64198
    ],
    "mapped",
    [
      38524
    ]
  ],
  [
    [
      64199,
      64199
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64200,
      64200
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64201,
      64201
    ],
    "mapped",
    [
      38875
    ]
  ],
  [
    [
      64202,
      64202
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64203,
      64203
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      64204,
      64204
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64205,
      64205
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      64206,
      64206
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      64207,
      64207
    ],
    "mapped",
    [
      141386
    ]
  ],
  [
    [
      64208,
      64208
    ],
    "mapped",
    [
      141380
    ]
  ],
  [
    [
      64209,
      64209
    ],
    "mapped",
    [
      144341
    ]
  ],
  [
    [
      64210,
      64210
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      64211,
      64211
    ],
    "mapped",
    [
      16408
    ]
  ],
  [
    [
      64212,
      64212
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      64213,
      64213
    ],
    "mapped",
    [
      152137
    ]
  ],
  [
    [
      64214,
      64214
    ],
    "mapped",
    [
      154832
    ]
  ],
  [
    [
      64215,
      64215
    ],
    "mapped",
    [
      163539
    ]
  ],
  [
    [
      64216,
      64216
    ],
    "mapped",
    [
      40771
    ]
  ],
  [
    [
      64217,
      64217
    ],
    "mapped",
    [
      40846
    ]
  ],
  [
    [
      64218,
      64255
    ],
    "disallowed"
  ],
  [
    [
      64256,
      64256
    ],
    "mapped",
    [
      102,
      102
    ]
  ],
  [
    [
      64257,
      64257
    ],
    "mapped",
    [
      102,
      105
    ]
  ],
  [
    [
      64258,
      64258
    ],
    "mapped",
    [
      102,
      108
    ]
  ],
  [
    [
      64259,
      64259
    ],
    "mapped",
    [
      102,
      102,
      105
    ]
  ],
  [
    [
      64260,
      64260
    ],
    "mapped",
    [
      102,
      102,
      108
    ]
  ],
  [
    [
      64261,
      64262
    ],
    "mapped",
    [
      115,
      116
    ]
  ],
  [
    [
      64263,
      64274
    ],
    "disallowed"
  ],
  [
    [
      64275,
      64275
    ],
    "mapped",
    [
      1396,
      1398
    ]
  ],
  [
    [
      64276,
      64276
    ],
    "mapped",
    [
      1396,
      1381
    ]
  ],
  [
    [
      64277,
      64277
    ],
    "mapped",
    [
      1396,
      1387
    ]
  ],
  [
    [
      64278,
      64278
    ],
    "mapped",
    [
      1406,
      1398
    ]
  ],
  [
    [
      64279,
      64279
    ],
    "mapped",
    [
      1396,
      1389
    ]
  ],
  [
    [
      64280,
      64284
    ],
    "disallowed"
  ],
  [
    [
      64285,
      64285
    ],
    "mapped",
    [
      1497,
      1460
    ]
  ],
  [
    [
      64286,
      64286
    ],
    "valid"
  ],
  [
    [
      64287,
      64287
    ],
    "mapped",
    [
      1522,
      1463
    ]
  ],
  [
    [
      64288,
      64288
    ],
    "mapped",
    [
      1506
    ]
  ],
  [
    [
      64289,
      64289
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      64290,
      64290
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      64291,
      64291
    ],
    "mapped",
    [
      1492
    ]
  ],
  [
    [
      64292,
      64292
    ],
    "mapped",
    [
      1499
    ]
  ],
  [
    [
      64293,
      64293
    ],
    "mapped",
    [
      1500
    ]
  ],
  [
    [
      64294,
      64294
    ],
    "mapped",
    [
      1501
    ]
  ],
  [
    [
      64295,
      64295
    ],
    "mapped",
    [
      1512
    ]
  ],
  [
    [
      64296,
      64296
    ],
    "mapped",
    [
      1514
    ]
  ],
  [
    [
      64297,
      64297
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      64298,
      64298
    ],
    "mapped",
    [
      1513,
      1473
    ]
  ],
  [
    [
      64299,
      64299
    ],
    "mapped",
    [
      1513,
      1474
    ]
  ],
  [
    [
      64300,
      64300
    ],
    "mapped",
    [
      1513,
      1468,
      1473
    ]
  ],
  [
    [
      64301,
      64301
    ],
    "mapped",
    [
      1513,
      1468,
      1474
    ]
  ],
  [
    [
      64302,
      64302
    ],
    "mapped",
    [
      1488,
      1463
    ]
  ],
  [
    [
      64303,
      64303
    ],
    "mapped",
    [
      1488,
      1464
    ]
  ],
  [
    [
      64304,
      64304
    ],
    "mapped",
    [
      1488,
      1468
    ]
  ],
  [
    [
      64305,
      64305
    ],
    "mapped",
    [
      1489,
      1468
    ]
  ],
  [
    [
      64306,
      64306
    ],
    "mapped",
    [
      1490,
      1468
    ]
  ],
  [
    [
      64307,
      64307
    ],
    "mapped",
    [
      1491,
      1468
    ]
  ],
  [
    [
      64308,
      64308
    ],
    "mapped",
    [
      1492,
      1468
    ]
  ],
  [
    [
      64309,
      64309
    ],
    "mapped",
    [
      1493,
      1468
    ]
  ],
  [
    [
      64310,
      64310
    ],
    "mapped",
    [
      1494,
      1468
    ]
  ],
  [
    [
      64311,
      64311
    ],
    "disallowed"
  ],
  [
    [
      64312,
      64312
    ],
    "mapped",
    [
      1496,
      1468
    ]
  ],
  [
    [
      64313,
      64313
    ],
    "mapped",
    [
      1497,
      1468
    ]
  ],
  [
    [
      64314,
      64314
    ],
    "mapped",
    [
      1498,
      1468
    ]
  ],
  [
    [
      64315,
      64315
    ],
    "mapped",
    [
      1499,
      1468
    ]
  ],
  [
    [
      64316,
      64316
    ],
    "mapped",
    [
      1500,
      1468
    ]
  ],
  [
    [
      64317,
      64317
    ],
    "disallowed"
  ],
  [
    [
      64318,
      64318
    ],
    "mapped",
    [
      1502,
      1468
    ]
  ],
  [
    [
      64319,
      64319
    ],
    "disallowed"
  ],
  [
    [
      64320,
      64320
    ],
    "mapped",
    [
      1504,
      1468
    ]
  ],
  [
    [
      64321,
      64321
    ],
    "mapped",
    [
      1505,
      1468
    ]
  ],
  [
    [
      64322,
      64322
    ],
    "disallowed"
  ],
  [
    [
      64323,
      64323
    ],
    "mapped",
    [
      1507,
      1468
    ]
  ],
  [
    [
      64324,
      64324
    ],
    "mapped",
    [
      1508,
      1468
    ]
  ],
  [
    [
      64325,
      64325
    ],
    "disallowed"
  ],
  [
    [
      64326,
      64326
    ],
    "mapped",
    [
      1510,
      1468
    ]
  ],
  [
    [
      64327,
      64327
    ],
    "mapped",
    [
      1511,
      1468
    ]
  ],
  [
    [
      64328,
      64328
    ],
    "mapped",
    [
      1512,
      1468
    ]
  ],
  [
    [
      64329,
      64329
    ],
    "mapped",
    [
      1513,
      1468
    ]
  ],
  [
    [
      64330,
      64330
    ],
    "mapped",
    [
      1514,
      1468
    ]
  ],
  [
    [
      64331,
      64331
    ],
    "mapped",
    [
      1493,
      1465
    ]
  ],
  [
    [
      64332,
      64332
    ],
    "mapped",
    [
      1489,
      1471
    ]
  ],
  [
    [
      64333,
      64333
    ],
    "mapped",
    [
      1499,
      1471
    ]
  ],
  [
    [
      64334,
      64334
    ],
    "mapped",
    [
      1508,
      1471
    ]
  ],
  [
    [
      64335,
      64335
    ],
    "mapped",
    [
      1488,
      1500
    ]
  ],
  [
    [
      64336,
      64337
    ],
    "mapped",
    [
      1649
    ]
  ],
  [
    [
      64338,
      64341
    ],
    "mapped",
    [
      1659
    ]
  ],
  [
    [
      64342,
      64345
    ],
    "mapped",
    [
      1662
    ]
  ],
  [
    [
      64346,
      64349
    ],
    "mapped",
    [
      1664
    ]
  ],
  [
    [
      64350,
      64353
    ],
    "mapped",
    [
      1658
    ]
  ],
  [
    [
      64354,
      64357
    ],
    "mapped",
    [
      1663
    ]
  ],
  [
    [
      64358,
      64361
    ],
    "mapped",
    [
      1657
    ]
  ],
  [
    [
      64362,
      64365
    ],
    "mapped",
    [
      1700
    ]
  ],
  [
    [
      64366,
      64369
    ],
    "mapped",
    [
      1702
    ]
  ],
  [
    [
      64370,
      64373
    ],
    "mapped",
    [
      1668
    ]
  ],
  [
    [
      64374,
      64377
    ],
    "mapped",
    [
      1667
    ]
  ],
  [
    [
      64378,
      64381
    ],
    "mapped",
    [
      1670
    ]
  ],
  [
    [
      64382,
      64385
    ],
    "mapped",
    [
      1671
    ]
  ],
  [
    [
      64386,
      64387
    ],
    "mapped",
    [
      1677
    ]
  ],
  [
    [
      64388,
      64389
    ],
    "mapped",
    [
      1676
    ]
  ],
  [
    [
      64390,
      64391
    ],
    "mapped",
    [
      1678
    ]
  ],
  [
    [
      64392,
      64393
    ],
    "mapped",
    [
      1672
    ]
  ],
  [
    [
      64394,
      64395
    ],
    "mapped",
    [
      1688
    ]
  ],
  [
    [
      64396,
      64397
    ],
    "mapped",
    [
      1681
    ]
  ],
  [
    [
      64398,
      64401
    ],
    "mapped",
    [
      1705
    ]
  ],
  [
    [
      64402,
      64405
    ],
    "mapped",
    [
      1711
    ]
  ],
  [
    [
      64406,
      64409
    ],
    "mapped",
    [
      1715
    ]
  ],
  [
    [
      64410,
      64413
    ],
    "mapped",
    [
      1713
    ]
  ],
  [
    [
      64414,
      64415
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      64416,
      64419
    ],
    "mapped",
    [
      1723
    ]
  ],
  [
    [
      64420,
      64421
    ],
    "mapped",
    [
      1728
    ]
  ],
  [
    [
      64422,
      64425
    ],
    "mapped",
    [
      1729
    ]
  ],
  [
    [
      64426,
      64429
    ],
    "mapped",
    [
      1726
    ]
  ],
  [
    [
      64430,
      64431
    ],
    "mapped",
    [
      1746
    ]
  ],
  [
    [
      64432,
      64433
    ],
    "mapped",
    [
      1747
    ]
  ],
  [
    [
      64434,
      64449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64450,
      64466
    ],
    "disallowed"
  ],
  [
    [
      64467,
      64470
    ],
    "mapped",
    [
      1709
    ]
  ],
  [
    [
      64471,
      64472
    ],
    "mapped",
    [
      1735
    ]
  ],
  [
    [
      64473,
      64474
    ],
    "mapped",
    [
      1734
    ]
  ],
  [
    [
      64475,
      64476
    ],
    "mapped",
    [
      1736
    ]
  ],
  [
    [
      64477,
      64477
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      64478,
      64479
    ],
    "mapped",
    [
      1739
    ]
  ],
  [
    [
      64480,
      64481
    ],
    "mapped",
    [
      1733
    ]
  ],
  [
    [
      64482,
      64483
    ],
    "mapped",
    [
      1737
    ]
  ],
  [
    [
      64484,
      64487
    ],
    "mapped",
    [
      1744
    ]
  ],
  [
    [
      64488,
      64489
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      64490,
      64491
    ],
    "mapped",
    [
      1574,
      1575
    ]
  ],
  [
    [
      64492,
      64493
    ],
    "mapped",
    [
      1574,
      1749
    ]
  ],
  [
    [
      64494,
      64495
    ],
    "mapped",
    [
      1574,
      1608
    ]
  ],
  [
    [
      64496,
      64497
    ],
    "mapped",
    [
      1574,
      1735
    ]
  ],
  [
    [
      64498,
      64499
    ],
    "mapped",
    [
      1574,
      1734
    ]
  ],
  [
    [
      64500,
      64501
    ],
    "mapped",
    [
      1574,
      1736
    ]
  ],
  [
    [
      64502,
      64504
    ],
    "mapped",
    [
      1574,
      1744
    ]
  ],
  [
    [
      64505,
      64507
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64508,
      64511
    ],
    "mapped",
    [
      1740
    ]
  ],
  [
    [
      64512,
      64512
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64513,
      64513
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64514,
      64514
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64515,
      64515
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64516,
      64516
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64517,
      64517
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64518,
      64518
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64519,
      64519
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64520,
      64520
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64521,
      64521
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64522,
      64522
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64523,
      64523
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64524,
      64524
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64525,
      64525
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64526,
      64526
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64527,
      64527
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64528,
      64528
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64529,
      64529
    ],
    "mapped",
    [
      1579,
      1580
    ]
  ],
  [
    [
      64530,
      64530
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64531,
      64531
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64532,
      64532
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64533,
      64533
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64534,
      64534
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64535,
      64535
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64536,
      64536
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64537,
      64537
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64538,
      64538
    ],
    "mapped",
    [
      1582,
      1581
    ]
  ],
  [
    [
      64539,
      64539
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64540,
      64540
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64541,
      64541
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64542,
      64542
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64543,
      64543
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64544,
      64544
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64545,
      64545
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64546,
      64546
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64547,
      64547
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64548,
      64548
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64549,
      64549
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64550,
      64550
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64551,
      64551
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64552,
      64552
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64553,
      64553
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64554,
      64554
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64555,
      64555
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64556,
      64556
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64557,
      64557
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64558,
      64558
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64559,
      64559
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64560,
      64560
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64561,
      64561
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64562,
      64562
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64563,
      64563
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64564,
      64564
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64565,
      64565
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64566,
      64566
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64567,
      64567
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64568,
      64568
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64569,
      64569
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64570,
      64570
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64571,
      64571
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64572,
      64572
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64573,
      64573
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64574,
      64574
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64575,
      64575
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64576,
      64576
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64577,
      64577
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64578,
      64578
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64579,
      64579
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64580,
      64580
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64581,
      64581
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64582,
      64582
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64583,
      64583
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64584,
      64584
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64585,
      64585
    ],
    "mapped",
    [
      1605,
      1609
    ]
  ],
  [
    [
      64586,
      64586
    ],
    "mapped",
    [
      1605,
      1610
    ]
  ],
  [
    [
      64587,
      64587
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64588,
      64588
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64589,
      64589
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64590,
      64590
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64591,
      64591
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64592,
      64592
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64593,
      64593
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64594,
      64594
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64595,
      64595
    ],
    "mapped",
    [
      1607,
      1609
    ]
  ],
  [
    [
      64596,
      64596
    ],
    "mapped",
    [
      1607,
      1610
    ]
  ],
  [
    [
      64597,
      64597
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64598,
      64598
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64599,
      64599
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64600,
      64600
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64601,
      64601
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64602,
      64602
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64603,
      64603
    ],
    "mapped",
    [
      1584,
      1648
    ]
  ],
  [
    [
      64604,
      64604
    ],
    "mapped",
    [
      1585,
      1648
    ]
  ],
  [
    [
      64605,
      64605
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64606,
      64606
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612,
      1617
    ]
  ],
  [
    [
      64607,
      64607
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613,
      1617
    ]
  ],
  [
    [
      64608,
      64608
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614,
      1617
    ]
  ],
  [
    [
      64609,
      64609
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615,
      1617
    ]
  ],
  [
    [
      64610,
      64610
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616,
      1617
    ]
  ],
  [
    [
      64611,
      64611
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617,
      1648
    ]
  ],
  [
    [
      64612,
      64612
    ],
    "mapped",
    [
      1574,
      1585
    ]
  ],
  [
    [
      64613,
      64613
    ],
    "mapped",
    [
      1574,
      1586
    ]
  ],
  [
    [
      64614,
      64614
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64615,
      64615
    ],
    "mapped",
    [
      1574,
      1606
    ]
  ],
  [
    [
      64616,
      64616
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64617,
      64617
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64618,
      64618
    ],
    "mapped",
    [
      1576,
      1585
    ]
  ],
  [
    [
      64619,
      64619
    ],
    "mapped",
    [
      1576,
      1586
    ]
  ],
  [
    [
      64620,
      64620
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64621,
      64621
    ],
    "mapped",
    [
      1576,
      1606
    ]
  ],
  [
    [
      64622,
      64622
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64623,
      64623
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64624,
      64624
    ],
    "mapped",
    [
      1578,
      1585
    ]
  ],
  [
    [
      64625,
      64625
    ],
    "mapped",
    [
      1578,
      1586
    ]
  ],
  [
    [
      64626,
      64626
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64627,
      64627
    ],
    "mapped",
    [
      1578,
      1606
    ]
  ],
  [
    [
      64628,
      64628
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64629,
      64629
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64630,
      64630
    ],
    "mapped",
    [
      1579,
      1585
    ]
  ],
  [
    [
      64631,
      64631
    ],
    "mapped",
    [
      1579,
      1586
    ]
  ],
  [
    [
      64632,
      64632
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64633,
      64633
    ],
    "mapped",
    [
      1579,
      1606
    ]
  ],
  [
    [
      64634,
      64634
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64635,
      64635
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64636,
      64636
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64637,
      64637
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64638,
      64638
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64639,
      64639
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64640,
      64640
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64641,
      64641
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64642,
      64642
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64643,
      64643
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64644,
      64644
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64645,
      64645
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64646,
      64646
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64647,
      64647
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64648,
      64648
    ],
    "mapped",
    [
      1605,
      1575
    ]
  ],
  [
    [
      64649,
      64649
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64650,
      64650
    ],
    "mapped",
    [
      1606,
      1585
    ]
  ],
  [
    [
      64651,
      64651
    ],
    "mapped",
    [
      1606,
      1586
    ]
  ],
  [
    [
      64652,
      64652
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64653,
      64653
    ],
    "mapped",
    [
      1606,
      1606
    ]
  ],
  [
    [
      64654,
      64654
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64655,
      64655
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64656,
      64656
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64657,
      64657
    ],
    "mapped",
    [
      1610,
      1585
    ]
  ],
  [
    [
      64658,
      64658
    ],
    "mapped",
    [
      1610,
      1586
    ]
  ],
  [
    [
      64659,
      64659
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64660,
      64660
    ],
    "mapped",
    [
      1610,
      1606
    ]
  ],
  [
    [
      64661,
      64661
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64662,
      64662
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64663,
      64663
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64664,
      64664
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64665,
      64665
    ],
    "mapped",
    [
      1574,
      1582
    ]
  ],
  [
    [
      64666,
      64666
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64667,
      64667
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64668,
      64668
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64669,
      64669
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64670,
      64670
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64671,
      64671
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64672,
      64672
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64673,
      64673
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64674,
      64674
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64675,
      64675
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64676,
      64676
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64677,
      64677
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64678,
      64678
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64679,
      64679
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64680,
      64680
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64681,
      64681
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64682,
      64682
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64683,
      64683
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64684,
      64684
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64685,
      64685
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64686,
      64686
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64687,
      64687
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64688,
      64688
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64689,
      64689
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64690,
      64690
    ],
    "mapped",
    [
      1589,
      1582
    ]
  ],
  [
    [
      64691,
      64691
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64692,
      64692
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64693,
      64693
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64694,
      64694
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64695,
      64695
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64696,
      64696
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64697,
      64697
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64698,
      64698
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64699,
      64699
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64700,
      64700
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64701,
      64701
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64702,
      64702
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64703,
      64703
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64704,
      64704
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64705,
      64705
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64706,
      64706
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64707,
      64707
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64708,
      64708
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64709,
      64709
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64710,
      64710
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64711,
      64711
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64712,
      64712
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64713,
      64713
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64714,
      64714
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64715,
      64715
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64716,
      64716
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64717,
      64717
    ],
    "mapped",
    [
      1604,
      1607
    ]
  ],
  [
    [
      64718,
      64718
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64719,
      64719
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64720,
      64720
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64721,
      64721
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64722,
      64722
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64723,
      64723
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64724,
      64724
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64725,
      64725
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64726,
      64726
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64727,
      64727
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64728,
      64728
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64729,
      64729
    ],
    "mapped",
    [
      1607,
      1648
    ]
  ],
  [
    [
      64730,
      64730
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64731,
      64731
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64732,
      64732
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64733,
      64733
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64734,
      64734
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64735,
      64735
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64736,
      64736
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64737,
      64737
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64738,
      64738
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64739,
      64739
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64740,
      64740
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64741,
      64741
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64742,
      64742
    ],
    "mapped",
    [
      1579,
      1607
    ]
  ],
  [
    [
      64743,
      64743
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64744,
      64744
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64745,
      64745
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64746,
      64746
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64747,
      64747
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64748,
      64748
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64749,
      64749
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64750,
      64750
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64751,
      64751
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64752,
      64752
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64753,
      64753
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64754,
      64754
    ],
    "mapped",
    [
      1600,
      1614,
      1617
    ]
  ],
  [
    [
      64755,
      64755
    ],
    "mapped",
    [
      1600,
      1615,
      1617
    ]
  ],
  [
    [
      64756,
      64756
    ],
    "mapped",
    [
      1600,
      1616,
      1617
    ]
  ],
  [
    [
      64757,
      64757
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64758,
      64758
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64759,
      64759
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64760,
      64760
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64761,
      64761
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64762,
      64762
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64763,
      64763
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64764,
      64764
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64765,
      64765
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64766,
      64766
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64767,
      64767
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64768,
      64768
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64769,
      64769
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64770,
      64770
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64771,
      64771
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64772,
      64772
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64773,
      64773
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64774,
      64774
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64775,
      64775
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64776,
      64776
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64777,
      64777
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64778,
      64778
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64779,
      64779
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64780,
      64780
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64781,
      64781
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64782,
      64782
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64783,
      64783
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64784,
      64784
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64785,
      64785
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64786,
      64786
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64787,
      64787
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64788,
      64788
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64789,
      64789
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64790,
      64790
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64791,
      64791
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64792,
      64792
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64793,
      64793
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64794,
      64794
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64795,
      64795
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64796,
      64796
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64797,
      64797
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64798,
      64798
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64799,
      64799
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64800,
      64800
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64801,
      64801
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64802,
      64802
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64803,
      64803
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64804,
      64804
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64805,
      64805
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64806,
      64806
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64807,
      64807
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64808,
      64808
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64809,
      64809
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64810,
      64810
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64811,
      64811
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64812,
      64812
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64813,
      64813
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64814,
      64814
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64815,
      64815
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64816,
      64816
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64817,
      64817
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64818,
      64818
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64819,
      64819
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64820,
      64820
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64821,
      64821
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64822,
      64822
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64823,
      64823
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64824,
      64824
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64825,
      64825
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64826,
      64826
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64827,
      64827
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64828,
      64829
    ],
    "mapped",
    [
      1575,
      1611
    ]
  ],
  [
    [
      64830,
      64831
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64832,
      64847
    ],
    "disallowed"
  ],
  [
    [
      64848,
      64848
    ],
    "mapped",
    [
      1578,
      1580,
      1605
    ]
  ],
  [
    [
      64849,
      64850
    ],
    "mapped",
    [
      1578,
      1581,
      1580
    ]
  ],
  [
    [
      64851,
      64851
    ],
    "mapped",
    [
      1578,
      1581,
      1605
    ]
  ],
  [
    [
      64852,
      64852
    ],
    "mapped",
    [
      1578,
      1582,
      1605
    ]
  ],
  [
    [
      64853,
      64853
    ],
    "mapped",
    [
      1578,
      1605,
      1580
    ]
  ],
  [
    [
      64854,
      64854
    ],
    "mapped",
    [
      1578,
      1605,
      1581
    ]
  ],
  [
    [
      64855,
      64855
    ],
    "mapped",
    [
      1578,
      1605,
      1582
    ]
  ],
  [
    [
      64856,
      64857
    ],
    "mapped",
    [
      1580,
      1605,
      1581
    ]
  ],
  [
    [
      64858,
      64858
    ],
    "mapped",
    [
      1581,
      1605,
      1610
    ]
  ],
  [
    [
      64859,
      64859
    ],
    "mapped",
    [
      1581,
      1605,
      1609
    ]
  ],
  [
    [
      64860,
      64860
    ],
    "mapped",
    [
      1587,
      1581,
      1580
    ]
  ],
  [
    [
      64861,
      64861
    ],
    "mapped",
    [
      1587,
      1580,
      1581
    ]
  ],
  [
    [
      64862,
      64862
    ],
    "mapped",
    [
      1587,
      1580,
      1609
    ]
  ],
  [
    [
      64863,
      64864
    ],
    "mapped",
    [
      1587,
      1605,
      1581
    ]
  ],
  [
    [
      64865,
      64865
    ],
    "mapped",
    [
      1587,
      1605,
      1580
    ]
  ],
  [
    [
      64866,
      64867
    ],
    "mapped",
    [
      1587,
      1605,
      1605
    ]
  ],
  [
    [
      64868,
      64869
    ],
    "mapped",
    [
      1589,
      1581,
      1581
    ]
  ],
  [
    [
      64870,
      64870
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64871,
      64872
    ],
    "mapped",
    [
      1588,
      1581,
      1605
    ]
  ],
  [
    [
      64873,
      64873
    ],
    "mapped",
    [
      1588,
      1580,
      1610
    ]
  ],
  [
    [
      64874,
      64875
    ],
    "mapped",
    [
      1588,
      1605,
      1582
    ]
  ],
  [
    [
      64876,
      64877
    ],
    "mapped",
    [
      1588,
      1605,
      1605
    ]
  ],
  [
    [
      64878,
      64878
    ],
    "mapped",
    [
      1590,
      1581,
      1609
    ]
  ],
  [
    [
      64879,
      64880
    ],
    "mapped",
    [
      1590,
      1582,
      1605
    ]
  ],
  [
    [
      64881,
      64882
    ],
    "mapped",
    [
      1591,
      1605,
      1581
    ]
  ],
  [
    [
      64883,
      64883
    ],
    "mapped",
    [
      1591,
      1605,
      1605
    ]
  ],
  [
    [
      64884,
      64884
    ],
    "mapped",
    [
      1591,
      1605,
      1610
    ]
  ],
  [
    [
      64885,
      64885
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64886,
      64887
    ],
    "mapped",
    [
      1593,
      1605,
      1605
    ]
  ],
  [
    [
      64888,
      64888
    ],
    "mapped",
    [
      1593,
      1605,
      1609
    ]
  ],
  [
    [
      64889,
      64889
    ],
    "mapped",
    [
      1594,
      1605,
      1605
    ]
  ],
  [
    [
      64890,
      64890
    ],
    "mapped",
    [
      1594,
      1605,
      1610
    ]
  ],
  [
    [
      64891,
      64891
    ],
    "mapped",
    [
      1594,
      1605,
      1609
    ]
  ],
  [
    [
      64892,
      64893
    ],
    "mapped",
    [
      1601,
      1582,
      1605
    ]
  ],
  [
    [
      64894,
      64894
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64895,
      64895
    ],
    "mapped",
    [
      1602,
      1605,
      1605
    ]
  ],
  [
    [
      64896,
      64896
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64897,
      64897
    ],
    "mapped",
    [
      1604,
      1581,
      1610
    ]
  ],
  [
    [
      64898,
      64898
    ],
    "mapped",
    [
      1604,
      1581,
      1609
    ]
  ],
  [
    [
      64899,
      64900
    ],
    "mapped",
    [
      1604,
      1580,
      1580
    ]
  ],
  [
    [
      64901,
      64902
    ],
    "mapped",
    [
      1604,
      1582,
      1605
    ]
  ],
  [
    [
      64903,
      64904
    ],
    "mapped",
    [
      1604,
      1605,
      1581
    ]
  ],
  [
    [
      64905,
      64905
    ],
    "mapped",
    [
      1605,
      1581,
      1580
    ]
  ],
  [
    [
      64906,
      64906
    ],
    "mapped",
    [
      1605,
      1581,
      1605
    ]
  ],
  [
    [
      64907,
      64907
    ],
    "mapped",
    [
      1605,
      1581,
      1610
    ]
  ],
  [
    [
      64908,
      64908
    ],
    "mapped",
    [
      1605,
      1580,
      1581
    ]
  ],
  [
    [
      64909,
      64909
    ],
    "mapped",
    [
      1605,
      1580,
      1605
    ]
  ],
  [
    [
      64910,
      64910
    ],
    "mapped",
    [
      1605,
      1582,
      1580
    ]
  ],
  [
    [
      64911,
      64911
    ],
    "mapped",
    [
      1605,
      1582,
      1605
    ]
  ],
  [
    [
      64912,
      64913
    ],
    "disallowed"
  ],
  [
    [
      64914,
      64914
    ],
    "mapped",
    [
      1605,
      1580,
      1582
    ]
  ],
  [
    [
      64915,
      64915
    ],
    "mapped",
    [
      1607,
      1605,
      1580
    ]
  ],
  [
    [
      64916,
      64916
    ],
    "mapped",
    [
      1607,
      1605,
      1605
    ]
  ],
  [
    [
      64917,
      64917
    ],
    "mapped",
    [
      1606,
      1581,
      1605
    ]
  ],
  [
    [
      64918,
      64918
    ],
    "mapped",
    [
      1606,
      1581,
      1609
    ]
  ],
  [
    [
      64919,
      64920
    ],
    "mapped",
    [
      1606,
      1580,
      1605
    ]
  ],
  [
    [
      64921,
      64921
    ],
    "mapped",
    [
      1606,
      1580,
      1609
    ]
  ],
  [
    [
      64922,
      64922
    ],
    "mapped",
    [
      1606,
      1605,
      1610
    ]
  ],
  [
    [
      64923,
      64923
    ],
    "mapped",
    [
      1606,
      1605,
      1609
    ]
  ],
  [
    [
      64924,
      64925
    ],
    "mapped",
    [
      1610,
      1605,
      1605
    ]
  ],
  [
    [
      64926,
      64926
    ],
    "mapped",
    [
      1576,
      1582,
      1610
    ]
  ],
  [
    [
      64927,
      64927
    ],
    "mapped",
    [
      1578,
      1580,
      1610
    ]
  ],
  [
    [
      64928,
      64928
    ],
    "mapped",
    [
      1578,
      1580,
      1609
    ]
  ],
  [
    [
      64929,
      64929
    ],
    "mapped",
    [
      1578,
      1582,
      1610
    ]
  ],
  [
    [
      64930,
      64930
    ],
    "mapped",
    [
      1578,
      1582,
      1609
    ]
  ],
  [
    [
      64931,
      64931
    ],
    "mapped",
    [
      1578,
      1605,
      1610
    ]
  ],
  [
    [
      64932,
      64932
    ],
    "mapped",
    [
      1578,
      1605,
      1609
    ]
  ],
  [
    [
      64933,
      64933
    ],
    "mapped",
    [
      1580,
      1605,
      1610
    ]
  ],
  [
    [
      64934,
      64934
    ],
    "mapped",
    [
      1580,
      1581,
      1609
    ]
  ],
  [
    [
      64935,
      64935
    ],
    "mapped",
    [
      1580,
      1605,
      1609
    ]
  ],
  [
    [
      64936,
      64936
    ],
    "mapped",
    [
      1587,
      1582,
      1609
    ]
  ],
  [
    [
      64937,
      64937
    ],
    "mapped",
    [
      1589,
      1581,
      1610
    ]
  ],
  [
    [
      64938,
      64938
    ],
    "mapped",
    [
      1588,
      1581,
      1610
    ]
  ],
  [
    [
      64939,
      64939
    ],
    "mapped",
    [
      1590,
      1581,
      1610
    ]
  ],
  [
    [
      64940,
      64940
    ],
    "mapped",
    [
      1604,
      1580,
      1610
    ]
  ],
  [
    [
      64941,
      64941
    ],
    "mapped",
    [
      1604,
      1605,
      1610
    ]
  ],
  [
    [
      64942,
      64942
    ],
    "mapped",
    [
      1610,
      1581,
      1610
    ]
  ],
  [
    [
      64943,
      64943
    ],
    "mapped",
    [
      1610,
      1580,
      1610
    ]
  ],
  [
    [
      64944,
      64944
    ],
    "mapped",
    [
      1610,
      1605,
      1610
    ]
  ],
  [
    [
      64945,
      64945
    ],
    "mapped",
    [
      1605,
      1605,
      1610
    ]
  ],
  [
    [
      64946,
      64946
    ],
    "mapped",
    [
      1602,
      1605,
      1610
    ]
  ],
  [
    [
      64947,
      64947
    ],
    "mapped",
    [
      1606,
      1581,
      1610
    ]
  ],
  [
    [
      64948,
      64948
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64949,
      64949
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64950,
      64950
    ],
    "mapped",
    [
      1593,
      1605,
      1610
    ]
  ],
  [
    [
      64951,
      64951
    ],
    "mapped",
    [
      1603,
      1605,
      1610
    ]
  ],
  [
    [
      64952,
      64952
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64953,
      64953
    ],
    "mapped",
    [
      1605,
      1582,
      1610
    ]
  ],
  [
    [
      64954,
      64954
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64955,
      64955
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64956,
      64956
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64957,
      64957
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64958,
      64958
    ],
    "mapped",
    [
      1580,
      1581,
      1610
    ]
  ],
  [
    [
      64959,
      64959
    ],
    "mapped",
    [
      1581,
      1580,
      1610
    ]
  ],
  [
    [
      64960,
      64960
    ],
    "mapped",
    [
      1605,
      1580,
      1610
    ]
  ],
  [
    [
      64961,
      64961
    ],
    "mapped",
    [
      1601,
      1605,
      1610
    ]
  ],
  [
    [
      64962,
      64962
    ],
    "mapped",
    [
      1576,
      1581,
      1610
    ]
  ],
  [
    [
      64963,
      64963
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64964,
      64964
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64965,
      64965
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64966,
      64966
    ],
    "mapped",
    [
      1587,
      1582,
      1610
    ]
  ],
  [
    [
      64967,
      64967
    ],
    "mapped",
    [
      1606,
      1580,
      1610
    ]
  ],
  [
    [
      64968,
      64975
    ],
    "disallowed"
  ],
  [
    [
      64976,
      65007
    ],
    "disallowed"
  ],
  [
    [
      65008,
      65008
    ],
    "mapped",
    [
      1589,
      1604,
      1746
    ]
  ],
  [
    [
      65009,
      65009
    ],
    "mapped",
    [
      1602,
      1604,
      1746
    ]
  ],
  [
    [
      65010,
      65010
    ],
    "mapped",
    [
      1575,
      1604,
      1604,
      1607
    ]
  ],
  [
    [
      65011,
      65011
    ],
    "mapped",
    [
      1575,
      1603,
      1576,
      1585
    ]
  ],
  [
    [
      65012,
      65012
    ],
    "mapped",
    [
      1605,
      1581,
      1605,
      1583
    ]
  ],
  [
    [
      65013,
      65013
    ],
    "mapped",
    [
      1589,
      1604,
      1593,
      1605
    ]
  ],
  [
    [
      65014,
      65014
    ],
    "mapped",
    [
      1585,
      1587,
      1608,
      1604
    ]
  ],
  [
    [
      65015,
      65015
    ],
    "mapped",
    [
      1593,
      1604,
      1610,
      1607
    ]
  ],
  [
    [
      65016,
      65016
    ],
    "mapped",
    [
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65017,
      65017
    ],
    "mapped",
    [
      1589,
      1604,
      1609
    ]
  ],
  [
    [
      65018,
      65018
    ],
    "disallowed_STD3_mapped",
    [
      1589,
      1604,
      1609,
      32,
      1575,
      1604,
      1604,
      1607,
      32,
      1593,
      1604,
      1610,
      1607,
      32,
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65019,
      65019
    ],
    "disallowed_STD3_mapped",
    [
      1580,
      1604,
      32,
      1580,
      1604,
      1575,
      1604,
      1607
    ]
  ],
  [
    [
      65020,
      65020
    ],
    "mapped",
    [
      1585,
      1740,
      1575,
      1604
    ]
  ],
  [
    [
      65021,
      65021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65022,
      65023
    ],
    "disallowed"
  ],
  [
    [
      65024,
      65039
    ],
    "ignored"
  ],
  [
    [
      65040,
      65040
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65041,
      65041
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65042,
      65042
    ],
    "disallowed"
  ],
  [
    [
      65043,
      65043
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65044,
      65044
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65045,
      65045
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65046,
      65046
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65047,
      65047
    ],
    "mapped",
    [
      12310
    ]
  ],
  [
    [
      65048,
      65048
    ],
    "mapped",
    [
      12311
    ]
  ],
  [
    [
      65049,
      65049
    ],
    "disallowed"
  ],
  [
    [
      65050,
      65055
    ],
    "disallowed"
  ],
  [
    [
      65056,
      65059
    ],
    "valid"
  ],
  [
    [
      65060,
      65062
    ],
    "valid"
  ],
  [
    [
      65063,
      65069
    ],
    "valid"
  ],
  [
    [
      65070,
      65071
    ],
    "valid"
  ],
  [
    [
      65072,
      65072
    ],
    "disallowed"
  ],
  [
    [
      65073,
      65073
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65074,
      65074
    ],
    "mapped",
    [
      8211
    ]
  ],
  [
    [
      65075,
      65076
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65077,
      65077
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65078,
      65078
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65079,
      65079
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65080,
      65080
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65081,
      65081
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65082,
      65082
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65083,
      65083
    ],
    "mapped",
    [
      12304
    ]
  ],
  [
    [
      65084,
      65084
    ],
    "mapped",
    [
      12305
    ]
  ],
  [
    [
      65085,
      65085
    ],
    "mapped",
    [
      12298
    ]
  ],
  [
    [
      65086,
      65086
    ],
    "mapped",
    [
      12299
    ]
  ],
  [
    [
      65087,
      65087
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      65088,
      65088
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      65089,
      65089
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65090,
      65090
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65091,
      65091
    ],
    "mapped",
    [
      12302
    ]
  ],
  [
    [
      65092,
      65092
    ],
    "mapped",
    [
      12303
    ]
  ],
  [
    [
      65093,
      65094
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65095,
      65095
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65096,
      65096
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65097,
      65100
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      65101,
      65103
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65104,
      65104
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65105,
      65105
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65106,
      65106
    ],
    "disallowed"
  ],
  [
    [
      65107,
      65107
    ],
    "disallowed"
  ],
  [
    [
      65108,
      65108
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65109,
      65109
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65110,
      65110
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65111,
      65111
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65112,
      65112
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65113,
      65113
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65114,
      65114
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65115,
      65115
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65116,
      65116
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65117,
      65117
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65118,
      65118
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65119,
      65119
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65120,
      65120
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65121,
      65121
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65122,
      65122
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65123,
      65123
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65124,
      65124
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65125,
      65125
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65126,
      65126
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65127,
      65127
    ],
    "disallowed"
  ],
  [
    [
      65128,
      65128
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65129,
      65129
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65130,
      65130
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65131,
      65131
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65132,
      65135
    ],
    "disallowed"
  ],
  [
    [
      65136,
      65136
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1611
    ]
  ],
  [
    [
      65137,
      65137
    ],
    "mapped",
    [
      1600,
      1611
    ]
  ],
  [
    [
      65138,
      65138
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612
    ]
  ],
  [
    [
      65139,
      65139
    ],
    "valid"
  ],
  [
    [
      65140,
      65140
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613
    ]
  ],
  [
    [
      65141,
      65141
    ],
    "disallowed"
  ],
  [
    [
      65142,
      65142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614
    ]
  ],
  [
    [
      65143,
      65143
    ],
    "mapped",
    [
      1600,
      1614
    ]
  ],
  [
    [
      65144,
      65144
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615
    ]
  ],
  [
    [
      65145,
      65145
    ],
    "mapped",
    [
      1600,
      1615
    ]
  ],
  [
    [
      65146,
      65146
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616
    ]
  ],
  [
    [
      65147,
      65147
    ],
    "mapped",
    [
      1600,
      1616
    ]
  ],
  [
    [
      65148,
      65148
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617
    ]
  ],
  [
    [
      65149,
      65149
    ],
    "mapped",
    [
      1600,
      1617
    ]
  ],
  [
    [
      65150,
      65150
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1618
    ]
  ],
  [
    [
      65151,
      65151
    ],
    "mapped",
    [
      1600,
      1618
    ]
  ],
  [
    [
      65152,
      65152
    ],
    "mapped",
    [
      1569
    ]
  ],
  [
    [
      65153,
      65154
    ],
    "mapped",
    [
      1570
    ]
  ],
  [
    [
      65155,
      65156
    ],
    "mapped",
    [
      1571
    ]
  ],
  [
    [
      65157,
      65158
    ],
    "mapped",
    [
      1572
    ]
  ],
  [
    [
      65159,
      65160
    ],
    "mapped",
    [
      1573
    ]
  ],
  [
    [
      65161,
      65164
    ],
    "mapped",
    [
      1574
    ]
  ],
  [
    [
      65165,
      65166
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      65167,
      65170
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      65171,
      65172
    ],
    "mapped",
    [
      1577
    ]
  ],
  [
    [
      65173,
      65176
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      65177,
      65180
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      65181,
      65184
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      65185,
      65188
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      65189,
      65192
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      65193,
      65194
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      65195,
      65196
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      65197,
      65198
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      65199,
      65200
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      65201,
      65204
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      65205,
      65208
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      65209,
      65212
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      65213,
      65216
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      65217,
      65220
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      65221,
      65224
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      65225,
      65228
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      65229,
      65232
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      65233,
      65236
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      65237,
      65240
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      65241,
      65244
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      65245,
      65248
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      65249,
      65252
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      65253,
      65256
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      65257,
      65260
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      65261,
      65262
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      65263,
      65264
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      65265,
      65268
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      65269,
      65270
    ],
    "mapped",
    [
      1604,
      1570
    ]
  ],
  [
    [
      65271,
      65272
    ],
    "mapped",
    [
      1604,
      1571
    ]
  ],
  [
    [
      65273,
      65274
    ],
    "mapped",
    [
      1604,
      1573
    ]
  ],
  [
    [
      65275,
      65276
    ],
    "mapped",
    [
      1604,
      1575
    ]
  ],
  [
    [
      65277,
      65278
    ],
    "disallowed"
  ],
  [
    [
      65279,
      65279
    ],
    "ignored"
  ],
  [
    [
      65280,
      65280
    ],
    "disallowed"
  ],
  [
    [
      65281,
      65281
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65282,
      65282
    ],
    "disallowed_STD3_mapped",
    [
      34
    ]
  ],
  [
    [
      65283,
      65283
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65284,
      65284
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65285,
      65285
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65286,
      65286
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65287,
      65287
    ],
    "disallowed_STD3_mapped",
    [
      39
    ]
  ],
  [
    [
      65288,
      65288
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65289,
      65289
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65290,
      65290
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65291,
      65291
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65292,
      65292
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65293,
      65293
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65294,
      65294
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65295,
      65295
    ],
    "disallowed_STD3_mapped",
    [
      47
    ]
  ],
  [
    [
      65296,
      65296
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      65297,
      65297
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      65298,
      65298
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      65299,
      65299
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      65300,
      65300
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      65301,
      65301
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      65302,
      65302
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      65303,
      65303
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      65304,
      65304
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      65305,
      65305
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      65306,
      65306
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65307,
      65307
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65308,
      65308
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65309,
      65309
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65310,
      65310
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65311,
      65311
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65312,
      65312
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65313,
      65313
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65314,
      65314
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65315,
      65315
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65316,
      65316
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65317,
      65317
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65318,
      65318
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65319,
      65319
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65320,
      65320
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65321,
      65321
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65322,
      65322
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65323,
      65323
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65324,
      65324
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65325,
      65325
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65326,
      65326
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65327,
      65327
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65328,
      65328
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65329,
      65329
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65330,
      65330
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65331,
      65331
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65332,
      65332
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65333,
      65333
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65334,
      65334
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65335,
      65335
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65336,
      65336
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65337,
      65337
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65338,
      65338
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65339,
      65339
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65340,
      65340
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65341,
      65341
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65342,
      65342
    ],
    "disallowed_STD3_mapped",
    [
      94
    ]
  ],
  [
    [
      65343,
      65343
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65344,
      65344
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      65345,
      65345
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65346,
      65346
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65347,
      65347
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65348,
      65348
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65349,
      65349
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65350,
      65350
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65351,
      65351
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65352,
      65352
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65353,
      65353
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65354,
      65354
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65355,
      65355
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65356,
      65356
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65357,
      65357
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65358,
      65358
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65359,
      65359
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65360,
      65360
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65361,
      65361
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65362,
      65362
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65363,
      65363
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65364,
      65364
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65365,
      65365
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65366,
      65366
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65367,
      65367
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65368,
      65368
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65369,
      65369
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65370,
      65370
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65371,
      65371
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65372,
      65372
    ],
    "disallowed_STD3_mapped",
    [
      124
    ]
  ],
  [
    [
      65373,
      65373
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65374,
      65374
    ],
    "disallowed_STD3_mapped",
    [
      126
    ]
  ],
  [
    [
      65375,
      65375
    ],
    "mapped",
    [
      10629
    ]
  ],
  [
    [
      65376,
      65376
    ],
    "mapped",
    [
      10630
    ]
  ],
  [
    [
      65377,
      65377
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65378,
      65378
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65379,
      65379
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65380,
      65380
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65381,
      65381
    ],
    "mapped",
    [
      12539
    ]
  ],
  [
    [
      65382,
      65382
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      65383,
      65383
    ],
    "mapped",
    [
      12449
    ]
  ],
  [
    [
      65384,
      65384
    ],
    "mapped",
    [
      12451
    ]
  ],
  [
    [
      65385,
      65385
    ],
    "mapped",
    [
      12453
    ]
  ],
  [
    [
      65386,
      65386
    ],
    "mapped",
    [
      12455
    ]
  ],
  [
    [
      65387,
      65387
    ],
    "mapped",
    [
      12457
    ]
  ],
  [
    [
      65388,
      65388
    ],
    "mapped",
    [
      12515
    ]
  ],
  [
    [
      65389,
      65389
    ],
    "mapped",
    [
      12517
    ]
  ],
  [
    [
      65390,
      65390
    ],
    "mapped",
    [
      12519
    ]
  ],
  [
    [
      65391,
      65391
    ],
    "mapped",
    [
      12483
    ]
  ],
  [
    [
      65392,
      65392
    ],
    "mapped",
    [
      12540
    ]
  ],
  [
    [
      65393,
      65393
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      65394,
      65394
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      65395,
      65395
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      65396,
      65396
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      65397,
      65397
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      65398,
      65398
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      65399,
      65399
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      65400,
      65400
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      65401,
      65401
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      65402,
      65402
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      65403,
      65403
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      65404,
      65404
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      65405,
      65405
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      65406,
      65406
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      65407,
      65407
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      65408,
      65408
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      65409,
      65409
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      65410,
      65410
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      65411,
      65411
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      65412,
      65412
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      65413,
      65413
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      65414,
      65414
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      65415,
      65415
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      65416,
      65416
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      65417,
      65417
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      65418,
      65418
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      65419,
      65419
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      65420,
      65420
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      65421,
      65421
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      65422,
      65422
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      65423,
      65423
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      65424,
      65424
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      65425,
      65425
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      65426,
      65426
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      65427,
      65427
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      65428,
      65428
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      65429,
      65429
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      65430,
      65430
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      65431,
      65431
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      65432,
      65432
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      65433,
      65433
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      65434,
      65434
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      65435,
      65435
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      65436,
      65436
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      65437,
      65437
    ],
    "mapped",
    [
      12531
    ]
  ],
  [
    [
      65438,
      65438
    ],
    "mapped",
    [
      12441
    ]
  ],
  [
    [
      65439,
      65439
    ],
    "mapped",
    [
      12442
    ]
  ],
  [
    [
      65440,
      65440
    ],
    "disallowed"
  ],
  [
    [
      65441,
      65441
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      65442,
      65442
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      65443,
      65443
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      65444,
      65444
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      65445,
      65445
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      65446,
      65446
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      65447,
      65447
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      65448,
      65448
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      65449,
      65449
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      65450,
      65450
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      65451,
      65451
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      65452,
      65452
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      65453,
      65453
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      65454,
      65454
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      65455,
      65455
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      65456,
      65456
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      65457,
      65457
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      65458,
      65458
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      65459,
      65459
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      65460,
      65460
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      65461,
      65461
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      65462,
      65462
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      65463,
      65463
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      65464,
      65464
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      65465,
      65465
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      65466,
      65466
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      65467,
      65467
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      65468,
      65468
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      65469,
      65469
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      65470,
      65470
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      65471,
      65473
    ],
    "disallowed"
  ],
  [
    [
      65474,
      65474
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      65475,
      65475
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      65476,
      65476
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      65477,
      65477
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      65478,
      65478
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      65479,
      65479
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      65480,
      65481
    ],
    "disallowed"
  ],
  [
    [
      65482,
      65482
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      65483,
      65483
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      65484,
      65484
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      65485,
      65485
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      65486,
      65486
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      65487,
      65487
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      65488,
      65489
    ],
    "disallowed"
  ],
  [
    [
      65490,
      65490
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      65491,
      65491
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      65492,
      65492
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      65493,
      65493
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      65494,
      65494
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      65495,
      65495
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      65496,
      65497
    ],
    "disallowed"
  ],
  [
    [
      65498,
      65498
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      65499,
      65499
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      65500,
      65500
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      65501,
      65503
    ],
    "disallowed"
  ],
  [
    [
      65504,
      65504
    ],
    "mapped",
    [
      162
    ]
  ],
  [
    [
      65505,
      65505
    ],
    "mapped",
    [
      163
    ]
  ],
  [
    [
      65506,
      65506
    ],
    "mapped",
    [
      172
    ]
  ],
  [
    [
      65507,
      65507
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      65508,
      65508
    ],
    "mapped",
    [
      166
    ]
  ],
  [
    [
      65509,
      65509
    ],
    "mapped",
    [
      165
    ]
  ],
  [
    [
      65510,
      65510
    ],
    "mapped",
    [
      8361
    ]
  ],
  [
    [
      65511,
      65511
    ],
    "disallowed"
  ],
  [
    [
      65512,
      65512
    ],
    "mapped",
    [
      9474
    ]
  ],
  [
    [
      65513,
      65513
    ],
    "mapped",
    [
      8592
    ]
  ],
  [
    [
      65514,
      65514
    ],
    "mapped",
    [
      8593
    ]
  ],
  [
    [
      65515,
      65515
    ],
    "mapped",
    [
      8594
    ]
  ],
  [
    [
      65516,
      65516
    ],
    "mapped",
    [
      8595
    ]
  ],
  [
    [
      65517,
      65517
    ],
    "mapped",
    [
      9632
    ]
  ],
  [
    [
      65518,
      65518
    ],
    "mapped",
    [
      9675
    ]
  ],
  [
    [
      65519,
      65528
    ],
    "disallowed"
  ],
  [
    [
      65529,
      65531
    ],
    "disallowed"
  ],
  [
    [
      65532,
      65532
    ],
    "disallowed"
  ],
  [
    [
      65533,
      65533
    ],
    "disallowed"
  ],
  [
    [
      65534,
      65535
    ],
    "disallowed"
  ],
  [
    [
      65536,
      65547
    ],
    "valid"
  ],
  [
    [
      65548,
      65548
    ],
    "disallowed"
  ],
  [
    [
      65549,
      65574
    ],
    "valid"
  ],
  [
    [
      65575,
      65575
    ],
    "disallowed"
  ],
  [
    [
      65576,
      65594
    ],
    "valid"
  ],
  [
    [
      65595,
      65595
    ],
    "disallowed"
  ],
  [
    [
      65596,
      65597
    ],
    "valid"
  ],
  [
    [
      65598,
      65598
    ],
    "disallowed"
  ],
  [
    [
      65599,
      65613
    ],
    "valid"
  ],
  [
    [
      65614,
      65615
    ],
    "disallowed"
  ],
  [
    [
      65616,
      65629
    ],
    "valid"
  ],
  [
    [
      65630,
      65663
    ],
    "disallowed"
  ],
  [
    [
      65664,
      65786
    ],
    "valid"
  ],
  [
    [
      65787,
      65791
    ],
    "disallowed"
  ],
  [
    [
      65792,
      65794
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65795,
      65798
    ],
    "disallowed"
  ],
  [
    [
      65799,
      65843
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65844,
      65846
    ],
    "disallowed"
  ],
  [
    [
      65847,
      65855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65856,
      65930
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65931,
      65932
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65933,
      65935
    ],
    "disallowed"
  ],
  [
    [
      65936,
      65947
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65948,
      65951
    ],
    "disallowed"
  ],
  [
    [
      65952,
      65952
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65953,
      65999
    ],
    "disallowed"
  ],
  [
    [
      66e3,
      66044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66045,
      66045
    ],
    "valid"
  ],
  [
    [
      66046,
      66175
    ],
    "disallowed"
  ],
  [
    [
      66176,
      66204
    ],
    "valid"
  ],
  [
    [
      66205,
      66207
    ],
    "disallowed"
  ],
  [
    [
      66208,
      66256
    ],
    "valid"
  ],
  [
    [
      66257,
      66271
    ],
    "disallowed"
  ],
  [
    [
      66272,
      66272
    ],
    "valid"
  ],
  [
    [
      66273,
      66299
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66300,
      66303
    ],
    "disallowed"
  ],
  [
    [
      66304,
      66334
    ],
    "valid"
  ],
  [
    [
      66335,
      66335
    ],
    "valid"
  ],
  [
    [
      66336,
      66339
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66340,
      66351
    ],
    "disallowed"
  ],
  [
    [
      66352,
      66368
    ],
    "valid"
  ],
  [
    [
      66369,
      66369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66370,
      66377
    ],
    "valid"
  ],
  [
    [
      66378,
      66378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66379,
      66383
    ],
    "disallowed"
  ],
  [
    [
      66384,
      66426
    ],
    "valid"
  ],
  [
    [
      66427,
      66431
    ],
    "disallowed"
  ],
  [
    [
      66432,
      66461
    ],
    "valid"
  ],
  [
    [
      66462,
      66462
    ],
    "disallowed"
  ],
  [
    [
      66463,
      66463
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66464,
      66499
    ],
    "valid"
  ],
  [
    [
      66500,
      66503
    ],
    "disallowed"
  ],
  [
    [
      66504,
      66511
    ],
    "valid"
  ],
  [
    [
      66512,
      66517
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66518,
      66559
    ],
    "disallowed"
  ],
  [
    [
      66560,
      66560
    ],
    "mapped",
    [
      66600
    ]
  ],
  [
    [
      66561,
      66561
    ],
    "mapped",
    [
      66601
    ]
  ],
  [
    [
      66562,
      66562
    ],
    "mapped",
    [
      66602
    ]
  ],
  [
    [
      66563,
      66563
    ],
    "mapped",
    [
      66603
    ]
  ],
  [
    [
      66564,
      66564
    ],
    "mapped",
    [
      66604
    ]
  ],
  [
    [
      66565,
      66565
    ],
    "mapped",
    [
      66605
    ]
  ],
  [
    [
      66566,
      66566
    ],
    "mapped",
    [
      66606
    ]
  ],
  [
    [
      66567,
      66567
    ],
    "mapped",
    [
      66607
    ]
  ],
  [
    [
      66568,
      66568
    ],
    "mapped",
    [
      66608
    ]
  ],
  [
    [
      66569,
      66569
    ],
    "mapped",
    [
      66609
    ]
  ],
  [
    [
      66570,
      66570
    ],
    "mapped",
    [
      66610
    ]
  ],
  [
    [
      66571,
      66571
    ],
    "mapped",
    [
      66611
    ]
  ],
  [
    [
      66572,
      66572
    ],
    "mapped",
    [
      66612
    ]
  ],
  [
    [
      66573,
      66573
    ],
    "mapped",
    [
      66613
    ]
  ],
  [
    [
      66574,
      66574
    ],
    "mapped",
    [
      66614
    ]
  ],
  [
    [
      66575,
      66575
    ],
    "mapped",
    [
      66615
    ]
  ],
  [
    [
      66576,
      66576
    ],
    "mapped",
    [
      66616
    ]
  ],
  [
    [
      66577,
      66577
    ],
    "mapped",
    [
      66617
    ]
  ],
  [
    [
      66578,
      66578
    ],
    "mapped",
    [
      66618
    ]
  ],
  [
    [
      66579,
      66579
    ],
    "mapped",
    [
      66619
    ]
  ],
  [
    [
      66580,
      66580
    ],
    "mapped",
    [
      66620
    ]
  ],
  [
    [
      66581,
      66581
    ],
    "mapped",
    [
      66621
    ]
  ],
  [
    [
      66582,
      66582
    ],
    "mapped",
    [
      66622
    ]
  ],
  [
    [
      66583,
      66583
    ],
    "mapped",
    [
      66623
    ]
  ],
  [
    [
      66584,
      66584
    ],
    "mapped",
    [
      66624
    ]
  ],
  [
    [
      66585,
      66585
    ],
    "mapped",
    [
      66625
    ]
  ],
  [
    [
      66586,
      66586
    ],
    "mapped",
    [
      66626
    ]
  ],
  [
    [
      66587,
      66587
    ],
    "mapped",
    [
      66627
    ]
  ],
  [
    [
      66588,
      66588
    ],
    "mapped",
    [
      66628
    ]
  ],
  [
    [
      66589,
      66589
    ],
    "mapped",
    [
      66629
    ]
  ],
  [
    [
      66590,
      66590
    ],
    "mapped",
    [
      66630
    ]
  ],
  [
    [
      66591,
      66591
    ],
    "mapped",
    [
      66631
    ]
  ],
  [
    [
      66592,
      66592
    ],
    "mapped",
    [
      66632
    ]
  ],
  [
    [
      66593,
      66593
    ],
    "mapped",
    [
      66633
    ]
  ],
  [
    [
      66594,
      66594
    ],
    "mapped",
    [
      66634
    ]
  ],
  [
    [
      66595,
      66595
    ],
    "mapped",
    [
      66635
    ]
  ],
  [
    [
      66596,
      66596
    ],
    "mapped",
    [
      66636
    ]
  ],
  [
    [
      66597,
      66597
    ],
    "mapped",
    [
      66637
    ]
  ],
  [
    [
      66598,
      66598
    ],
    "mapped",
    [
      66638
    ]
  ],
  [
    [
      66599,
      66599
    ],
    "mapped",
    [
      66639
    ]
  ],
  [
    [
      66600,
      66637
    ],
    "valid"
  ],
  [
    [
      66638,
      66717
    ],
    "valid"
  ],
  [
    [
      66718,
      66719
    ],
    "disallowed"
  ],
  [
    [
      66720,
      66729
    ],
    "valid"
  ],
  [
    [
      66730,
      66815
    ],
    "disallowed"
  ],
  [
    [
      66816,
      66855
    ],
    "valid"
  ],
  [
    [
      66856,
      66863
    ],
    "disallowed"
  ],
  [
    [
      66864,
      66915
    ],
    "valid"
  ],
  [
    [
      66916,
      66926
    ],
    "disallowed"
  ],
  [
    [
      66927,
      66927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66928,
      67071
    ],
    "disallowed"
  ],
  [
    [
      67072,
      67382
    ],
    "valid"
  ],
  [
    [
      67383,
      67391
    ],
    "disallowed"
  ],
  [
    [
      67392,
      67413
    ],
    "valid"
  ],
  [
    [
      67414,
      67423
    ],
    "disallowed"
  ],
  [
    [
      67424,
      67431
    ],
    "valid"
  ],
  [
    [
      67432,
      67583
    ],
    "disallowed"
  ],
  [
    [
      67584,
      67589
    ],
    "valid"
  ],
  [
    [
      67590,
      67591
    ],
    "disallowed"
  ],
  [
    [
      67592,
      67592
    ],
    "valid"
  ],
  [
    [
      67593,
      67593
    ],
    "disallowed"
  ],
  [
    [
      67594,
      67637
    ],
    "valid"
  ],
  [
    [
      67638,
      67638
    ],
    "disallowed"
  ],
  [
    [
      67639,
      67640
    ],
    "valid"
  ],
  [
    [
      67641,
      67643
    ],
    "disallowed"
  ],
  [
    [
      67644,
      67644
    ],
    "valid"
  ],
  [
    [
      67645,
      67646
    ],
    "disallowed"
  ],
  [
    [
      67647,
      67647
    ],
    "valid"
  ],
  [
    [
      67648,
      67669
    ],
    "valid"
  ],
  [
    [
      67670,
      67670
    ],
    "disallowed"
  ],
  [
    [
      67671,
      67679
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67680,
      67702
    ],
    "valid"
  ],
  [
    [
      67703,
      67711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67712,
      67742
    ],
    "valid"
  ],
  [
    [
      67743,
      67750
    ],
    "disallowed"
  ],
  [
    [
      67751,
      67759
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67760,
      67807
    ],
    "disallowed"
  ],
  [
    [
      67808,
      67826
    ],
    "valid"
  ],
  [
    [
      67827,
      67827
    ],
    "disallowed"
  ],
  [
    [
      67828,
      67829
    ],
    "valid"
  ],
  [
    [
      67830,
      67834
    ],
    "disallowed"
  ],
  [
    [
      67835,
      67839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67840,
      67861
    ],
    "valid"
  ],
  [
    [
      67862,
      67865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67866,
      67867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67868,
      67870
    ],
    "disallowed"
  ],
  [
    [
      67871,
      67871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67872,
      67897
    ],
    "valid"
  ],
  [
    [
      67898,
      67902
    ],
    "disallowed"
  ],
  [
    [
      67903,
      67903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67904,
      67967
    ],
    "disallowed"
  ],
  [
    [
      67968,
      68023
    ],
    "valid"
  ],
  [
    [
      68024,
      68027
    ],
    "disallowed"
  ],
  [
    [
      68028,
      68029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68030,
      68031
    ],
    "valid"
  ],
  [
    [
      68032,
      68047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68048,
      68049
    ],
    "disallowed"
  ],
  [
    [
      68050,
      68095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68096,
      68099
    ],
    "valid"
  ],
  [
    [
      68100,
      68100
    ],
    "disallowed"
  ],
  [
    [
      68101,
      68102
    ],
    "valid"
  ],
  [
    [
      68103,
      68107
    ],
    "disallowed"
  ],
  [
    [
      68108,
      68115
    ],
    "valid"
  ],
  [
    [
      68116,
      68116
    ],
    "disallowed"
  ],
  [
    [
      68117,
      68119
    ],
    "valid"
  ],
  [
    [
      68120,
      68120
    ],
    "disallowed"
  ],
  [
    [
      68121,
      68147
    ],
    "valid"
  ],
  [
    [
      68148,
      68151
    ],
    "disallowed"
  ],
  [
    [
      68152,
      68154
    ],
    "valid"
  ],
  [
    [
      68155,
      68158
    ],
    "disallowed"
  ],
  [
    [
      68159,
      68159
    ],
    "valid"
  ],
  [
    [
      68160,
      68167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68168,
      68175
    ],
    "disallowed"
  ],
  [
    [
      68176,
      68184
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68185,
      68191
    ],
    "disallowed"
  ],
  [
    [
      68192,
      68220
    ],
    "valid"
  ],
  [
    [
      68221,
      68223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68224,
      68252
    ],
    "valid"
  ],
  [
    [
      68253,
      68255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68256,
      68287
    ],
    "disallowed"
  ],
  [
    [
      68288,
      68295
    ],
    "valid"
  ],
  [
    [
      68296,
      68296
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68297,
      68326
    ],
    "valid"
  ],
  [
    [
      68327,
      68330
    ],
    "disallowed"
  ],
  [
    [
      68331,
      68342
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68343,
      68351
    ],
    "disallowed"
  ],
  [
    [
      68352,
      68405
    ],
    "valid"
  ],
  [
    [
      68406,
      68408
    ],
    "disallowed"
  ],
  [
    [
      68409,
      68415
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68416,
      68437
    ],
    "valid"
  ],
  [
    [
      68438,
      68439
    ],
    "disallowed"
  ],
  [
    [
      68440,
      68447
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68448,
      68466
    ],
    "valid"
  ],
  [
    [
      68467,
      68471
    ],
    "disallowed"
  ],
  [
    [
      68472,
      68479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68480,
      68497
    ],
    "valid"
  ],
  [
    [
      68498,
      68504
    ],
    "disallowed"
  ],
  [
    [
      68505,
      68508
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68509,
      68520
    ],
    "disallowed"
  ],
  [
    [
      68521,
      68527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68528,
      68607
    ],
    "disallowed"
  ],
  [
    [
      68608,
      68680
    ],
    "valid"
  ],
  [
    [
      68681,
      68735
    ],
    "disallowed"
  ],
  [
    [
      68736,
      68736
    ],
    "mapped",
    [
      68800
    ]
  ],
  [
    [
      68737,
      68737
    ],
    "mapped",
    [
      68801
    ]
  ],
  [
    [
      68738,
      68738
    ],
    "mapped",
    [
      68802
    ]
  ],
  [
    [
      68739,
      68739
    ],
    "mapped",
    [
      68803
    ]
  ],
  [
    [
      68740,
      68740
    ],
    "mapped",
    [
      68804
    ]
  ],
  [
    [
      68741,
      68741
    ],
    "mapped",
    [
      68805
    ]
  ],
  [
    [
      68742,
      68742
    ],
    "mapped",
    [
      68806
    ]
  ],
  [
    [
      68743,
      68743
    ],
    "mapped",
    [
      68807
    ]
  ],
  [
    [
      68744,
      68744
    ],
    "mapped",
    [
      68808
    ]
  ],
  [
    [
      68745,
      68745
    ],
    "mapped",
    [
      68809
    ]
  ],
  [
    [
      68746,
      68746
    ],
    "mapped",
    [
      68810
    ]
  ],
  [
    [
      68747,
      68747
    ],
    "mapped",
    [
      68811
    ]
  ],
  [
    [
      68748,
      68748
    ],
    "mapped",
    [
      68812
    ]
  ],
  [
    [
      68749,
      68749
    ],
    "mapped",
    [
      68813
    ]
  ],
  [
    [
      68750,
      68750
    ],
    "mapped",
    [
      68814
    ]
  ],
  [
    [
      68751,
      68751
    ],
    "mapped",
    [
      68815
    ]
  ],
  [
    [
      68752,
      68752
    ],
    "mapped",
    [
      68816
    ]
  ],
  [
    [
      68753,
      68753
    ],
    "mapped",
    [
      68817
    ]
  ],
  [
    [
      68754,
      68754
    ],
    "mapped",
    [
      68818
    ]
  ],
  [
    [
      68755,
      68755
    ],
    "mapped",
    [
      68819
    ]
  ],
  [
    [
      68756,
      68756
    ],
    "mapped",
    [
      68820
    ]
  ],
  [
    [
      68757,
      68757
    ],
    "mapped",
    [
      68821
    ]
  ],
  [
    [
      68758,
      68758
    ],
    "mapped",
    [
      68822
    ]
  ],
  [
    [
      68759,
      68759
    ],
    "mapped",
    [
      68823
    ]
  ],
  [
    [
      68760,
      68760
    ],
    "mapped",
    [
      68824
    ]
  ],
  [
    [
      68761,
      68761
    ],
    "mapped",
    [
      68825
    ]
  ],
  [
    [
      68762,
      68762
    ],
    "mapped",
    [
      68826
    ]
  ],
  [
    [
      68763,
      68763
    ],
    "mapped",
    [
      68827
    ]
  ],
  [
    [
      68764,
      68764
    ],
    "mapped",
    [
      68828
    ]
  ],
  [
    [
      68765,
      68765
    ],
    "mapped",
    [
      68829
    ]
  ],
  [
    [
      68766,
      68766
    ],
    "mapped",
    [
      68830
    ]
  ],
  [
    [
      68767,
      68767
    ],
    "mapped",
    [
      68831
    ]
  ],
  [
    [
      68768,
      68768
    ],
    "mapped",
    [
      68832
    ]
  ],
  [
    [
      68769,
      68769
    ],
    "mapped",
    [
      68833
    ]
  ],
  [
    [
      68770,
      68770
    ],
    "mapped",
    [
      68834
    ]
  ],
  [
    [
      68771,
      68771
    ],
    "mapped",
    [
      68835
    ]
  ],
  [
    [
      68772,
      68772
    ],
    "mapped",
    [
      68836
    ]
  ],
  [
    [
      68773,
      68773
    ],
    "mapped",
    [
      68837
    ]
  ],
  [
    [
      68774,
      68774
    ],
    "mapped",
    [
      68838
    ]
  ],
  [
    [
      68775,
      68775
    ],
    "mapped",
    [
      68839
    ]
  ],
  [
    [
      68776,
      68776
    ],
    "mapped",
    [
      68840
    ]
  ],
  [
    [
      68777,
      68777
    ],
    "mapped",
    [
      68841
    ]
  ],
  [
    [
      68778,
      68778
    ],
    "mapped",
    [
      68842
    ]
  ],
  [
    [
      68779,
      68779
    ],
    "mapped",
    [
      68843
    ]
  ],
  [
    [
      68780,
      68780
    ],
    "mapped",
    [
      68844
    ]
  ],
  [
    [
      68781,
      68781
    ],
    "mapped",
    [
      68845
    ]
  ],
  [
    [
      68782,
      68782
    ],
    "mapped",
    [
      68846
    ]
  ],
  [
    [
      68783,
      68783
    ],
    "mapped",
    [
      68847
    ]
  ],
  [
    [
      68784,
      68784
    ],
    "mapped",
    [
      68848
    ]
  ],
  [
    [
      68785,
      68785
    ],
    "mapped",
    [
      68849
    ]
  ],
  [
    [
      68786,
      68786
    ],
    "mapped",
    [
      68850
    ]
  ],
  [
    [
      68787,
      68799
    ],
    "disallowed"
  ],
  [
    [
      68800,
      68850
    ],
    "valid"
  ],
  [
    [
      68851,
      68857
    ],
    "disallowed"
  ],
  [
    [
      68858,
      68863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68864,
      69215
    ],
    "disallowed"
  ],
  [
    [
      69216,
      69246
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69247,
      69631
    ],
    "disallowed"
  ],
  [
    [
      69632,
      69702
    ],
    "valid"
  ],
  [
    [
      69703,
      69709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69710,
      69713
    ],
    "disallowed"
  ],
  [
    [
      69714,
      69733
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69734,
      69743
    ],
    "valid"
  ],
  [
    [
      69744,
      69758
    ],
    "disallowed"
  ],
  [
    [
      69759,
      69759
    ],
    "valid"
  ],
  [
    [
      69760,
      69818
    ],
    "valid"
  ],
  [
    [
      69819,
      69820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69821,
      69821
    ],
    "disallowed"
  ],
  [
    [
      69822,
      69825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69826,
      69839
    ],
    "disallowed"
  ],
  [
    [
      69840,
      69864
    ],
    "valid"
  ],
  [
    [
      69865,
      69871
    ],
    "disallowed"
  ],
  [
    [
      69872,
      69881
    ],
    "valid"
  ],
  [
    [
      69882,
      69887
    ],
    "disallowed"
  ],
  [
    [
      69888,
      69940
    ],
    "valid"
  ],
  [
    [
      69941,
      69941
    ],
    "disallowed"
  ],
  [
    [
      69942,
      69951
    ],
    "valid"
  ],
  [
    [
      69952,
      69955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69956,
      69967
    ],
    "disallowed"
  ],
  [
    [
      69968,
      70003
    ],
    "valid"
  ],
  [
    [
      70004,
      70005
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70006,
      70006
    ],
    "valid"
  ],
  [
    [
      70007,
      70015
    ],
    "disallowed"
  ],
  [
    [
      70016,
      70084
    ],
    "valid"
  ],
  [
    [
      70085,
      70088
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70089,
      70089
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70090,
      70092
    ],
    "valid"
  ],
  [
    [
      70093,
      70093
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70094,
      70095
    ],
    "disallowed"
  ],
  [
    [
      70096,
      70105
    ],
    "valid"
  ],
  [
    [
      70106,
      70106
    ],
    "valid"
  ],
  [
    [
      70107,
      70107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70108,
      70108
    ],
    "valid"
  ],
  [
    [
      70109,
      70111
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70112,
      70112
    ],
    "disallowed"
  ],
  [
    [
      70113,
      70132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70133,
      70143
    ],
    "disallowed"
  ],
  [
    [
      70144,
      70161
    ],
    "valid"
  ],
  [
    [
      70162,
      70162
    ],
    "disallowed"
  ],
  [
    [
      70163,
      70199
    ],
    "valid"
  ],
  [
    [
      70200,
      70205
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70206,
      70271
    ],
    "disallowed"
  ],
  [
    [
      70272,
      70278
    ],
    "valid"
  ],
  [
    [
      70279,
      70279
    ],
    "disallowed"
  ],
  [
    [
      70280,
      70280
    ],
    "valid"
  ],
  [
    [
      70281,
      70281
    ],
    "disallowed"
  ],
  [
    [
      70282,
      70285
    ],
    "valid"
  ],
  [
    [
      70286,
      70286
    ],
    "disallowed"
  ],
  [
    [
      70287,
      70301
    ],
    "valid"
  ],
  [
    [
      70302,
      70302
    ],
    "disallowed"
  ],
  [
    [
      70303,
      70312
    ],
    "valid"
  ],
  [
    [
      70313,
      70313
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70314,
      70319
    ],
    "disallowed"
  ],
  [
    [
      70320,
      70378
    ],
    "valid"
  ],
  [
    [
      70379,
      70383
    ],
    "disallowed"
  ],
  [
    [
      70384,
      70393
    ],
    "valid"
  ],
  [
    [
      70394,
      70399
    ],
    "disallowed"
  ],
  [
    [
      70400,
      70400
    ],
    "valid"
  ],
  [
    [
      70401,
      70403
    ],
    "valid"
  ],
  [
    [
      70404,
      70404
    ],
    "disallowed"
  ],
  [
    [
      70405,
      70412
    ],
    "valid"
  ],
  [
    [
      70413,
      70414
    ],
    "disallowed"
  ],
  [
    [
      70415,
      70416
    ],
    "valid"
  ],
  [
    [
      70417,
      70418
    ],
    "disallowed"
  ],
  [
    [
      70419,
      70440
    ],
    "valid"
  ],
  [
    [
      70441,
      70441
    ],
    "disallowed"
  ],
  [
    [
      70442,
      70448
    ],
    "valid"
  ],
  [
    [
      70449,
      70449
    ],
    "disallowed"
  ],
  [
    [
      70450,
      70451
    ],
    "valid"
  ],
  [
    [
      70452,
      70452
    ],
    "disallowed"
  ],
  [
    [
      70453,
      70457
    ],
    "valid"
  ],
  [
    [
      70458,
      70459
    ],
    "disallowed"
  ],
  [
    [
      70460,
      70468
    ],
    "valid"
  ],
  [
    [
      70469,
      70470
    ],
    "disallowed"
  ],
  [
    [
      70471,
      70472
    ],
    "valid"
  ],
  [
    [
      70473,
      70474
    ],
    "disallowed"
  ],
  [
    [
      70475,
      70477
    ],
    "valid"
  ],
  [
    [
      70478,
      70479
    ],
    "disallowed"
  ],
  [
    [
      70480,
      70480
    ],
    "valid"
  ],
  [
    [
      70481,
      70486
    ],
    "disallowed"
  ],
  [
    [
      70487,
      70487
    ],
    "valid"
  ],
  [
    [
      70488,
      70492
    ],
    "disallowed"
  ],
  [
    [
      70493,
      70499
    ],
    "valid"
  ],
  [
    [
      70500,
      70501
    ],
    "disallowed"
  ],
  [
    [
      70502,
      70508
    ],
    "valid"
  ],
  [
    [
      70509,
      70511
    ],
    "disallowed"
  ],
  [
    [
      70512,
      70516
    ],
    "valid"
  ],
  [
    [
      70517,
      70783
    ],
    "disallowed"
  ],
  [
    [
      70784,
      70853
    ],
    "valid"
  ],
  [
    [
      70854,
      70854
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70855,
      70855
    ],
    "valid"
  ],
  [
    [
      70856,
      70863
    ],
    "disallowed"
  ],
  [
    [
      70864,
      70873
    ],
    "valid"
  ],
  [
    [
      70874,
      71039
    ],
    "disallowed"
  ],
  [
    [
      71040,
      71093
    ],
    "valid"
  ],
  [
    [
      71094,
      71095
    ],
    "disallowed"
  ],
  [
    [
      71096,
      71104
    ],
    "valid"
  ],
  [
    [
      71105,
      71113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71114,
      71127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71128,
      71133
    ],
    "valid"
  ],
  [
    [
      71134,
      71167
    ],
    "disallowed"
  ],
  [
    [
      71168,
      71232
    ],
    "valid"
  ],
  [
    [
      71233,
      71235
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71236,
      71236
    ],
    "valid"
  ],
  [
    [
      71237,
      71247
    ],
    "disallowed"
  ],
  [
    [
      71248,
      71257
    ],
    "valid"
  ],
  [
    [
      71258,
      71295
    ],
    "disallowed"
  ],
  [
    [
      71296,
      71351
    ],
    "valid"
  ],
  [
    [
      71352,
      71359
    ],
    "disallowed"
  ],
  [
    [
      71360,
      71369
    ],
    "valid"
  ],
  [
    [
      71370,
      71423
    ],
    "disallowed"
  ],
  [
    [
      71424,
      71449
    ],
    "valid"
  ],
  [
    [
      71450,
      71452
    ],
    "disallowed"
  ],
  [
    [
      71453,
      71467
    ],
    "valid"
  ],
  [
    [
      71468,
      71471
    ],
    "disallowed"
  ],
  [
    [
      71472,
      71481
    ],
    "valid"
  ],
  [
    [
      71482,
      71487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71488,
      71839
    ],
    "disallowed"
  ],
  [
    [
      71840,
      71840
    ],
    "mapped",
    [
      71872
    ]
  ],
  [
    [
      71841,
      71841
    ],
    "mapped",
    [
      71873
    ]
  ],
  [
    [
      71842,
      71842
    ],
    "mapped",
    [
      71874
    ]
  ],
  [
    [
      71843,
      71843
    ],
    "mapped",
    [
      71875
    ]
  ],
  [
    [
      71844,
      71844
    ],
    "mapped",
    [
      71876
    ]
  ],
  [
    [
      71845,
      71845
    ],
    "mapped",
    [
      71877
    ]
  ],
  [
    [
      71846,
      71846
    ],
    "mapped",
    [
      71878
    ]
  ],
  [
    [
      71847,
      71847
    ],
    "mapped",
    [
      71879
    ]
  ],
  [
    [
      71848,
      71848
    ],
    "mapped",
    [
      71880
    ]
  ],
  [
    [
      71849,
      71849
    ],
    "mapped",
    [
      71881
    ]
  ],
  [
    [
      71850,
      71850
    ],
    "mapped",
    [
      71882
    ]
  ],
  [
    [
      71851,
      71851
    ],
    "mapped",
    [
      71883
    ]
  ],
  [
    [
      71852,
      71852
    ],
    "mapped",
    [
      71884
    ]
  ],
  [
    [
      71853,
      71853
    ],
    "mapped",
    [
      71885
    ]
  ],
  [
    [
      71854,
      71854
    ],
    "mapped",
    [
      71886
    ]
  ],
  [
    [
      71855,
      71855
    ],
    "mapped",
    [
      71887
    ]
  ],
  [
    [
      71856,
      71856
    ],
    "mapped",
    [
      71888
    ]
  ],
  [
    [
      71857,
      71857
    ],
    "mapped",
    [
      71889
    ]
  ],
  [
    [
      71858,
      71858
    ],
    "mapped",
    [
      71890
    ]
  ],
  [
    [
      71859,
      71859
    ],
    "mapped",
    [
      71891
    ]
  ],
  [
    [
      71860,
      71860
    ],
    "mapped",
    [
      71892
    ]
  ],
  [
    [
      71861,
      71861
    ],
    "mapped",
    [
      71893
    ]
  ],
  [
    [
      71862,
      71862
    ],
    "mapped",
    [
      71894
    ]
  ],
  [
    [
      71863,
      71863
    ],
    "mapped",
    [
      71895
    ]
  ],
  [
    [
      71864,
      71864
    ],
    "mapped",
    [
      71896
    ]
  ],
  [
    [
      71865,
      71865
    ],
    "mapped",
    [
      71897
    ]
  ],
  [
    [
      71866,
      71866
    ],
    "mapped",
    [
      71898
    ]
  ],
  [
    [
      71867,
      71867
    ],
    "mapped",
    [
      71899
    ]
  ],
  [
    [
      71868,
      71868
    ],
    "mapped",
    [
      71900
    ]
  ],
  [
    [
      71869,
      71869
    ],
    "mapped",
    [
      71901
    ]
  ],
  [
    [
      71870,
      71870
    ],
    "mapped",
    [
      71902
    ]
  ],
  [
    [
      71871,
      71871
    ],
    "mapped",
    [
      71903
    ]
  ],
  [
    [
      71872,
      71913
    ],
    "valid"
  ],
  [
    [
      71914,
      71922
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71923,
      71934
    ],
    "disallowed"
  ],
  [
    [
      71935,
      71935
    ],
    "valid"
  ],
  [
    [
      71936,
      72383
    ],
    "disallowed"
  ],
  [
    [
      72384,
      72440
    ],
    "valid"
  ],
  [
    [
      72441,
      73727
    ],
    "disallowed"
  ],
  [
    [
      73728,
      74606
    ],
    "valid"
  ],
  [
    [
      74607,
      74648
    ],
    "valid"
  ],
  [
    [
      74649,
      74649
    ],
    "valid"
  ],
  [
    [
      74650,
      74751
    ],
    "disallowed"
  ],
  [
    [
      74752,
      74850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74851,
      74862
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74863,
      74863
    ],
    "disallowed"
  ],
  [
    [
      74864,
      74867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74868,
      74868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74869,
      74879
    ],
    "disallowed"
  ],
  [
    [
      74880,
      75075
    ],
    "valid"
  ],
  [
    [
      75076,
      77823
    ],
    "disallowed"
  ],
  [
    [
      77824,
      78894
    ],
    "valid"
  ],
  [
    [
      78895,
      82943
    ],
    "disallowed"
  ],
  [
    [
      82944,
      83526
    ],
    "valid"
  ],
  [
    [
      83527,
      92159
    ],
    "disallowed"
  ],
  [
    [
      92160,
      92728
    ],
    "valid"
  ],
  [
    [
      92729,
      92735
    ],
    "disallowed"
  ],
  [
    [
      92736,
      92766
    ],
    "valid"
  ],
  [
    [
      92767,
      92767
    ],
    "disallowed"
  ],
  [
    [
      92768,
      92777
    ],
    "valid"
  ],
  [
    [
      92778,
      92781
    ],
    "disallowed"
  ],
  [
    [
      92782,
      92783
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92784,
      92879
    ],
    "disallowed"
  ],
  [
    [
      92880,
      92909
    ],
    "valid"
  ],
  [
    [
      92910,
      92911
    ],
    "disallowed"
  ],
  [
    [
      92912,
      92916
    ],
    "valid"
  ],
  [
    [
      92917,
      92917
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92918,
      92927
    ],
    "disallowed"
  ],
  [
    [
      92928,
      92982
    ],
    "valid"
  ],
  [
    [
      92983,
      92991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92992,
      92995
    ],
    "valid"
  ],
  [
    [
      92996,
      92997
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92998,
      93007
    ],
    "disallowed"
  ],
  [
    [
      93008,
      93017
    ],
    "valid"
  ],
  [
    [
      93018,
      93018
    ],
    "disallowed"
  ],
  [
    [
      93019,
      93025
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      93026,
      93026
    ],
    "disallowed"
  ],
  [
    [
      93027,
      93047
    ],
    "valid"
  ],
  [
    [
      93048,
      93052
    ],
    "disallowed"
  ],
  [
    [
      93053,
      93071
    ],
    "valid"
  ],
  [
    [
      93072,
      93951
    ],
    "disallowed"
  ],
  [
    [
      93952,
      94020
    ],
    "valid"
  ],
  [
    [
      94021,
      94031
    ],
    "disallowed"
  ],
  [
    [
      94032,
      94078
    ],
    "valid"
  ],
  [
    [
      94079,
      94094
    ],
    "disallowed"
  ],
  [
    [
      94095,
      94111
    ],
    "valid"
  ],
  [
    [
      94112,
      110591
    ],
    "disallowed"
  ],
  [
    [
      110592,
      110593
    ],
    "valid"
  ],
  [
    [
      110594,
      113663
    ],
    "disallowed"
  ],
  [
    [
      113664,
      113770
    ],
    "valid"
  ],
  [
    [
      113771,
      113775
    ],
    "disallowed"
  ],
  [
    [
      113776,
      113788
    ],
    "valid"
  ],
  [
    [
      113789,
      113791
    ],
    "disallowed"
  ],
  [
    [
      113792,
      113800
    ],
    "valid"
  ],
  [
    [
      113801,
      113807
    ],
    "disallowed"
  ],
  [
    [
      113808,
      113817
    ],
    "valid"
  ],
  [
    [
      113818,
      113819
    ],
    "disallowed"
  ],
  [
    [
      113820,
      113820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113821,
      113822
    ],
    "valid"
  ],
  [
    [
      113823,
      113823
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113824,
      113827
    ],
    "ignored"
  ],
  [
    [
      113828,
      118783
    ],
    "disallowed"
  ],
  [
    [
      118784,
      119029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119030,
      119039
    ],
    "disallowed"
  ],
  [
    [
      119040,
      119078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119079,
      119080
    ],
    "disallowed"
  ],
  [
    [
      119081,
      119081
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119082,
      119133
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119134,
      119134
    ],
    "mapped",
    [
      119127,
      119141
    ]
  ],
  [
    [
      119135,
      119135
    ],
    "mapped",
    [
      119128,
      119141
    ]
  ],
  [
    [
      119136,
      119136
    ],
    "mapped",
    [
      119128,
      119141,
      119150
    ]
  ],
  [
    [
      119137,
      119137
    ],
    "mapped",
    [
      119128,
      119141,
      119151
    ]
  ],
  [
    [
      119138,
      119138
    ],
    "mapped",
    [
      119128,
      119141,
      119152
    ]
  ],
  [
    [
      119139,
      119139
    ],
    "mapped",
    [
      119128,
      119141,
      119153
    ]
  ],
  [
    [
      119140,
      119140
    ],
    "mapped",
    [
      119128,
      119141,
      119154
    ]
  ],
  [
    [
      119141,
      119154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119155,
      119162
    ],
    "disallowed"
  ],
  [
    [
      119163,
      119226
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119227,
      119227
    ],
    "mapped",
    [
      119225,
      119141
    ]
  ],
  [
    [
      119228,
      119228
    ],
    "mapped",
    [
      119226,
      119141
    ]
  ],
  [
    [
      119229,
      119229
    ],
    "mapped",
    [
      119225,
      119141,
      119150
    ]
  ],
  [
    [
      119230,
      119230
    ],
    "mapped",
    [
      119226,
      119141,
      119150
    ]
  ],
  [
    [
      119231,
      119231
    ],
    "mapped",
    [
      119225,
      119141,
      119151
    ]
  ],
  [
    [
      119232,
      119232
    ],
    "mapped",
    [
      119226,
      119141,
      119151
    ]
  ],
  [
    [
      119233,
      119261
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119262,
      119272
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119273,
      119295
    ],
    "disallowed"
  ],
  [
    [
      119296,
      119365
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119366,
      119551
    ],
    "disallowed"
  ],
  [
    [
      119552,
      119638
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119639,
      119647
    ],
    "disallowed"
  ],
  [
    [
      119648,
      119665
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119666,
      119807
    ],
    "disallowed"
  ],
  [
    [
      119808,
      119808
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119809,
      119809
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119810,
      119810
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119811,
      119811
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119812,
      119812
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119813,
      119813
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119814,
      119814
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119815,
      119815
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119816,
      119816
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119817,
      119817
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119818,
      119818
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119819,
      119819
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119820,
      119820
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119821,
      119821
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119822,
      119822
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119823,
      119823
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119824,
      119824
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119825,
      119825
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119826,
      119826
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119827,
      119827
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119828,
      119828
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119829,
      119829
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119830,
      119830
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119831,
      119831
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119832,
      119832
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119833,
      119833
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119834,
      119834
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119835,
      119835
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119836,
      119836
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119837,
      119837
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119838,
      119838
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119839,
      119839
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119840,
      119840
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119841,
      119841
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119842,
      119842
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119843,
      119843
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119844,
      119844
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119845,
      119845
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119846,
      119846
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119847,
      119847
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119848,
      119848
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119849,
      119849
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119850,
      119850
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119851,
      119851
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119852,
      119852
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119853,
      119853
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119854,
      119854
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119855,
      119855
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119856,
      119856
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119857,
      119857
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119858,
      119858
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119859,
      119859
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119860,
      119860
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119861,
      119861
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119862,
      119862
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119863,
      119863
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119864,
      119864
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119865,
      119865
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119866,
      119866
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119867,
      119867
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119868,
      119868
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119869,
      119869
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119870,
      119870
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119871,
      119871
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119872,
      119872
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119873,
      119873
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119874,
      119874
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119875,
      119875
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119876,
      119876
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119877,
      119877
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119878,
      119878
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119879,
      119879
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119880,
      119880
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119881,
      119881
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119882,
      119882
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119883,
      119883
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119884,
      119884
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119885,
      119885
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119886,
      119886
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119887,
      119887
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119888,
      119888
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119889,
      119889
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119890,
      119890
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119891,
      119891
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119892,
      119892
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119893,
      119893
    ],
    "disallowed"
  ],
  [
    [
      119894,
      119894
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119895,
      119895
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119896,
      119896
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119897,
      119897
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119898,
      119898
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119899,
      119899
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119900,
      119900
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119901,
      119901
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119902,
      119902
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119903,
      119903
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119904,
      119904
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119905,
      119905
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119906,
      119906
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119907,
      119907
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119908,
      119908
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119909,
      119909
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119910,
      119910
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119911,
      119911
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119912,
      119912
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119913,
      119913
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119914,
      119914
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119915,
      119915
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119916,
      119916
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119917,
      119917
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119918,
      119918
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119919,
      119919
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119920,
      119920
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119921,
      119921
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119922,
      119922
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119923,
      119923
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119924,
      119924
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119925,
      119925
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119926,
      119926
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119927,
      119927
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119928,
      119928
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119929,
      119929
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119930,
      119930
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119931,
      119931
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119932,
      119932
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119933,
      119933
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119934,
      119934
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119935,
      119935
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119936,
      119936
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119937,
      119937
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119938,
      119938
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119939,
      119939
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119940,
      119940
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119941,
      119941
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119942,
      119942
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119943,
      119943
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119944,
      119944
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119945,
      119945
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119946,
      119946
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119947,
      119947
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119948,
      119948
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119949,
      119949
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119950,
      119950
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119951,
      119951
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119952,
      119952
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119953,
      119953
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119954,
      119954
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119955,
      119955
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119956,
      119956
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119957,
      119957
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119958,
      119958
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119959,
      119959
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119960,
      119960
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119961,
      119961
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119962,
      119962
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119963,
      119963
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119964,
      119964
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119965,
      119965
    ],
    "disallowed"
  ],
  [
    [
      119966,
      119966
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119967,
      119967
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119968,
      119969
    ],
    "disallowed"
  ],
  [
    [
      119970,
      119970
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119971,
      119972
    ],
    "disallowed"
  ],
  [
    [
      119973,
      119973
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119974,
      119974
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119975,
      119976
    ],
    "disallowed"
  ],
  [
    [
      119977,
      119977
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119978,
      119978
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119979,
      119979
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119980,
      119980
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119981,
      119981
    ],
    "disallowed"
  ],
  [
    [
      119982,
      119982
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119983,
      119983
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119984,
      119984
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119985,
      119985
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119986,
      119986
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119987,
      119987
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119988,
      119988
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119989,
      119989
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119990,
      119990
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119991,
      119991
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119992,
      119992
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119993,
      119993
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119994,
      119994
    ],
    "disallowed"
  ],
  [
    [
      119995,
      119995
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119996,
      119996
    ],
    "disallowed"
  ],
  [
    [
      119997,
      119997
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119998,
      119998
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119999,
      119999
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      12e4,
      12e4
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120001,
      120001
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120002,
      120002
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120003,
      120003
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120004,
      120004
    ],
    "disallowed"
  ],
  [
    [
      120005,
      120005
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120006,
      120006
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120007,
      120007
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120008,
      120008
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120009,
      120009
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120010,
      120010
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120011,
      120011
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120012,
      120012
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120013,
      120013
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120014,
      120014
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120015,
      120015
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120016,
      120016
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120017,
      120017
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120018,
      120018
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120019,
      120019
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120020,
      120020
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120021,
      120021
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120022,
      120022
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120023,
      120023
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120024,
      120024
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120025,
      120025
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120026,
      120026
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120027,
      120027
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120028,
      120028
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120029,
      120029
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120030,
      120030
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120031,
      120031
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120032,
      120032
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120033,
      120033
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120034,
      120034
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120035,
      120035
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120036,
      120036
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120037,
      120037
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120038,
      120038
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120039,
      120039
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120040,
      120040
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120041,
      120041
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120042,
      120042
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120043,
      120043
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120044,
      120044
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120045,
      120045
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120046,
      120046
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120047,
      120047
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120048,
      120048
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120049,
      120049
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120050,
      120050
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120051,
      120051
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120052,
      120052
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120053,
      120053
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120054,
      120054
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120055,
      120055
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120056,
      120056
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120057,
      120057
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120058,
      120058
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120059,
      120059
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120060,
      120060
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120061,
      120061
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120062,
      120062
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120063,
      120063
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120064,
      120064
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120065,
      120065
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120066,
      120066
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120067,
      120067
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120068,
      120068
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120069,
      120069
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120070,
      120070
    ],
    "disallowed"
  ],
  [
    [
      120071,
      120071
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120072,
      120072
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120073,
      120073
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120074,
      120074
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120075,
      120076
    ],
    "disallowed"
  ],
  [
    [
      120077,
      120077
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120078,
      120078
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120079,
      120079
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120080,
      120080
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120081,
      120081
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120082,
      120082
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120083,
      120083
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120084,
      120084
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120085,
      120085
    ],
    "disallowed"
  ],
  [
    [
      120086,
      120086
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120087,
      120087
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120088,
      120088
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120089,
      120089
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120090,
      120090
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120091,
      120091
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120092,
      120092
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120093,
      120093
    ],
    "disallowed"
  ],
  [
    [
      120094,
      120094
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120095,
      120095
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120096,
      120096
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120097,
      120097
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120098,
      120098
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120099,
      120099
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120100,
      120100
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120101,
      120101
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120102,
      120102
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120103,
      120103
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120104,
      120104
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120105,
      120105
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120106,
      120106
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120107,
      120107
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120108,
      120108
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120109,
      120109
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120110,
      120110
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120111,
      120111
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120112,
      120112
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120113,
      120113
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120114,
      120114
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120115,
      120115
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120116,
      120116
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120117,
      120117
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120118,
      120118
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120119,
      120119
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120120,
      120120
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120121,
      120121
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120122,
      120122
    ],
    "disallowed"
  ],
  [
    [
      120123,
      120123
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120124,
      120124
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120125,
      120125
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120126,
      120126
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120127,
      120127
    ],
    "disallowed"
  ],
  [
    [
      120128,
      120128
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120129,
      120129
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120130,
      120130
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120131,
      120131
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120132,
      120132
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120133,
      120133
    ],
    "disallowed"
  ],
  [
    [
      120134,
      120134
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120135,
      120137
    ],
    "disallowed"
  ],
  [
    [
      120138,
      120138
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120139,
      120139
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120140,
      120140
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120141,
      120141
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120142,
      120142
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120143,
      120143
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120144,
      120144
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120145,
      120145
    ],
    "disallowed"
  ],
  [
    [
      120146,
      120146
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120147,
      120147
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120148,
      120148
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120149,
      120149
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120150,
      120150
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120151,
      120151
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120152,
      120152
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120153,
      120153
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120154,
      120154
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120155,
      120155
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120156,
      120156
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120157,
      120157
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120158,
      120158
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120159,
      120159
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120160,
      120160
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120161,
      120161
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120162,
      120162
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120163,
      120163
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120164,
      120164
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120165,
      120165
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120166,
      120166
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120167,
      120167
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120168,
      120168
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120169,
      120169
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120170,
      120170
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120171,
      120171
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120172,
      120172
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120173,
      120173
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120174,
      120174
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120175,
      120175
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120176,
      120176
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120177,
      120177
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120178,
      120178
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120179,
      120179
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120180,
      120180
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120181,
      120181
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120182,
      120182
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120183,
      120183
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120184,
      120184
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120185,
      120185
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120186,
      120186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120187,
      120187
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120188,
      120188
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120189,
      120189
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120190,
      120190
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120191,
      120191
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120192,
      120192
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120193,
      120193
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120194,
      120194
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120195,
      120195
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120196,
      120196
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120197,
      120197
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120198,
      120198
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120199,
      120199
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120200,
      120200
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120201,
      120201
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120202,
      120202
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120203,
      120203
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120204,
      120204
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120205,
      120205
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120206,
      120206
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120207,
      120207
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120208,
      120208
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120209,
      120209
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120210,
      120210
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120211,
      120211
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120212,
      120212
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120213,
      120213
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120214,
      120214
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120215,
      120215
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120216,
      120216
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120217,
      120217
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120218,
      120218
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120219,
      120219
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120220,
      120220
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120221,
      120221
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120222,
      120222
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120223,
      120223
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120224,
      120224
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120225,
      120225
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120226,
      120226
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120227,
      120227
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120228,
      120228
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120229,
      120229
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120230,
      120230
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120231,
      120231
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120232,
      120232
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120233,
      120233
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120234,
      120234
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120235,
      120235
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120236,
      120236
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120237,
      120237
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120238,
      120238
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120239,
      120239
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120240,
      120240
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120241,
      120241
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120242,
      120242
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120243,
      120243
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120244,
      120244
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120245,
      120245
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120246,
      120246
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120247,
      120247
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120248,
      120248
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120249,
      120249
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120250,
      120250
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120251,
      120251
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120252,
      120252
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120253,
      120253
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120254,
      120254
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120255,
      120255
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120256,
      120256
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120257,
      120257
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120258,
      120258
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120259,
      120259
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120260,
      120260
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120261,
      120261
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120262,
      120262
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120263,
      120263
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120264,
      120264
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120265,
      120265
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120266,
      120266
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120267,
      120267
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120268,
      120268
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120269,
      120269
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120270,
      120270
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120271,
      120271
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120272,
      120272
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120273,
      120273
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120274,
      120274
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120275,
      120275
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120276,
      120276
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120277,
      120277
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120278,
      120278
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120279,
      120279
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120280,
      120280
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120281,
      120281
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120282,
      120282
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120283,
      120283
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120284,
      120284
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120285,
      120285
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120286,
      120286
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120287,
      120287
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120288,
      120288
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120289,
      120289
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120290,
      120290
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120291,
      120291
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120292,
      120292
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120293,
      120293
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120294,
      120294
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120295,
      120295
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120296,
      120296
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120297,
      120297
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120298,
      120298
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120299,
      120299
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120300,
      120300
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120301,
      120301
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120302,
      120302
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120303,
      120303
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120304,
      120304
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120305,
      120305
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120306,
      120306
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120307,
      120307
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120308,
      120308
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120309,
      120309
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120310,
      120310
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120311,
      120311
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120312,
      120312
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120313,
      120313
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120314,
      120314
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120315,
      120315
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120316,
      120316
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120317,
      120317
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120318,
      120318
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120319,
      120319
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120320,
      120320
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120321,
      120321
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120322,
      120322
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120323,
      120323
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120324,
      120324
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120325,
      120325
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120326,
      120326
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120327,
      120327
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120328,
      120328
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120329,
      120329
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120330,
      120330
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120331,
      120331
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120332,
      120332
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120333,
      120333
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120334,
      120334
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120335,
      120335
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120336,
      120336
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120337,
      120337
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120338,
      120338
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120339,
      120339
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120340,
      120340
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120341,
      120341
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120342,
      120342
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120343,
      120343
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120344,
      120344
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120345,
      120345
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120346,
      120346
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120347,
      120347
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120348,
      120348
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120349,
      120349
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120350,
      120350
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120351,
      120351
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120352,
      120352
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120353,
      120353
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120354,
      120354
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120355,
      120355
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120356,
      120356
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120357,
      120357
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120358,
      120358
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120359,
      120359
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120360,
      120360
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120361,
      120361
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120362,
      120362
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120363,
      120363
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120364,
      120364
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120365,
      120365
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120366,
      120366
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120367,
      120367
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120368,
      120368
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120369,
      120369
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120370,
      120370
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120371,
      120371
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120372,
      120372
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120373,
      120373
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120374,
      120374
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120375,
      120375
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120376,
      120376
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120377,
      120377
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120378,
      120378
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120379,
      120379
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120380,
      120380
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120381,
      120381
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120382,
      120382
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120383,
      120383
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120384,
      120384
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120385,
      120385
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120386,
      120386
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120387,
      120387
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120388,
      120388
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120389,
      120389
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120390,
      120390
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120391,
      120391
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120392,
      120392
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120393,
      120393
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120394,
      120394
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120395,
      120395
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120396,
      120396
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120397,
      120397
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120398,
      120398
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120399,
      120399
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120400,
      120400
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120401,
      120401
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120402,
      120402
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120403,
      120403
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120404,
      120404
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120405,
      120405
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120406,
      120406
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120407,
      120407
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120408,
      120408
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120409,
      120409
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120410,
      120410
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120411,
      120411
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120412,
      120412
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120413,
      120413
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120414,
      120414
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120415,
      120415
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120416,
      120416
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120417,
      120417
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120418,
      120418
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120419,
      120419
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120420,
      120420
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120421,
      120421
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120422,
      120422
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120423,
      120423
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120424,
      120424
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120425,
      120425
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120426,
      120426
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120427,
      120427
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120428,
      120428
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120429,
      120429
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120430,
      120430
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120431,
      120431
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120432,
      120432
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120433,
      120433
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120434,
      120434
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120435,
      120435
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120436,
      120436
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120437,
      120437
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120438,
      120438
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120439,
      120439
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120440,
      120440
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120441,
      120441
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120442,
      120442
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120443,
      120443
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120444,
      120444
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120445,
      120445
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120446,
      120446
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120447,
      120447
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120448,
      120448
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120449,
      120449
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120450,
      120450
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120451,
      120451
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120452,
      120452
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120453,
      120453
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120454,
      120454
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120455,
      120455
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120456,
      120456
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120457,
      120457
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120458,
      120458
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120459,
      120459
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120460,
      120460
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120461,
      120461
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120462,
      120462
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120463,
      120463
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120464,
      120464
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120465,
      120465
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120466,
      120466
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120467,
      120467
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120468,
      120468
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120469,
      120469
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120470,
      120470
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120471,
      120471
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120472,
      120472
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120473,
      120473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120474,
      120474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120475,
      120475
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120476,
      120476
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120477,
      120477
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120478,
      120478
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120479,
      120479
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120480,
      120480
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120481,
      120481
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120482,
      120482
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120483,
      120483
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120484,
      120484
    ],
    "mapped",
    [
      305
    ]
  ],
  [
    [
      120485,
      120485
    ],
    "mapped",
    [
      567
    ]
  ],
  [
    [
      120486,
      120487
    ],
    "disallowed"
  ],
  [
    [
      120488,
      120488
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120489,
      120489
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120490,
      120490
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120491,
      120491
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120492,
      120492
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120493,
      120493
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120494,
      120494
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120495,
      120495
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120496,
      120496
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120497,
      120497
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120498,
      120498
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120499,
      120499
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120500,
      120500
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120501,
      120501
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120502,
      120502
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120503,
      120503
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120504,
      120504
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120505,
      120505
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120506,
      120506
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120507,
      120507
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120508,
      120508
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120509,
      120509
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120510,
      120510
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120511,
      120511
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120512,
      120512
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120513,
      120513
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120514,
      120514
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120515,
      120515
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120516,
      120516
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120517,
      120517
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120518,
      120518
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120519,
      120519
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120520,
      120520
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120521,
      120521
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120522,
      120522
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120523,
      120523
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120524,
      120524
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120525,
      120525
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120526,
      120526
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120527,
      120527
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120528,
      120528
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120529,
      120529
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120530,
      120530
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120531,
      120532
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120533,
      120533
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120534,
      120534
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120535,
      120535
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120536,
      120536
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120537,
      120537
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120538,
      120538
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120539,
      120539
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120540,
      120540
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120541,
      120541
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120542,
      120542
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120543,
      120543
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120544,
      120544
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120545,
      120545
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120546,
      120546
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120547,
      120547
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120548,
      120548
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120549,
      120549
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120550,
      120550
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120551,
      120551
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120552,
      120552
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120553,
      120553
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120554,
      120554
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120555,
      120555
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120556,
      120556
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120557,
      120557
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120558,
      120558
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120559,
      120559
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120560,
      120560
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120561,
      120561
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120562,
      120562
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120563,
      120563
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120564,
      120564
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120565,
      120565
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120566,
      120566
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120567,
      120567
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120568,
      120568
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120569,
      120569
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120570,
      120570
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120571,
      120571
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120572,
      120572
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120573,
      120573
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120574,
      120574
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120575,
      120575
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120576,
      120576
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120577,
      120577
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120578,
      120578
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120579,
      120579
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120580,
      120580
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120581,
      120581
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120582,
      120582
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120583,
      120583
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120584,
      120584
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120585,
      120585
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120586,
      120586
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120587,
      120587
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120588,
      120588
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120589,
      120590
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120591,
      120591
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120592,
      120592
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120593,
      120593
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120594,
      120594
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120595,
      120595
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120596,
      120596
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120597,
      120597
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120598,
      120598
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120599,
      120599
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120600,
      120600
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120601,
      120601
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120602,
      120602
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120603,
      120603
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120604,
      120604
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120605,
      120605
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120606,
      120606
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120607,
      120607
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120608,
      120608
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120609,
      120609
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120610,
      120610
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120611,
      120611
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120612,
      120612
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120613,
      120613
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120614,
      120614
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120615,
      120615
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120616,
      120616
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120617,
      120617
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120618,
      120618
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120619,
      120619
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120620,
      120620
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120621,
      120621
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120622,
      120622
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120623,
      120623
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120624,
      120624
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120625,
      120625
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120626,
      120626
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120627,
      120627
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120628,
      120628
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120629,
      120629
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120630,
      120630
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120631,
      120631
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120632,
      120632
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120633,
      120633
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120634,
      120634
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120635,
      120635
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120636,
      120636
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120637,
      120637
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120638,
      120638
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120639,
      120639
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120640,
      120640
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120641,
      120641
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120642,
      120642
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120643,
      120643
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120644,
      120644
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120645,
      120645
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120646,
      120646
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120647,
      120648
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120649,
      120649
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120650,
      120650
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120651,
      120651
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120652,
      120652
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120653,
      120653
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120654,
      120654
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120655,
      120655
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120656,
      120656
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120657,
      120657
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120658,
      120658
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120659,
      120659
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120660,
      120660
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120661,
      120661
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120662,
      120662
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120663,
      120663
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120664,
      120664
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120665,
      120665
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120666,
      120666
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120667,
      120667
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120668,
      120668
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120669,
      120669
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120670,
      120670
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120671,
      120671
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120672,
      120672
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120673,
      120673
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120674,
      120674
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120675,
      120675
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120676,
      120676
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120677,
      120677
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120678,
      120678
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120679,
      120679
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120680,
      120680
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120681,
      120681
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120682,
      120682
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120683,
      120683
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120684,
      120684
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120685,
      120685
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120686,
      120686
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120687,
      120687
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120688,
      120688
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120689,
      120689
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120690,
      120690
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120691,
      120691
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120692,
      120692
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120693,
      120693
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120694,
      120694
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120695,
      120695
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120696,
      120696
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120697,
      120697
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120698,
      120698
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120699,
      120699
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120700,
      120700
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120701,
      120701
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120702,
      120702
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120703,
      120703
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120704,
      120704
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120705,
      120706
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120707,
      120707
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120708,
      120708
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120709,
      120709
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120710,
      120710
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120711,
      120711
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120712,
      120712
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120713,
      120713
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120714,
      120714
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120715,
      120715
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120716,
      120716
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120717,
      120717
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120718,
      120718
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120719,
      120719
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120720,
      120720
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120721,
      120721
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120722,
      120722
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120723,
      120723
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120724,
      120724
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120725,
      120725
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120726,
      120726
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120727,
      120727
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120728,
      120728
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120729,
      120729
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120730,
      120730
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120731,
      120731
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120732,
      120732
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120733,
      120733
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120734,
      120734
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120735,
      120735
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120736,
      120736
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120737,
      120737
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120738,
      120738
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120739,
      120739
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120740,
      120740
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120741,
      120741
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120742,
      120742
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120743,
      120743
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120744,
      120744
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120745,
      120745
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120746,
      120746
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120747,
      120747
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120748,
      120748
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120749,
      120749
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120750,
      120750
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120751,
      120751
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120752,
      120752
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120753,
      120753
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120754,
      120754
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120755,
      120755
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120756,
      120756
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120757,
      120757
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120758,
      120758
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120759,
      120759
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120760,
      120760
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120761,
      120761
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120762,
      120762
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120763,
      120764
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120765,
      120765
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120766,
      120766
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120767,
      120767
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120768,
      120768
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120769,
      120769
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120770,
      120770
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120771,
      120771
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120772,
      120772
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120773,
      120773
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120774,
      120774
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120775,
      120775
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120776,
      120776
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120777,
      120777
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120778,
      120779
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      120780,
      120781
    ],
    "disallowed"
  ],
  [
    [
      120782,
      120782
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120783,
      120783
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120784,
      120784
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120785,
      120785
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120786,
      120786
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120787,
      120787
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120788,
      120788
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120789,
      120789
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120790,
      120790
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120791,
      120791
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120792,
      120792
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120793,
      120793
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120794,
      120794
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120795,
      120795
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120796,
      120796
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120797,
      120797
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120798,
      120798
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120799,
      120799
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120800,
      120800
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120801,
      120801
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120802,
      120802
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120803,
      120803
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120804,
      120804
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120805,
      120805
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120806,
      120806
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120807,
      120807
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120808,
      120808
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120809,
      120809
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120810,
      120810
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120811,
      120811
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120812,
      120812
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120813,
      120813
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120814,
      120814
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120815,
      120815
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120816,
      120816
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120817,
      120817
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120818,
      120818
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120819,
      120819
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120820,
      120820
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120821,
      120821
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120822,
      120822
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120823,
      120823
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120824,
      120824
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120825,
      120825
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120826,
      120826
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120827,
      120827
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120828,
      120828
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120829,
      120829
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120830,
      120830
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120831,
      120831
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120832,
      121343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121344,
      121398
    ],
    "valid"
  ],
  [
    [
      121399,
      121402
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121403,
      121452
    ],
    "valid"
  ],
  [
    [
      121453,
      121460
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121461,
      121461
    ],
    "valid"
  ],
  [
    [
      121462,
      121475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121476,
      121476
    ],
    "valid"
  ],
  [
    [
      121477,
      121483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121484,
      121498
    ],
    "disallowed"
  ],
  [
    [
      121499,
      121503
    ],
    "valid"
  ],
  [
    [
      121504,
      121504
    ],
    "disallowed"
  ],
  [
    [
      121505,
      121519
    ],
    "valid"
  ],
  [
    [
      121520,
      124927
    ],
    "disallowed"
  ],
  [
    [
      124928,
      125124
    ],
    "valid"
  ],
  [
    [
      125125,
      125126
    ],
    "disallowed"
  ],
  [
    [
      125127,
      125135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      125136,
      125142
    ],
    "valid"
  ],
  [
    [
      125143,
      126463
    ],
    "disallowed"
  ],
  [
    [
      126464,
      126464
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126465,
      126465
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126466,
      126466
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126467,
      126467
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126468,
      126468
    ],
    "disallowed"
  ],
  [
    [
      126469,
      126469
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126470,
      126470
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126471,
      126471
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126472,
      126472
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126473,
      126473
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126474,
      126474
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126475,
      126475
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126476,
      126476
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126477,
      126477
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126478,
      126478
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126479,
      126479
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126480,
      126480
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126481,
      126481
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126482,
      126482
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126483,
      126483
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126484,
      126484
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126485,
      126485
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126486,
      126486
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126487,
      126487
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126488,
      126488
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126489,
      126489
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126490,
      126490
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126491,
      126491
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126492,
      126492
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126493,
      126493
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126494,
      126494
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126495,
      126495
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126496,
      126496
    ],
    "disallowed"
  ],
  [
    [
      126497,
      126497
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126498,
      126498
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126499,
      126499
    ],
    "disallowed"
  ],
  [
    [
      126500,
      126500
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126501,
      126502
    ],
    "disallowed"
  ],
  [
    [
      126503,
      126503
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126504,
      126504
    ],
    "disallowed"
  ],
  [
    [
      126505,
      126505
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126506,
      126506
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126507,
      126507
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126508,
      126508
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126509,
      126509
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126510,
      126510
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126511,
      126511
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126512,
      126512
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126513,
      126513
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126514,
      126514
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126515,
      126515
    ],
    "disallowed"
  ],
  [
    [
      126516,
      126516
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126517,
      126517
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126518,
      126518
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126519,
      126519
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126520,
      126520
    ],
    "disallowed"
  ],
  [
    [
      126521,
      126521
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126522,
      126522
    ],
    "disallowed"
  ],
  [
    [
      126523,
      126523
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126524,
      126529
    ],
    "disallowed"
  ],
  [
    [
      126530,
      126530
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126531,
      126534
    ],
    "disallowed"
  ],
  [
    [
      126535,
      126535
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126536,
      126536
    ],
    "disallowed"
  ],
  [
    [
      126537,
      126537
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126538,
      126538
    ],
    "disallowed"
  ],
  [
    [
      126539,
      126539
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126540,
      126540
    ],
    "disallowed"
  ],
  [
    [
      126541,
      126541
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126542,
      126542
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126543,
      126543
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126544,
      126544
    ],
    "disallowed"
  ],
  [
    [
      126545,
      126545
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126546,
      126546
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126547,
      126547
    ],
    "disallowed"
  ],
  [
    [
      126548,
      126548
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126549,
      126550
    ],
    "disallowed"
  ],
  [
    [
      126551,
      126551
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126552,
      126552
    ],
    "disallowed"
  ],
  [
    [
      126553,
      126553
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126554,
      126554
    ],
    "disallowed"
  ],
  [
    [
      126555,
      126555
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126556,
      126556
    ],
    "disallowed"
  ],
  [
    [
      126557,
      126557
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126558,
      126558
    ],
    "disallowed"
  ],
  [
    [
      126559,
      126559
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126560,
      126560
    ],
    "disallowed"
  ],
  [
    [
      126561,
      126561
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126562,
      126562
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126563,
      126563
    ],
    "disallowed"
  ],
  [
    [
      126564,
      126564
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126565,
      126566
    ],
    "disallowed"
  ],
  [
    [
      126567,
      126567
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126568,
      126568
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126569,
      126569
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126570,
      126570
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126571,
      126571
    ],
    "disallowed"
  ],
  [
    [
      126572,
      126572
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126573,
      126573
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126574,
      126574
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126575,
      126575
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126576,
      126576
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126577,
      126577
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126578,
      126578
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126579,
      126579
    ],
    "disallowed"
  ],
  [
    [
      126580,
      126580
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126581,
      126581
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126582,
      126582
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126583,
      126583
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126584,
      126584
    ],
    "disallowed"
  ],
  [
    [
      126585,
      126585
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126586,
      126586
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126587,
      126587
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126588,
      126588
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126589,
      126589
    ],
    "disallowed"
  ],
  [
    [
      126590,
      126590
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126591,
      126591
    ],
    "disallowed"
  ],
  [
    [
      126592,
      126592
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126593,
      126593
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126594,
      126594
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126595,
      126595
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126596,
      126596
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126597,
      126597
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126598,
      126598
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126599,
      126599
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126600,
      126600
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126601,
      126601
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126602,
      126602
    ],
    "disallowed"
  ],
  [
    [
      126603,
      126603
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126604,
      126604
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126605,
      126605
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126606,
      126606
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126607,
      126607
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126608,
      126608
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126609,
      126609
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126610,
      126610
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126611,
      126611
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126612,
      126612
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126613,
      126613
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126614,
      126614
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126615,
      126615
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126616,
      126616
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126617,
      126617
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126618,
      126618
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126619,
      126619
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126620,
      126624
    ],
    "disallowed"
  ],
  [
    [
      126625,
      126625
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126626,
      126626
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126627,
      126627
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126628,
      126628
    ],
    "disallowed"
  ],
  [
    [
      126629,
      126629
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126630,
      126630
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126631,
      126631
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126632,
      126632
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126633,
      126633
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126634,
      126634
    ],
    "disallowed"
  ],
  [
    [
      126635,
      126635
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126636,
      126636
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126637,
      126637
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126638,
      126638
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126639,
      126639
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126640,
      126640
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126641,
      126641
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126642,
      126642
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126643,
      126643
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126644,
      126644
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126645,
      126645
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126646,
      126646
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126647,
      126647
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126648,
      126648
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126649,
      126649
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126650,
      126650
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126651,
      126651
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126652,
      126703
    ],
    "disallowed"
  ],
  [
    [
      126704,
      126705
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      126706,
      126975
    ],
    "disallowed"
  ],
  [
    [
      126976,
      127019
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127020,
      127023
    ],
    "disallowed"
  ],
  [
    [
      127024,
      127123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127124,
      127135
    ],
    "disallowed"
  ],
  [
    [
      127136,
      127150
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127151,
      127152
    ],
    "disallowed"
  ],
  [
    [
      127153,
      127166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127167,
      127167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127168,
      127168
    ],
    "disallowed"
  ],
  [
    [
      127169,
      127183
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127184,
      127184
    ],
    "disallowed"
  ],
  [
    [
      127185,
      127199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127200,
      127221
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127222,
      127231
    ],
    "disallowed"
  ],
  [
    [
      127232,
      127232
    ],
    "disallowed"
  ],
  [
    [
      127233,
      127233
    ],
    "disallowed_STD3_mapped",
    [
      48,
      44
    ]
  ],
  [
    [
      127234,
      127234
    ],
    "disallowed_STD3_mapped",
    [
      49,
      44
    ]
  ],
  [
    [
      127235,
      127235
    ],
    "disallowed_STD3_mapped",
    [
      50,
      44
    ]
  ],
  [
    [
      127236,
      127236
    ],
    "disallowed_STD3_mapped",
    [
      51,
      44
    ]
  ],
  [
    [
      127237,
      127237
    ],
    "disallowed_STD3_mapped",
    [
      52,
      44
    ]
  ],
  [
    [
      127238,
      127238
    ],
    "disallowed_STD3_mapped",
    [
      53,
      44
    ]
  ],
  [
    [
      127239,
      127239
    ],
    "disallowed_STD3_mapped",
    [
      54,
      44
    ]
  ],
  [
    [
      127240,
      127240
    ],
    "disallowed_STD3_mapped",
    [
      55,
      44
    ]
  ],
  [
    [
      127241,
      127241
    ],
    "disallowed_STD3_mapped",
    [
      56,
      44
    ]
  ],
  [
    [
      127242,
      127242
    ],
    "disallowed_STD3_mapped",
    [
      57,
      44
    ]
  ],
  [
    [
      127243,
      127244
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127245,
      127247
    ],
    "disallowed"
  ],
  [
    [
      127248,
      127248
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      127249,
      127249
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      127250,
      127250
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      127251,
      127251
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      127252,
      127252
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      127253,
      127253
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      127254,
      127254
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      127255,
      127255
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      127256,
      127256
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      127257,
      127257
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      127258,
      127258
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      127259,
      127259
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      127260,
      127260
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      127261,
      127261
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      127262,
      127262
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      127263,
      127263
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      127264,
      127264
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      127265,
      127265
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      127266,
      127266
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      127267,
      127267
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      127268,
      127268
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      127269,
      127269
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      127270,
      127270
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      127271,
      127271
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      127272,
      127272
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      127273,
      127273
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      127274,
      127274
    ],
    "mapped",
    [
      12308,
      115,
      12309
    ]
  ],
  [
    [
      127275,
      127275
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127276,
      127276
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127277,
      127277
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      127278,
      127278
    ],
    "mapped",
    [
      119,
      122
    ]
  ],
  [
    [
      127279,
      127279
    ],
    "disallowed"
  ],
  [
    [
      127280,
      127280
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      127281,
      127281
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      127282,
      127282
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127283,
      127283
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      127284,
      127284
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      127285,
      127285
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      127286,
      127286
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      127287,
      127287
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      127288,
      127288
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      127289,
      127289
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      127290,
      127290
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      127291,
      127291
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      127292,
      127292
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      127293,
      127293
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      127294,
      127294
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      127295,
      127295
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      127296,
      127296
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      127297,
      127297
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127298,
      127298
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      127299,
      127299
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      127300,
      127300
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      127301,
      127301
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      127302,
      127302
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      127303,
      127303
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      127304,
      127304
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      127305,
      127305
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      127306,
      127306
    ],
    "mapped",
    [
      104,
      118
    ]
  ],
  [
    [
      127307,
      127307
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      127308,
      127308
    ],
    "mapped",
    [
      115,
      100
    ]
  ],
  [
    [
      127309,
      127309
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      127310,
      127310
    ],
    "mapped",
    [
      112,
      112,
      118
    ]
  ],
  [
    [
      127311,
      127311
    ],
    "mapped",
    [
      119,
      99
    ]
  ],
  [
    [
      127312,
      127318
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127319,
      127319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127320,
      127326
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127327,
      127327
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127328,
      127337
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127338,
      127338
    ],
    "mapped",
    [
      109,
      99
    ]
  ],
  [
    [
      127339,
      127339
    ],
    "mapped",
    [
      109,
      100
    ]
  ],
  [
    [
      127340,
      127343
    ],
    "disallowed"
  ],
  [
    [
      127344,
      127352
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127353,
      127353
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127354,
      127354
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127355,
      127356
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127357,
      127358
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127359,
      127359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127360,
      127369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127370,
      127373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127374,
      127375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127376,
      127376
    ],
    "mapped",
    [
      100,
      106
    ]
  ],
  [
    [
      127377,
      127386
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127387,
      127461
    ],
    "disallowed"
  ],
  [
    [
      127462,
      127487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127488,
      127488
    ],
    "mapped",
    [
      12411,
      12363
    ]
  ],
  [
    [
      127489,
      127489
    ],
    "mapped",
    [
      12467,
      12467
    ]
  ],
  [
    [
      127490,
      127490
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      127491,
      127503
    ],
    "disallowed"
  ],
  [
    [
      127504,
      127504
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      127505,
      127505
    ],
    "mapped",
    [
      23383
    ]
  ],
  [
    [
      127506,
      127506
    ],
    "mapped",
    [
      21452
    ]
  ],
  [
    [
      127507,
      127507
    ],
    "mapped",
    [
      12487
    ]
  ],
  [
    [
      127508,
      127508
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      127509,
      127509
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      127510,
      127510
    ],
    "mapped",
    [
      35299
    ]
  ],
  [
    [
      127511,
      127511
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      127512,
      127512
    ],
    "mapped",
    [
      20132
    ]
  ],
  [
    [
      127513,
      127513
    ],
    "mapped",
    [
      26144
    ]
  ],
  [
    [
      127514,
      127514
    ],
    "mapped",
    [
      28961
    ]
  ],
  [
    [
      127515,
      127515
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      127516,
      127516
    ],
    "mapped",
    [
      21069
    ]
  ],
  [
    [
      127517,
      127517
    ],
    "mapped",
    [
      24460
    ]
  ],
  [
    [
      127518,
      127518
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      127519,
      127519
    ],
    "mapped",
    [
      26032
    ]
  ],
  [
    [
      127520,
      127520
    ],
    "mapped",
    [
      21021
    ]
  ],
  [
    [
      127521,
      127521
    ],
    "mapped",
    [
      32066
    ]
  ],
  [
    [
      127522,
      127522
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      127523,
      127523
    ],
    "mapped",
    [
      36009
    ]
  ],
  [
    [
      127524,
      127524
    ],
    "mapped",
    [
      22768
    ]
  ],
  [
    [
      127525,
      127525
    ],
    "mapped",
    [
      21561
    ]
  ],
  [
    [
      127526,
      127526
    ],
    "mapped",
    [
      28436
    ]
  ],
  [
    [
      127527,
      127527
    ],
    "mapped",
    [
      25237
    ]
  ],
  [
    [
      127528,
      127528
    ],
    "mapped",
    [
      25429
    ]
  ],
  [
    [
      127529,
      127529
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      127530,
      127530
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      127531,
      127531
    ],
    "mapped",
    [
      36938
    ]
  ],
  [
    [
      127532,
      127532
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      127533,
      127533
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      127534,
      127534
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      127535,
      127535
    ],
    "mapped",
    [
      25351
    ]
  ],
  [
    [
      127536,
      127536
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      127537,
      127537
    ],
    "mapped",
    [
      25171
    ]
  ],
  [
    [
      127538,
      127538
    ],
    "mapped",
    [
      31105
    ]
  ],
  [
    [
      127539,
      127539
    ],
    "mapped",
    [
      31354
    ]
  ],
  [
    [
      127540,
      127540
    ],
    "mapped",
    [
      21512
    ]
  ],
  [
    [
      127541,
      127541
    ],
    "mapped",
    [
      28288
    ]
  ],
  [
    [
      127542,
      127542
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      127543,
      127543
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      127544,
      127544
    ],
    "mapped",
    [
      30003
    ]
  ],
  [
    [
      127545,
      127545
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      127546,
      127546
    ],
    "mapped",
    [
      21942
    ]
  ],
  [
    [
      127547,
      127551
    ],
    "disallowed"
  ],
  [
    [
      127552,
      127552
    ],
    "mapped",
    [
      12308,
      26412,
      12309
    ]
  ],
  [
    [
      127553,
      127553
    ],
    "mapped",
    [
      12308,
      19977,
      12309
    ]
  ],
  [
    [
      127554,
      127554
    ],
    "mapped",
    [
      12308,
      20108,
      12309
    ]
  ],
  [
    [
      127555,
      127555
    ],
    "mapped",
    [
      12308,
      23433,
      12309
    ]
  ],
  [
    [
      127556,
      127556
    ],
    "mapped",
    [
      12308,
      28857,
      12309
    ]
  ],
  [
    [
      127557,
      127557
    ],
    "mapped",
    [
      12308,
      25171,
      12309
    ]
  ],
  [
    [
      127558,
      127558
    ],
    "mapped",
    [
      12308,
      30423,
      12309
    ]
  ],
  [
    [
      127559,
      127559
    ],
    "mapped",
    [
      12308,
      21213,
      12309
    ]
  ],
  [
    [
      127560,
      127560
    ],
    "mapped",
    [
      12308,
      25943,
      12309
    ]
  ],
  [
    [
      127561,
      127567
    ],
    "disallowed"
  ],
  [
    [
      127568,
      127568
    ],
    "mapped",
    [
      24471
    ]
  ],
  [
    [
      127569,
      127569
    ],
    "mapped",
    [
      21487
    ]
  ],
  [
    [
      127570,
      127743
    ],
    "disallowed"
  ],
  [
    [
      127744,
      127776
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127777,
      127788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127789,
      127791
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127792,
      127797
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127798,
      127798
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127799,
      127868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127869,
      127869
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127870,
      127871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127872,
      127891
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127892,
      127903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127904,
      127940
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127941,
      127941
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127942,
      127946
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127947,
      127950
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127951,
      127955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127956,
      127967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127968,
      127984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127985,
      127991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127992,
      127999
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128e3,
      128062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128063,
      128063
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128064,
      128064
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128065,
      128065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128066,
      128247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128248,
      128248
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128249,
      128252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128253,
      128254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128255,
      128255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128256,
      128317
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128318,
      128319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128320,
      128323
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128324,
      128330
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128331,
      128335
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128336,
      128359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128360,
      128377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128378,
      128378
    ],
    "disallowed"
  ],
  [
    [
      128379,
      128419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128420,
      128420
    ],
    "disallowed"
  ],
  [
    [
      128421,
      128506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128507,
      128511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128512,
      128512
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128513,
      128528
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128529,
      128529
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128530,
      128532
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128533,
      128533
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128534,
      128534
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128535,
      128535
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128536,
      128536
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128537,
      128537
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128538,
      128538
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128539,
      128539
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128540,
      128542
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128543,
      128543
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128544,
      128549
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128550,
      128551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128552,
      128555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128556,
      128556
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128557,
      128557
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128558,
      128559
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128560,
      128563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128564,
      128564
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128565,
      128576
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128577,
      128578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128579,
      128580
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128581,
      128591
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128592,
      128639
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128640,
      128709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128710,
      128719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128720,
      128720
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128721,
      128735
    ],
    "disallowed"
  ],
  [
    [
      128736,
      128748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128749,
      128751
    ],
    "disallowed"
  ],
  [
    [
      128752,
      128755
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128756,
      128767
    ],
    "disallowed"
  ],
  [
    [
      128768,
      128883
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128884,
      128895
    ],
    "disallowed"
  ],
  [
    [
      128896,
      128980
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128981,
      129023
    ],
    "disallowed"
  ],
  [
    [
      129024,
      129035
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129036,
      129039
    ],
    "disallowed"
  ],
  [
    [
      129040,
      129095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129096,
      129103
    ],
    "disallowed"
  ],
  [
    [
      129104,
      129113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129114,
      129119
    ],
    "disallowed"
  ],
  [
    [
      129120,
      129159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129160,
      129167
    ],
    "disallowed"
  ],
  [
    [
      129168,
      129197
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129198,
      129295
    ],
    "disallowed"
  ],
  [
    [
      129296,
      129304
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129305,
      129407
    ],
    "disallowed"
  ],
  [
    [
      129408,
      129412
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129413,
      129471
    ],
    "disallowed"
  ],
  [
    [
      129472,
      129472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129473,
      131069
    ],
    "disallowed"
  ],
  [
    [
      131070,
      131071
    ],
    "disallowed"
  ],
  [
    [
      131072,
      173782
    ],
    "valid"
  ],
  [
    [
      173783,
      173823
    ],
    "disallowed"
  ],
  [
    [
      173824,
      177972
    ],
    "valid"
  ],
  [
    [
      177973,
      177983
    ],
    "disallowed"
  ],
  [
    [
      177984,
      178205
    ],
    "valid"
  ],
  [
    [
      178206,
      178207
    ],
    "disallowed"
  ],
  [
    [
      178208,
      183969
    ],
    "valid"
  ],
  [
    [
      183970,
      194559
    ],
    "disallowed"
  ],
  [
    [
      194560,
      194560
    ],
    "mapped",
    [
      20029
    ]
  ],
  [
    [
      194561,
      194561
    ],
    "mapped",
    [
      20024
    ]
  ],
  [
    [
      194562,
      194562
    ],
    "mapped",
    [
      20033
    ]
  ],
  [
    [
      194563,
      194563
    ],
    "mapped",
    [
      131362
    ]
  ],
  [
    [
      194564,
      194564
    ],
    "mapped",
    [
      20320
    ]
  ],
  [
    [
      194565,
      194565
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      194566,
      194566
    ],
    "mapped",
    [
      20411
    ]
  ],
  [
    [
      194567,
      194567
    ],
    "mapped",
    [
      20482
    ]
  ],
  [
    [
      194568,
      194568
    ],
    "mapped",
    [
      20602
    ]
  ],
  [
    [
      194569,
      194569
    ],
    "mapped",
    [
      20633
    ]
  ],
  [
    [
      194570,
      194570
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      194571,
      194571
    ],
    "mapped",
    [
      20687
    ]
  ],
  [
    [
      194572,
      194572
    ],
    "mapped",
    [
      13470
    ]
  ],
  [
    [
      194573,
      194573
    ],
    "mapped",
    [
      132666
    ]
  ],
  [
    [
      194574,
      194574
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      194575,
      194575
    ],
    "mapped",
    [
      20820
    ]
  ],
  [
    [
      194576,
      194576
    ],
    "mapped",
    [
      20836
    ]
  ],
  [
    [
      194577,
      194577
    ],
    "mapped",
    [
      20855
    ]
  ],
  [
    [
      194578,
      194578
    ],
    "mapped",
    [
      132380
    ]
  ],
  [
    [
      194579,
      194579
    ],
    "mapped",
    [
      13497
    ]
  ],
  [
    [
      194580,
      194580
    ],
    "mapped",
    [
      20839
    ]
  ],
  [
    [
      194581,
      194581
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      194582,
      194582
    ],
    "mapped",
    [
      132427
    ]
  ],
  [
    [
      194583,
      194583
    ],
    "mapped",
    [
      20887
    ]
  ],
  [
    [
      194584,
      194584
    ],
    "mapped",
    [
      20900
    ]
  ],
  [
    [
      194585,
      194585
    ],
    "mapped",
    [
      20172
    ]
  ],
  [
    [
      194586,
      194586
    ],
    "mapped",
    [
      20908
    ]
  ],
  [
    [
      194587,
      194587
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      194588,
      194588
    ],
    "mapped",
    [
      168415
    ]
  ],
  [
    [
      194589,
      194589
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      194590,
      194590
    ],
    "mapped",
    [
      20995
    ]
  ],
  [
    [
      194591,
      194591
    ],
    "mapped",
    [
      13535
    ]
  ],
  [
    [
      194592,
      194592
    ],
    "mapped",
    [
      21051
    ]
  ],
  [
    [
      194593,
      194593
    ],
    "mapped",
    [
      21062
    ]
  ],
  [
    [
      194594,
      194594
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      194595,
      194595
    ],
    "mapped",
    [
      21111
    ]
  ],
  [
    [
      194596,
      194596
    ],
    "mapped",
    [
      13589
    ]
  ],
  [
    [
      194597,
      194597
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      194598,
      194598
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      194599,
      194599
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      194600,
      194600
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      194601,
      194601
    ],
    "mapped",
    [
      21253
    ]
  ],
  [
    [
      194602,
      194602
    ],
    "mapped",
    [
      21254
    ]
  ],
  [
    [
      194603,
      194603
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      194604,
      194604
    ],
    "mapped",
    [
      21321
    ]
  ],
  [
    [
      194605,
      194605
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      194606,
      194606
    ],
    "mapped",
    [
      21338
    ]
  ],
  [
    [
      194607,
      194607
    ],
    "mapped",
    [
      21363
    ]
  ],
  [
    [
      194608,
      194608
    ],
    "mapped",
    [
      21373
    ]
  ],
  [
    [
      194609,
      194611
    ],
    "mapped",
    [
      21375
    ]
  ],
  [
    [
      194612,
      194612
    ],
    "mapped",
    [
      133676
    ]
  ],
  [
    [
      194613,
      194613
    ],
    "mapped",
    [
      28784
    ]
  ],
  [
    [
      194614,
      194614
    ],
    "mapped",
    [
      21450
    ]
  ],
  [
    [
      194615,
      194615
    ],
    "mapped",
    [
      21471
    ]
  ],
  [
    [
      194616,
      194616
    ],
    "mapped",
    [
      133987
    ]
  ],
  [
    [
      194617,
      194617
    ],
    "mapped",
    [
      21483
    ]
  ],
  [
    [
      194618,
      194618
    ],
    "mapped",
    [
      21489
    ]
  ],
  [
    [
      194619,
      194619
    ],
    "mapped",
    [
      21510
    ]
  ],
  [
    [
      194620,
      194620
    ],
    "mapped",
    [
      21662
    ]
  ],
  [
    [
      194621,
      194621
    ],
    "mapped",
    [
      21560
    ]
  ],
  [
    [
      194622,
      194622
    ],
    "mapped",
    [
      21576
    ]
  ],
  [
    [
      194623,
      194623
    ],
    "mapped",
    [
      21608
    ]
  ],
  [
    [
      194624,
      194624
    ],
    "mapped",
    [
      21666
    ]
  ],
  [
    [
      194625,
      194625
    ],
    "mapped",
    [
      21750
    ]
  ],
  [
    [
      194626,
      194626
    ],
    "mapped",
    [
      21776
    ]
  ],
  [
    [
      194627,
      194627
    ],
    "mapped",
    [
      21843
    ]
  ],
  [
    [
      194628,
      194628
    ],
    "mapped",
    [
      21859
    ]
  ],
  [
    [
      194629,
      194630
    ],
    "mapped",
    [
      21892
    ]
  ],
  [
    [
      194631,
      194631
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      194632,
      194632
    ],
    "mapped",
    [
      21931
    ]
  ],
  [
    [
      194633,
      194633
    ],
    "mapped",
    [
      21939
    ]
  ],
  [
    [
      194634,
      194634
    ],
    "mapped",
    [
      21954
    ]
  ],
  [
    [
      194635,
      194635
    ],
    "mapped",
    [
      22294
    ]
  ],
  [
    [
      194636,
      194636
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      194637,
      194637
    ],
    "mapped",
    [
      22295
    ]
  ],
  [
    [
      194638,
      194638
    ],
    "mapped",
    [
      22097
    ]
  ],
  [
    [
      194639,
      194639
    ],
    "mapped",
    [
      22132
    ]
  ],
  [
    [
      194640,
      194640
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      194641,
      194641
    ],
    "mapped",
    [
      22766
    ]
  ],
  [
    [
      194642,
      194642
    ],
    "mapped",
    [
      22478
    ]
  ],
  [
    [
      194643,
      194643
    ],
    "mapped",
    [
      22516
    ]
  ],
  [
    [
      194644,
      194644
    ],
    "mapped",
    [
      22541
    ]
  ],
  [
    [
      194645,
      194645
    ],
    "mapped",
    [
      22411
    ]
  ],
  [
    [
      194646,
      194646
    ],
    "mapped",
    [
      22578
    ]
  ],
  [
    [
      194647,
      194647
    ],
    "mapped",
    [
      22577
    ]
  ],
  [
    [
      194648,
      194648
    ],
    "mapped",
    [
      22700
    ]
  ],
  [
    [
      194649,
      194649
    ],
    "mapped",
    [
      136420
    ]
  ],
  [
    [
      194650,
      194650
    ],
    "mapped",
    [
      22770
    ]
  ],
  [
    [
      194651,
      194651
    ],
    "mapped",
    [
      22775
    ]
  ],
  [
    [
      194652,
      194652
    ],
    "mapped",
    [
      22790
    ]
  ],
  [
    [
      194653,
      194653
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      194654,
      194654
    ],
    "mapped",
    [
      22818
    ]
  ],
  [
    [
      194655,
      194655
    ],
    "mapped",
    [
      22882
    ]
  ],
  [
    [
      194656,
      194656
    ],
    "mapped",
    [
      136872
    ]
  ],
  [
    [
      194657,
      194657
    ],
    "mapped",
    [
      136938
    ]
  ],
  [
    [
      194658,
      194658
    ],
    "mapped",
    [
      23020
    ]
  ],
  [
    [
      194659,
      194659
    ],
    "mapped",
    [
      23067
    ]
  ],
  [
    [
      194660,
      194660
    ],
    "mapped",
    [
      23079
    ]
  ],
  [
    [
      194661,
      194661
    ],
    "mapped",
    [
      23e3
    ]
  ],
  [
    [
      194662,
      194662
    ],
    "mapped",
    [
      23142
    ]
  ],
  [
    [
      194663,
      194663
    ],
    "mapped",
    [
      14062
    ]
  ],
  [
    [
      194664,
      194664
    ],
    "disallowed"
  ],
  [
    [
      194665,
      194665
    ],
    "mapped",
    [
      23304
    ]
  ],
  [
    [
      194666,
      194667
    ],
    "mapped",
    [
      23358
    ]
  ],
  [
    [
      194668,
      194668
    ],
    "mapped",
    [
      137672
    ]
  ],
  [
    [
      194669,
      194669
    ],
    "mapped",
    [
      23491
    ]
  ],
  [
    [
      194670,
      194670
    ],
    "mapped",
    [
      23512
    ]
  ],
  [
    [
      194671,
      194671
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      194672,
      194672
    ],
    "mapped",
    [
      23539
    ]
  ],
  [
    [
      194673,
      194673
    ],
    "mapped",
    [
      138008
    ]
  ],
  [
    [
      194674,
      194674
    ],
    "mapped",
    [
      23551
    ]
  ],
  [
    [
      194675,
      194675
    ],
    "mapped",
    [
      23558
    ]
  ],
  [
    [
      194676,
      194676
    ],
    "disallowed"
  ],
  [
    [
      194677,
      194677
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      194678,
      194678
    ],
    "mapped",
    [
      14209
    ]
  ],
  [
    [
      194679,
      194679
    ],
    "mapped",
    [
      23648
    ]
  ],
  [
    [
      194680,
      194680
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      194681,
      194681
    ],
    "mapped",
    [
      23744
    ]
  ],
  [
    [
      194682,
      194682
    ],
    "mapped",
    [
      23693
    ]
  ],
  [
    [
      194683,
      194683
    ],
    "mapped",
    [
      138724
    ]
  ],
  [
    [
      194684,
      194684
    ],
    "mapped",
    [
      23875
    ]
  ],
  [
    [
      194685,
      194685
    ],
    "mapped",
    [
      138726
    ]
  ],
  [
    [
      194686,
      194686
    ],
    "mapped",
    [
      23918
    ]
  ],
  [
    [
      194687,
      194687
    ],
    "mapped",
    [
      23915
    ]
  ],
  [
    [
      194688,
      194688
    ],
    "mapped",
    [
      23932
    ]
  ],
  [
    [
      194689,
      194689
    ],
    "mapped",
    [
      24033
    ]
  ],
  [
    [
      194690,
      194690
    ],
    "mapped",
    [
      24034
    ]
  ],
  [
    [
      194691,
      194691
    ],
    "mapped",
    [
      14383
    ]
  ],
  [
    [
      194692,
      194692
    ],
    "mapped",
    [
      24061
    ]
  ],
  [
    [
      194693,
      194693
    ],
    "mapped",
    [
      24104
    ]
  ],
  [
    [
      194694,
      194694
    ],
    "mapped",
    [
      24125
    ]
  ],
  [
    [
      194695,
      194695
    ],
    "mapped",
    [
      24169
    ]
  ],
  [
    [
      194696,
      194696
    ],
    "mapped",
    [
      14434
    ]
  ],
  [
    [
      194697,
      194697
    ],
    "mapped",
    [
      139651
    ]
  ],
  [
    [
      194698,
      194698
    ],
    "mapped",
    [
      14460
    ]
  ],
  [
    [
      194699,
      194699
    ],
    "mapped",
    [
      24240
    ]
  ],
  [
    [
      194700,
      194700
    ],
    "mapped",
    [
      24243
    ]
  ],
  [
    [
      194701,
      194701
    ],
    "mapped",
    [
      24246
    ]
  ],
  [
    [
      194702,
      194702
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      194703,
      194703
    ],
    "mapped",
    [
      172946
    ]
  ],
  [
    [
      194704,
      194704
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      194705,
      194706
    ],
    "mapped",
    [
      140081
    ]
  ],
  [
    [
      194707,
      194707
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194708,
      194709
    ],
    "mapped",
    [
      24354
    ]
  ],
  [
    [
      194710,
      194710
    ],
    "mapped",
    [
      14535
    ]
  ],
  [
    [
      194711,
      194711
    ],
    "mapped",
    [
      144056
    ]
  ],
  [
    [
      194712,
      194712
    ],
    "mapped",
    [
      156122
    ]
  ],
  [
    [
      194713,
      194713
    ],
    "mapped",
    [
      24418
    ]
  ],
  [
    [
      194714,
      194714
    ],
    "mapped",
    [
      24427
    ]
  ],
  [
    [
      194715,
      194715
    ],
    "mapped",
    [
      14563
    ]
  ],
  [
    [
      194716,
      194716
    ],
    "mapped",
    [
      24474
    ]
  ],
  [
    [
      194717,
      194717
    ],
    "mapped",
    [
      24525
    ]
  ],
  [
    [
      194718,
      194718
    ],
    "mapped",
    [
      24535
    ]
  ],
  [
    [
      194719,
      194719
    ],
    "mapped",
    [
      24569
    ]
  ],
  [
    [
      194720,
      194720
    ],
    "mapped",
    [
      24705
    ]
  ],
  [
    [
      194721,
      194721
    ],
    "mapped",
    [
      14650
    ]
  ],
  [
    [
      194722,
      194722
    ],
    "mapped",
    [
      14620
    ]
  ],
  [
    [
      194723,
      194723
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      194724,
      194724
    ],
    "mapped",
    [
      141012
    ]
  ],
  [
    [
      194725,
      194725
    ],
    "mapped",
    [
      24775
    ]
  ],
  [
    [
      194726,
      194726
    ],
    "mapped",
    [
      24904
    ]
  ],
  [
    [
      194727,
      194727
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194728,
      194728
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      194729,
      194729
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194730,
      194730
    ],
    "mapped",
    [
      24954
    ]
  ],
  [
    [
      194731,
      194731
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      194732,
      194732
    ],
    "mapped",
    [
      25010
    ]
  ],
  [
    [
      194733,
      194733
    ],
    "mapped",
    [
      24996
    ]
  ],
  [
    [
      194734,
      194734
    ],
    "mapped",
    [
      25007
    ]
  ],
  [
    [
      194735,
      194735
    ],
    "mapped",
    [
      25054
    ]
  ],
  [
    [
      194736,
      194736
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      194737,
      194737
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      194738,
      194738
    ],
    "mapped",
    [
      25104
    ]
  ],
  [
    [
      194739,
      194739
    ],
    "mapped",
    [
      25115
    ]
  ],
  [
    [
      194740,
      194740
    ],
    "mapped",
    [
      25181
    ]
  ],
  [
    [
      194741,
      194741
    ],
    "mapped",
    [
      25265
    ]
  ],
  [
    [
      194742,
      194742
    ],
    "mapped",
    [
      25300
    ]
  ],
  [
    [
      194743,
      194743
    ],
    "mapped",
    [
      25424
    ]
  ],
  [
    [
      194744,
      194744
    ],
    "mapped",
    [
      142092
    ]
  ],
  [
    [
      194745,
      194745
    ],
    "mapped",
    [
      25405
    ]
  ],
  [
    [
      194746,
      194746
    ],
    "mapped",
    [
      25340
    ]
  ],
  [
    [
      194747,
      194747
    ],
    "mapped",
    [
      25448
    ]
  ],
  [
    [
      194748,
      194748
    ],
    "mapped",
    [
      25475
    ]
  ],
  [
    [
      194749,
      194749
    ],
    "mapped",
    [
      25572
    ]
  ],
  [
    [
      194750,
      194750
    ],
    "mapped",
    [
      142321
    ]
  ],
  [
    [
      194751,
      194751
    ],
    "mapped",
    [
      25634
    ]
  ],
  [
    [
      194752,
      194752
    ],
    "mapped",
    [
      25541
    ]
  ],
  [
    [
      194753,
      194753
    ],
    "mapped",
    [
      25513
    ]
  ],
  [
    [
      194754,
      194754
    ],
    "mapped",
    [
      14894
    ]
  ],
  [
    [
      194755,
      194755
    ],
    "mapped",
    [
      25705
    ]
  ],
  [
    [
      194756,
      194756
    ],
    "mapped",
    [
      25726
    ]
  ],
  [
    [
      194757,
      194757
    ],
    "mapped",
    [
      25757
    ]
  ],
  [
    [
      194758,
      194758
    ],
    "mapped",
    [
      25719
    ]
  ],
  [
    [
      194759,
      194759
    ],
    "mapped",
    [
      14956
    ]
  ],
  [
    [
      194760,
      194760
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      194761,
      194761
    ],
    "mapped",
    [
      25964
    ]
  ],
  [
    [
      194762,
      194762
    ],
    "mapped",
    [
      143370
    ]
  ],
  [
    [
      194763,
      194763
    ],
    "mapped",
    [
      26083
    ]
  ],
  [
    [
      194764,
      194764
    ],
    "mapped",
    [
      26360
    ]
  ],
  [
    [
      194765,
      194765
    ],
    "mapped",
    [
      26185
    ]
  ],
  [
    [
      194766,
      194766
    ],
    "mapped",
    [
      15129
    ]
  ],
  [
    [
      194767,
      194767
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      194768,
      194768
    ],
    "mapped",
    [
      15112
    ]
  ],
  [
    [
      194769,
      194769
    ],
    "mapped",
    [
      15076
    ]
  ],
  [
    [
      194770,
      194770
    ],
    "mapped",
    [
      20882
    ]
  ],
  [
    [
      194771,
      194771
    ],
    "mapped",
    [
      20885
    ]
  ],
  [
    [
      194772,
      194772
    ],
    "mapped",
    [
      26368
    ]
  ],
  [
    [
      194773,
      194773
    ],
    "mapped",
    [
      26268
    ]
  ],
  [
    [
      194774,
      194774
    ],
    "mapped",
    [
      32941
    ]
  ],
  [
    [
      194775,
      194775
    ],
    "mapped",
    [
      17369
    ]
  ],
  [
    [
      194776,
      194776
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      194777,
      194777
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      194778,
      194778
    ],
    "mapped",
    [
      26401
    ]
  ],
  [
    [
      194779,
      194779
    ],
    "mapped",
    [
      26462
    ]
  ],
  [
    [
      194780,
      194780
    ],
    "mapped",
    [
      26451
    ]
  ],
  [
    [
      194781,
      194781
    ],
    "mapped",
    [
      144323
    ]
  ],
  [
    [
      194782,
      194782
    ],
    "mapped",
    [
      15177
    ]
  ],
  [
    [
      194783,
      194783
    ],
    "mapped",
    [
      26618
    ]
  ],
  [
    [
      194784,
      194784
    ],
    "mapped",
    [
      26501
    ]
  ],
  [
    [
      194785,
      194785
    ],
    "mapped",
    [
      26706
    ]
  ],
  [
    [
      194786,
      194786
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      194787,
      194787
    ],
    "mapped",
    [
      144493
    ]
  ],
  [
    [
      194788,
      194788
    ],
    "mapped",
    [
      26766
    ]
  ],
  [
    [
      194789,
      194789
    ],
    "mapped",
    [
      26655
    ]
  ],
  [
    [
      194790,
      194790
    ],
    "mapped",
    [
      26900
    ]
  ],
  [
    [
      194791,
      194791
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      194792,
      194792
    ],
    "mapped",
    [
      26946
    ]
  ],
  [
    [
      194793,
      194793
    ],
    "mapped",
    [
      27043
    ]
  ],
  [
    [
      194794,
      194794
    ],
    "mapped",
    [
      27114
    ]
  ],
  [
    [
      194795,
      194795
    ],
    "mapped",
    [
      27304
    ]
  ],
  [
    [
      194796,
      194796
    ],
    "mapped",
    [
      145059
    ]
  ],
  [
    [
      194797,
      194797
    ],
    "mapped",
    [
      27355
    ]
  ],
  [
    [
      194798,
      194798
    ],
    "mapped",
    [
      15384
    ]
  ],
  [
    [
      194799,
      194799
    ],
    "mapped",
    [
      27425
    ]
  ],
  [
    [
      194800,
      194800
    ],
    "mapped",
    [
      145575
    ]
  ],
  [
    [
      194801,
      194801
    ],
    "mapped",
    [
      27476
    ]
  ],
  [
    [
      194802,
      194802
    ],
    "mapped",
    [
      15438
    ]
  ],
  [
    [
      194803,
      194803
    ],
    "mapped",
    [
      27506
    ]
  ],
  [
    [
      194804,
      194804
    ],
    "mapped",
    [
      27551
    ]
  ],
  [
    [
      194805,
      194805
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      194806,
      194806
    ],
    "mapped",
    [
      27579
    ]
  ],
  [
    [
      194807,
      194807
    ],
    "mapped",
    [
      146061
    ]
  ],
  [
    [
      194808,
      194808
    ],
    "mapped",
    [
      138507
    ]
  ],
  [
    [
      194809,
      194809
    ],
    "mapped",
    [
      146170
    ]
  ],
  [
    [
      194810,
      194810
    ],
    "mapped",
    [
      27726
    ]
  ],
  [
    [
      194811,
      194811
    ],
    "mapped",
    [
      146620
    ]
  ],
  [
    [
      194812,
      194812
    ],
    "mapped",
    [
      27839
    ]
  ],
  [
    [
      194813,
      194813
    ],
    "mapped",
    [
      27853
    ]
  ],
  [
    [
      194814,
      194814
    ],
    "mapped",
    [
      27751
    ]
  ],
  [
    [
      194815,
      194815
    ],
    "mapped",
    [
      27926
    ]
  ],
  [
    [
      194816,
      194816
    ],
    "mapped",
    [
      27966
    ]
  ],
  [
    [
      194817,
      194817
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      194818,
      194818
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      194819,
      194819
    ],
    "mapped",
    [
      28009
    ]
  ],
  [
    [
      194820,
      194820
    ],
    "mapped",
    [
      28024
    ]
  ],
  [
    [
      194821,
      194821
    ],
    "mapped",
    [
      28037
    ]
  ],
  [
    [
      194822,
      194822
    ],
    "mapped",
    [
      146718
    ]
  ],
  [
    [
      194823,
      194823
    ],
    "mapped",
    [
      27956
    ]
  ],
  [
    [
      194824,
      194824
    ],
    "mapped",
    [
      28207
    ]
  ],
  [
    [
      194825,
      194825
    ],
    "mapped",
    [
      28270
    ]
  ],
  [
    [
      194826,
      194826
    ],
    "mapped",
    [
      15667
    ]
  ],
  [
    [
      194827,
      194827
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      194828,
      194828
    ],
    "mapped",
    [
      28359
    ]
  ],
  [
    [
      194829,
      194829
    ],
    "mapped",
    [
      147153
    ]
  ],
  [
    [
      194830,
      194830
    ],
    "mapped",
    [
      28153
    ]
  ],
  [
    [
      194831,
      194831
    ],
    "mapped",
    [
      28526
    ]
  ],
  [
    [
      194832,
      194832
    ],
    "mapped",
    [
      147294
    ]
  ],
  [
    [
      194833,
      194833
    ],
    "mapped",
    [
      147342
    ]
  ],
  [
    [
      194834,
      194834
    ],
    "mapped",
    [
      28614
    ]
  ],
  [
    [
      194835,
      194835
    ],
    "mapped",
    [
      28729
    ]
  ],
  [
    [
      194836,
      194836
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      194837,
      194837
    ],
    "mapped",
    [
      28699
    ]
  ],
  [
    [
      194838,
      194838
    ],
    "mapped",
    [
      15766
    ]
  ],
  [
    [
      194839,
      194839
    ],
    "mapped",
    [
      28746
    ]
  ],
  [
    [
      194840,
      194840
    ],
    "mapped",
    [
      28797
    ]
  ],
  [
    [
      194841,
      194841
    ],
    "mapped",
    [
      28791
    ]
  ],
  [
    [
      194842,
      194842
    ],
    "mapped",
    [
      28845
    ]
  ],
  [
    [
      194843,
      194843
    ],
    "mapped",
    [
      132389
    ]
  ],
  [
    [
      194844,
      194844
    ],
    "mapped",
    [
      28997
    ]
  ],
  [
    [
      194845,
      194845
    ],
    "mapped",
    [
      148067
    ]
  ],
  [
    [
      194846,
      194846
    ],
    "mapped",
    [
      29084
    ]
  ],
  [
    [
      194847,
      194847
    ],
    "disallowed"
  ],
  [
    [
      194848,
      194848
    ],
    "mapped",
    [
      29224
    ]
  ],
  [
    [
      194849,
      194849
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      194850,
      194850
    ],
    "mapped",
    [
      29264
    ]
  ],
  [
    [
      194851,
      194851
    ],
    "mapped",
    [
      149e3
    ]
  ],
  [
    [
      194852,
      194852
    ],
    "mapped",
    [
      29312
    ]
  ],
  [
    [
      194853,
      194853
    ],
    "mapped",
    [
      29333
    ]
  ],
  [
    [
      194854,
      194854
    ],
    "mapped",
    [
      149301
    ]
  ],
  [
    [
      194855,
      194855
    ],
    "mapped",
    [
      149524
    ]
  ],
  [
    [
      194856,
      194856
    ],
    "mapped",
    [
      29562
    ]
  ],
  [
    [
      194857,
      194857
    ],
    "mapped",
    [
      29579
    ]
  ],
  [
    [
      194858,
      194858
    ],
    "mapped",
    [
      16044
    ]
  ],
  [
    [
      194859,
      194859
    ],
    "mapped",
    [
      29605
    ]
  ],
  [
    [
      194860,
      194861
    ],
    "mapped",
    [
      16056
    ]
  ],
  [
    [
      194862,
      194862
    ],
    "mapped",
    [
      29767
    ]
  ],
  [
    [
      194863,
      194863
    ],
    "mapped",
    [
      29788
    ]
  ],
  [
    [
      194864,
      194864
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      194865,
      194865
    ],
    "mapped",
    [
      29829
    ]
  ],
  [
    [
      194866,
      194866
    ],
    "mapped",
    [
      29898
    ]
  ],
  [
    [
      194867,
      194867
    ],
    "mapped",
    [
      16155
    ]
  ],
  [
    [
      194868,
      194868
    ],
    "mapped",
    [
      29988
    ]
  ],
  [
    [
      194869,
      194869
    ],
    "mapped",
    [
      150582
    ]
  ],
  [
    [
      194870,
      194870
    ],
    "mapped",
    [
      30014
    ]
  ],
  [
    [
      194871,
      194871
    ],
    "mapped",
    [
      150674
    ]
  ],
  [
    [
      194872,
      194872
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      194873,
      194873
    ],
    "mapped",
    [
      139679
    ]
  ],
  [
    [
      194874,
      194874
    ],
    "mapped",
    [
      30224
    ]
  ],
  [
    [
      194875,
      194875
    ],
    "mapped",
    [
      151457
    ]
  ],
  [
    [
      194876,
      194876
    ],
    "mapped",
    [
      151480
    ]
  ],
  [
    [
      194877,
      194877
    ],
    "mapped",
    [
      151620
    ]
  ],
  [
    [
      194878,
      194878
    ],
    "mapped",
    [
      16380
    ]
  ],
  [
    [
      194879,
      194879
    ],
    "mapped",
    [
      16392
    ]
  ],
  [
    [
      194880,
      194880
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      194881,
      194881
    ],
    "mapped",
    [
      151795
    ]
  ],
  [
    [
      194882,
      194882
    ],
    "mapped",
    [
      151794
    ]
  ],
  [
    [
      194883,
      194883
    ],
    "mapped",
    [
      151833
    ]
  ],
  [
    [
      194884,
      194884
    ],
    "mapped",
    [
      151859
    ]
  ],
  [
    [
      194885,
      194885
    ],
    "mapped",
    [
      30494
    ]
  ],
  [
    [
      194886,
      194887
    ],
    "mapped",
    [
      30495
    ]
  ],
  [
    [
      194888,
      194888
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      194889,
      194889
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      194890,
      194890
    ],
    "mapped",
    [
      30603
    ]
  ],
  [
    [
      194891,
      194891
    ],
    "mapped",
    [
      16454
    ]
  ],
  [
    [
      194892,
      194892
    ],
    "mapped",
    [
      16534
    ]
  ],
  [
    [
      194893,
      194893
    ],
    "mapped",
    [
      152605
    ]
  ],
  [
    [
      194894,
      194894
    ],
    "mapped",
    [
      30798
    ]
  ],
  [
    [
      194895,
      194895
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      194896,
      194896
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      194897,
      194897
    ],
    "mapped",
    [
      16611
    ]
  ],
  [
    [
      194898,
      194898
    ],
    "mapped",
    [
      153126
    ]
  ],
  [
    [
      194899,
      194899
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      194900,
      194900
    ],
    "mapped",
    [
      153242
    ]
  ],
  [
    [
      194901,
      194901
    ],
    "mapped",
    [
      153285
    ]
  ],
  [
    [
      194902,
      194902
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      194903,
      194903
    ],
    "mapped",
    [
      31211
    ]
  ],
  [
    [
      194904,
      194904
    ],
    "mapped",
    [
      16687
    ]
  ],
  [
    [
      194905,
      194905
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      194906,
      194906
    ],
    "mapped",
    [
      31306
    ]
  ],
  [
    [
      194907,
      194907
    ],
    "mapped",
    [
      31311
    ]
  ],
  [
    [
      194908,
      194908
    ],
    "mapped",
    [
      153980
    ]
  ],
  [
    [
      194909,
      194910
    ],
    "mapped",
    [
      154279
    ]
  ],
  [
    [
      194911,
      194911
    ],
    "disallowed"
  ],
  [
    [
      194912,
      194912
    ],
    "mapped",
    [
      16898
    ]
  ],
  [
    [
      194913,
      194913
    ],
    "mapped",
    [
      154539
    ]
  ],
  [
    [
      194914,
      194914
    ],
    "mapped",
    [
      31686
    ]
  ],
  [
    [
      194915,
      194915
    ],
    "mapped",
    [
      31689
    ]
  ],
  [
    [
      194916,
      194916
    ],
    "mapped",
    [
      16935
    ]
  ],
  [
    [
      194917,
      194917
    ],
    "mapped",
    [
      154752
    ]
  ],
  [
    [
      194918,
      194918
    ],
    "mapped",
    [
      31954
    ]
  ],
  [
    [
      194919,
      194919
    ],
    "mapped",
    [
      17056
    ]
  ],
  [
    [
      194920,
      194920
    ],
    "mapped",
    [
      31976
    ]
  ],
  [
    [
      194921,
      194921
    ],
    "mapped",
    [
      31971
    ]
  ],
  [
    [
      194922,
      194922
    ],
    "mapped",
    [
      32e3
    ]
  ],
  [
    [
      194923,
      194923
    ],
    "mapped",
    [
      155526
    ]
  ],
  [
    [
      194924,
      194924
    ],
    "mapped",
    [
      32099
    ]
  ],
  [
    [
      194925,
      194925
    ],
    "mapped",
    [
      17153
    ]
  ],
  [
    [
      194926,
      194926
    ],
    "mapped",
    [
      32199
    ]
  ],
  [
    [
      194927,
      194927
    ],
    "mapped",
    [
      32258
    ]
  ],
  [
    [
      194928,
      194928
    ],
    "mapped",
    [
      32325
    ]
  ],
  [
    [
      194929,
      194929
    ],
    "mapped",
    [
      17204
    ]
  ],
  [
    [
      194930,
      194930
    ],
    "mapped",
    [
      156200
    ]
  ],
  [
    [
      194931,
      194931
    ],
    "mapped",
    [
      156231
    ]
  ],
  [
    [
      194932,
      194932
    ],
    "mapped",
    [
      17241
    ]
  ],
  [
    [
      194933,
      194933
    ],
    "mapped",
    [
      156377
    ]
  ],
  [
    [
      194934,
      194934
    ],
    "mapped",
    [
      32634
    ]
  ],
  [
    [
      194935,
      194935
    ],
    "mapped",
    [
      156478
    ]
  ],
  [
    [
      194936,
      194936
    ],
    "mapped",
    [
      32661
    ]
  ],
  [
    [
      194937,
      194937
    ],
    "mapped",
    [
      32762
    ]
  ],
  [
    [
      194938,
      194938
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      194939,
      194939
    ],
    "mapped",
    [
      156890
    ]
  ],
  [
    [
      194940,
      194940
    ],
    "mapped",
    [
      156963
    ]
  ],
  [
    [
      194941,
      194941
    ],
    "mapped",
    [
      32864
    ]
  ],
  [
    [
      194942,
      194942
    ],
    "mapped",
    [
      157096
    ]
  ],
  [
    [
      194943,
      194943
    ],
    "mapped",
    [
      32880
    ]
  ],
  [
    [
      194944,
      194944
    ],
    "mapped",
    [
      144223
    ]
  ],
  [
    [
      194945,
      194945
    ],
    "mapped",
    [
      17365
    ]
  ],
  [
    [
      194946,
      194946
    ],
    "mapped",
    [
      32946
    ]
  ],
  [
    [
      194947,
      194947
    ],
    "mapped",
    [
      33027
    ]
  ],
  [
    [
      194948,
      194948
    ],
    "mapped",
    [
      17419
    ]
  ],
  [
    [
      194949,
      194949
    ],
    "mapped",
    [
      33086
    ]
  ],
  [
    [
      194950,
      194950
    ],
    "mapped",
    [
      23221
    ]
  ],
  [
    [
      194951,
      194951
    ],
    "mapped",
    [
      157607
    ]
  ],
  [
    [
      194952,
      194952
    ],
    "mapped",
    [
      157621
    ]
  ],
  [
    [
      194953,
      194953
    ],
    "mapped",
    [
      144275
    ]
  ],
  [
    [
      194954,
      194954
    ],
    "mapped",
    [
      144284
    ]
  ],
  [
    [
      194955,
      194955
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194956,
      194956
    ],
    "mapped",
    [
      33284
    ]
  ],
  [
    [
      194957,
      194957
    ],
    "mapped",
    [
      36766
    ]
  ],
  [
    [
      194958,
      194958
    ],
    "mapped",
    [
      17515
    ]
  ],
  [
    [
      194959,
      194959
    ],
    "mapped",
    [
      33425
    ]
  ],
  [
    [
      194960,
      194960
    ],
    "mapped",
    [
      33419
    ]
  ],
  [
    [
      194961,
      194961
    ],
    "mapped",
    [
      33437
    ]
  ],
  [
    [
      194962,
      194962
    ],
    "mapped",
    [
      21171
    ]
  ],
  [
    [
      194963,
      194963
    ],
    "mapped",
    [
      33457
    ]
  ],
  [
    [
      194964,
      194964
    ],
    "mapped",
    [
      33459
    ]
  ],
  [
    [
      194965,
      194965
    ],
    "mapped",
    [
      33469
    ]
  ],
  [
    [
      194966,
      194966
    ],
    "mapped",
    [
      33510
    ]
  ],
  [
    [
      194967,
      194967
    ],
    "mapped",
    [
      158524
    ]
  ],
  [
    [
      194968,
      194968
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      194969,
      194969
    ],
    "mapped",
    [
      33565
    ]
  ],
  [
    [
      194970,
      194970
    ],
    "mapped",
    [
      33635
    ]
  ],
  [
    [
      194971,
      194971
    ],
    "mapped",
    [
      33709
    ]
  ],
  [
    [
      194972,
      194972
    ],
    "mapped",
    [
      33571
    ]
  ],
  [
    [
      194973,
      194973
    ],
    "mapped",
    [
      33725
    ]
  ],
  [
    [
      194974,
      194974
    ],
    "mapped",
    [
      33767
    ]
  ],
  [
    [
      194975,
      194975
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      194976,
      194976
    ],
    "mapped",
    [
      33619
    ]
  ],
  [
    [
      194977,
      194977
    ],
    "mapped",
    [
      33738
    ]
  ],
  [
    [
      194978,
      194978
    ],
    "mapped",
    [
      33740
    ]
  ],
  [
    [
      194979,
      194979
    ],
    "mapped",
    [
      33756
    ]
  ],
  [
    [
      194980,
      194980
    ],
    "mapped",
    [
      158774
    ]
  ],
  [
    [
      194981,
      194981
    ],
    "mapped",
    [
      159083
    ]
  ],
  [
    [
      194982,
      194982
    ],
    "mapped",
    [
      158933
    ]
  ],
  [
    [
      194983,
      194983
    ],
    "mapped",
    [
      17707
    ]
  ],
  [
    [
      194984,
      194984
    ],
    "mapped",
    [
      34033
    ]
  ],
  [
    [
      194985,
      194985
    ],
    "mapped",
    [
      34035
    ]
  ],
  [
    [
      194986,
      194986
    ],
    "mapped",
    [
      34070
    ]
  ],
  [
    [
      194987,
      194987
    ],
    "mapped",
    [
      160714
    ]
  ],
  [
    [
      194988,
      194988
    ],
    "mapped",
    [
      34148
    ]
  ],
  [
    [
      194989,
      194989
    ],
    "mapped",
    [
      159532
    ]
  ],
  [
    [
      194990,
      194990
    ],
    "mapped",
    [
      17757
    ]
  ],
  [
    [
      194991,
      194991
    ],
    "mapped",
    [
      17761
    ]
  ],
  [
    [
      194992,
      194992
    ],
    "mapped",
    [
      159665
    ]
  ],
  [
    [
      194993,
      194993
    ],
    "mapped",
    [
      159954
    ]
  ],
  [
    [
      194994,
      194994
    ],
    "mapped",
    [
      17771
    ]
  ],
  [
    [
      194995,
      194995
    ],
    "mapped",
    [
      34384
    ]
  ],
  [
    [
      194996,
      194996
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      194997,
      194997
    ],
    "mapped",
    [
      34407
    ]
  ],
  [
    [
      194998,
      194998
    ],
    "mapped",
    [
      34409
    ]
  ],
  [
    [
      194999,
      194999
    ],
    "mapped",
    [
      34473
    ]
  ],
  [
    [
      195e3,
      195e3
    ],
    "mapped",
    [
      34440
    ]
  ],
  [
    [
      195001,
      195001
    ],
    "mapped",
    [
      34574
    ]
  ],
  [
    [
      195002,
      195002
    ],
    "mapped",
    [
      34530
    ]
  ],
  [
    [
      195003,
      195003
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      195004,
      195004
    ],
    "mapped",
    [
      34600
    ]
  ],
  [
    [
      195005,
      195005
    ],
    "mapped",
    [
      34667
    ]
  ],
  [
    [
      195006,
      195006
    ],
    "mapped",
    [
      34694
    ]
  ],
  [
    [
      195007,
      195007
    ],
    "disallowed"
  ],
  [
    [
      195008,
      195008
    ],
    "mapped",
    [
      34785
    ]
  ],
  [
    [
      195009,
      195009
    ],
    "mapped",
    [
      34817
    ]
  ],
  [
    [
      195010,
      195010
    ],
    "mapped",
    [
      17913
    ]
  ],
  [
    [
      195011,
      195011
    ],
    "mapped",
    [
      34912
    ]
  ],
  [
    [
      195012,
      195012
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      195013,
      195013
    ],
    "mapped",
    [
      161383
    ]
  ],
  [
    [
      195014,
      195014
    ],
    "mapped",
    [
      35031
    ]
  ],
  [
    [
      195015,
      195015
    ],
    "mapped",
    [
      35038
    ]
  ],
  [
    [
      195016,
      195016
    ],
    "mapped",
    [
      17973
    ]
  ],
  [
    [
      195017,
      195017
    ],
    "mapped",
    [
      35066
    ]
  ],
  [
    [
      195018,
      195018
    ],
    "mapped",
    [
      13499
    ]
  ],
  [
    [
      195019,
      195019
    ],
    "mapped",
    [
      161966
    ]
  ],
  [
    [
      195020,
      195020
    ],
    "mapped",
    [
      162150
    ]
  ],
  [
    [
      195021,
      195021
    ],
    "mapped",
    [
      18110
    ]
  ],
  [
    [
      195022,
      195022
    ],
    "mapped",
    [
      18119
    ]
  ],
  [
    [
      195023,
      195023
    ],
    "mapped",
    [
      35488
    ]
  ],
  [
    [
      195024,
      195024
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      195025,
      195025
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      195026,
      195026
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      195027,
      195027
    ],
    "mapped",
    [
      162984
    ]
  ],
  [
    [
      195028,
      195028
    ],
    "mapped",
    [
      36011
    ]
  ],
  [
    [
      195029,
      195029
    ],
    "mapped",
    [
      36033
    ]
  ],
  [
    [
      195030,
      195030
    ],
    "mapped",
    [
      36123
    ]
  ],
  [
    [
      195031,
      195031
    ],
    "mapped",
    [
      36215
    ]
  ],
  [
    [
      195032,
      195032
    ],
    "mapped",
    [
      163631
    ]
  ],
  [
    [
      195033,
      195033
    ],
    "mapped",
    [
      133124
    ]
  ],
  [
    [
      195034,
      195034
    ],
    "mapped",
    [
      36299
    ]
  ],
  [
    [
      195035,
      195035
    ],
    "mapped",
    [
      36284
    ]
  ],
  [
    [
      195036,
      195036
    ],
    "mapped",
    [
      36336
    ]
  ],
  [
    [
      195037,
      195037
    ],
    "mapped",
    [
      133342
    ]
  ],
  [
    [
      195038,
      195038
    ],
    "mapped",
    [
      36564
    ]
  ],
  [
    [
      195039,
      195039
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      195040,
      195040
    ],
    "mapped",
    [
      165330
    ]
  ],
  [
    [
      195041,
      195041
    ],
    "mapped",
    [
      165357
    ]
  ],
  [
    [
      195042,
      195042
    ],
    "mapped",
    [
      37012
    ]
  ],
  [
    [
      195043,
      195043
    ],
    "mapped",
    [
      37105
    ]
  ],
  [
    [
      195044,
      195044
    ],
    "mapped",
    [
      37137
    ]
  ],
  [
    [
      195045,
      195045
    ],
    "mapped",
    [
      165678
    ]
  ],
  [
    [
      195046,
      195046
    ],
    "mapped",
    [
      37147
    ]
  ],
  [
    [
      195047,
      195047
    ],
    "mapped",
    [
      37432
    ]
  ],
  [
    [
      195048,
      195048
    ],
    "mapped",
    [
      37591
    ]
  ],
  [
    [
      195049,
      195049
    ],
    "mapped",
    [
      37592
    ]
  ],
  [
    [
      195050,
      195050
    ],
    "mapped",
    [
      37500
    ]
  ],
  [
    [
      195051,
      195051
    ],
    "mapped",
    [
      37881
    ]
  ],
  [
    [
      195052,
      195052
    ],
    "mapped",
    [
      37909
    ]
  ],
  [
    [
      195053,
      195053
    ],
    "mapped",
    [
      166906
    ]
  ],
  [
    [
      195054,
      195054
    ],
    "mapped",
    [
      38283
    ]
  ],
  [
    [
      195055,
      195055
    ],
    "mapped",
    [
      18837
    ]
  ],
  [
    [
      195056,
      195056
    ],
    "mapped",
    [
      38327
    ]
  ],
  [
    [
      195057,
      195057
    ],
    "mapped",
    [
      167287
    ]
  ],
  [
    [
      195058,
      195058
    ],
    "mapped",
    [
      18918
    ]
  ],
  [
    [
      195059,
      195059
    ],
    "mapped",
    [
      38595
    ]
  ],
  [
    [
      195060,
      195060
    ],
    "mapped",
    [
      23986
    ]
  ],
  [
    [
      195061,
      195061
    ],
    "mapped",
    [
      38691
    ]
  ],
  [
    [
      195062,
      195062
    ],
    "mapped",
    [
      168261
    ]
  ],
  [
    [
      195063,
      195063
    ],
    "mapped",
    [
      168474
    ]
  ],
  [
    [
      195064,
      195064
    ],
    "mapped",
    [
      19054
    ]
  ],
  [
    [
      195065,
      195065
    ],
    "mapped",
    [
      19062
    ]
  ],
  [
    [
      195066,
      195066
    ],
    "mapped",
    [
      38880
    ]
  ],
  [
    [
      195067,
      195067
    ],
    "mapped",
    [
      168970
    ]
  ],
  [
    [
      195068,
      195068
    ],
    "mapped",
    [
      19122
    ]
  ],
  [
    [
      195069,
      195069
    ],
    "mapped",
    [
      169110
    ]
  ],
  [
    [
      195070,
      195071
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      195072,
      195072
    ],
    "mapped",
    [
      38953
    ]
  ],
  [
    [
      195073,
      195073
    ],
    "mapped",
    [
      169398
    ]
  ],
  [
    [
      195074,
      195074
    ],
    "mapped",
    [
      39138
    ]
  ],
  [
    [
      195075,
      195075
    ],
    "mapped",
    [
      19251
    ]
  ],
  [
    [
      195076,
      195076
    ],
    "mapped",
    [
      39209
    ]
  ],
  [
    [
      195077,
      195077
    ],
    "mapped",
    [
      39335
    ]
  ],
  [
    [
      195078,
      195078
    ],
    "mapped",
    [
      39362
    ]
  ],
  [
    [
      195079,
      195079
    ],
    "mapped",
    [
      39422
    ]
  ],
  [
    [
      195080,
      195080
    ],
    "mapped",
    [
      19406
    ]
  ],
  [
    [
      195081,
      195081
    ],
    "mapped",
    [
      170800
    ]
  ],
  [
    [
      195082,
      195082
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      195083,
      195083
    ],
    "mapped",
    [
      4e4
    ]
  ],
  [
    [
      195084,
      195084
    ],
    "mapped",
    [
      40189
    ]
  ],
  [
    [
      195085,
      195085
    ],
    "mapped",
    [
      19662
    ]
  ],
  [
    [
      195086,
      195086
    ],
    "mapped",
    [
      19693
    ]
  ],
  [
    [
      195087,
      195087
    ],
    "mapped",
    [
      40295
    ]
  ],
  [
    [
      195088,
      195088
    ],
    "mapped",
    [
      172238
    ]
  ],
  [
    [
      195089,
      195089
    ],
    "mapped",
    [
      19704
    ]
  ],
  [
    [
      195090,
      195090
    ],
    "mapped",
    [
      172293
    ]
  ],
  [
    [
      195091,
      195091
    ],
    "mapped",
    [
      172558
    ]
  ],
  [
    [
      195092,
      195092
    ],
    "mapped",
    [
      172689
    ]
  ],
  [
    [
      195093,
      195093
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      195094,
      195094
    ],
    "mapped",
    [
      19798
    ]
  ],
  [
    [
      195095,
      195095
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      195096,
      195096
    ],
    "mapped",
    [
      40702
    ]
  ],
  [
    [
      195097,
      195097
    ],
    "mapped",
    [
      40709
    ]
  ],
  [
    [
      195098,
      195098
    ],
    "mapped",
    [
      40719
    ]
  ],
  [
    [
      195099,
      195099
    ],
    "mapped",
    [
      40726
    ]
  ],
  [
    [
      195100,
      195100
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      195101,
      195101
    ],
    "mapped",
    [
      173568
    ]
  ],
  [
    [
      195102,
      196605
    ],
    "disallowed"
  ],
  [
    [
      196606,
      196607
    ],
    "disallowed"
  ],
  [
    [
      196608,
      262141
    ],
    "disallowed"
  ],
  [
    [
      262142,
      262143
    ],
    "disallowed"
  ],
  [
    [
      262144,
      327677
    ],
    "disallowed"
  ],
  [
    [
      327678,
      327679
    ],
    "disallowed"
  ],
  [
    [
      327680,
      393213
    ],
    "disallowed"
  ],
  [
    [
      393214,
      393215
    ],
    "disallowed"
  ],
  [
    [
      393216,
      458749
    ],
    "disallowed"
  ],
  [
    [
      458750,
      458751
    ],
    "disallowed"
  ],
  [
    [
      458752,
      524285
    ],
    "disallowed"
  ],
  [
    [
      524286,
      524287
    ],
    "disallowed"
  ],
  [
    [
      524288,
      589821
    ],
    "disallowed"
  ],
  [
    [
      589822,
      589823
    ],
    "disallowed"
  ],
  [
    [
      589824,
      655357
    ],
    "disallowed"
  ],
  [
    [
      655358,
      655359
    ],
    "disallowed"
  ],
  [
    [
      655360,
      720893
    ],
    "disallowed"
  ],
  [
    [
      720894,
      720895
    ],
    "disallowed"
  ],
  [
    [
      720896,
      786429
    ],
    "disallowed"
  ],
  [
    [
      786430,
      786431
    ],
    "disallowed"
  ],
  [
    [
      786432,
      851965
    ],
    "disallowed"
  ],
  [
    [
      851966,
      851967
    ],
    "disallowed"
  ],
  [
    [
      851968,
      917501
    ],
    "disallowed"
  ],
  [
    [
      917502,
      917503
    ],
    "disallowed"
  ],
  [
    [
      917504,
      917504
    ],
    "disallowed"
  ],
  [
    [
      917505,
      917505
    ],
    "disallowed"
  ],
  [
    [
      917506,
      917535
    ],
    "disallowed"
  ],
  [
    [
      917536,
      917631
    ],
    "disallowed"
  ],
  [
    [
      917632,
      917759
    ],
    "disallowed"
  ],
  [
    [
      917760,
      917999
    ],
    "ignored"
  ],
  [
    [
      918e3,
      983037
    ],
    "disallowed"
  ],
  [
    [
      983038,
      983039
    ],
    "disallowed"
  ],
  [
    [
      983040,
      1048573
    ],
    "disallowed"
  ],
  [
    [
      1048574,
      1048575
    ],
    "disallowed"
  ],
  [
    [
      1048576,
      1114109
    ],
    "disallowed"
  ],
  [
    [
      1114110,
      1114111
    ],
    "disallowed"
  ]
];
var punycode = require$$0$9;
var mappingTable = require$$1;
var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};
function normalize(str2) {
  return str2.split("\0").map(function(s) {
    return s.normalize("NFC");
  }).join("\0");
}
function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;
  while (start <= end) {
    var mid = Math.floor((start + end) / 2);
    var target = mappingTable[mid];
    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }
  return null;
}
var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function countSymbols(string2) {
  return string2.replace(regexAstralSymbols, "_").length;
}
function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";
  var len = countSymbols(domain_name);
  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status2 = findStatus(codePoint);
    switch (status2[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;
      case "ignored":
        break;
      case "mapped":
        processed += String.fromCodePoint.apply(String, status2[2]);
        break;
      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status2[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }
        break;
      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;
      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status2[2]);
        }
        break;
      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }
        processed += String.fromCodePoint(codePoint);
        break;
    }
  }
  return {
    string: processed,
    error: hasError
  };
}
var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    PROCESSING_OPTIONS.NONTRANSITIONAL;
  }
  var error2 = false;
  if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
    error2 = true;
  }
  var len = countSymbols(label);
  for (var i = 0; i < len; ++i) {
    var status2 = findStatus(label.codePointAt(i));
    if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status2[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status2[1] !== "valid" && status2[1] !== "deviation") {
      error2 = true;
      break;
    }
  }
  return {
    label,
    error: error2
  };
}
function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);
  var labels = result.string.split(".");
  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch (e) {
      result.error = true;
    }
  }
  return {
    string: labels.join("."),
    error: result.error
  };
}
tr46.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function(l) {
    try {
      return punycode.toASCII(l);
    } catch (e) {
      result.error = true;
      return l;
    }
  });
  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;
    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }
    for (var i = 0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }
  if (result.error)
    return null;
  return labels.join(".");
};
tr46.toUnicode = function(domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
  return {
    domain: result.string,
    error: result.error
  };
};
tr46.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
(function(module) {
  const punycode2 = require$$0$9;
  const tr46$1 = tr46;
  const specialSchemes = {
    ftp: 21,
    file: null,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  const failure = Symbol("failure");
  function countSymbols2(str2) {
    return punycode2.ucs2.decode(str2).length;
  }
  function at(input, idx) {
    const c = input[idx];
    return isNaN(c) ? void 0 : String.fromCodePoint(c);
  }
  function isASCIIDigit(c) {
    return c >= 48 && c <= 57;
  }
  function isASCIIAlpha(c) {
    return c >= 65 && c <= 90 || c >= 97 && c <= 122;
  }
  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }
  function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
  }
  function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  }
  function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  }
  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }
  function isWindowsDriveLetterString(string2) {
    return string2.length === 2 && isASCIIAlpha(string2.codePointAt(0)) && (string2[1] === ":" || string2[1] === "|");
  }
  function isNormalizedWindowsDriveLetterString(string2) {
    return string2.length === 2 && isASCIIAlpha(string2.codePointAt(0)) && string2[1] === ":";
  }
  function containsForbiddenHostCodePoint(string2) {
    return string2.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function containsForbiddenHostCodePointExcludingPercent(string2) {
    return string2.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== void 0;
  }
  function isSpecial2(url) {
    return isSpecialScheme(url.scheme);
  }
  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }
  function percentEncode(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = "0" + hex;
    }
    return "%" + hex;
  }
  function utf8PercentEncode(c) {
    const buf = new Buffer(c);
    let str2 = "";
    for (let i = 0; i < buf.length; ++i) {
      str2 += percentEncode(buf[i]);
    }
    return str2;
  }
  function utf8PercentDecode(str2) {
    const input = new Buffer(str2);
    const output = [];
    for (let i = 0; i < input.length; ++i) {
      if (input[i] !== 37) {
        output.push(input[i]);
      } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
        output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
        i += 2;
      } else {
        output.push(input[i]);
      }
    }
    return new Buffer(output).toString();
  }
  function isC0ControlPercentEncode(c) {
    return c <= 31 || c > 126;
  }
  const extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function isPathPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }
  const extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }
  function percentEncodeChar(c, encodeSetPredicate) {
    const cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
      return utf8PercentEncode(cStr);
    }
    return cStr;
  }
  function parseIPv4Number(input) {
    let R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  }
  function parseIPv4(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return input;
    }
    const numbers = [];
    for (const part of parts) {
      if (part === "") {
        return input;
      }
      const n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }
      numbers.push(n);
    }
    for (let i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
      return failure;
    }
    let ipv4 = numbers.pop();
    let counter2 = 0;
    for (const n of numbers) {
      ipv4 += n * Math.pow(256, 3 - counter2);
      ++counter2;
    }
    return ipv4;
  }
  function serializeIPv4(address) {
    let output = "";
    let n = address;
    for (let i = 1; i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = "." + output;
      }
      n = Math.floor(n / 256);
    }
    return output;
  }
  function parseIPv6(input) {
    const address = [0, 0, 0, 0, 0, 0, 0, 0];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;
    input = punycode2.ucs2.decode(input);
    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      let value = 0;
      let length = 0;
      while (length < 4 && isASCIIHex(input[pointer])) {
        value = value * 16 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        let numbersSeen = 0;
        while (input[pointer] !== void 0) {
          let ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (isASCIIDigit(input[pointer])) {
            const number2 = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number2;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number2;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === void 0) {
          return failure;
        }
      } else if (input[pointer] !== void 0) {
        return failure;
      }
      address[pieceIndex] = value;
      ++pieceIndex;
    }
    if (compress !== null) {
      let swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        const temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  }
  function serializeIPv6(address) {
    let output = "";
    const seqResult = findLongestZeroSequence(address);
    const compress = seqResult.idx;
    let ignore0 = false;
    for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        const separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }
      output += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output += ":";
      }
    }
    return output;
  }
  function parseHost(input, isSpecialArg) {
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (!isSpecialArg) {
      return parseOpaqueHost(input);
    }
    const domain = utf8PercentDecode(input);
    const asciiDomain = tr46$1.toASCII(domain, false, tr46$1.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
    if (asciiDomain === null) {
      return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }
    const ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }
    return asciiDomain;
  }
  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }
    let output = "";
    const decoded = punycode2.ucs2.decode(input);
    for (let i = 0; i < decoded.length; ++i) {
      output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output;
  }
  function findLongestZeroSequence(arr) {
    let maxIdx = null;
    let maxLen = 1;
    let currStart = null;
    let currLen = 0;
    for (let i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }
    if (currLen > maxLen) {
      maxIdx = currStart;
      maxLen = currLen;
    }
    return {
      idx: maxIdx,
      len: maxLen
    };
  }
  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }
    if (host instanceof Array) {
      return "[" + serializeIPv6(host) + "]";
    }
    return host;
  }
  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function shortenPath(url) {
    const path2 = url.path;
    if (path2.length === 0) {
      return;
    }
    if (url.scheme === "file" && path2.length === 1 && isNormalizedWindowsDriveLetter(path2[0])) {
      return;
    }
    path2.pop();
  }
  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }
  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }
  function isNormalizedWindowsDriveLetter(string2) {
    return /^[A-Za-z]:$/.test(string2);
  }
  function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: false
      };
      const res2 = trimControlChars(this.input);
      if (res2 !== this.input) {
        this.parseError = true;
      }
      this.input = res2;
    }
    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode2.ucs2.decode(this.input);
    for (; this.pointer <= this.input.length; ++this.pointer) {
      const c = this.input[this.pointer];
      const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
      const ret = this["parse " + this.state](c, cStr);
      if (!ret) {
        break;
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial2(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial2(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      this.buffer = "";
      if (this.stateOverride) {
        return false;
      }
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial2(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial2(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 47) {
      this.state = "relative slash";
    } else if (c === 63) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (isSpecial2(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice(0, this.base.path.length - 1);
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial2(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = "%40" + this.buffer;
      }
      this.atFlag = true;
      const len = countSymbols2(this.buffer);
      for (let pointer = 0; pointer < len; ++pointer) {
        const codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial2(this.url) && c === 92) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols2(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      const host = parseHost(this.buffer, isSpecial2(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
      if (this.stateOverride === "hostname") {
        return false;
      }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial2(this.url) && c === 92) {
      --this.pointer;
      if (isSpecial2(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      const host = parseHost(this.buffer, isSpecial2(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial2(this.url) && c === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        const port = parseInt(this.buffer);
        if (port > Math.pow(2, 16) - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  const fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      if (isNaN(c)) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 63) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
        !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
        !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          shortenPath(this.url);
        } else {
          this.parseError = true;
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file") {
        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        } else {
          this.url.host = this.base.host;
        }
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        let host = parseHost(this.buffer, isSpecial2(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial2(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== void 0) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial2(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
      if (isSpecial2(this.url) && c === 92) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial2(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial2(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          if (this.url.host !== "" && this.url.host !== null) {
            this.parseError = true;
            this.url.host = "";
          }
          this.buffer = this.buffer[0] + ":";
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
        while (this.url.path.length > 1 && this.url.path[0] === "") {
          this.parseError = true;
          this.url.path.shift();
        }
      }
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
      if (!isSpecial2(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      const buffer = new Buffer(this.buffer);
      for (let i = 0; i < buffer.length; ++i) {
        if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
          this.url.query += percentEncode(buffer[i]);
        } else {
          this.url.query += String.fromCodePoint(buffer[i]);
        }
      }
      this.buffer = "";
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c))
      ;
    else if (c === 0) {
      this.parseError = true;
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
    }
    return true;
  };
  function serializeURL(url, excludeFragment) {
    let output = url.scheme + ":";
    if (url.host !== null) {
      output += "//";
      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += ":" + url.password;
        }
        output += "@";
      }
      output += serializeHost(url.host);
      if (url.port !== null) {
        output += ":" + url.port;
      }
    } else if (url.host === null && url.scheme === "file") {
      output += "//";
    }
    if (url.cannotBeABaseURL) {
      output += url.path[0];
    } else {
      for (const string2 of url.path) {
        output += "/" + string2;
      }
    }
    if (url.query !== null) {
      output += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
      output += "#" + url.fragment;
    }
    return output;
  }
  function serializeOrigin(tuple) {
    let result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += ":" + tuple.port;
    }
    return result;
  }
  module.exports.serializeURL = serializeURL;
  module.exports.serializeURLOrigin = function(url) {
    switch (url.scheme) {
      case "blob":
        try {
          return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
        } catch (e) {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        return "file://";
      default:
        return "null";
    }
  };
  module.exports.basicURLParse = function(input, options) {
    if (options === void 0) {
      options = {};
    }
    const usm2 = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm2.failure) {
      return "failure";
    }
    return usm2.url;
  };
  module.exports.setTheUsername = function(url, username) {
    url.username = "";
    const decoded = punycode2.ucs2.decode(username);
    for (let i = 0; i < decoded.length; ++i) {
      url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.setThePassword = function(url, password) {
    url.password = "";
    const decoded = punycode2.ucs2.decode(password);
    for (let i = 0; i < decoded.length; ++i) {
      url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.serializeHost = serializeHost;
  module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  module.exports.serializeInteger = function(integer) {
    return String(integer);
  };
  module.exports.parseURL = function(input, options) {
    if (options === void 0) {
      options = {};
    }
    return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
  };
})(urlStateMachine);
var urlStateMachineExports = urlStateMachine.exports;
const usm = urlStateMachineExports;
URLImpl.implementation = class URLImpl2 {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base = constructorArgs[1];
    let parsedBase = null;
    if (base !== void 0) {
      parsedBase = usm.basicURLParse(base);
      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }
    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }
    this._url = parsedURL;
  }
  get href() {
    return usm.serializeURL(this._url);
  }
  set href(v) {
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }
    this._url = parsedURL;
  }
  get origin() {
    return usm.serializeURLOrigin(this._url);
  }
  get protocol() {
    return this._url.scheme + ":";
  }
  set protocol(v) {
    usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
  }
  get username() {
    return this._url.username;
  }
  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    usm.setTheUsername(this._url, v);
  }
  get password() {
    return this._url.password;
  }
  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    usm.setThePassword(this._url, v);
  }
  get host() {
    const url = this._url;
    if (url.host === null) {
      return "";
    }
    if (url.port === null) {
      return usm.serializeHost(url.host);
    }
    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }
  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
  }
  get hostname() {
    if (this._url.host === null) {
      return "";
    }
    return usm.serializeHost(this._url.host);
  }
  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
  }
  get port() {
    if (this._url.port === null) {
      return "";
    }
    return usm.serializeInteger(this._url.port);
  }
  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
    }
  }
  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }
    if (this._url.path.length === 0) {
      return "";
    }
    return "/" + this._url.path.join("/");
  }
  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    this._url.path = [];
    usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
  }
  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }
    return "?" + this._url.query;
  }
  set search(v) {
    const url = this._url;
    if (v === "") {
      url.query = null;
      return;
    }
    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, { url, stateOverride: "query" });
  }
  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }
    return "#" + this._url.fragment;
  }
  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }
    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
  }
  toJSON() {
    return this.href;
  }
};
(function(module) {
  const conversions2 = lib;
  const utils2 = utilsExports;
  const Impl = URLImpl;
  const impl = utils2.implSymbol;
  function URL2(url) {
    if (!this || this[impl] || !(this instanceof URL2)) {
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    }
    if (arguments.length < 1) {
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 2; ++i) {
      args[i] = arguments[i];
    }
    args[0] = conversions2["USVString"](args[0]);
    if (args[1] !== void 0) {
      args[1] = conversions2["USVString"](args[1]);
    }
    module.exports.setup(this, args);
  }
  URL2.prototype.toJSON = function toJSON() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 0; ++i) {
      args[i] = arguments[i];
    }
    return this[impl].toJSON.apply(this[impl], args);
  };
  Object.defineProperty(URL2.prototype, "href", {
    get() {
      return this[impl].href;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].href = V;
    },
    enumerable: true,
    configurable: true
  });
  URL2.prototype.toString = function() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    return this.href;
  };
  Object.defineProperty(URL2.prototype, "origin", {
    get() {
      return this[impl].origin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "protocol", {
    get() {
      return this[impl].protocol;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].protocol = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "username", {
    get() {
      return this[impl].username;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].username = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "password", {
    get() {
      return this[impl].password;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].password = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "host", {
    get() {
      return this[impl].host;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].host = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "hostname", {
    get() {
      return this[impl].hostname;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].hostname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "port", {
    get() {
      return this[impl].port;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].port = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "pathname", {
    get() {
      return this[impl].pathname;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].pathname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "search", {
    get() {
      return this[impl].search;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].search = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "hash", {
    get() {
      return this[impl].hash;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].hash = V;
    },
    enumerable: true,
    configurable: true
  });
  module.exports = {
    is(obj) {
      return !!obj && obj[impl] instanceof Impl.implementation;
    },
    create(constructorArgs, privateData) {
      let obj = Object.create(URL2.prototype);
      this.setup(obj, constructorArgs, privateData);
      return obj;
    },
    setup(obj, constructorArgs, privateData) {
      if (!privateData)
        privateData = {};
      privateData.wrapper = obj;
      obj[impl] = new Impl.implementation(constructorArgs, privateData);
      obj[impl][utils2.wrapperSymbol] = obj;
    },
    interface: URL2,
    expose: {
      Window: { URL: URL2 },
      Worker: { URL: URL2 }
    }
  };
})(URL$2);
var URLExports = URL$2.exports;
publicApi.URL = URLExports.interface;
publicApi.serializeURL = urlStateMachineExports.serializeURL;
publicApi.serializeURLOrigin = urlStateMachineExports.serializeURLOrigin;
publicApi.basicURLParse = urlStateMachineExports.basicURLParse;
publicApi.setTheUsername = urlStateMachineExports.setTheUsername;
publicApi.setThePassword = urlStateMachineExports.setThePassword;
publicApi.serializeHost = urlStateMachineExports.serializeHost;
publicApi.serializeInteger = urlStateMachineExports.serializeInteger;
publicApi.parseURL = urlStateMachineExports.parseURL;
const Readable = Stream$1.Readable;
const BUFFER = Symbol("buffer");
const TYPE = Symbol("type");
class Blob {
  constructor() {
    this[TYPE] = "";
    const blobParts = arguments[0];
    const options = arguments[1];
    const buffers = [];
    let size = 0;
    if (blobParts) {
      const a = blobParts;
      const length = Number(a.length);
      for (let i = 0; i < length; i++) {
        const element = a[i];
        let buffer;
        if (element instanceof Buffer) {
          buffer = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer = Buffer.from(element);
        } else if (element instanceof Blob) {
          buffer = element[BUFFER];
        } else {
          buffer = Buffer.from(typeof element === "string" ? element : String(element));
        }
        size += buffer.length;
        buffers.push(buffer);
      }
    }
    this[BUFFER] = Buffer.concat(buffers);
    let type2 = options && options.type !== void 0 && String(options.type).toLowerCase();
    if (type2 && !/[^\u0020-\u007E]/.test(type2)) {
      this[TYPE] = type2;
    }
  }
  get size() {
    return this[BUFFER].length;
  }
  get type() {
    return this[TYPE];
  }
  text() {
    return Promise.resolve(this[BUFFER].toString());
  }
  arrayBuffer() {
    const buf = this[BUFFER];
    const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    return Promise.resolve(ab);
  }
  stream() {
    const readable = new Readable();
    readable._read = function() {
    };
    readable.push(this[BUFFER]);
    readable.push(null);
    return readable;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const size = this.size;
    const start = arguments[0];
    const end = arguments[1];
    let relativeStart, relativeEnd;
    if (start === void 0) {
      relativeStart = 0;
    } else if (start < 0) {
      relativeStart = Math.max(size + start, 0);
    } else {
      relativeStart = Math.min(start, size);
    }
    if (end === void 0) {
      relativeEnd = size;
    } else if (end < 0) {
      relativeEnd = Math.max(size + end, 0);
    } else {
      relativeEnd = Math.min(end, size);
    }
    const span = Math.max(relativeEnd - relativeStart, 0);
    const buffer = this[BUFFER];
    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
    const blob = new Blob([], { type: arguments[2] });
    blob[BUFFER] = slicedBuffer;
    return blob;
  }
}
Object.defineProperties(Blob.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
});
Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
  value: "Blob",
  writable: false,
  enumerable: false,
  configurable: true
});
function FetchError(message, type2, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type2;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = "FetchError";
let convert;
try {
  convert = require("encoding").convert;
} catch (e) {
}
const INTERNALS = Symbol("Body internals");
const PassThrough = Stream$1.PassThrough;
function Body(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof Stream$1)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof Stream$1) {
    body.on("error", function(err) {
      const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
      _this[INTERNALS].error = error2;
    });
  }
}
Body.prototype = {
  get body() {
    return this[INTERNALS].body;
  },
  get bodyUsed() {
    return this[INTERNALS].disturbed;
  },
  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  arrayBuffer() {
    return consumeBody.call(this).then(function(buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },
  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  blob() {
    let ct = this.headers && this.headers.get("content-type") || "";
    return consumeBody.call(this).then(function(buf) {
      return Object.assign(
        // Prevent copying
        new Blob([], {
          type: ct.toLowerCase()
        }),
        {
          [BUFFER]: buf
        }
      );
    });
  },
  /**
   * Decode response as json
   *
   * @return  Promise
   */
  json() {
    var _this2 = this;
    return consumeBody.call(this).then(function(buffer) {
      try {
        return JSON.parse(buffer.toString());
      } catch (err) {
        return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
      }
    });
  },
  /**
   * Decode response as text
   *
   * @return  Promise
   */
  text() {
    return consumeBody.call(this).then(function(buffer) {
      return buffer.toString();
    });
  },
  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return consumeBody.call(this);
  },
  /**
   * Decode response as text, while automatically detecting the encoding and
   * trying to decode to UTF-8 (non-spec api)
   *
   * @return  Promise
   */
  textConverted() {
    var _this3 = this;
    return consumeBody.call(this).then(function(buffer) {
      return convertBody(buffer, _this3.headers);
    });
  }
};
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true }
});
Body.mixIn = function(proto) {
  for (const name of Object.getOwnPropertyNames(Body.prototype)) {
    if (!(name in proto)) {
      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
      Object.defineProperty(proto, name, desc);
    }
  }
};
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }
  if (!(body instanceof Stream$1)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function(resolve, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err) {
      if (err.name === "AbortError") {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
      }
    });
    body.on("data", function(chunk) {
      if (abort || chunk === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
      }
    });
  });
}
function convertBody(buffer, headers) {
  if (typeof convert !== "function") {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
  const ct = headers.get("content-type");
  let charset = "utf-8";
  let res, str2;
  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  }
  str2 = buffer.slice(0, 1024).toString();
  if (!res && str2) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str2);
  }
  if (!res && str2) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str2);
    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str2);
      if (res) {
        res.pop();
      }
    }
    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }
  if (!res && str2) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str2);
  }
  if (res) {
    charset = res.pop();
    if (charset === "gb2312" || charset === "gbk") {
      charset = "gb18030";
    }
  }
  return convert(buffer, "UTF-8", charset).toString();
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p2;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof Stream$1 && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof Stream$1) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
Body.Promise = global.Promise;
const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
function validateName(name) {
  name = `${name}`;
  if (invalidTokenRegex.test(name) || name === "") {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}
function validateValue(value) {
  value = `${value}`;
  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
function find(map2, name) {
  name = name.toLowerCase();
  for (const key in map2) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }
  return void 0;
}
const MAP = Symbol("map");
class Headers {
  /**
   * Headers class
   *
   * @param   Object  headers  Response headers
   * @return  Void
   */
  constructor() {
    let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
    this[MAP] = /* @__PURE__ */ Object.create(null);
    if (init instanceof Headers) {
      const rawHeaders = init.raw();
      const headerNames = Object.keys(rawHeaders);
      for (const headerName of headerNames) {
        for (const value of rawHeaders[headerName]) {
          this.append(headerName, value);
        }
      }
      return;
    }
    if (init == null)
      ;
    else if (typeof init === "object") {
      const method = init[Symbol.iterator];
      if (method != null) {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        const pairs2 = [];
        for (const pair of init) {
          if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
            throw new TypeError("Each header pair must be iterable");
          }
          pairs2.push(Array.from(pair));
        }
        for (const pair of pairs2) {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          this.append(pair[0], pair[1]);
        }
      } else {
        for (const key of Object.keys(init)) {
          const value = init[key];
          this.append(key, value);
        }
      }
    } else {
      throw new TypeError("Provided initializer must be an object");
    }
  }
  /**
   * Return combined header value given name
   *
   * @param   String  name  Header name
   * @return  Mixed
   */
  get(name) {
    name = `${name}`;
    validateName(name);
    const key = find(this[MAP], name);
    if (key === void 0) {
      return null;
    }
    return this[MAP][key].join(", ");
  }
  /**
   * Iterate over all headers
   *
   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
   * @param   Boolean   thisArg   `this` context for callback function
   * @return  Void
   */
  forEach(callback) {
    let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    let pairs2 = getHeaders(this);
    let i = 0;
    while (i < pairs2.length) {
      var _pairs$i = pairs2[i];
      const name = _pairs$i[0], value = _pairs$i[1];
      callback.call(thisArg, value, name, this);
      pairs2 = getHeaders(this);
      i++;
    }
  }
  /**
   * Overwrite header values given name
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  set(name, value) {
    name = `${name}`;
    value = `${value}`;
    validateName(name);
    validateValue(value);
    const key = find(this[MAP], name);
    this[MAP][key !== void 0 ? key : name] = [value];
  }
  /**
   * Append a value onto existing header
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  append(name, value) {
    name = `${name}`;
    value = `${value}`;
    validateName(name);
    validateValue(value);
    const key = find(this[MAP], name);
    if (key !== void 0) {
      this[MAP][key].push(value);
    } else {
      this[MAP][name] = [value];
    }
  }
  /**
   * Check for header name existence
   *
   * @param   String   name  Header name
   * @return  Boolean
   */
  has(name) {
    name = `${name}`;
    validateName(name);
    return find(this[MAP], name) !== void 0;
  }
  /**
   * Delete all header values given name
   *
   * @param   String  name  Header name
   * @return  Void
   */
  delete(name) {
    name = `${name}`;
    validateName(name);
    const key = find(this[MAP], name);
    if (key !== void 0) {
      delete this[MAP][key];
    }
  }
  /**
   * Return raw headers (non-spec api)
   *
   * @return  Object
   */
  raw() {
    return this[MAP];
  }
  /**
   * Get an iterator on keys.
   *
   * @return  Iterator
   */
  keys() {
    return createHeadersIterator(this, "key");
  }
  /**
   * Get an iterator on values.
   *
   * @return  Iterator
   */
  values() {
    return createHeadersIterator(this, "value");
  }
  /**
   * Get an iterator on entries.
   *
   * This is the default iterator of the Headers object.
   *
   * @return  Iterator
   */
  [Symbol.iterator]() {
    return createHeadersIterator(this, "key+value");
  }
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];
Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
  value: "Headers",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Headers.prototype, {
  get: { enumerable: true },
  forEach: { enumerable: true },
  set: { enumerable: true },
  append: { enumerable: true },
  has: { enumerable: true },
  delete: { enumerable: true },
  keys: { enumerable: true },
  values: { enumerable: true },
  entries: { enumerable: true }
});
function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys2 = Object.keys(headers[MAP]).sort();
  return keys2.map(kind === "key" ? function(k) {
    return k.toLowerCase();
  } : kind === "value" ? function(k) {
    return headers[MAP][k].join(", ");
  } : function(k) {
    return [k.toLowerCase(), headers[MAP][k].join(", ")];
  });
}
const INTERNAL = Symbol("internal");
function createHeadersIterator(target, kind) {
  const iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator;
}
const HeadersIteratorPrototype = Object.setPrototypeOf({
  next() {
    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
      throw new TypeError("Value of `this` is not a HeadersIterator");
    }
    var _INTERNAL = this[INTERNAL];
    const target = _INTERNAL.target, kind = _INTERNAL.kind, index2 = _INTERNAL.index;
    const values = getHeaders(target, kind);
    const len = values.length;
    if (index2 >= len) {
      return {
        value: void 0,
        done: true
      };
    }
    this[INTERNAL].index = index2 + 1;
    return {
      value: values[index2],
      done: false
    };
  }
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
  value: "HeadersIterator",
  writable: false,
  enumerable: false,
  configurable: true
});
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers();
  for (const name of Object.keys(obj)) {
    if (invalidTokenRegex.test(name)) {
      continue;
    }
    if (Array.isArray(obj[name])) {
      for (const val of obj[name]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }
        if (headers[MAP][name] === void 0) {
          headers[MAP][name] = [val];
        } else {
          headers[MAP][name].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }
  return headers;
}
const INTERNALS$1 = Symbol("Response internals");
const STATUS_CODES = http.STATUS_CODES;
class Response {
  constructor() {
    let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Body.call(this, body, opts);
    const status2 = opts.status || 200;
    const headers = new Headers(opts.headers);
    if (body != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      url: opts.url,
      status: status2,
      statusText: opts.statusText || STATUS_CODES[status2],
      headers,
      counter: opts.counter
    };
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */
  clone() {
    return new Response(clone(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }
}
Body.mixIn(Response.prototype);
Object.defineProperties(Response.prototype, {
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});
Object.defineProperty(Response.prototype, Symbol.toStringTag, {
  value: "Response",
  writable: false,
  enumerable: false,
  configurable: true
});
const INTERNALS$2 = Symbol("Request internals");
const URL$1 = Url.URL || publicApi.URL;
const parse_url = Url.parse;
const format_url = Url.format;
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL$1(urlStr).toString();
  }
  return parse_url(urlStr);
}
const streamDestructionSupported = "destroy" in Stream$1.Readable.prototype;
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
class Request {
  constructor(input) {
    let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let parsedURL;
    if (!isRequest(input)) {
      if (input && input.href) {
        parsedURL = parseURL(input.href);
      } else {
        parsedURL = parseURL(`${input}`);
      }
      input = {};
    } else {
      parsedURL = parseURL(input.url);
    }
    let method = init.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    const headers = new Headers(init.headers || input.headers || {});
    if (inputBody != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init)
      signal = init.signal;
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    }
    this[INTERNALS$2] = {
      method,
      redirect: init.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
    this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }
  get method() {
    return this[INTERNALS$2].method;
  }
  get url() {
    return format_url(this[INTERNALS$2].parsedURL);
  }
  get headers() {
    return this[INTERNALS$2].headers;
  }
  get redirect() {
    return this[INTERNALS$2].redirect;
  }
  get signal() {
    return this[INTERNALS$2].signal;
  }
  /**
   * Clone this request
   *
   * @return  Request
   */
  clone() {
    return new Request(this);
  }
}
Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, Symbol.toStringTag, {
  value: "Request",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true }
});
function getNodeRequestOptions(request) {
  const parsedURL = request[INTERNALS$2].parsedURL;
  const headers = new Headers(request[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request.signal && request.body instanceof Stream$1.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body != null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  return Object.assign({}, parsedURL, {
    method: request.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = "AbortError";
const URL$1$1 = Url.URL || publicApi.URL;
const PassThrough$1 = Stream$1.PassThrough;
const isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
  const orig = new URL$1$1(original).hostname;
  const dest = new URL$1$1(destination).hostname;
  return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
};
const isSameProtocol = function isSameProtocol2(destination, original) {
  const orig = new URL$1$1(original).protocol;
  const dest = new URL$1$1(destination).protocol;
  return orig === dest;
};
function fetch(url, opts) {
  if (!fetch.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body.Promise = fetch.Promise;
  return new fetch.Promise(function(resolve, reject) {
    const request = new Request(url, opts);
    const options = getNodeRequestOptions(request);
    const send = (options.protocol === "https:" ? https : http).request;
    const signal = request.signal;
    let response = null;
    const abort = function abort2() {
      let error2 = new AbortError("The user aborted a request.");
      reject(error2);
      if (request.body && request.body instanceof Stream$1.Readable) {
        destroyStream(request.body, error2);
      }
      if (!response || !response.body)
        return;
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
          finalize();
        }, request.timeout);
      });
    }
    req.on("error", function(err) {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      if (response && response.body) {
        destroyStream(response.body, err);
      }
      finalize();
    });
    fixResponseChunkedTransferBadEnding(req, function(err) {
      if (signal && signal.aborted) {
        return;
      }
      if (response && response.body) {
        destroyStream(response.body, err);
      }
    });
    if (parseInt(process.version.substring(1)) < 14) {
      req.on("socket", function(s) {
        s.addListener("close", function(hadError) {
          const hasDataListener = s.listenerCount("data") > 0;
          if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
            const err = new Error("Premature close");
            err.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", err);
          }
        });
      });
    }
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1$1(location, request.url).toString();
        } catch (err) {
          if (request.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err) {
                reject(err);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout,
              size: request.size
            };
            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name);
              }
            }
            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve(fetch(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request.size,
        timeout: request.timeout,
        counter: request.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(zlib.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk) {
          if ((chunk[0] & 15) === 8) {
            body = body.pipe(zlib.createInflate());
          } else {
            body = body.pipe(zlib.createInflateRaw());
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        raw.on("end", function() {
          if (!response) {
            response = new Response(body, response_options);
            resolve(response);
          }
        });
        return;
      }
      if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
        body = body.pipe(zlib.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      response = new Response(body, response_options);
      resolve(response);
    });
    writeToStream(req, request);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  let socket;
  request.on("socket", function(s) {
    socket = s;
  });
  request.on("response", function(response) {
    const headers = response.headers;
    if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
      response.once("close", function(hadError) {
        const hasDataListener = socket && socket.listenerCount("data") > 0;
        if (hasDataListener && !hadError) {
          const err = new Error("Premature close");
          err.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(err);
        }
      });
    }
  });
}
function destroyStream(stream2, err) {
  if (stream2.destroy) {
    stream2.destroy(err);
  } else {
    stream2.emit("error", err);
    stream2.end();
  }
}
fetch.isRedirect = function(code) {
  return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};
fetch.Promise = global.Promise;
async function findOrImportFile(fileEntry, user, { allowedFileTypes }) {
  let obj = {};
  if (typeof fileEntry === "string") {
    obj.url = fileEntry;
  } else if (isObjectSafe(fileEntry)) {
    obj = fileEntry;
  } else {
    throw new Error(`Invalid data format '${typeof fileEntry}' to import media. Only 'string', 'number', 'object' are accepted.`);
  }
  if (obj.url) {
    const fileData = getFileDataFromRawUrl(obj.url);
    if (!obj.name) {
      obj.name = fileData.name;
    }
    if (!obj.hash) {
      obj.hash = fileData.hash;
    }
  }
  let file2 = await findFile(obj, user, allowedFileTypes);
  if (file2 && !isExtensionAllowed(file2.ext.substring(1), allowedFileTypes)) {
    file2 = null;
  }
  return file2;
}
const findFile = async ({ hash, name, url, alternativeText, caption }, user, allowedFileTypes) => {
  let file2 = null;
  if (!file2 && hash) {
    [file2] = await strapi.documents("plugin::upload.file").findMany({
      filters: {
        hash: { $startsWith: hash }
      },
      limit: 1
    });
  }
  if (!file2 && name) {
    [file2] = await strapi.documents("plugin::upload.file").findMany({ filters: { name }, limit: 1 });
  }
  if (!file2 && url) {
    const checkResult = isValidFileUrl(url, allowedFileTypes);
    if (checkResult.isValid) {
      file2 = await findFile({ hash: checkResult.fileData.hash, name: checkResult.fileData.fileName }, user, allowedFileTypes);
      if (!file2) {
        file2 = await importFile({ url: checkResult.fileData.rawUrl, name, alternativeText, caption }, user);
      }
    }
  }
  return file2;
};
const importFile = async ({ url, name, alternativeText, caption }, user) => {
  let file2;
  try {
    file2 = await fetchFile(url);
    let [uploadedFile] = await strapi.plugin("upload").service("upload").upload(
      {
        files: {
          originalFilename: file2.originalFilename,
          mimetype: file2.mimetype,
          size: file2.size,
          filepath: file2.filepath
        },
        data: {
          fileInfo: {
            name: name || file2.originalFilename,
            alternativeText: alternativeText || "",
            caption: caption || ""
          }
        }
      },
      { user }
    );
    return uploadedFile;
  } catch (err) {
    strapi.log.error(err);
    throw err;
  } finally {
    if (file2?.filepath) {
      deleteFileIfExists(file2?.filepath);
    }
  }
};
const fetchFile = async (url) => {
  try {
    const response = await fetch(url);
    const contentType = response.headers.get("content-type")?.split(";")?.[0] || "";
    const contentLength = parseInt(response.headers.get("content-length") || "0", 10) || 0;
    const buffer = await response.buffer();
    const fileData = getFileDataFromRawUrl(url);
    const filePath = await writeFile(fileData.name, buffer);
    return {
      originalFilename: fileData.name,
      mimetype: contentType,
      size: contentLength,
      filepath: filePath
    };
  } catch (error2) {
    throw new Error(`Tried to fetch file from url ${url} but failed with error: ${error2.message}`);
  }
};
const writeFile = async (name, content) => {
  const tmpWorkingDirectory = await fse.mkdtemp(require$$0$5.join(require$$0$3.tmpdir(), "strapi-upload-"));
  const filePath = require$$0$5.join(tmpWorkingDirectory, name);
  try {
    require$$0$4.writeFileSync(filePath, content);
    return filePath;
  } catch (err) {
    strapi.log.error(err);
    throw err;
  }
};
const deleteFileIfExists = (filePath) => {
  if (filePath && require$$0$4.existsSync(filePath)) {
    require$$0$4.rmSync(filePath);
  }
};
const isValidFileUrl = (url, allowedFileTypes) => {
  try {
    const fileData = getFileDataFromRawUrl(url);
    return {
      isValid: isExtensionAllowed(fileData.extension, allowedFileTypes),
      fileData: {
        hash: fileData.hash,
        fileName: fileData.name,
        rawUrl: url
      }
    };
  } catch (err) {
    strapi.log.error(err);
    return {
      isValid: false,
      fileData: {
        hash: "",
        fileName: "",
        rawUrl: ""
      }
    };
  }
};
const isExtensionAllowed = (ext, allowedFileTypes) => {
  const checkers = allowedFileTypes.map(getFileTypeChecker);
  return checkers.some((checker) => checker(ext));
};
const ALLOWED_AUDIOS = ["mp3", "wav", "ogg"];
const ALLOWED_IMAGES = ["png", "gif", "jpg", "jpeg", "svg", "bmp", "tif", "tiff"];
const ALLOWED_VIDEOS = ["mp4", "avi"];
const fileTypeCheckers = {
  any: (ext) => true,
  audios: (ext) => ALLOWED_AUDIOS.includes(ext),
  files: (ext) => true,
  images: (ext) => ALLOWED_IMAGES.includes(ext),
  videos: (ext) => ALLOWED_VIDEOS.includes(ext)
};
const getFileTypeChecker = (type2) => {
  const checker = fileTypeCheckers[type2];
  if (!checker) {
    throw new Error(`Strapi file type ${type2} not handled.`);
  }
  return checker;
};
const getFileDataFromRawUrl = (rawUrl) => {
  const parsedUrl = new URL(decodeURIComponent(rawUrl));
  const name = trim$1(parsedUrl.pathname, "/").replace(/\//g, "-");
  const extension = parsedUrl.pathname.split(".").pop()?.toLowerCase() || "";
  const hash = strings.nameToSlug(name.slice(0, -(extension.length + 1)) || "", { separator: "_", lowercase: false });
  return {
    hash,
    name,
    extension
  };
};
const importData = async (dataRaw, { slug, format, user, idField }) => {
  let data = await parseInputData(format, dataRaw, { slug });
  data = toArray$2(data);
  console.log("importDatas", slug, format, user, idField);
  let res;
  if (slug === CustomSlugs.MEDIA) {
    res = await importMedia$1(data, { user });
  } else {
    res = await importOtherSlug(data, { slug, user, idField });
  }
  return res;
};
const importMedia$1 = async (fileData, { user }) => {
  const processed = [];
  for (let fileDatum of fileData) {
    let res;
    try {
      await findOrImportFile(fileDatum, user, { allowedFileTypes: ["any"] });
      res = { success: true };
    } catch (err) {
      strapi.log.error(err);
      res = { success: false, error: err.message, args: [fileDatum] };
    }
    processed.push(res);
  }
  const failures = processed.filter((p) => !p.success).map((f) => ({ error: f.error, data: f.args[0] }));
  return {
    failures
  };
};
const importOtherSlug = async (data, { slug, user, idField }) => {
  const processed = [];
  for (let datum of data) {
    let res;
    try {
      await updateOrCreate$1(user, slug, datum, idField);
      res = { success: true };
    } catch (err) {
      strapi.log.error(err);
      res = { success: false, error: err.message, args: [datum] };
    }
    processed.push(res);
  }
  const failures = processed.filter((p) => !p.success).map((f) => ({ error: f.error, data: f.args[0] }));
  return {
    failures
  };
};
const updateOrCreate$1 = async (user, slug, data, idField = "id") => {
  const relationAttributes = getModelAttributes(slug, { filterType: ["component", "dynamiczone", "media", "relation"] });
  for (let attribute of relationAttributes) {
    data[attribute.name] = await updateOrCreateRelation(user, attribute, data[attribute.name]);
  }
  let entry;
  const model = getModel(slug);
  if (model.kind === "singleType") {
    entry = await updateOrCreateSingleType(user, slug, data);
  } else {
    entry = await updateOrCreateCollectionType(user, slug, data, idField);
  }
  return entry;
};
const updateOrCreateCollectionType = async (user, slug, data, idField) => {
  const whereBuilder = new ObjectBuilder();
  if (data[idField]) {
    whereBuilder.extend({ [idField]: data[idField] });
  }
  const where = whereBuilder.get();
  if (idField !== "id") {
    delete data.id;
  }
  let entry;
  if (!where[idField]) {
    entry = await strapi.db.query(slug).create({ data });
  } else {
    entry = await strapi.db.query(slug).update({ where, data });
    if (!entry) {
      entry = await strapi.db.query(slug).create({ data });
    }
  }
  return entry;
};
const updateOrCreateSingleType = async (user, slug, data, idField) => {
  delete data.id;
  let [entry] = await strapi.db.query(slug).findMany();
  if (!entry) {
    entry = await strapi.db.query(slug).create({ data });
  } else {
    entry = await strapi.db.query(slug).update({ where: { id: entry.id }, data });
  }
  return entry;
};
const updateOrCreateRelation = async (user, rel, relData) => {
  if (relData == null) {
    return null;
  }
  if (["createdBy", "updatedBy"].includes(rel.name)) {
    return user.id;
  } else if (rel.type === "dynamiczone") {
    const components = [];
    for (const componentDatum of relData || []) {
      let component = await updateOrCreate$1(user, componentDatum.__component, componentDatum);
      component = { ...component, __component: componentDatum.__component };
      components.push(component);
    }
    return components;
  } else if (rel.type === "component") {
    relData = toArray$2(relData);
    relData = rel.repeatable ? relData : relData.slice(0, 1);
    const entryIds = [];
    for (const relDatum of relData) {
      if (typeof relDatum === "number") {
        entryIds.push(relDatum);
      } else if (isObjectSafe(relDatum)) {
        const entry = await updateOrCreate$1(user, rel.component, relDatum);
        if (entry?.id) {
          entryIds.push(entry.id);
        }
      }
    }
    return rel.repeatable ? entryIds : entryIds?.[0] || null;
  } else if (rel.type === "media") {
    relData = toArray$2(relData);
    relData = rel.multiple ? relData : relData.slice(0, 1);
    const entryIds = [];
    for (const relDatum of relData) {
      const media = await findOrImportFile(relDatum, user, { allowedFileTypes: rel.allowedTypes ?? ["any"] });
      if (media?.id) {
        entryIds.push(media.id);
      }
    }
    return rel.multiple ? entryIds : entryIds?.[0] || null;
  } else if (rel.type === "relation") {
    const isMultiple = isArraySafe(relData);
    relData = toArray$2(relData);
    const entryIds = [];
    for (const relDatum of relData) {
      if (typeof relDatum === "number") {
        entryIds.push(relDatum);
      } else if (isObjectSafe(relDatum)) {
        const entry = await updateOrCreate$1(user, rel.target, relDatum);
        if (entry?.id) {
          entryIds.push(entry.id);
        }
      }
    }
    return isMultiple ? entryIds : entryIds?.[0] || null;
  }
  throw new Error(`Could not update or create relation of type ${rel.type}.`);
};
var baseKeys = _baseKeys, getTag = _getTag, isArguments$1 = isArguments_1, isArray$2 = isArray_1, isArrayLike = isArrayLike_1, isBuffer2 = isBufferExports, isPrototype = _isPrototype, isTypedArray = isTypedArray_1;
var mapTag = "[object Map]", setTag = "[object Set]";
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) && (isArray$2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments$1(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty$1.call(value, key)) {
      return false;
    }
  }
  return true;
}
var isEmpty_1 = isEmpty;
const isEmpty$1 = /* @__PURE__ */ getDefaultExportFromCjs(isEmpty_1);
var baseGet$1 = _baseGet, baseSlice = _baseSlice;
function parent$1(object2, path2) {
  return path2.length < 2 ? object2 : baseGet$1(object2, baseSlice(path2, 0, -1));
}
var _parent = parent$1;
var castPath$3 = _castPath, last = last_1, parent = _parent, toKey$1 = _toKey;
function baseUnset$1(object2, path2) {
  path2 = castPath$3(path2, object2);
  object2 = parent(object2, path2);
  return object2 == null || delete object2[toKey$1(last(path2))];
}
var _baseUnset = baseUnset$1;
var baseGetTag = _baseGetTag, getPrototype = _getPrototype, isObjectLike = isObjectLike_1;
var objectTag = "[object Object]";
var funcProto = Function.prototype, objectProto = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty = objectProto.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject$1(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
var isPlainObject_1 = isPlainObject$1;
var isPlainObject = isPlainObject_1;
function customOmitClone$1(value) {
  return isPlainObject(value) ? void 0 : value;
}
var _customOmitClone = customOmitClone$1;
var Symbol$1 = _Symbol, isArguments = isArguments_1, isArray$1 = isArray_1;
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
function isFlattenable$1(value) {
  return isArray$1(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
var _isFlattenable = isFlattenable$1;
var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
function baseFlatten$1(array2, depth2, predicate, isStrict, result) {
  var index2 = -1, length = array2.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);
  while (++index2 < length) {
    var value = array2[index2];
    if (depth2 > 0 && predicate(value)) {
      if (depth2 > 1) {
        baseFlatten$1(value, depth2 - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}
var _baseFlatten = baseFlatten$1;
var baseFlatten = _baseFlatten;
function flatten$1(array2) {
  var length = array2 == null ? 0 : array2.length;
  return length ? baseFlatten(array2, 1) : [];
}
var flatten_1 = flatten$1;
function apply$1(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var _apply = apply$1;
var apply = _apply;
var nativeMax = Math.max;
function overRest$1(func, start, transform2) {
  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array2 = Array(length);
    while (++index2 < length) {
      array2[index2] = args[start + index2];
    }
    index2 = -1;
    var otherArgs = Array(start + 1);
    while (++index2 < start) {
      otherArgs[index2] = args[index2];
    }
    otherArgs[start] = transform2(array2);
    return apply(func, this, otherArgs);
  };
}
var _overRest = overRest$1;
function constant$1(value) {
  return function() {
    return value;
  };
}
var constant_1 = constant$1;
var constant = constant_1, defineProperty = _defineProperty, identity = identity_1;
var baseSetToString$1 = !defineProperty ? identity : function(func, string2) {
  return defineProperty(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string2),
    "writable": true
  });
};
var _baseSetToString = baseSetToString$1;
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut$1(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var _shortOut = shortOut$1;
var baseSetToString = _baseSetToString, shortOut = _shortOut;
var setToString$1 = shortOut(baseSetToString);
var _setToString = setToString$1;
var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
function flatRest$2(func) {
  return setToString(overRest(func, void 0, flatten), func + "");
}
var _flatRest = flatRest$2;
var arrayMap = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath$2 = _castPath, copyObject = _copyObject, customOmitClone = _customOmitClone, flatRest$1 = _flatRest, getAllKeysIn = _getAllKeysIn;
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
var omit = flatRest$1(function(object2, paths) {
  var result = {};
  if (object2 == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path2) {
    path2 = castPath$2(path2, object2);
    isDeep || (isDeep = path2.length > 1);
    return path2;
  });
  copyObject(object2, getAllKeysIn(object2), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});
var omit_1 = omit;
const omit$1 = /* @__PURE__ */ getDefaultExportFromCjs(omit_1);
var assignValue = _assignValue, castPath$1 = _castPath, isIndex = _isIndex, isObject = isObject_1, toKey = _toKey;
function baseSet$1(object2, path2, value, customizer) {
  if (!isObject(object2)) {
    return object2;
  }
  path2 = castPath$1(path2, object2);
  var index2 = -1, length = path2.length, lastIndex = length - 1, nested = object2;
  while (nested != null && ++index2 < length) {
    var key = toKey(path2[index2]), newValue = value;
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return object2;
    }
    if (index2 != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject(objValue) ? objValue : isIndex(path2[index2 + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object2;
}
var _baseSet = baseSet$1;
var baseGet = _baseGet, baseSet = _baseSet, castPath = _castPath;
function basePickBy$1(object2, paths, predicate) {
  var index2 = -1, length = paths.length, result = {};
  while (++index2 < length) {
    var path2 = paths[index2], value = baseGet(object2, path2);
    if (predicate(value, path2)) {
      baseSet(result, castPath(path2, object2), value);
    }
  }
  return result;
}
var _basePickBy = basePickBy$1;
var basePickBy = _basePickBy, hasIn = hasIn_1;
function basePick$1(object2, paths) {
  return basePickBy(object2, paths, function(value, path2) {
    return hasIn(object2, path2);
  });
}
var _basePick = basePick$1;
var basePick = _basePick, flatRest = _flatRest;
var pick = flatRest(function(object2, paths) {
  return object2 == null ? {} : basePick(object2, paths);
});
var pick_1 = pick;
const pick$1 = /* @__PURE__ */ getDefaultExportFromCjs(pick_1);
var isArray = isArray_1;
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray(value) ? value : [value];
}
var castArray_1 = castArray;
const castArray$1 = /* @__PURE__ */ getDefaultExportFromCjs(castArray_1);
class IdMapper {
  constructor() {
    this.mapping = {};
  }
  getMapping(slug, fileId) {
    return this.mapping[slug]?.get(`${fileId}`);
  }
  setMapping(slug, fileId, dbId) {
    if (!this.mapping[slug]) {
      this.mapping[slug] = /* @__PURE__ */ new Map();
    }
    this.mapping[slug].set(`${fileId}`, dbId);
  }
}
const importDataV2 = async (fileContent, {
  slug: slugArg,
  user,
  idField
}) => {
  const { data } = fileContent;
  const slugs = Object.keys(data);
  let failures = [];
  const fileIdToDbId = new IdMapper();
  const { componentSlugs, mediaSlugs, contentTypeSlugs } = splitSlugs(slugs);
  const componentsDataStore = {};
  for (const slug of componentSlugs) {
    componentsDataStore[slug] = data[slug];
  }
  for (const slug of mediaSlugs) {
    const res = await importMedia(data[slug], { user, fileIdToDbId });
    failures.push(...res.failures);
  }
  for (const slug of contentTypeSlugs) {
    const res = await importContentTypeSlug(data[slug], {
      slug,
      user,
      // Keep behavior of `idField` of version 1.
      ...slug === slugArg ? { idField } : {},
      importStage: "simpleAttributes",
      fileIdToDbId,
      componentsDataStore
    });
    failures.push(...res.failures);
  }
  for (const slug of contentTypeSlugs) {
    const res = await importContentTypeSlug(data[slug], {
      slug,
      user,
      // Keep behavior of `idField` of version 1.
      ...slug === slugArg ? { idField } : {},
      importStage: "relationAttributes",
      fileIdToDbId,
      componentsDataStore
    });
    failures.push(...res.failures);
  }
  if (strapi.db.config.connection.client === "postgres") {
    for (const slugFromFile of slugs) {
      const model = getModel(slugFromFile);
      await strapi.db.connection.raw(`SELECT SETVAL((SELECT PG_GET_SERIAL_SEQUENCE('${model.collectionName}', 'id')), (SELECT MAX(id) FROM ${model.collectionName}) + 1, FALSE);`);
    }
  }
  return { failures };
};
function splitSlugs(slugs) {
  const slugsToProcess = [...slugs];
  const componentSlugs = extract(slugsToProcess, (slug) => getModel(slug)?.modelType === "component");
  const mediaSlugs = extract(slugsToProcess, (slug) => ["plugin::upload.file"].includes(slug));
  const contentTypeSlugs = extract(slugsToProcess, (slug) => getModel(slug)?.modelType === "contentType");
  if (slugsToProcess.length > 0) {
    strapi.log.warn(`Some slugs won't be imported: ${slugsToProcess.join(", ")}`);
  }
  return {
    componentSlugs,
    mediaSlugs,
    contentTypeSlugs
  };
}
const importMedia = async (slugEntries, { user, fileIdToDbId }) => {
  const failures = [];
  const fileEntries = lodashExports.toPairs(slugEntries);
  for (let [fileId, fileEntry] of fileEntries) {
    try {
      const dbEntry = await findOrImportFile(fileEntry, user, { allowedFileTypes: ["any"] });
      if (dbEntry) {
        fileIdToDbId.setMapping("plugin::upload.file", fileId, dbEntry?.id);
      }
    } catch (err) {
      strapi.log.error(err);
      failures.push({ error: err, data: fileEntry });
    }
  }
  return {
    failures
  };
};
const importContentTypeSlug = async (slugEntries, {
  slug,
  user,
  idField,
  importStage,
  fileIdToDbId,
  componentsDataStore
}) => {
  let fileEntries = lodashExports.toPairs(slugEntries);
  const sortDataByLocale = async () => {
    const schema2 = getModel(slug);
    if (schema2.pluginOptions?.i18n?.localized) {
      const defaultLocale = await strapi.plugin("i18n").service("locales").getDefaultLocale();
      fileEntries = fileEntries.sort((dataA, dataB) => {
        if (dataA[1].locale === defaultLocale && dataB[1].locale === defaultLocale) {
          return 0;
        } else if (dataA[1].locale === defaultLocale) {
          return -1;
        }
        return 1;
      });
    }
  };
  await sortDataByLocale();
  const failures = [];
  for (let [fileId, fileEntry] of fileEntries) {
    try {
      await updateOrCreate(user, slug, fileId, fileEntry, idField, { importStage, fileIdToDbId, componentsDataStore });
    } catch (err) {
      strapi.log.error(err);
      failures.push({ error: err, data: fileEntry });
    }
  }
  return {
    failures
  };
};
const updateOrCreate = async (user, slug, fileId, fileEntryArg, idFieldArg, { importStage, fileIdToDbId, componentsDataStore }) => {
  const schema2 = getModel(slug);
  const idField = idFieldArg || schema2?.pluginOptions?.["import-export-entries"]?.idField || "id";
  let fileEntry = cloneDeep$1(fileEntryArg);
  if (importStage == "simpleAttributes") {
    fileEntry = removeComponents(schema2, fileEntry);
    fileEntry = linkMediaAttributes(schema2, fileEntry, { fileIdToDbId });
    const attributeNames = getModelAttributes(slug, { filterOutType: ["relation"] }).map(({ name }) => name).concat("id", "localizations", "locale");
    fileEntry = pick$1(fileEntry, attributeNames);
  } else if (importStage === "relationAttributes") {
    fileEntry = setComponents(schema2, fileEntry, { fileIdToDbId, componentsDataStore });
    const attributeNames = getModelAttributes(slug, { filterType: ["component", "dynamiczone", "relation"] }).map(({ name }) => name).concat("id", "localizations", "locale");
    fileEntry = pick$1(fileEntry, attributeNames);
  }
  let dbEntry = null;
  if (schema2?.modelType === "contentType" && schema2?.kind === "singleType") {
    dbEntry = await updateOrCreateSingleTypeEntry(user, slug, fileId, fileEntry, { importStage, fileIdToDbId });
  } else {
    dbEntry = await updateOrCreateCollectionTypeEntry(user, slug, fileId, fileEntry, { idField, importStage, fileIdToDbId });
  }
  if (dbEntry) {
    fileIdToDbId.setMapping(slug, fileId, dbEntry.id);
  }
};
function linkMediaAttributes(schema2, fileEntry, { fileIdToDbId }) {
  for (const [attributeName, attribute] of Object.entries(schema2.attributes)) {
    let attributeValue = fileEntry[attributeName];
    if (attributeValue == null) {
      continue;
    }
    if (isMediaAttribute$1(attribute)) {
      attributeValue = castArray$1(attributeValue).map((id) => fileIdToDbId.getMapping("plugin::upload.file", id)).filter(Boolean);
      if (!attribute.multiple) {
        attributeValue = attributeValue[0];
      }
      fileEntry[attributeName] = attributeValue;
    }
  }
  return fileEntry;
}
function removeComponents(schema2, fileEntry) {
  const store = {};
  for (const [attributeName, attribute] of Object.entries(schema2.attributes)) {
    if (typeof fileEntry[attributeName] === "undefined") {
      continue;
    }
    if (isComponentAttribute(attribute)) {
      if (attribute.repeatable) {
        store[attributeName] = [];
      } else {
        store[attributeName] = null;
      }
    } else if (isDynamicZoneAttribute$1(attribute)) {
      store[attributeName] = [];
    }
  }
  return { ...fileEntry, ...store || {} };
}
function setComponents(schema2, fileEntry, { fileIdToDbId, componentsDataStore }) {
  const store = {};
  for (const [attributeName, attribute] of Object.entries(schema2.attributes)) {
    const attributeValue = fileEntry[attributeName];
    if (attributeValue == null) {
      continue;
    } else if (isComponentAttribute(attribute)) {
      if (attribute.repeatable) {
        store[attributeName] = attributeValue.map(
          (componentFileId) => getComponentData(attribute.component, `${componentFileId}`, { fileIdToDbId, componentsDataStore })
        );
      } else {
        store[attributeName] = getComponentData(attribute.component, `${attributeValue}`, { fileIdToDbId, componentsDataStore });
      }
    } else if (isDynamicZoneAttribute$1(attribute)) {
      store[attributeName] = attributeValue.map(({ __component, id }) => getComponentData(__component, `${id}`, { fileIdToDbId, componentsDataStore }));
    }
  }
  return { ...fileEntry, ...store || {} };
}
function getComponentData(slug, fileId, { fileIdToDbId, componentsDataStore }) {
  const schema2 = getModel(slug);
  const fileEntry = componentsDataStore[slug][`${fileId}`];
  if (fileEntry == null) {
    return null;
  }
  const store = { ...omit$1(fileEntry, ["id"]), __component: slug };
  for (const [attributeName, attribute] of Object.entries(schema2.attributes)) {
    const attributeValue = fileEntry[attributeName];
    if (attributeValue == null) {
      store[attributeName] = null;
      continue;
    }
    if (isComponentAttribute(attribute)) {
      if (attribute.repeatable) {
        store[attributeName] = attributeValue.map(
          (componentFileId) => getComponentData(attribute.component, `${componentFileId}`, { fileIdToDbId, componentsDataStore })
        );
      } else {
        store[attributeName] = getComponentData(attribute.component, `${attributeValue}`, { fileIdToDbId, componentsDataStore });
      }
    } else if (isDynamicZoneAttribute$1(attribute)) {
      store[attributeName] = attributeValue.map(({ __component, id }) => getComponentData(__component, `${id}`, { fileIdToDbId, componentsDataStore }));
    } else if (isMediaAttribute$1(attribute)) {
      if (attribute.multiple) {
        store[attributeName] = attributeValue.map((id) => fileIdToDbId.getMapping("plugin::upload.file", id));
      } else {
        store[attributeName] = fileIdToDbId.getMapping("plugin::upload.file", attributeValue);
      }
    } else if (isRelationAttribute(attribute)) {
      if (attribute.relation.endsWith("Many")) {
        store[attributeName] = attributeValue.map((id) => fileIdToDbId.getMapping(attribute.target, id));
      } else {
        store[attributeName] = fileIdToDbId.getMapping(attribute.target, attributeValue);
      }
    } else if (isMediaAttribute$1(attribute)) {
      if (attribute.multiple) {
        store[attributeName] = castArray$1(attributeValue).map((id) => fileIdToDbId.getMapping("plugin::upload.file", id));
      } else {
        store[attributeName] = fileIdToDbId.getMapping("plugin::upload.file", `${lodashExports.head(castArray$1(attributeValue))}`);
      }
    }
  }
  return store;
}
const updateOrCreateCollectionTypeEntry = async (user, slug, fileId, fileEntry, { idField, importStage, fileIdToDbId }) => {
  const schema2 = getModel(slug);
  const whereBuilder = new ObjectBuilder();
  if (fileIdToDbId.getMapping(slug, fileId)) {
    whereBuilder.extend({ id: fileIdToDbId.getMapping(slug, fileId) });
  } else if (fileEntry[idField]) {
    whereBuilder.extend({ [idField]: fileEntry[idField] });
  }
  const where = whereBuilder.get();
  if (!schema2.pluginOptions?.i18n?.localized) {
    let dbEntry = await strapi.db.query(slug).findOne({ where });
    if (!dbEntry) {
      return strapi.documents(slug).create({
        data: fileEntry
      });
    } else {
      return strapi.documents(slug).update({
        documentId: dbEntry.id,
        data: omit$1(fileEntry, ["id"])
      });
    }
  } else {
    if (!fileEntry.locale) {
      throw new Error(`No locale set to import entry for slug ${slug} (data ${JSON.stringify(fileEntry)})`);
    }
    const defaultLocale = await strapi.plugin("i18n").service("locales").getDefaultLocale();
    const isDatumInDefaultLocale = fileEntry.locale === defaultLocale;
    let dbEntryDefaultLocaleId = null;
    let dbEntry = await strapi.db.query(slug).findOne({ where, populate: ["localizations"] });
    if (isDatumInDefaultLocale) {
      dbEntryDefaultLocaleId = dbEntry?.id || null;
    } else {
      if (dbEntry) {
        const localizedEntries = [dbEntry, ...dbEntry?.localizations || []];
        dbEntryDefaultLocaleId = localizedEntries.find((e) => e.locale === defaultLocale)?.id || null;
        dbEntry = localizedEntries.find((e) => e.locale === fileEntry.locale) || null;
      } else {
        let idx = 0;
        const fileLocalizationsIds = fileEntry?.localizations || [];
        while (idx < fileLocalizationsIds.length && !dbEntryDefaultLocaleId && !dbEntry) {
          const dbId = fileIdToDbId.getMapping(slug, fileLocalizationsIds[idx]);
          const localizedEntry = await strapi.db.query(slug).findOne({ where: { id: dbId }, populate: ["localizations"] });
          const localizedEntries = localizedEntry != null ? [localizedEntry, ...localizedEntry?.localizations || []] : [];
          if (!dbEntryDefaultLocaleId) {
            dbEntryDefaultLocaleId = localizedEntries.find((e) => e.locale === defaultLocale)?.id || null;
          }
          if (!dbEntry) {
            dbEntry = localizedEntries.find((e) => e.locale === fileEntry.locale) || null;
          }
          idx += 1;
        }
      }
    }
    fileEntry = omit$1(fileEntry, ["localizations"]);
    if (isEmpty$1(omit$1(fileEntry, ["id"]))) {
      return null;
    }
    if (isDatumInDefaultLocale) {
      if (!dbEntryDefaultLocaleId) {
        return strapi.documents(slug).create({
          data: fileEntry
        });
      } else {
        return strapi.documents(slug).update({
          documentId: dbEntryDefaultLocaleId,
          data: omit$1({ ...fileEntry }, ["id"])
        });
      }
    } else {
      if (!dbEntryDefaultLocaleId) {
        throw new Error(`Could not find default locale entry to import localization for slug ${slug} (data ${JSON.stringify(fileEntry)})`);
      }
      if (!dbEntry) {
        const insertLocalizedEntry = strapi.plugin("i18n").service("core-api").createCreateLocalizationHandler(getModel(slug));
        return insertLocalizedEntry({ id: dbEntryDefaultLocaleId, data: omit$1({ ...fileEntry }, ["id"]) });
      } else {
        return strapi.documents(slug).update({
          documentId: dbEntry.id,
          data: omit$1({ ...fileEntry }, ["id"])
        });
      }
    }
  }
};
const updateOrCreateSingleTypeEntry = async (user, slug, fileId, fileEntry, { importStage, fileIdToDbId }) => {
  const schema2 = getModel(slug);
  if (!schema2.pluginOptions?.i18n?.localized) {
    let dbEntry = await strapi.db.query(slug).findMany({}).then((entries) => toArray$2(entries)?.[0]);
    if (!dbEntry) {
      return strapi.documents(slug).create({
        data: fileEntry
      });
    } else {
      return strapi.documents(slug).update({
        documentId: dbEntry.id,
        data: omit$1(fileEntry, ["id"])
      });
    }
  } else {
    const defaultLocale = await strapi.plugin("i18n").service("locales").getDefaultLocale();
    const isDatumInDefaultLocale = !fileEntry.locale || fileEntry.locale === defaultLocale;
    fileEntry = omit$1(fileEntry, ["localizations"]);
    if (isEmpty$1(omit$1(fileEntry, ["id"]))) {
      return null;
    }
    let entryDefaultLocale = await strapi.db.query(slug).findOne({ where: { locale: defaultLocale } });
    if (!entryDefaultLocale) {
      entryDefaultLocale = await strapi.documents(slug).create({
        data: { ...fileEntry, locale: defaultLocale }
      });
    }
    if (isDatumInDefaultLocale) {
      if (!entryDefaultLocale) {
        return strapi.documents(slug).create({
          data: fileEntry
        });
      } else {
        return strapi.documents(slug).update({
          documentId: entryDefaultLocale.id,
          data: fileEntry
        });
      }
    } else {
      const entryLocale = await strapi.db.query(slug).findOne({ where: { locale: fileEntry.locale } });
      let datumLocale = { ...entryLocale, ...fileEntry };
      await strapi.db.query(slug).delete({ where: { locale: fileEntry.locale } });
      const insertLocalizedEntry = strapi.plugin("i18n").service("core-api").createCreateLocalizationHandler(getModel(slug));
      return insertLocalizedEntry({ id: entryDefaultLocale.id, data: datumLocale });
    }
  }
};
const importService = {
  importData,
  importDataV2,
  parseInputData
};
const services = {
  export: exportService,
  import: importService
};
const index = {
  register,
  bootstrap,
  destroy,
  config,
  controllers,
  routes,
  services,
  contentTypes,
  policies,
  middlewares
};
export {
  index as default
};
//# sourceMappingURL=index.mjs.map
